
StillImageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00001faa  0000203e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001faa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006a  00800112  00800112  00002050  2**0
                  ALLOC
  3 .stab         00000e28  00000000  00000000  00002050  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000027d  00000000  00000000  00002e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000003f8  00000000  00000000  000030f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000972  00000000  00000000  000034ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005de7  00000000  00000000  00003e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001d34  00000000  00000000  00009c46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000581d  00000000  00000000  0000b97a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000005b0  00000000  00000000  00011198  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000274d  00000000  00000000  00011748  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003809  00000000  00000000  00013e95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000b89  00000000  00000000  0001769e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000508  00000000  00000000  00018227  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	ae c1       	rjmp	.+860    	; 0x35e <__ctors_end>
       2:	00 00       	nop
       4:	ca c1       	rjmp	.+916    	; 0x39a <__bad_interrupt>
       6:	00 00       	nop
       8:	c8 c1       	rjmp	.+912    	; 0x39a <__bad_interrupt>
       a:	00 00       	nop
       c:	c6 c1       	rjmp	.+908    	; 0x39a <__bad_interrupt>
       e:	00 00       	nop
      10:	c4 c1       	rjmp	.+904    	; 0x39a <__bad_interrupt>
      12:	00 00       	nop
      14:	c2 c1       	rjmp	.+900    	; 0x39a <__bad_interrupt>
      16:	00 00       	nop
      18:	c0 c1       	rjmp	.+896    	; 0x39a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	be c1       	rjmp	.+892    	; 0x39a <__bad_interrupt>
      1e:	00 00       	nop
      20:	bc c1       	rjmp	.+888    	; 0x39a <__bad_interrupt>
      22:	00 00       	nop
      24:	ba c1       	rjmp	.+884    	; 0x39a <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__vector_10>
      2c:	b6 c1       	rjmp	.+876    	; 0x39a <__bad_interrupt>
      2e:	00 00       	nop
      30:	b4 c1       	rjmp	.+872    	; 0x39a <__bad_interrupt>
      32:	00 00       	nop
      34:	b2 c1       	rjmp	.+868    	; 0x39a <__bad_interrupt>
      36:	00 00       	nop
      38:	b0 c1       	rjmp	.+864    	; 0x39a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ae c1       	rjmp	.+860    	; 0x39a <__bad_interrupt>
      3e:	00 00       	nop
      40:	ac c1       	rjmp	.+856    	; 0x39a <__bad_interrupt>
      42:	00 00       	nop
      44:	aa c1       	rjmp	.+852    	; 0x39a <__bad_interrupt>
      46:	00 00       	nop
      48:	a8 c1       	rjmp	.+848    	; 0x39a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	a6 c1       	rjmp	.+844    	; 0x39a <__bad_interrupt>
      4e:	00 00       	nop
      50:	a4 c1       	rjmp	.+840    	; 0x39a <__bad_interrupt>
      52:	00 00       	nop
      54:	a2 c1       	rjmp	.+836    	; 0x39a <__bad_interrupt>
      56:	00 00       	nop
      58:	a0 c1       	rjmp	.+832    	; 0x39a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	9e c1       	rjmp	.+828    	; 0x39a <__bad_interrupt>
      5e:	00 00       	nop
      60:	9c c1       	rjmp	.+824    	; 0x39a <__bad_interrupt>
      62:	00 00       	nop
      64:	9a c1       	rjmp	.+820    	; 0x39a <__bad_interrupt>
      66:	00 00       	nop
      68:	98 c1       	rjmp	.+816    	; 0x39a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	96 c1       	rjmp	.+812    	; 0x39a <__bad_interrupt>
      6e:	00 00       	nop
      70:	94 c1       	rjmp	.+808    	; 0x39a <__bad_interrupt>
      72:	00 00       	nop
      74:	92 c1       	rjmp	.+804    	; 0x39a <__bad_interrupt>
      76:	00 00       	nop
      78:	90 c1       	rjmp	.+800    	; 0x39a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	8e c1       	rjmp	.+796    	; 0x39a <__bad_interrupt>
      7e:	00 00       	nop
      80:	8c c1       	rjmp	.+792    	; 0x39a <__bad_interrupt>
      82:	00 00       	nop
      84:	8a c1       	rjmp	.+788    	; 0x39a <__bad_interrupt>
      86:	00 00       	nop
      88:	88 c1       	rjmp	.+784    	; 0x39a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	86 c1       	rjmp	.+780    	; 0x39a <__bad_interrupt>
      8e:	00 00       	nop
      90:	84 c1       	rjmp	.+776    	; 0x39a <__bad_interrupt>
      92:	00 00       	nop
      94:	82 c1       	rjmp	.+772    	; 0x39a <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4105>:
      98:	1b 5b 33 31 6d 43 6f 6d 6d 61 6e 64 20 45 72 72     .[31mCommand Err
      a8:	6f 72 20 28 25 53 29 2e 0d 0a 20 2d 2d 20 45 72     or (%S)... -- Er
      b8:	72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 1b 5b 33     ror Code %d...[3
      c8:	37 6d 00                                            7m.

000000cb <__c.4103>:
      cb:	54 72 61 6e 73 61 63 74 69 6f 6e 20 46 61 69 6c     Transaction Fail
      db:	00                                                  .

000000dc <__c.4101>:
      dc:	52 65 73 70 6f 6e 73 65 20 43 6f 64 65 20 21 3d     Response Code !=
      ec:	20 4f 4b 00                                          OK.

000000f0 <__c.4086>:
      f0:	44 6f 6e 65 2e 0d 0a 00                             Done....

000000f8 <__c.4083>:
      f8:	43 6c 6f 73 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Closing Session.
     108:	2e 2e 0d 0a 00                                      .....

0000010d <__c.4080>:
     10d:	4f 70 65 6e 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Opening Session.
     11d:	2e 2e 0d 0a 00                                      .....

00000122 <__c.4078>:
     122:	45 72 72 6f 72 20 61 74 20 28 32 29 0d 0a 00        Error at (2)...

00000131 <__c.4076>:
     131:	45 72 72 6f 72 20 61 74 20 28 31 29 0d 0a 00        Error at (1)...

00000140 <__c.4074>:
     140:	20 20 20 44 65 76 69 63 65 20 56 65 72 73 69 6f        Device Versio
     150:	6e 3a 20 25 73 0d 0a 00                             n: %s...

00000158 <__c.4071>:
     158:	20 20 20 4d 6f 64 65 6c 3a 20 25 73 0d 0a 00           Model: %s...

00000167 <__c.4068>:
     167:	20 20 20 4d 61 6e 75 66 61 63 74 75 72 65 72 3a        Manufacturer:
     177:	20 25 73 0d 0a 00                                    %s...

0000017d <__c.4061>:
     17d:	52 65 74 72 69 65 76 69 6e 67 20 44 65 76 69 63     Retrieving Devic
     18d:	65 20 49 6e 66 6f 2e 2e 2e 0d 0a 00                 e Info......

00000199 <__c.4055>:
     199:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     1a9:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     1b9:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     1c9:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     1d9:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     1e9:	1b 5b 33 37 6d 00                                   .[37m.

000001ef <__c.4048>:
     1ef:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     1ff:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     20f:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000021e <__c.4043>:
     21e:	53 74 69 6c 6c 20 49 6d 61 67 65 20 44 65 76 69     Still Image Devi
     22e:	63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a     ce Enumerated...
     23e:	00                                                  .

0000023f <__c.4041>:
     23f:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     24f:	6f 72 20 28 53 65 74 20 43 6f 6e 66 69 67 75 72     or (Set Configur
     25f:	61 74 69 6f 6e 29 2e 0d 0a 20 2d 2d 20 45 72 72     ation)... -- Err
     26f:	6f 72 20 43 6f 64 65 3a 20 25 64 0d 0a 1b 5b 33     or Code: %d...[3
     27f:	37 6d 00                                            7m.

00000282 <__c.4039>:
     282:	20 2d 2d 20 45 72 72 6f 72 20 43 6f 64 65 3a 20      -- Error Code: 
     292:	25 64 0d 0a 1b 5b 33 37 6d 00                       %d...[37m.

0000029c <__c.4037>:
     29c:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     2ac:	69 63 65 2e 0d 0a 00                                ice....

000002b3 <__c.4035>:
     2b3:	1b 5b 33 31 6d 43 6f 6e 74 72 6f 6c 20 45 72 72     .[31mControl Err
     2c3:	6f 72 20 28 47 65 74 20 43 6f 6e 66 69 67 75 72     or (Get Configur
     2d3:	61 74 69 6f 6e 29 2e 0d 0a 00                       ation)....

000002dd <__c.4032>:
     2dd:	47 65 74 74 69 6e 67 20 43 6f 6e 66 69 67 20 44     Getting Config D
     2ed:	61 74 61 2e 0d 0a 00                                ata....

000002f4 <__c.4027>:
     2f4:	1b 5b 33 32 6d 0d 0a 44 65 76 69 63 65 20 55 6e     .[32m..Device Un
     304:	61 74 74 61 63 68 65 64 2e 0d 0a 1b 5b 33 37 6d     attached....[37m
     314:	00                                                  .

00000315 <__c.4022>:
     315:	1b 5b 33 32 6d 44 65 76 69 63 65 20 41 74 74 61     .[32mDevice Atta
     325:	63 68 65 64 2e 0d 0a 1b 5b 33 37 6d 00              ched....[37m.

00000332 <__c.4013>:
     332:	1b 5b 33 36 6d 53 74 69 6c 6c 20 49 6d 61 67 65     .[36mStill Image
     342:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     352:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00 00                 ng....[37m..

0000035e <__ctors_end>:
     35e:	11 24       	eor	r1, r1
     360:	1f be       	out	0x3f, r1	; 63
     362:	cf ef       	ldi	r28, 0xFF	; 255
     364:	d0 e2       	ldi	r29, 0x20	; 32
     366:	de bf       	out	0x3e, r29	; 62
     368:	cd bf       	out	0x3d, r28	; 61

0000036a <__do_copy_data>:
     36a:	11 e0       	ldi	r17, 0x01	; 1
     36c:	a0 e0       	ldi	r26, 0x00	; 0
     36e:	b1 e0       	ldi	r27, 0x01	; 1
     370:	ea ea       	ldi	r30, 0xAA	; 170
     372:	ff e1       	ldi	r31, 0x1F	; 31
     374:	00 e0       	ldi	r16, 0x00	; 0
     376:	0b bf       	out	0x3b, r16	; 59
     378:	02 c0       	rjmp	.+4      	; 0x37e <__do_copy_data+0x14>
     37a:	07 90       	elpm	r0, Z+
     37c:	0d 92       	st	X+, r0
     37e:	a2 31       	cpi	r26, 0x12	; 18
     380:	b1 07       	cpc	r27, r17
     382:	d9 f7       	brne	.-10     	; 0x37a <__do_copy_data+0x10>

00000384 <__do_clear_bss>:
     384:	11 e0       	ldi	r17, 0x01	; 1
     386:	a2 e1       	ldi	r26, 0x12	; 18
     388:	b1 e0       	ldi	r27, 0x01	; 1
     38a:	01 c0       	rjmp	.+2      	; 0x38e <.do_clear_bss_start>

0000038c <.do_clear_bss_loop>:
     38c:	1d 92       	st	X+, r1

0000038e <.do_clear_bss_start>:
     38e:	ac 37       	cpi	r26, 0x7C	; 124
     390:	b1 07       	cpc	r27, r17
     392:	e1 f7       	brne	.-8      	; 0x38c <.do_clear_bss_loop>
     394:	fc d2       	rcall	.+1528   	; 0x98e <main>
     396:	0c 94 d3 0f 	jmp	0x1fa6	; 0x1fa6 <_exit>

0000039a <__bad_interrupt>:
     39a:	32 ce       	rjmp	.-924    	; 0x0 <__vectors>

0000039c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     39c:	84 b7       	in	r24, 0x34	; 52
     39e:	87 7f       	andi	r24, 0xF7	; 247
     3a0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     3a2:	28 e1       	ldi	r18, 0x18	; 24
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	20 93 60 00 	sts	0x0060, r18
     3ac:	10 92 60 00 	sts	0x0060, r1
     3b0:	0f be       	out	0x3f, r0	; 63

	/* Disable Clock Division */
	CLKPR = (1 << CLKPCE);
     3b2:	e1 e6       	ldi	r30, 0x61	; 97
     3b4:	f0 e0       	ldi	r31, 0x00	; 0
     3b6:	80 e8       	ldi	r24, 0x80	; 128
     3b8:	80 83       	st	Z, r24
	CLKPR = 0;
     3ba:	10 82       	st	Z, r1
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     3bc:	87 e6       	ldi	r24, 0x67	; 103
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	90 93 cd 00 	sts	0x00CD, r25
     3c4:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     3c8:	86 e0       	ldi	r24, 0x06	; 6
     3ca:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     3ce:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     3d2:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     3d6:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     3d8:	5a 9a       	sbi	0x0b, 2	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     3da:	53 d7       	rcall	.+3750   	; 0x1282 <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     3dc:	e8 e6       	ldi	r30, 0x68	; 104
     3de:	f1 e0       	ldi	r31, 0x01	; 1
     3e0:	f0 93 77 01 	sts	0x0177, r31
     3e4:	e0 93 76 01 	sts	0x0176, r30
					stdout = Stream;
     3e8:	f0 93 79 01 	sts	0x0179, r31
     3ec:	e0 93 78 01 	sts	0x0178, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     3f0:	8e e0       	ldi	r24, 0x0E	; 14
     3f2:	df 01       	movw	r26, r30
     3f4:	1d 92       	st	X+, r1
     3f6:	8a 95       	dec	r24
     3f8:	e9 f7       	brne	.-6      	; 0x3f4 <SetupHardware+0x58>
     3fa:	83 e0       	ldi	r24, 0x03	; 3
     3fc:	80 93 6b 01 	sts	0x016B, r24
     400:	8d eb       	ldi	r24, 0xBD	; 189
     402:	9c e0       	ldi	r25, 0x0C	; 12
     404:	90 93 71 01 	sts	0x0171, r25
     408:	80 93 70 01 	sts	0x0170, r24
     40c:	86 ec       	ldi	r24, 0xC6	; 198
     40e:	9c e0       	ldi	r25, 0x0C	; 12
     410:	90 93 73 01 	sts	0x0173, r25
     414:	80 93 72 01 	sts	0x0172, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     418:	08 95       	ret

0000041a <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "Device Attached.\r\n" ESC_FG_WHITE));
     41a:	85 e1       	ldi	r24, 0x15	; 21
     41c:	93 e0       	ldi	r25, 0x03	; 3
     41e:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <puts_P>

00000422 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR(ESC_FG_GREEN "\r\nDevice Unattached.\r\n" ESC_FG_WHITE));
     422:	84 ef       	ldi	r24, 0xF4	; 244
     424:	92 e0       	ldi	r25, 0x02	; 2
     426:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <puts_P>

0000042a <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     42a:	1f 93       	push	r17
	puts_P(PSTR("Getting Config Data.\r\n"));
     42c:	8d ed       	ldi	r24, 0xDD	; 221
     42e:	92 e0       	ldi	r25, 0x02	; 2
     430:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <puts_P>

	uint8_t ErrorCode;

	/* Get and process the configuration descriptor data */
	if ((ErrorCode = ProcessConfigurationDescriptor()) != SuccessfulConfigRead)
     434:	db d2       	rcall	.+1462   	; 0x9ec <ProcessConfigurationDescriptor>
     436:	18 2f       	mov	r17, r24
     438:	88 23       	and	r24, r24
     43a:	c1 f0       	breq	.+48     	; 0x46c <EVENT_USB_Host_DeviceEnumerationComplete+0x42>
	{
		if (ErrorCode == ControlError)
     43c:	81 30       	cpi	r24, 0x01	; 1
     43e:	19 f4       	brne	.+6      	; 0x446 <EVENT_USB_Host_DeviceEnumerationComplete+0x1c>
		  puts_P(PSTR(ESC_FG_RED "Control Error (Get Configuration).\r\n"));
     440:	83 eb       	ldi	r24, 0xB3	; 179
     442:	92 e0       	ldi	r25, 0x02	; 2
     444:	02 c0       	rjmp	.+4      	; 0x44a <EVENT_USB_Host_DeviceEnumerationComplete+0x20>
		else
		  puts_P(PSTR(ESC_FG_RED "Invalid Device.\r\n"));
     446:	8c e9       	ldi	r24, 0x9C	; 156
     448:	92 e0       	ldi	r25, 0x02	; 2
     44a:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <puts_P>

		printf_P(PSTR(" -- Error Code: %d\r\n" ESC_FG_WHITE), ErrorCode);
     44e:	00 d0       	rcall	.+0      	; 0x450 <EVENT_USB_Host_DeviceEnumerationComplete+0x26>
     450:	00 d0       	rcall	.+0      	; 0x452 <EVENT_USB_Host_DeviceEnumerationComplete+0x28>
     452:	ed b7       	in	r30, 0x3d	; 61
     454:	fe b7       	in	r31, 0x3e	; 62
     456:	31 96       	adiw	r30, 0x01	; 1
     458:	22 e8       	ldi	r18, 0x82	; 130
     45a:	32 e0       	ldi	r19, 0x02	; 2
     45c:	ad b7       	in	r26, 0x3d	; 61
     45e:	be b7       	in	r27, 0x3e	; 62
     460:	12 96       	adiw	r26, 0x02	; 2
     462:	3c 93       	st	X, r19
     464:	2e 93       	st	-X, r18
     466:	11 97       	sbiw	r26, 0x01	; 1
     468:	12 83       	std	Z+2, r17	; 0x02
     46a:	13 c0       	rjmp	.+38     	; 0x492 <EVENT_USB_Host_DeviceEnumerationComplete+0x68>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	/* Set the device configuration to the first configuration (rarely do devices use multiple configurations) */
	if ((ErrorCode = USB_Host_SetDeviceConfiguration(1)) != HOST_SENDCONTROL_Successful)
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <USB_Host_SetDeviceConfiguration>
     472:	88 23       	and	r24, r24
     474:	b1 f0       	breq	.+44     	; 0x4a2 <EVENT_USB_Host_DeviceEnumerationComplete+0x78>
	{
		printf_P(PSTR(ESC_FG_RED "Control Error (Set Configuration).\r\n"
     476:	00 d0       	rcall	.+0      	; 0x478 <EVENT_USB_Host_DeviceEnumerationComplete+0x4e>
     478:	00 d0       	rcall	.+0      	; 0x47a <EVENT_USB_Host_DeviceEnumerationComplete+0x50>
     47a:	ed b7       	in	r30, 0x3d	; 61
     47c:	fe b7       	in	r31, 0x3e	; 62
     47e:	31 96       	adiw	r30, 0x01	; 1
     480:	2f e3       	ldi	r18, 0x3F	; 63
     482:	32 e0       	ldi	r19, 0x02	; 2
     484:	ad b7       	in	r26, 0x3d	; 61
     486:	be b7       	in	r27, 0x3e	; 62
     488:	12 96       	adiw	r26, 0x02	; 2
     48a:	3c 93       	st	X, r19
     48c:	2e 93       	st	-X, r18
     48e:	11 97       	sbiw	r26, 0x01	; 1
     490:	82 83       	std	Z+2, r24	; 0x02
     492:	13 82       	std	Z+3, r1	; 0x03
     494:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <printf_P>
     498:	0f 90       	pop	r0
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	04 c0       	rjmp	.+8      	; 0x4aa <EVENT_USB_Host_DeviceEnumerationComplete+0x80>

		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("Still Image Device Enumerated.\r\n"));
     4a2:	8e e1       	ldi	r24, 0x1E	; 30
     4a4:	92 e0       	ldi	r25, 0x02	; 2
     4a6:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     4aa:	1f 91       	pop	r17
     4ac:	08 95       	ret

000004ae <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     4ae:	df 93       	push	r29
     4b0:	cf 93       	push	r28
     4b2:	0f 92       	push	r0
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     4b8:	89 83       	std	Y+1, r24	; 0x01
     4ba:	7b d6       	rcall	.+3318   	; 0x11b2 <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     4bc:	00 d0       	rcall	.+0      	; 0x4be <EVENT_USB_Host_HostError+0x10>
     4be:	00 d0       	rcall	.+0      	; 0x4c0 <EVENT_USB_Host_HostError+0x12>
     4c0:	ed b7       	in	r30, 0x3d	; 61
     4c2:	fe b7       	in	r31, 0x3e	; 62
     4c4:	31 96       	adiw	r30, 0x01	; 1
     4c6:	2f ee       	ldi	r18, 0xEF	; 239
     4c8:	31 e0       	ldi	r19, 0x01	; 1
     4ca:	ad b7       	in	r26, 0x3d	; 61
     4cc:	be b7       	in	r27, 0x3e	; 62
     4ce:	12 96       	adiw	r26, 0x02	; 2
     4d0:	3c 93       	st	X, r19
     4d2:	2e 93       	st	-X, r18
     4d4:	11 97       	sbiw	r26, 0x01	; 1
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	82 83       	std	Z+2, r24	; 0x02
     4da:	13 82       	std	Z+3, r1	; 0x03
     4dc:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <printf_P>
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	ff cf       	rjmp	.-2      	; 0x4e8 <EVENT_USB_Host_HostError+0x3a>

000004ea <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4ea:	90 91 67 01 	lds	r25, 0x0167
     4ee:	2d b7       	in	r18, 0x3d	; 61
     4f0:	3e b7       	in	r19, 0x3e	; 62
     4f2:	28 50       	subi	r18, 0x08	; 8
     4f4:	30 40       	sbci	r19, 0x00	; 0
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	3e bf       	out	0x3e, r19	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	2d bf       	out	0x3d, r18	; 61
     500:	ed b7       	in	r30, 0x3d	; 61
     502:	fe b7       	in	r31, 0x3e	; 62
     504:	31 96       	adiw	r30, 0x01	; 1
     506:	29 e9       	ldi	r18, 0x99	; 153
     508:	31 e0       	ldi	r19, 0x01	; 1
     50a:	ad b7       	in	r26, 0x3d	; 61
     50c:	be b7       	in	r27, 0x3e	; 62
     50e:	12 96       	adiw	r26, 0x02	; 2
     510:	3c 93       	st	X, r19
     512:	2e 93       	st	-X, r18
     514:	11 97       	sbiw	r26, 0x01	; 1
     516:	82 83       	std	Z+2, r24	; 0x02
     518:	13 82       	std	Z+3, r1	; 0x03
     51a:	64 83       	std	Z+4, r22	; 0x04
     51c:	15 82       	std	Z+5, r1	; 0x05
     51e:	96 83       	std	Z+6, r25	; 0x06
     520:	17 82       	std	Z+7, r1	; 0x07
     522:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <printf_P>
     526:	2d b7       	in	r18, 0x3d	; 61
     528:	3e b7       	in	r19, 0x3e	; 62
     52a:	28 5f       	subi	r18, 0xF8	; 248
     52c:	3f 4f       	sbci	r19, 0xFF	; 255
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	f8 94       	cli
     532:	3e bf       	out	0x3e, r19	; 62
     534:	0f be       	out	0x3f, r0	; 63
     536:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     538:	08 95       	ret

0000053a <UnicodeToASCII>:
 */
void UnicodeToASCII(uint8_t* UnicodeString,
                    char* Buffer)
{
	/* Get the number of characters in the string, skip to the start of the string data */
	uint8_t CharactersRemaining = *(UnicodeString++);
     53a:	dc 01       	movw	r26, r24
     53c:	3c 91       	ld	r19, X

	/* Loop through the entire unicode string */
	while (CharactersRemaining--)
     53e:	23 2f       	mov	r18, r19
     540:	fb 01       	movw	r30, r22
     542:	07 c0       	rjmp	.+14     	; 0x552 <UnicodeToASCII+0x18>
	{
		/* Load in the next unicode character (only the lower byte, as only Unicode coded ASCII is supported) */
		*(Buffer++) = *UnicodeString;
     544:	dc 01       	movw	r26, r24
     546:	11 96       	adiw	r26, 0x01	; 1
     548:	4c 91       	ld	r20, X
     54a:	11 97       	sbiw	r26, 0x01	; 1
     54c:	41 93       	st	Z+, r20
     54e:	21 50       	subi	r18, 0x01	; 1
     550:	02 96       	adiw	r24, 0x02	; 2
{
	/* Get the number of characters in the string, skip to the start of the string data */
	uint8_t CharactersRemaining = *(UnicodeString++);

	/* Loop through the entire unicode string */
	while (CharactersRemaining--)
     552:	22 23       	and	r18, r18
     554:	b9 f7       	brne	.-18     	; 0x544 <UnicodeToASCII+0xa>
		/* Jump to the next unicode character */
		UnicodeString += 2;
	}

	/* Null terminate the string */
	*Buffer = 0;
     556:	63 0f       	add	r22, r19
     558:	71 1d       	adc	r23, r1
     55a:	fb 01       	movw	r30, r22
     55c:	10 82       	st	Z, r1
}
     55e:	08 95       	ret

00000560 <ShowCommandError>:
 *  \param[in] ResponseCodeError  Indicates if the error is due to a command failed indication from the device, or a communication failure
 */
void ShowCommandError(uint8_t ErrorCode,
                      bool ResponseCodeError)
{
	const char* FailureType = ((ResponseCodeError) ? PSTR("Response Code != OK") : PSTR("Transaction Fail"));
     560:	66 23       	and	r22, r22
     562:	19 f0       	breq	.+6      	; 0x56a <ShowCommandError+0xa>
     564:	2c ed       	ldi	r18, 0xDC	; 220
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	02 c0       	rjmp	.+4      	; 0x56e <ShowCommandError+0xe>
     56a:	2b ec       	ldi	r18, 0xCB	; 203
     56c:	30 e0       	ldi	r19, 0x00	; 0

	printf_P(PSTR(ESC_FG_RED "Command Error (%S).\r\n"
     56e:	00 d0       	rcall	.+0      	; 0x570 <ShowCommandError+0x10>
     570:	00 d0       	rcall	.+0      	; 0x572 <ShowCommandError+0x12>
     572:	00 d0       	rcall	.+0      	; 0x574 <ShowCommandError+0x14>
     574:	ed b7       	in	r30, 0x3d	; 61
     576:	fe b7       	in	r31, 0x3e	; 62
     578:	31 96       	adiw	r30, 0x01	; 1
     57a:	48 e9       	ldi	r20, 0x98	; 152
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	ad b7       	in	r26, 0x3d	; 61
     580:	be b7       	in	r27, 0x3e	; 62
     582:	12 96       	adiw	r26, 0x02	; 2
     584:	5c 93       	st	X, r21
     586:	4e 93       	st	-X, r20
     588:	11 97       	sbiw	r26, 0x01	; 1
     58a:	33 83       	std	Z+3, r19	; 0x03
     58c:	22 83       	std	Z+2, r18	; 0x02
     58e:	84 83       	std	Z+4, r24	; 0x04
     590:	15 82       	std	Z+5, r1	; 0x05
     592:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <printf_P>
     596:	8d b7       	in	r24, 0x3d	; 61
     598:	9e b7       	in	r25, 0x3e	; 62
     59a:	06 96       	adiw	r24, 0x06	; 6
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	9e bf       	out	0x3e, r25	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	8d bf       	out	0x3d, r24	; 61
	                         " -- Error Code %d\r\n" ESC_FG_WHITE), FailureType, ErrorCode);

	/* Indicate error via status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     5a6:	08 95       	ret

000005a8 <StillImageHost_Task>:

/** Task to print device information through the serial port, and open/close a test PIMA session with the
 *  attached Still Image device.
 */
void StillImageHost_Task(void)
{
     5a8:	3f 92       	push	r3
     5aa:	4f 92       	push	r4
     5ac:	5f 92       	push	r5
     5ae:	6f 92       	push	r6
     5b0:	7f 92       	push	r7
     5b2:	8f 92       	push	r8
     5b4:	9f 92       	push	r9
     5b6:	af 92       	push	r10
     5b8:	bf 92       	push	r11
     5ba:	cf 92       	push	r12
     5bc:	df 92       	push	r13
     5be:	ef 92       	push	r14
     5c0:	ff 92       	push	r15
     5c2:	0f 93       	push	r16
     5c4:	1f 93       	push	r17
     5c6:	df 93       	push	r29
     5c8:	cf 93       	push	r28
     5ca:	00 d0       	rcall	.+0      	; 0x5cc <StillImageHost_Task+0x24>
     5cc:	cd b7       	in	r28, 0x3d	; 61
     5ce:	de b7       	in	r29, 0x3e	; 62
	puts_P(PSTR("Done.\r\n"));

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
}
     5d0:	ed b6       	in	r14, 0x3d	; 61
     5d2:	fe b6       	in	r15, 0x3e	; 62
     5d4:	fa 82       	std	Y+2, r15	; 0x02
     5d6:	e9 82       	std	Y+1, r14	; 0x01

/** Task to print device information through the serial port, and open/close a test PIMA session with the
 *  attached Still Image device.
 */
void StillImageHost_Task(void)
{
     5d8:	4d b6       	in	r4, 0x3d	; 61
     5da:	3f 2c       	mov	r3, r15
	if (USB_HostState != HOST_STATE_Configured)
     5dc:	80 91 67 01 	lds	r24, 0x0167
     5e0:	8b 30       	cpi	r24, 0x0B	; 11
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <StillImageHost_Task+0x3e>
     5e4:	b2 c1       	rjmp	.+868    	; 0x94a <StillImageHost_Task+0x3a2>
	uint8_t ErrorCode;

	/* Indicate device busy via the status LEDs */
	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

	puts_P(PSTR("Retrieving Device Info...\r\n"));
     5e6:	8d e7       	ldi	r24, 0x7D	; 125
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <puts_P>

	PIMA_SendBlock = (PIMA_Container_t)
     5ee:	28 e1       	ldi	r18, 0x18	; 24
     5f0:	52 2e       	mov	r5, r18
     5f2:	9d e2       	ldi	r25, 0x2D	; 45
     5f4:	69 2e       	mov	r6, r25
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	79 2e       	mov	r7, r25
     5fa:	d3 01       	movw	r26, r6
     5fc:	e5 2d       	mov	r30, r5
     5fe:	1d 92       	st	X+, r1
     600:	ea 95       	dec	r30
     602:	e9 f7       	brne	.-6      	; 0x5fe <StillImageHost_Task+0x56>
     604:	8c e0       	ldi	r24, 0x0C	; 12
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	a0 e0       	ldi	r26, 0x00	; 0
     60a:	b0 e0       	ldi	r27, 0x00	; 0
     60c:	80 93 2d 01 	sts	0x012D, r24
     610:	90 93 2e 01 	sts	0x012E, r25
     614:	a0 93 2f 01 	sts	0x012F, r26
     618:	b0 93 30 01 	sts	0x0130, r27
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	90 93 32 01 	sts	0x0132, r25
     624:	80 93 31 01 	sts	0x0131, r24
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e1       	ldi	r25, 0x10	; 16
     62c:	90 93 34 01 	sts	0x0134, r25
     630:	80 93 33 01 	sts	0x0133, r24
			.TransactionID = 0x00000000,
			.Params        = {},
		};

	/* Send the GETDEVICEINFO block */
	SImage_SendBlockHeader();
     634:	8b d2       	rcall	.+1302   	; 0xb4c <SImage_SendBlockHeader>

	/* Receive the response data block */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     636:	b5 d2       	rcall	.+1386   	; 0xba2 <SImage_ReceiveBlockHeader>
     638:	88 23       	and	r24, r24
     63a:	09 f0       	breq	.+2      	; 0x63e <StillImageHost_Task+0x96>
     63c:	6b c1       	rjmp	.+726    	; 0x914 <StillImageHost_Task+0x36c>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Calculate the size of the returned device info data structure */
	uint16_t DeviceInfoSize = (PIMA_ReceivedBlock.DataLength - PIMA_COMMAND_SIZE(0));
     63e:	60 91 45 01 	lds	r22, 0x0145
     642:	70 91 46 01 	lds	r23, 0x0146
     646:	6c 50       	subi	r22, 0x0C	; 12
     648:	70 40       	sbci	r23, 0x00	; 0

	/* Create a buffer large enough to hold the entire device info */
	uint8_t DeviceInfo[DeviceInfoSize];
     64a:	ed b6       	in	r14, 0x3d	; 61
     64c:	fe b6       	in	r15, 0x3e	; 62
     64e:	e6 1a       	sub	r14, r22
     650:	f7 0a       	sbc	r15, r23
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	fe be       	out	0x3e, r15	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	ed be       	out	0x3d, r14	; 61
     65c:	0d b7       	in	r16, 0x3d	; 61
     65e:	1e b7       	in	r17, 0x3e	; 62
     660:	0f 5f       	subi	r16, 0xFF	; 255
     662:	1f 4f       	sbci	r17, 0xFF	; 255

	/* Read in the data block data (containing device info) */
	SImage_ReadData(DeviceInfo, DeviceInfoSize);
     664:	c8 01       	movw	r24, r16
     666:	18 d3       	rcall	.+1584   	; 0xc98 <SImage_ReadData>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     668:	80 91 a6 00 	lds	r24, 0x00A6
     66c:	8e 77       	andi	r24, 0x7E	; 126
     66e:	80 93 a6 00 	sts	0x00A6, r24
	/* Create a pointer for walking through the info dataset */
	uint8_t* DeviceInfoPos = DeviceInfo;

	/* Skip over the data before the unicode device information strings */
	DeviceInfoPos +=  8;                                          // Skip to VendorExtensionDesc String
	DeviceInfoPos += (1 + UNICODE_STRING_LENGTH(*DeviceInfoPos)); // Skip over VendorExtensionDesc String
     672:	d8 01       	movw	r26, r16
     674:	18 96       	adiw	r26, 0x08	; 8
     676:	ec 91       	ld	r30, X
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	ee 0f       	add	r30, r30
     67c:	ff 1f       	adc	r31, r31
     67e:	e0 0f       	add	r30, r16
     680:	f1 1f       	adc	r31, r17
     682:	39 96       	adiw	r30, 0x09	; 9
	DeviceInfoPos +=  2;                                          // Skip over FunctionalMode
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Supported Operations Array
     684:	a2 81       	ldd	r26, Z+2	; 0x02
     686:	b3 81       	ldd	r27, Z+3	; 0x03
     688:	aa 0f       	add	r26, r26
     68a:	bb 1f       	adc	r27, r27
     68c:	ae 0f       	add	r26, r30
     68e:	bf 1f       	adc	r27, r31
     690:	16 96       	adiw	r26, 0x06	; 6
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Supported Events Array
     692:	ed 91       	ld	r30, X+
     694:	fc 91       	ld	r31, X
     696:	11 97       	sbiw	r26, 0x01	; 1
     698:	ee 0f       	add	r30, r30
     69a:	ff 1f       	adc	r31, r31
     69c:	34 96       	adiw	r30, 0x04	; 4
     69e:	ea 0f       	add	r30, r26
     6a0:	fb 1f       	adc	r31, r27
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Supported Device Properties Array
     6a2:	a0 81       	ld	r26, Z
     6a4:	b1 81       	ldd	r27, Z+1	; 0x01
     6a6:	aa 0f       	add	r26, r26
     6a8:	bb 1f       	adc	r27, r27
     6aa:	14 96       	adiw	r26, 0x04	; 4
     6ac:	ae 0f       	add	r26, r30
     6ae:	bf 1f       	adc	r27, r31
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Capture Formats Array
     6b0:	ed 91       	ld	r30, X+
     6b2:	fc 91       	ld	r31, X
     6b4:	11 97       	sbiw	r26, 0x01	; 1
     6b6:	ee 0f       	add	r30, r30
     6b8:	ff 1f       	adc	r31, r31
     6ba:	34 96       	adiw	r30, 0x04	; 4
     6bc:	ea 0f       	add	r30, r26
     6be:	fb 1f       	adc	r31, r27
	DeviceInfoPos += (4 + (*(uint32_t*)DeviceInfoPos << 1));      // Skip over Image Formats Array
     6c0:	00 81       	ld	r16, Z
     6c2:	11 81       	ldd	r17, Z+1	; 0x01
     6c4:	00 0f       	add	r16, r16
     6c6:	11 1f       	adc	r17, r17
     6c8:	0c 5f       	subi	r16, 0xFC	; 252
     6ca:	1f 4f       	sbci	r17, 0xFF	; 255
     6cc:	0e 0f       	add	r16, r30
     6ce:	1f 1f       	adc	r17, r31

	/* Extract and convert the Manufacturer Unicode string to ASCII and print it through the USART */
	char Manufacturer[*DeviceInfoPos];
     6d0:	f8 01       	movw	r30, r16
     6d2:	80 81       	ld	r24, Z
     6d4:	ed b6       	in	r14, 0x3d	; 61
     6d6:	fe b6       	in	r15, 0x3e	; 62
     6d8:	e8 1a       	sub	r14, r24
     6da:	f1 08       	sbc	r15, r1
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	fe be       	out	0x3e, r15	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	ed be       	out	0x3d, r14	; 61
     6e6:	08 94       	sec
     6e8:	e1 1c       	adc	r14, r1
     6ea:	f1 1c       	adc	r15, r1
	UnicodeToASCII(DeviceInfoPos, Manufacturer);
     6ec:	c8 01       	movw	r24, r16
     6ee:	b7 01       	movw	r22, r14
     6f0:	24 df       	rcall	.-440    	; 0x53a <UnicodeToASCII>
	printf_P(PSTR("   Manufacturer: %s\r\n"), Manufacturer);
     6f2:	00 d0       	rcall	.+0      	; 0x6f4 <StillImageHost_Task+0x14c>
     6f4:	00 d0       	rcall	.+0      	; 0x6f6 <StillImageHost_Task+0x14e>
     6f6:	ed b7       	in	r30, 0x3d	; 61
     6f8:	fe b7       	in	r31, 0x3e	; 62
     6fa:	31 96       	adiw	r30, 0x01	; 1
     6fc:	87 e6       	ldi	r24, 0x67	; 103
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	ad b7       	in	r26, 0x3d	; 61
     702:	be b7       	in	r27, 0x3e	; 62
     704:	12 96       	adiw	r26, 0x02	; 2
     706:	9c 93       	st	X, r25
     708:	8e 93       	st	-X, r24
     70a:	11 97       	sbiw	r26, 0x01	; 1
     70c:	e2 82       	std	Z+2, r14	; 0x02
     70e:	f3 82       	std	Z+3, r15	; 0x03
     710:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <printf_P>

	DeviceInfoPos += 1 + UNICODE_STRING_LENGTH(*DeviceInfoPos);   // Skip over Manufacturer String
     714:	f8 01       	movw	r30, r16
     716:	e0 80       	ld	r14, Z
     718:	ff 24       	eor	r15, r15
     71a:	ee 0c       	add	r14, r14
     71c:	ff 1c       	adc	r15, r15
     71e:	08 94       	sec
     720:	e1 1c       	adc	r14, r1
     722:	f1 1c       	adc	r15, r1
     724:	e0 0e       	add	r14, r16
     726:	f1 1e       	adc	r15, r17

	/* Extract and convert the Model Unicode string to ASCII and print it through the USART */
	char Model[*DeviceInfoPos];
     728:	d7 01       	movw	r26, r14
     72a:	8c 91       	ld	r24, X
     72c:	0f 90       	pop	r0
     72e:	0f 90       	pop	r0
     730:	0f 90       	pop	r0
     732:	0f 90       	pop	r0
     734:	ed b7       	in	r30, 0x3d	; 61
     736:	fe b7       	in	r31, 0x3e	; 62
     738:	e8 1b       	sub	r30, r24
     73a:	f1 09       	sbc	r31, r1
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	fe bf       	out	0x3e, r31	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	ed bf       	out	0x3d, r30	; 61
     746:	0d b7       	in	r16, 0x3d	; 61
     748:	1e b7       	in	r17, 0x3e	; 62
     74a:	0f 5f       	subi	r16, 0xFF	; 255
     74c:	1f 4f       	sbci	r17, 0xFF	; 255
	UnicodeToASCII(DeviceInfoPos, Model);
     74e:	c7 01       	movw	r24, r14
     750:	b8 01       	movw	r22, r16
     752:	f3 de       	rcall	.-538    	; 0x53a <UnicodeToASCII>
	printf_P(PSTR("   Model: %s\r\n"), Model);
     754:	00 d0       	rcall	.+0      	; 0x756 <StillImageHost_Task+0x1ae>
     756:	00 d0       	rcall	.+0      	; 0x758 <StillImageHost_Task+0x1b0>
     758:	ed b7       	in	r30, 0x3d	; 61
     75a:	fe b7       	in	r31, 0x3e	; 62
     75c:	31 96       	adiw	r30, 0x01	; 1
     75e:	88 e5       	ldi	r24, 0x58	; 88
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	ad b7       	in	r26, 0x3d	; 61
     764:	be b7       	in	r27, 0x3e	; 62
     766:	12 96       	adiw	r26, 0x02	; 2
     768:	9c 93       	st	X, r25
     76a:	8e 93       	st	-X, r24
     76c:	11 97       	sbiw	r26, 0x01	; 1
     76e:	02 83       	std	Z+2, r16	; 0x02
     770:	13 83       	std	Z+3, r17	; 0x03
     772:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <printf_P>

	DeviceInfoPos += 1 + UNICODE_STRING_LENGTH(*DeviceInfoPos);   // Skip over Model String
     776:	f7 01       	movw	r30, r14
     778:	80 81       	ld	r24, Z
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	88 0f       	add	r24, r24
     77e:	99 1f       	adc	r25, r25
     780:	01 96       	adiw	r24, 0x01	; 1
     782:	8e 0d       	add	r24, r14
     784:	9f 1d       	adc	r25, r15

	/* Extract and convert the Device Version Unicode string to ASCII and print it through the USART */
	char DeviceVersion[*DeviceInfoPos];
     786:	dc 01       	movw	r26, r24
     788:	2c 91       	ld	r18, X
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	ed b7       	in	r30, 0x3d	; 61
     794:	fe b7       	in	r31, 0x3e	; 62
     796:	e2 1b       	sub	r30, r18
     798:	f1 09       	sbc	r31, r1
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	fe bf       	out	0x3e, r31	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	ed bf       	out	0x3d, r30	; 61
     7a4:	0d b7       	in	r16, 0x3d	; 61
     7a6:	1e b7       	in	r17, 0x3e	; 62
     7a8:	0f 5f       	subi	r16, 0xFF	; 255
     7aa:	1f 4f       	sbci	r17, 0xFF	; 255
	UnicodeToASCII(DeviceInfoPos, DeviceVersion);
     7ac:	b8 01       	movw	r22, r16
     7ae:	c5 de       	rcall	.-630    	; 0x53a <UnicodeToASCII>
	printf_P(PSTR("   Device Version: %s\r\n"), DeviceVersion);
     7b0:	00 d0       	rcall	.+0      	; 0x7b2 <StillImageHost_Task+0x20a>
     7b2:	00 d0       	rcall	.+0      	; 0x7b4 <StillImageHost_Task+0x20c>
     7b4:	ed b7       	in	r30, 0x3d	; 61
     7b6:	fe b7       	in	r31, 0x3e	; 62
     7b8:	31 96       	adiw	r30, 0x01	; 1
     7ba:	80 e4       	ldi	r24, 0x40	; 64
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	ad b7       	in	r26, 0x3d	; 61
     7c0:	be b7       	in	r27, 0x3e	; 62
     7c2:	12 96       	adiw	r26, 0x02	; 2
     7c4:	9c 93       	st	X, r25
     7c6:	8e 93       	st	-X, r24
     7c8:	11 97       	sbiw	r26, 0x01	; 1
     7ca:	02 83       	std	Z+2, r16	; 0x02
     7cc:	13 83       	std	Z+3, r17	; 0x03
     7ce:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <printf_P>

	/* Receive the final response block from the device */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
     7da:	e3 d1       	rcall	.+966    	; 0xba2 <SImage_ReceiveBlockHeader>
     7dc:	88 23       	and	r24, r24
     7de:	51 f0       	breq	.+20     	; 0x7f4 <StillImageHost_Task+0x24c>
	{
		ShowCommandError(ErrorCode, false);
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	be de       	rcall	.-644    	; 0x560 <ShowCommandError>
		printf_P(PSTR("Error at (1)\r\n"));
     7e4:	00 d0       	rcall	.+0      	; 0x7e6 <StillImageHost_Task+0x23e>
     7e6:	81 e3       	ldi	r24, 0x31	; 49
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	ed b7       	in	r30, 0x3d	; 61
     7ec:	fe b7       	in	r31, 0x3e	; 62
     7ee:	92 83       	std	Z+2, r25	; 0x02
     7f0:	81 83       	std	Z+1, r24	; 0x01
     7f2:	1b c0       	rjmp	.+54     	; 0x82a <StillImageHost_Task+0x282>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Verify that the command completed successfully */
	if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     7f4:	80 91 49 01 	lds	r24, 0x0149
     7f8:	90 91 4a 01 	lds	r25, 0x014A
     7fc:	83 30       	cpi	r24, 0x03	; 3
     7fe:	91 05       	cpc	r25, r1
     800:	39 f4       	brne	.+14     	; 0x810 <StillImageHost_Task+0x268>
     802:	00 91 4b 01 	lds	r16, 0x014B
     806:	10 91 4c 01 	lds	r17, 0x014C
     80a:	01 30       	cpi	r16, 0x01	; 1
     80c:	11 05       	cpc	r17, r1
     80e:	91 f0       	breq	.+36     	; 0x834 <StillImageHost_Task+0x28c>
	{
		ShowCommandError(PIMA_ReceivedBlock.Code, true);
     810:	80 91 4b 01 	lds	r24, 0x014B
     814:	61 e0       	ldi	r22, 0x01	; 1
     816:	a4 de       	rcall	.-696    	; 0x560 <ShowCommandError>
		printf_P(PSTR("Error at (2)\r\n"));
     818:	00 d0       	rcall	.+0      	; 0x81a <StillImageHost_Task+0x272>
     81a:	82 e2       	ldi	r24, 0x22	; 34
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	ad b7       	in	r26, 0x3d	; 61
     820:	be b7       	in	r27, 0x3e	; 62
     822:	12 96       	adiw	r26, 0x02	; 2
     824:	9c 93       	st	X, r25
     826:	8e 93       	st	-X, r24
     828:	11 97       	sbiw	r26, 0x01	; 1
     82a:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <printf_P>
		USB_Host_SetDeviceConfiguration(0);
     82e:	0f 90       	pop	r0
     830:	0f 90       	pop	r0
     832:	89 c0       	rjmp	.+274    	; 0x946 <StillImageHost_Task+0x39e>
		return;
	}

	puts_P(PSTR("Opening Session...\r\n"));
     834:	8d e0       	ldi	r24, 0x0D	; 13
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <puts_P>

	PIMA_SendBlock = (PIMA_Container_t)
     83c:	f3 01       	movw	r30, r6
     83e:	e5 2c       	mov	r14, r5
     840:	11 92       	st	Z+, r1
     842:	ea 94       	dec	r14
     844:	e9 f7       	brne	.-6      	; 0x840 <StillImageHost_Task+0x298>
     846:	90 e1       	ldi	r25, 0x10	; 16
     848:	89 2e       	mov	r8, r25
     84a:	91 2c       	mov	r9, r1
     84c:	a1 2c       	mov	r10, r1
     84e:	b1 2c       	mov	r11, r1
     850:	80 92 2d 01 	sts	0x012D, r8
     854:	90 92 2e 01 	sts	0x012E, r9
     858:	a0 92 2f 01 	sts	0x012F, r10
     85c:	b0 92 30 01 	sts	0x0130, r11
     860:	10 93 32 01 	sts	0x0132, r17
     864:	00 93 31 01 	sts	0x0131, r16
     868:	82 e0       	ldi	r24, 0x02	; 2
     86a:	90 e1       	ldi	r25, 0x10	; 16
     86c:	90 93 34 01 	sts	0x0134, r25
     870:	80 93 33 01 	sts	0x0133, r24
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	c8 2e       	mov	r12, r24
     878:	d1 2c       	mov	r13, r1
     87a:	e1 2c       	mov	r14, r1
     87c:	f1 2c       	mov	r15, r1
     87e:	c0 92 39 01 	sts	0x0139, r12
     882:	d0 92 3a 01 	sts	0x013A, r13
     886:	e0 92 3b 01 	sts	0x013B, r14
     88a:	f0 92 3c 01 	sts	0x013C, r15
			.TransactionID = 0x00000000,
			.Params        = {0x00000001},
		};

	/* Send the OPENSESSION block, open a session with an ID of 0x0001 */
	SImage_SendBlockHeader();
     88e:	5e d1       	rcall	.+700    	; 0xb4c <SImage_SendBlockHeader>

	/* Receive the response block from the device */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     890:	88 d1       	rcall	.+784    	; 0xba2 <SImage_ReceiveBlockHeader>
     892:	88 23       	and	r24, r24
     894:	09 f0       	breq	.+2      	; 0x898 <StillImageHost_Task+0x2f0>
     896:	3e c0       	rjmp	.+124    	; 0x914 <StillImageHost_Task+0x36c>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Verify that the command completed successfully */
	if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     898:	80 91 49 01 	lds	r24, 0x0149
     89c:	90 91 4a 01 	lds	r25, 0x014A
     8a0:	83 30       	cpi	r24, 0x03	; 3
     8a2:	91 05       	cpc	r25, r1
     8a4:	09 f0       	breq	.+2      	; 0x8a8 <StillImageHost_Task+0x300>
     8a6:	46 c0       	rjmp	.+140    	; 0x934 <StillImageHost_Task+0x38c>
     8a8:	00 91 4b 01 	lds	r16, 0x014B
     8ac:	10 91 4c 01 	lds	r17, 0x014C
     8b0:	01 30       	cpi	r16, 0x01	; 1
     8b2:	11 05       	cpc	r17, r1
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <StillImageHost_Task+0x310>
     8b6:	3e c0       	rjmp	.+124    	; 0x934 <StillImageHost_Task+0x38c>
		ShowCommandError(PIMA_ReceivedBlock.Code, true);
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Closing Session...\r\n"));
     8b8:	88 ef       	ldi	r24, 0xF8	; 248
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <puts_P>

	PIMA_SendBlock = (PIMA_Container_t)
     8c0:	d3 01       	movw	r26, r6
     8c2:	1d 92       	st	X+, r1
     8c4:	5a 94       	dec	r5
     8c6:	e9 f7       	brne	.-6      	; 0x8c2 <StillImageHost_Task+0x31a>
     8c8:	80 92 2d 01 	sts	0x012D, r8
     8cc:	90 92 2e 01 	sts	0x012E, r9
     8d0:	a0 92 2f 01 	sts	0x012F, r10
     8d4:	b0 92 30 01 	sts	0x0130, r11
     8d8:	10 93 32 01 	sts	0x0132, r17
     8dc:	00 93 31 01 	sts	0x0131, r16
     8e0:	83 e0       	ldi	r24, 0x03	; 3
     8e2:	90 e1       	ldi	r25, 0x10	; 16
     8e4:	90 93 34 01 	sts	0x0134, r25
     8e8:	80 93 33 01 	sts	0x0133, r24
     8ec:	c0 92 35 01 	sts	0x0135, r12
     8f0:	d0 92 36 01 	sts	0x0136, r13
     8f4:	e0 92 37 01 	sts	0x0137, r14
     8f8:	f0 92 38 01 	sts	0x0138, r15
     8fc:	c0 92 39 01 	sts	0x0139, r12
     900:	d0 92 3a 01 	sts	0x013A, r13
     904:	e0 92 3b 01 	sts	0x013B, r14
     908:	f0 92 3c 01 	sts	0x013C, r15
			.TransactionID = 0x00000001,
			.Params        = {0x00000001},
		};

	/* Send the CLOSESESSION block, close the session with an ID of 0x0001 */
	SImage_SendBlockHeader();
     90c:	1f d1       	rcall	.+574    	; 0xb4c <SImage_SendBlockHeader>

	/* Receive the response block from the device */
	if ((ErrorCode = SImage_ReceiveBlockHeader()) != PIPE_RWSTREAM_NoError)
     90e:	49 d1       	rcall	.+658    	; 0xba2 <SImage_ReceiveBlockHeader>
     910:	88 23       	and	r24, r24
     912:	11 f0       	breq	.+4      	; 0x918 <StillImageHost_Task+0x370>
	{
		ShowCommandError(ErrorCode, false);
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	11 c0       	rjmp	.+34     	; 0x93a <StillImageHost_Task+0x392>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	/* Verify that the command completed successfully */
	if ((PIMA_ReceivedBlock.Type != PIMA_CONTAINER_ResponseBlock) || (PIMA_ReceivedBlock.Code != PIMA_RESPONSE_OK))
     918:	80 91 49 01 	lds	r24, 0x0149
     91c:	90 91 4a 01 	lds	r25, 0x014A
     920:	83 30       	cpi	r24, 0x03	; 3
     922:	91 05       	cpc	r25, r1
     924:	39 f4       	brne	.+14     	; 0x934 <StillImageHost_Task+0x38c>
     926:	80 91 4b 01 	lds	r24, 0x014B
     92a:	90 91 4c 01 	lds	r25, 0x014C
     92e:	81 30       	cpi	r24, 0x01	; 1
     930:	91 05       	cpc	r25, r1
     932:	29 f0       	breq	.+10     	; 0x93e <StillImageHost_Task+0x396>
	{
		ShowCommandError(PIMA_ReceivedBlock.Code, true);
     934:	80 91 4b 01 	lds	r24, 0x014B
     938:	61 e0       	ldi	r22, 0x01	; 1
     93a:	12 de       	rcall	.-988    	; 0x560 <ShowCommandError>
     93c:	04 c0       	rjmp	.+8      	; 0x946 <StillImageHost_Task+0x39e>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Done.\r\n"));
     93e:	80 ef       	ldi	r24, 0xF0	; 240
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <puts_P>

	/* Indicate device no longer busy */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	ce d7       	rcall	.+3996   	; 0x18e6 <USB_Host_SetDeviceConfiguration>
     94a:	84 2d       	mov	r24, r4
     94c:	93 2d       	mov	r25, r3
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	f8 94       	cli
     952:	9e bf       	out	0x3e, r25	; 62
     954:	0f be       	out	0x3f, r0	; 63
     956:	8d bf       	out	0x3d, r24	; 61
}
     958:	e9 81       	ldd	r30, Y+1	; 0x01
     95a:	fa 81       	ldd	r31, Y+2	; 0x02
     95c:	0f b6       	in	r0, 0x3f	; 63
     95e:	f8 94       	cli
     960:	fe bf       	out	0x3e, r31	; 62
     962:	0f be       	out	0x3f, r0	; 63
     964:	ed bf       	out	0x3d, r30	; 61
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
     96a:	cf 91       	pop	r28
     96c:	df 91       	pop	r29
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	ff 90       	pop	r15
     974:	ef 90       	pop	r14
     976:	df 90       	pop	r13
     978:	cf 90       	pop	r12
     97a:	bf 90       	pop	r11
     97c:	af 90       	pop	r10
     97e:	9f 90       	pop	r9
     980:	8f 90       	pop	r8
     982:	7f 90       	pop	r7
     984:	6f 90       	pop	r6
     986:	5f 90       	pop	r5
     988:	4f 90       	pop	r4
     98a:	3f 90       	pop	r3
     98c:	08 95       	ret

0000098e <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     98e:	06 dd       	rcall	.-1524   	; 0x39c <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Still Image Host Demo running.\r\n" ESC_FG_WHITE));
     990:	82 e3       	ldi	r24, 0x32	; 50
     992:	93 e0       	ldi	r25, 0x03	; 3
     994:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     998:	78 94       	sei

	for (;;)
	{
		StillImageHost_Task();
     99a:	06 de       	rcall	.-1012   	; 0x5a8 <StillImageHost_Task>

		USB_USBTask();
     99c:	e0 d7       	rcall	.+4032   	; 0x195e <USB_USBTask>
     99e:	fd cf       	rjmp	.-6      	; 0x99a <main+0xc>

000009a0 <DComp_NextStillImageInterface>:
 *  This comparator searches for the next Interface descriptor of the correct Still Image Class, Subclass and Protocol values.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextStillImageInterface(void* CurrentDescriptor)
{
     9a0:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
     9a2:	81 81       	ldd	r24, Z+1	; 0x01
     9a4:	84 30       	cpi	r24, 0x04	; 4
     9a6:	49 f4       	brne	.+18     	; 0x9ba <DComp_NextStillImageInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		/* Check the descriptor class, subclass and protocol, break out if correct interface found */
		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
     9a8:	85 81       	ldd	r24, Z+5	; 0x05
     9aa:	86 30       	cpi	r24, 0x06	; 6
     9ac:	31 f4       	brne	.+12     	; 0x9ba <DComp_NextStillImageInterface+0x1a>
     9ae:	86 81       	ldd	r24, Z+6	; 0x06
     9b0:	81 30       	cpi	r24, 0x01	; 1
     9b2:	19 f4       	brne	.+6      	; 0x9ba <DComp_NextStillImageInterface+0x1a>
		    (Interface->SubClass == SI_CSCP_StillImageSubclass) &&
     9b4:	87 81       	ldd	r24, Z+7	; 0x07
     9b6:	81 30       	cpi	r24, 0x01	; 1
     9b8:	11 f0       	breq	.+4      	; 0x9be <DComp_NextStillImageInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
     9ba:	82 e0       	ldi	r24, 0x02	; 2
     9bc:	08 95       	ret
		/* Check the descriptor class, subclass and protocol, break out if correct interface found */
		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
		    (Interface->SubClass == SI_CSCP_StillImageSubclass) &&
		    (Interface->Protocol == SI_CSCP_BulkOnlyProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
     9be:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     9c0:	08 95       	ret

000009c2 <DComp_NextStillImageInterfaceDataEndpoint>:
 *  search if another interface descriptor is found before the next endpoint.
 *
 *  \return A value from the DSEARCH_Return_ErrorCodes_t enum
 */
uint8_t DComp_NextStillImageInterfaceDataEndpoint(void* CurrentDescriptor)
{
     9c2:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
     9c4:	81 81       	ldd	r24, Z+1	; 0x01
     9c6:	85 30       	cpi	r24, 0x05	; 5
     9c8:	49 f4       	brne	.+18     	; 0x9dc <DComp_NextStillImageInterfaceDataEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) || 
     9ca:	83 81       	ldd	r24, Z+3	; 0x03
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	83 70       	andi	r24, 0x03	; 3
     9d0:	90 70       	andi	r25, 0x00	; 0
     9d2:	02 97       	sbiw	r24, 0x02	; 2
     9d4:	82 30       	cpi	r24, 0x02	; 2
     9d6:	91 05       	cpc	r25, r1
     9d8:	18 f4       	brcc	.+6      	; 0x9e0 <DComp_NextStillImageInterfaceDataEndpoint+0x1e>
     9da:	04 c0       	rjmp	.+8      	; 0x9e4 <DComp_NextStillImageInterfaceDataEndpoint+0x22>
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
     9dc:	84 30       	cpi	r24, 0x04	; 4
     9de:	21 f0       	breq	.+8      	; 0x9e8 <DComp_NextStillImageInterfaceDataEndpoint+0x26>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
     9e0:	82 e0       	ldi	r24, 0x02	; 2
     9e2:	08 95       	ret

		/* Check the endpoint type, break out if correct BULK or INTERRUPT type endpoint found */
		if (((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_BULK) || 
		    ((Endpoint->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT))
		{
			return DESCRIPTOR_SEARCH_Found;
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	08 95       	ret
		}
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
     9e8:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
     9ea:	08 95       	ret

000009ec <ProcessConfigurationDescriptor>:
 *  This routine searches for a SI interface descriptor containing bulk IN and OUT data endpoints.
 *
 *  \return An error code from the \ref StillImageHost_GetConfigDescriptorDataCodes_t enum.
 */
uint8_t ProcessConfigurationDescriptor(void)
{
     9ec:	6f 92       	push	r6
     9ee:	7f 92       	push	r7
     9f0:	8f 92       	push	r8
     9f2:	9f 92       	push	r9
     9f4:	af 92       	push	r10
     9f6:	bf 92       	push	r11
     9f8:	cf 92       	push	r12
     9fa:	df 92       	push	r13
     9fc:	ef 92       	push	r14
     9fe:	ff 92       	push	r15
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
     a04:	df 93       	push	r29
     a06:	cf 93       	push	r28
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
     a0c:	c4 50       	subi	r28, 0x04	; 4
     a0e:	d2 40       	sbci	r29, 0x02	; 2
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	f8 94       	cli
     a14:	de bf       	out	0x3e, r29	; 62
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	cd bf       	out	0x3d, r28	; 61
	uint8_t  ConfigDescriptorData[512];
	void*    CurrConfigLocation = ConfigDescriptorData;
     a1a:	ae 01       	movw	r20, r28
     a1c:	4b 5f       	subi	r20, 0xFB	; 251
     a1e:	5f 4f       	sbci	r21, 0xFF	; 255
     a20:	5a 83       	std	Y+2, r21	; 0x02
     a22:	49 83       	std	Y+1, r20	; 0x01
	USB_Descriptor_Endpoint_t*  DataINEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint     = NULL;
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;

	/* Retrieve the entire configuration descriptor into the allocated buffer */
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
     a24:	83 e0       	ldi	r24, 0x03	; 3
     a26:	e8 2e       	mov	r14, r24
     a28:	f1 2c       	mov	r15, r1
     a2a:	ec 0e       	add	r14, r28
     a2c:	fd 1e       	adc	r15, r29
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	b7 01       	movw	r22, r14
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	32 e0       	ldi	r19, 0x02	; 2
     a36:	94 d5       	rcall	.+2856   	; 0x1560 <USB_Host_GetDeviceConfigDescriptor>
     a38:	85 30       	cpi	r24, 0x05	; 5
     a3a:	09 f4       	brne	.+2      	; 0xa3e <ProcessConfigurationDescriptor+0x52>
     a3c:	6e c0       	rjmp	.+220    	; 0xb1a <ProcessConfigurationDescriptor+0x12e>
     a3e:	86 30       	cpi	r24, 0x06	; 6
     a40:	89 f0       	breq	.+34     	; 0xa64 <ProcessConfigurationDescriptor+0x78>
     a42:	88 23       	and	r24, r24
     a44:	89 f4       	brne	.+34     	; 0xa68 <ProcessConfigurationDescriptor+0x7c>
     a46:	aa 24       	eor	r10, r10
     a48:	bb 24       	eor	r11, r11
     a4a:	cc 24       	eor	r12, r12
     a4c:	dd 24       	eor	r13, r13
     a4e:	00 e0       	ldi	r16, 0x00	; 0
     a50:	10 e0       	ldi	r17, 0x00	; 0
     a52:	66 24       	eor	r6, r6
     a54:	77 24       	eor	r7, r7

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(StillImageInterface) ||
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     a56:	9e 2c       	mov	r9, r14
     a58:	8f 2c       	mov	r8, r15
     a5a:	7e 01       	movw	r14, r28
     a5c:	08 94       	sec
     a5e:	e1 1c       	adc	r14, r1
     a60:	f1 1c       	adc	r15, r1
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <ProcessConfigurationDescriptor+0x80>
	switch (USB_Host_GetDeviceConfigDescriptor(1, &CurrConfigBytesRem, ConfigDescriptorData, sizeof(ConfigDescriptorData)))
	{
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
     a64:	83 e0       	ldi	r24, 0x03	; 3
     a66:	5c c0       	rjmp	.+184    	; 0xb20 <ProcessConfigurationDescriptor+0x134>
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
		default:
			return ControlError;
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	5a c0       	rjmp	.+180    	; 0xb20 <ProcessConfigurationDescriptor+0x134>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(StillImageInterface) ||
     a6c:	61 14       	cp	r6, r1
     a6e:	71 04       	cpc	r7, r1
     a70:	41 f0       	breq	.+16     	; 0xa82 <ProcessConfigurationDescriptor+0x96>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     a72:	89 2d       	mov	r24, r9
     a74:	98 2d       	mov	r25, r8
     a76:	b7 01       	movw	r22, r14
     a78:	41 ee       	ldi	r20, 0xE1	; 225
     a7a:	54 e0       	ldi	r21, 0x04	; 4
     a7c:	c8 d5       	rcall	.+2960   	; 0x160e <USB_GetNextDescriptorComp>
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
	{
		/* See if we've found a likely compatible interface, and if there is an endpoint within that interface */
		if (!(StillImageInterface) ||
     a7e:	88 23       	and	r24, r24
     a80:	91 f0       	breq	.+36     	; 0xaa6 <ProcessConfigurationDescriptor+0xba>
		    USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
		                              DComp_NextStillImageInterfaceDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			/* Get the next Still Image interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
     a82:	89 2d       	mov	r24, r9
     a84:	98 2d       	mov	r25, r8
     a86:	b7 01       	movw	r22, r14
     a88:	40 ed       	ldi	r20, 0xD0	; 208
     a8a:	54 e0       	ldi	r21, 0x04	; 4
     a8c:	c0 d5       	rcall	.+2944   	; 0x160e <USB_GetNextDescriptorComp>
     a8e:	88 23       	and	r24, r24
     a90:	09 f0       	breq	.+2      	; 0xa94 <ProcessConfigurationDescriptor+0xa8>
     a92:	45 c0       	rjmp	.+138    	; 0xb1e <ProcessConfigurationDescriptor+0x132>
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			StillImageInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     a94:	69 80       	ldd	r6, Y+1	; 0x01
     a96:	7a 80       	ldd	r7, Y+2	; 0x02

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
			EventsEndpoint  = NULL;
     a98:	aa 24       	eor	r10, r10
     a9a:	bb 24       	eor	r11, r11
			/* Save the interface in case we need to refer back to it later */
			StillImageInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);

			/* Clear any found endpoints */
			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
     a9c:	cc 24       	eor	r12, r12
     a9e:	dd 24       	eor	r13, r13
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
			}

			/* Save the interface in case we need to refer back to it later */
			StillImageInterface = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Interface_t);
     aa0:	00 e0       	ldi	r16, 0x00	; 0
     aa2:	10 e0       	ldi	r17, 0x00	; 0
     aa4:	e3 cf       	rjmp	.-58     	; 0xa6c <ProcessConfigurationDescriptor+0x80>
			/* Skip the remainder of the loop as we have not found an endpoint yet */
			continue;
		}

		/* Retrieve the endpoint address from the endpoint descriptor */
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(CurrConfigLocation, USB_Descriptor_Endpoint_t);
     aa6:	e9 81       	ldd	r30, Y+1	; 0x01
     aa8:	fa 81       	ldd	r31, Y+2	; 0x02

		/* If the endpoint is a IN type endpoint */
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
     aaa:	82 81       	ldd	r24, Z+2	; 0x02
     aac:	87 ff       	sbrs	r24, 7
     aae:	06 c0       	rjmp	.+12     	; 0xabc <ProcessConfigurationDescriptor+0xd0>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
     ab0:	83 81       	ldd	r24, Z+3	; 0x03
     ab2:	83 70       	andi	r24, 0x03	; 3
     ab4:	83 30       	cpi	r24, 0x03	; 3
     ab6:	21 f4       	brne	.+8      	; 0xac0 <ProcessConfigurationDescriptor+0xd4>
			  EventsEndpoint = EndpointData;
     ab8:	5f 01       	movw	r10, r30
     aba:	03 c0       	rjmp	.+6      	; 0xac2 <ProcessConfigurationDescriptor+0xd6>
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
     abc:	6f 01       	movw	r12, r30
     abe:	01 c0       	rjmp	.+2      	; 0xac2 <ProcessConfigurationDescriptor+0xd6>
		{
			/* Check if the found endpoint is a interrupt or bulk type descriptor */
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  EventsEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
     ac0:	8f 01       	movw	r16, r30
			return DescriptorTooLarge;
		default:
			return ControlError;
	}

	while (!(DataINEndpoint) || !(DataOUTEndpoint))
     ac2:	01 15       	cp	r16, r1
     ac4:	11 05       	cpc	r17, r1
     ac6:	91 f2       	breq	.-92     	; 0xa6c <ProcessConfigurationDescriptor+0x80>
     ac8:	c1 14       	cp	r12, r1
     aca:	d1 04       	cpc	r13, r1
     acc:	79 f2       	breq	.-98     	; 0xa6c <ProcessConfigurationDescriptor+0x80>
			DataOUTEndpoint = EndpointData;
		}
	}

	/* Configure the Still Image data IN pipe */
	Pipe_ConfigurePipe(SIMAGE_DATA_IN_PIPE, EP_TYPE_BULK, PIPE_TOKEN_IN,
     ace:	d8 01       	movw	r26, r16
     ad0:	14 96       	adiw	r26, 0x04	; 4
     ad2:	ed 91       	ld	r30, X+
     ad4:	fc 91       	ld	r31, X
     ad6:	15 97       	sbiw	r26, 0x05	; 5
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	62 e0       	ldi	r22, 0x02	; 2
     adc:	40 e1       	ldi	r20, 0x10	; 16
     ade:	12 96       	adiw	r26, 0x02	; 2
     ae0:	2c 91       	ld	r18, X
     ae2:	8f 01       	movw	r16, r30
     ae4:	ee 24       	eor	r14, r14
     ae6:	c5 d2       	rcall	.+1418   	; 0x1072 <Pipe_ConfigurePipe>
	                   DataINEndpoint->EndpointAddress, DataINEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the Still Image data OUT pipe */
	Pipe_ConfigurePipe(SIMAGE_DATA_OUT_PIPE, EP_TYPE_BULK, PIPE_TOKEN_OUT,
     ae8:	f6 01       	movw	r30, r12
     aea:	04 81       	ldd	r16, Z+4	; 0x04
     aec:	15 81       	ldd	r17, Z+5	; 0x05
     aee:	82 e0       	ldi	r24, 0x02	; 2
     af0:	62 e0       	ldi	r22, 0x02	; 2
     af2:	40 e2       	ldi	r20, 0x20	; 32
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	bd d2       	rcall	.+1402   	; 0x1072 <Pipe_ConfigurePipe>
					   DataOUTEndpoint->EndpointAddress, DataOUTEndpoint->EndpointSize, PIPE_BANK_SINGLE);

	/* Configure the Still Image events pipe */
	Pipe_ConfigurePipe(SIMAGE_EVENTS_PIPE, EP_TYPE_INTERRUPT, PIPE_TOKEN_IN,
     af8:	d5 01       	movw	r26, r10
     afa:	14 96       	adiw	r26, 0x04	; 4
     afc:	0d 91       	ld	r16, X+
     afe:	1c 91       	ld	r17, X
     b00:	15 97       	sbiw	r26, 0x05	; 5
     b02:	83 e0       	ldi	r24, 0x03	; 3
     b04:	63 e0       	ldi	r22, 0x03	; 3
     b06:	40 e1       	ldi	r20, 0x10	; 16
     b08:	12 96       	adiw	r26, 0x02	; 2
     b0a:	2c 91       	ld	r18, X
     b0c:	b2 d2       	rcall	.+1380   	; 0x1072 <Pipe_ConfigurePipe>
					   EventsEndpoint->EndpointAddress, EventsEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(EventsEndpoint->PollingIntervalMS);
     b0e:	f5 01       	movw	r30, r10
     b10:	86 81       	ldd	r24, Z+6	; 0x06
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
     b12:	80 93 ad 00 	sts	0x00AD, r24

	/* Valid data found, return success */
	return SuccessfulConfigRead;
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	03 c0       	rjmp	.+6      	; 0xb20 <ProcessConfigurationDescriptor+0x134>
		case HOST_GETCONFIG_Successful:
			break;
		case HOST_GETCONFIG_InvalidData:
			return InvalidConfigDataReturned;
		case HOST_GETCONFIG_BuffOverflow:
			return DescriptorTooLarge;
     b1a:	82 e0       	ldi	r24, 0x02	; 2
     b1c:	01 c0       	rjmp	.+2      	; 0xb20 <ProcessConfigurationDescriptor+0x134>
			/* Get the next Still Image interface from the configuration descriptor */
			if (USB_GetNextDescriptorComp(&CurrConfigBytesRem, &CurrConfigLocation,
										  DComp_NextStillImageInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				/* Descriptor not found, error out */
				return NoCompatibleInterfaceFound;
     b1e:	84 e0       	ldi	r24, 0x04	; 4
					   EventsEndpoint->EndpointAddress, EventsEndpoint->EndpointSize, PIPE_BANK_SINGLE);
	Pipe_SetInterruptPeriod(EventsEndpoint->PollingIntervalMS);

	/* Valid data found, return success */
	return SuccessfulConfigRead;
}
     b20:	cc 5f       	subi	r28, 0xFC	; 252
     b22:	dd 4f       	sbci	r29, 0xFD	; 253
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	de bf       	out	0x3e, r29	; 62
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	cd bf       	out	0x3d, r28	; 61
     b2e:	cf 91       	pop	r28
     b30:	df 91       	pop	r29
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	df 90       	pop	r13
     b3c:	cf 90       	pop	r12
     b3e:	bf 90       	pop	r11
     b40:	af 90       	pop	r10
     b42:	9f 90       	pop	r9
     b44:	8f 90       	pop	r8
     b46:	7f 90       	pop	r7
     b48:	6f 90       	pop	r6
     b4a:	08 95       	ret

00000b4c <SImage_SendBlockHeader>:
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     b52:	80 91 a9 00 	lds	r24, 0x00A9
     b56:	8f 7b       	andi	r24, 0xBF	; 191
     b58:	80 93 a9 00 	sts	0x00A9, r24
	/* Unfreeze the data OUT pipe ready for data transmission */
	Pipe_SelectPipe(SIMAGE_DATA_OUT_PIPE);
	Pipe_Unfreeze();

	/* Write the PIMA block to the data OUT pipe */
	Pipe_Write_Stream_LE(&PIMA_SendBlock, PIMA_COMMAND_SIZE(0), NULL);
     b5c:	8d e2       	ldi	r24, 0x2D	; 45
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	6c e0       	ldi	r22, 0x0C	; 12
     b62:	70 e0       	ldi	r23, 0x00	; 0
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	35 d4       	rcall	.+2154   	; 0x13d4 <Pipe_Write_Stream_LE>

	/* If the block type is a command, send its parameters (if any) */
	if (PIMA_SendBlock.Type == PIMA_CONTAINER_CommandBlock)
     b6a:	80 91 31 01 	lds	r24, 0x0131
     b6e:	90 91 32 01 	lds	r25, 0x0132
     b72:	81 30       	cpi	r24, 0x01	; 1
     b74:	91 05       	cpc	r25, r1
     b76:	79 f4       	brne	.+30     	; 0xb96 <SImage_SendBlockHeader+0x4a>
	{
		/* Determine the size of the parameters in the block via the data length attribute */
		uint8_t ParamBytes = (PIMA_SendBlock.DataLength - PIMA_COMMAND_SIZE(0));
     b78:	60 91 2d 01 	lds	r22, 0x012D
     b7c:	6c 50       	subi	r22, 0x0C	; 12

		/* Check if any parameters in the command block */
		if (ParamBytes)
     b7e:	31 f0       	breq	.+12     	; 0xb8c <SImage_SendBlockHeader+0x40>
		{
			/* Write the PIMA parameters to the data OUT pipe */
			Pipe_Write_Stream_LE(&PIMA_SendBlock.Params, ParamBytes, NULL);
     b80:	89 e3       	ldi	r24, 0x39	; 57
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	40 e0       	ldi	r20, 0x00	; 0
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	24 d4       	rcall	.+2120   	; 0x13d4 <Pipe_Write_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     b8c:	80 91 a6 00 	lds	r24, 0x00A6
     b90:	8b 77       	andi	r24, 0x7B	; 123
     b92:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     b96:	80 91 a9 00 	lds	r24, 0x00A9
     b9a:	80 64       	ori	r24, 0x40	; 64
     b9c:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_ClearOUT();
	}

	/* Freeze pipe after use */
	Pipe_Freeze();
}
     ba0:	08 95       	ret

00000ba2 <SImage_ReceiveBlockHeader>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     ba2:	20 91 a2 00 	lds	r18, 0x00A2
     ba6:	30 91 a3 00 	lds	r19, 0x00A3
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     bb0:	80 91 a9 00 	lds	r24, 0x00A9
     bb4:	8f 7b       	andi	r24, 0xBF	; 191
     bb6:	80 93 a9 00 	sts	0x00A9, r24
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t SImage_ReceiveBlockHeader(void)
{
	uint16_t TimeoutMSRem        = COMMAND_DATA_TIMEOUT_MS;
     bba:	80 e1       	ldi	r24, 0x10	; 16
     bbc:	97 e2       	ldi	r25, 0x27	; 39
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     bbe:	72 e0       	ldi	r23, 0x02	; 2
     bc0:	61 e0       	ldi	r22, 0x01	; 1
	/* Unfreeze the data IN pipe */
	Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Wait until data received on the IN pipe */
	while (!(Pipe_IsINReceived()))
     bc2:	3e c0       	rjmp	.+124    	; 0xc40 <SImage_ReceiveBlockHeader+0x9e>
     bc4:	40 91 a2 00 	lds	r20, 0x00A2
     bc8:	50 91 a3 00 	lds	r21, 0x00A3
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		/* Check to see if a new frame has been issued (1ms elapsed) */
		if (CurrentFrameNumber != PreviousFrameNumber)
     bcc:	42 17       	cp	r20, r18
     bce:	53 07       	cpc	r21, r19
     bd0:	21 f0       	breq	.+8      	; 0xbda <SImage_ReceiveBlockHeader+0x38>
		{
			/* Save the new frame number and decrement the timeout period */
			PreviousFrameNumber = CurrentFrameNumber;
			TimeoutMSRem--;
     bd2:	01 97       	sbiw	r24, 0x01	; 1

			/* Check to see if the timeout period for the command has elapsed */
			if (!(TimeoutMSRem))
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <SImage_ReceiveBlockHeader+0x36>
     bd6:	5c c0       	rjmp	.+184    	; 0xc90 <SImage_ReceiveBlockHeader+0xee>
     bd8:	9a 01       	movw	r18, r20

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     bda:	40 91 a9 00 	lds	r20, 0x00A9
     bde:	40 64       	ori	r20, 0x40	; 64
     be0:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     be4:	70 93 a7 00 	sts	0x00A7, r23

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     be8:	40 91 a9 00 	lds	r20, 0x00A9
     bec:	4f 7b       	andi	r20, 0xBF	; 191
     bee:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     bf2:	40 91 a6 00 	lds	r20, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(SIMAGE_DATA_OUT_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     bf6:	41 fd       	sbrc	r20, 1
     bf8:	10 c0       	rjmp	.+32     	; 0xc1a <SImage_ReceiveBlockHeader+0x78>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     bfa:	40 91 a9 00 	lds	r20, 0x00A9
     bfe:	40 64       	ori	r20, 0x40	; 64
     c00:	40 93 a9 00 	sts	0x00A9, r20
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     c04:	60 93 a7 00 	sts	0x00A7, r22

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     c08:	40 91 a9 00 	lds	r20, 0x00A9
     c0c:	4f 7b       	andi	r20, 0xBF	; 191
     c0e:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     c12:	40 91 a6 00 	lds	r20, 0x00A6
		Pipe_Freeze();
		Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
		Pipe_Unfreeze();

		/* Check if pipe stalled (command failed by device) */
		if (Pipe_IsStalled())
     c16:	41 ff       	sbrs	r20, 1
     c18:	0f c0       	rjmp	.+30     	; 0xc38 <SImage_ReceiveBlockHeader+0x96>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     c1a:	80 91 aa 00 	lds	r24, 0x00AA
     c1e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     c20:	90 91 aa 00 	lds	r25, 0x00AA
     c24:	90 73       	andi	r25, 0x30	; 48
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     c26:	90 31       	cpi	r25, 0x10	; 16
     c28:	11 f4       	brne	.+4      	; 0xc2e <SImage_ReceiveBlockHeader+0x8c>
     c2a:	90 e8       	ldi	r25, 0x80	; 128
     c2c:	01 c0       	rjmp	.+2      	; 0xc30 <SImage_ReceiveBlockHeader+0x8e>
     c2e:	90 e0       	ldi	r25, 0x00	; 0
		{
			/* Clear the stall condition on the IN pipe */
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
     c30:	89 2b       	or	r24, r25
     c32:	7e d6       	rcall	.+3324   	; 0x1930 <USB_Host_ClearEndpointStall>

			/* Return error code */
			return PIPE_RWSTREAM_PipeStalled;
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	08 95       	ret
		}

		/* Check to see if the device was disconnected, if so exit function */
		if (USB_HostState == HOST_STATE_Unattached)
     c38:	40 91 67 01 	lds	r20, 0x0167
     c3c:	41 30       	cpi	r20, 0x01	; 1
     c3e:	51 f1       	breq	.+84     	; 0xc94 <SImage_ReceiveBlockHeader+0xf2>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     c40:	40 91 a6 00 	lds	r20, 0x00A6
	/* Unfreeze the data IN pipe */
	Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Wait until data received on the IN pipe */
	while (!(Pipe_IsINReceived()))
     c44:	40 ff       	sbrs	r20, 0
     c46:	be cf       	rjmp	.-132    	; 0xbc4 <SImage_ReceiveBlockHeader+0x22>
		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
	}

	/* Load in the response from the attached device */
	Pipe_Read_Stream_LE(&PIMA_ReceivedBlock, PIMA_COMMAND_SIZE(0), NULL);
     c48:	85 e4       	ldi	r24, 0x45	; 69
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	6c e0       	ldi	r22, 0x0C	; 12
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	40 e0       	ldi	r20, 0x00	; 0
     c52:	50 e0       	ldi	r21, 0x00	; 0
     c54:	22 d4       	rcall	.+2116   	; 0x149a <Pipe_Read_Stream_LE>

	/* Check if the returned block type is a response block */
	if (PIMA_ReceivedBlock.Type == PIMA_CONTAINER_ResponseBlock)
     c56:	80 91 49 01 	lds	r24, 0x0149
     c5a:	90 91 4a 01 	lds	r25, 0x014A
     c5e:	83 30       	cpi	r24, 0x03	; 3
     c60:	91 05       	cpc	r25, r1
     c62:	79 f4       	brne	.+30     	; 0xc82 <SImage_ReceiveBlockHeader+0xe0>
	{
		/* Determine the size of the parameters in the block via the data length attribute */
		uint8_t ParamBytes = (PIMA_ReceivedBlock.DataLength - PIMA_COMMAND_SIZE(0));
     c64:	60 91 45 01 	lds	r22, 0x0145
     c68:	6c 50       	subi	r22, 0x0C	; 12

		/* Check if the device has returned any parameters */
		if (ParamBytes)
     c6a:	31 f0       	breq	.+12     	; 0xc78 <SImage_ReceiveBlockHeader+0xd6>
		{
			/* Read the PIMA parameters from the data IN pipe */
			Pipe_Read_Stream_LE(&PIMA_ReceivedBlock.Params, ParamBytes, NULL);
     c6c:	81 e5       	ldi	r24, 0x51	; 81
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	40 e0       	ldi	r20, 0x00	; 0
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	11 d4       	rcall	.+2082   	; 0x149a <Pipe_Read_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     c78:	80 91 a6 00 	lds	r24, 0x00A6
     c7c:	8e 77       	andi	r24, 0x7E	; 126
     c7e:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     c82:	80 91 a9 00 	lds	r24, 0x00A9
     c86:	80 64       	ori	r24, 0x40	; 64
     c88:	80 93 a9 00 	sts	0x00A9, r24
	}

	/* Freeze the IN pipe after use */
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	08 95       	ret
			PreviousFrameNumber = CurrentFrameNumber;
			TimeoutMSRem--;

			/* Check to see if the timeout period for the command has elapsed */
			if (!(TimeoutMSRem))
			  return PIPE_RWSTREAM_Timeout;
     c90:	83 e0       	ldi	r24, 0x03	; 3
     c92:	08 95       	ret
			return PIPE_RWSTREAM_PipeStalled;
		}

		/* Check to see if the device was disconnected, if so exit function */
		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
     c94:	82 e0       	ldi	r24, 0x02	; 2

	/* Freeze the IN pipe after use */
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
     c96:	08 95       	ret

00000c98 <SImage_ReadData>:
 *
 *  \return A value from the Pipe_Stream_RW_ErrorCodes_t enum
 */
uint8_t SImage_ReadData(void* const Buffer,
                        const uint16_t Bytes)
{
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     c9c:	21 e0       	ldi	r18, 0x01	; 1
     c9e:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ca2:	c9 ea       	ldi	r28, 0xA9	; 169
     ca4:	d0 e0       	ldi	r29, 0x00	; 0
     ca6:	28 81       	ld	r18, Y
     ca8:	2f 7b       	andi	r18, 0xBF	; 191
     caa:	28 83       	st	Y, r18
	/* Unfreeze the data IN pipe */
	Pipe_SelectPipe(SIMAGE_DATA_IN_PIPE);
	Pipe_Unfreeze();

	/* Read in the data into the buffer */
	ErrorCode = Pipe_Read_Stream_LE(Buffer, Bytes, NULL);
     cac:	40 e0       	ldi	r20, 0x00	; 0
     cae:	50 e0       	ldi	r21, 0x00	; 0
     cb0:	f4 d3       	rcall	.+2024   	; 0x149a <Pipe_Read_Stream_LE>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
     cb2:	98 81       	ld	r25, Y
     cb4:	90 64       	ori	r25, 0x40	; 64
     cb6:	98 83       	st	Y, r25

	/* Freeze the pipe again after use */
	Pipe_Freeze();

	return ErrorCode;
}
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	08 95       	ret

00000cbe <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     cbe:	80 91 9e 00 	lds	r24, 0x009E
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	81 70       	andi	r24, 0x01	; 1
     cc6:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     cc8:	20 91 a0 00 	lds	r18, 0x00A0
     ccc:	2d 7f       	andi	r18, 0xFD	; 253
     cce:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     cd2:	20 91 9e 00 	lds	r18, 0x009E
     cd6:	22 60       	ori	r18, 0x02	; 2
     cd8:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     cdc:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     ce0:	21 fd       	sbrc	r18, 1
     ce2:	fc cf       	rjmp	.-8      	; 0xcdc <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     ce4:	20 91 9e 00 	lds	r18, 0x009E
     ce8:	21 60       	ori	r18, 0x01	; 1
     cea:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     cee:	10 92 5d 01 	sts	0x015D, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     cf2:	20 91 a0 00 	lds	r18, 0x00A0
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	20 72       	andi	r18, 0x20	; 32
     cfa:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     cfc:	40 91 a0 00 	lds	r20, 0x00A0
     d00:	4f 7d       	andi	r20, 0xDF	; 223
     d02:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d06:	40 91 9f 00 	lds	r20, 0x009F
     d0a:	4f 7d       	andi	r20, 0xDF	; 223
     d0c:	40 93 9f 00 	sts	0x009F, r20
     d10:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     d12:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     d16:	55 ff       	sbrs	r21, 5
     d18:	0b c0       	rjmp	.+22     	; 0xd30 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d1a:	40 91 9f 00 	lds	r20, 0x009F
     d1e:	4f 7d       	andi	r20, 0xDF	; 223
     d20:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     d24:	40 91 9f 00 	lds	r20, 0x009F
     d28:	4d 7f       	andi	r20, 0xFD	; 253
     d2a:	40 93 9f 00 	sts	0x009F, r20
     d2e:	08 c0       	rjmp	.+16     	; 0xd40 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d30:	ef e9       	ldi	r30, 0x9F	; 159
     d32:	ff e0       	ldi	r31, 0x0F	; 15
     d34:	31 97       	sbiw	r30, 0x01	; 1
     d36:	f1 f7       	brne	.-4      	; 0xd34 <USB_Host_ResetDevice+0x76>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <USB_Host_ResetDevice+0x7c>
     d3a:	00 00       	nop
     d3c:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     d3e:	49 f7       	brne	.-46     	; 0xd12 <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     d40:	21 15       	cp	r18, r1
     d42:	31 05       	cpc	r19, r1
     d44:	29 f0       	breq	.+10     	; 0xd50 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     d46:	20 91 a0 00 	lds	r18, 0x00A0
     d4a:	20 62       	ori	r18, 0x20	; 32
     d4c:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     d50:	00 97       	sbiw	r24, 0x00	; 0
     d52:	29 f4       	brne	.+10     	; 0xd5e <USB_Host_ResetDevice+0xa0>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     d54:	80 91 9e 00 	lds	r24, 0x009E
     d58:	8e 7f       	andi	r24, 0xFE	; 254
     d5a:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     d5e:	80 91 a0 00 	lds	r24, 0x00A0
     d62:	82 60       	ori	r24, 0x02	; 2
     d64:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     d68:	08 95       	ret

00000d6a <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     d6a:	40 91 9e 00 	lds	r20, 0x009E
     d6e:	50 e0       	ldi	r21, 0x00	; 0
     d70:	41 70       	andi	r20, 0x01	; 1
     d72:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     d74:	20 91 a0 00 	lds	r18, 0x00A0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	20 72       	andi	r18, 0x20	; 32
     d7c:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     d7e:	90 91 a0 00 	lds	r25, 0x00A0
     d82:	9f 7d       	andi	r25, 0xDF	; 223
     d84:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     d88:	90 91 9f 00 	lds	r25, 0x009F
     d8c:	9f 7d       	andi	r25, 0xDF	; 223
     d8e:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     d92:	90 91 9e 00 	lds	r25, 0x009E
     d96:	91 60       	ori	r25, 0x01	; 1
     d98:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     d9c:	26 c0       	rjmp	.+76     	; 0xdea <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     d9e:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     da2:	95 ff       	sbrs	r25, 5
     da4:	06 c0       	rjmp	.+12     	; 0xdb2 <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     da6:	90 91 9f 00 	lds	r25, 0x009F
     daa:	9f 7d       	andi	r25, 0xDF	; 223
     dac:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     db0:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     db2:	90 91 67 01 	lds	r25, 0x0167
     db6:	91 30       	cpi	r25, 0x01	; 1
     db8:	d9 f0       	breq	.+54     	; 0xdf0 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     dba:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     dbe:	94 ff       	sbrs	r25, 4
     dc0:	09 c0       	rjmp	.+18     	; 0xdd4 <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     dc2:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     dc6:	80 91 a6 00 	lds	r24, 0x00A6
     dca:	8f 7e       	andi	r24, 0xEF	; 239
     dcc:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     dd0:	82 e0       	ldi	r24, 0x02	; 2

			break;
     dd2:	0f c0       	rjmp	.+30     	; 0xdf2 <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     dd4:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled() == true)
     dd8:	91 ff       	sbrs	r25, 1
     dda:	07 c0       	rjmp	.+14     	; 0xdea <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     ddc:	80 91 a6 00 	lds	r24, 0x00A6
     de0:	8d 7f       	andi	r24, 0xFD	; 253
     de2:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     de6:	83 e0       	ldi	r24, 0x03	; 3

			break;
     de8:	04 c0       	rjmp	.+8      	; 0xdf2 <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     dea:	88 23       	and	r24, r24
     dec:	c1 f6       	brne	.-80     	; 0xd9e <USB_Host_WaitMS+0x34>
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     df0:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     df2:	41 15       	cp	r20, r1
     df4:	51 05       	cpc	r21, r1
     df6:	29 f4       	brne	.+10     	; 0xe02 <USB_Host_WaitMS+0x98>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     df8:	90 91 9e 00 	lds	r25, 0x009E
     dfc:	9e 7f       	andi	r25, 0xFE	; 254
     dfe:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     e02:	21 15       	cp	r18, r1
     e04:	31 05       	cpc	r19, r1
     e06:	29 f0       	breq	.+10     	; 0xe12 <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     e08:	90 91 a0 00 	lds	r25, 0x00A0
     e0c:	90 62       	ori	r25, 0x20	; 32
     e0e:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     e12:	08 95       	ret

00000e14 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     e14:	ef 92       	push	r14
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	28 97       	sbiw	r28, 0x08	; 8
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     e2e:	80 91 67 01 	lds	r24, 0x0167
     e32:	85 30       	cpi	r24, 0x05	; 5
     e34:	09 f4       	brne	.+2      	; 0xe38 <USB_Host_ProcessNextHostState+0x24>
     e36:	99 c0       	rjmp	.+306    	; 0xf6a <USB_Host_ProcessNextHostState+0x156>
     e38:	86 30       	cpi	r24, 0x06	; 6
     e3a:	68 f4       	brcc	.+26     	; 0xe56 <USB_Host_ProcessNextHostState+0x42>
     e3c:	82 30       	cpi	r24, 0x02	; 2
     e3e:	c1 f1       	breq	.+112    	; 0xeb0 <USB_Host_ProcessNextHostState+0x9c>
     e40:	83 30       	cpi	r24, 0x03	; 3
     e42:	18 f4       	brcc	.+6      	; 0xe4a <USB_Host_ProcessNextHostState+0x36>
     e44:	88 23       	and	r24, r24
     e46:	a1 f0       	breq	.+40     	; 0xe70 <USB_Host_ProcessNextHostState+0x5c>
     e48:	08 c1       	rjmp	.+528    	; 0x105a <USB_Host_ProcessNextHostState+0x246>
     e4a:	83 30       	cpi	r24, 0x03	; 3
     e4c:	d9 f1       	breq	.+118    	; 0xec4 <USB_Host_ProcessNextHostState+0xb0>
     e4e:	84 30       	cpi	r24, 0x04	; 4
     e50:	09 f0       	breq	.+2      	; 0xe54 <USB_Host_ProcessNextHostState+0x40>
     e52:	03 c1       	rjmp	.+518    	; 0x105a <USB_Host_ProcessNextHostState+0x246>
     e54:	62 c0       	rjmp	.+196    	; 0xf1a <USB_Host_ProcessNextHostState+0x106>
     e56:	87 30       	cpi	r24, 0x07	; 7
     e58:	09 f4       	brne	.+2      	; 0xe5c <USB_Host_ProcessNextHostState+0x48>
     e5a:	a0 c0       	rjmp	.+320    	; 0xf9c <USB_Host_ProcessNextHostState+0x188>
     e5c:	87 30       	cpi	r24, 0x07	; 7
     e5e:	08 f4       	brcc	.+2      	; 0xe62 <USB_Host_ProcessNextHostState+0x4e>
     e60:	8f c0       	rjmp	.+286    	; 0xf80 <USB_Host_ProcessNextHostState+0x16c>
     e62:	88 30       	cpi	r24, 0x08	; 8
     e64:	09 f4       	brne	.+2      	; 0xe68 <USB_Host_ProcessNextHostState+0x54>
     e66:	b8 c0       	rjmp	.+368    	; 0xfd8 <USB_Host_ProcessNextHostState+0x1c4>
     e68:	89 30       	cpi	r24, 0x09	; 9
     e6a:	09 f0       	breq	.+2      	; 0xe6e <USB_Host_ProcessNextHostState+0x5a>
     e6c:	f6 c0       	rjmp	.+492    	; 0x105a <USB_Host_ProcessNextHostState+0x246>
     e6e:	dc c0       	rjmp	.+440    	; 0x1028 <USB_Host_ProcessNextHostState+0x214>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     e70:	00 91 13 01 	lds	r16, 0x0113
     e74:	10 91 14 01 	lds	r17, 0x0114
     e78:	01 15       	cp	r16, r1
     e7a:	11 05       	cpc	r17, r1
     e7c:	09 f4       	brne	.+2      	; 0xe80 <USB_Host_ProcessNextHostState+0x6c>
     e7e:	ed c0       	rjmp	.+474    	; 0x105a <USB_Host_ProcessNextHostState+0x246>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	73 df       	rcall	.-282    	; 0xd6a <USB_Host_WaitMS>
     e84:	68 2f       	mov	r22, r24
     e86:	88 23       	and	r24, r24
     e88:	31 f0       	breq	.+12     	; 0xe96 <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     e8a:	80 91 12 01 	lds	r24, 0x0112
     e8e:	80 93 67 01 	sts	0x0167, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     e92:	81 e0       	ldi	r24, 0x01	; 1
					break;
     e94:	de c0       	rjmp	.+444    	; 0x1052 <USB_Host_ProcessNextHostState+0x23e>
				}

				if (!(--WaitMSRemaining))
     e96:	01 50       	subi	r16, 0x01	; 1
     e98:	10 40       	sbci	r17, 0x00	; 0
     e9a:	10 93 14 01 	sts	0x0114, r17
     e9e:	00 93 13 01 	sts	0x0113, r16
     ea2:	01 15       	cp	r16, r1
     ea4:	11 05       	cpc	r17, r1
     ea6:	09 f0       	breq	.+2      	; 0xeaa <USB_Host_ProcessNextHostState+0x96>
     ea8:	d8 c0       	rjmp	.+432    	; 0x105a <USB_Host_ProcessNextHostState+0x246>
				  USB_HostState = PostWaitState;
     eaa:	80 91 12 01 	lds	r24, 0x0112
     eae:	07 c0       	rjmp	.+14     	; 0xebe <USB_Host_ProcessNextHostState+0xaa>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     eb0:	88 ee       	ldi	r24, 0xE8	; 232
     eb2:	93 e0       	ldi	r25, 0x03	; 3
     eb4:	90 93 14 01 	sts	0x0114, r25
     eb8:	80 93 13 01 	sts	0x0113, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     ebc:	83 e0       	ldi	r24, 0x03	; 3
     ebe:	80 93 67 01 	sts	0x0167, r24
			break;
     ec2:	cb c0       	rjmp	.+406    	; 0x105a <USB_Host_ProcessNextHostState+0x246>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     ec4:	80 91 13 01 	lds	r24, 0x0113
     ec8:	90 91 14 01 	lds	r25, 0x0114
     ecc:	9c 01       	movw	r18, r24
     ece:	21 50       	subi	r18, 0x01	; 1
     ed0:	30 40       	sbci	r19, 0x00	; 0
     ed2:	30 93 14 01 	sts	0x0114, r19
     ed6:	20 93 13 01 	sts	0x0113, r18
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	39 f0       	breq	.+14     	; 0xeec <USB_Host_ProcessNextHostState+0xd8>
     ede:	8f e9       	ldi	r24, 0x9F	; 159
     ee0:	9f e0       	ldi	r25, 0x0F	; 15
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <USB_Host_ProcessNextHostState+0xce>
     ee6:	00 c0       	rjmp	.+0      	; 0xee8 <USB_Host_ProcessNextHostState+0xd4>
     ee8:	00 00       	nop
     eea:	b7 c0       	rjmp	.+366    	; 0x105a <USB_Host_ProcessNextHostState+0x246>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     eec:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     eee:	80 91 d8 00 	lds	r24, 0x00D8
     ef2:	80 61       	ori	r24, 0x10	; 16
     ef4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     ef8:	80 91 dd 00 	lds	r24, 0x00DD
     efc:	8b 7f       	andi	r24, 0xFB	; 251
     efe:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     f02:	80 91 d7 00 	lds	r24, 0x00D7
     f06:	80 61       	ori	r24, 0x10	; 16
     f08:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     f0c:	80 91 dd 00 	lds	r24, 0x00DD
     f10:	82 60       	ori	r24, 0x02	; 2
     f12:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     f16:	84 e0       	ldi	r24, 0x04	; 4
     f18:	d2 cf       	rjmp	.-92     	; 0xebe <USB_Host_ProcessNextHostState+0xaa>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     f1a:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     f1e:	80 ff       	sbrs	r24, 0
     f20:	9c c0       	rjmp	.+312    	; 0x105a <USB_Host_ProcessNextHostState+0x246>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     f22:	80 91 9f 00 	lds	r24, 0x009F
     f26:	8e 7f       	andi	r24, 0xFE	; 254
     f28:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     f2c:	80 91 9f 00 	lds	r24, 0x009F
     f30:	8d 7f       	andi	r24, 0xFD	; 253
     f32:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     f36:	80 91 df 00 	lds	r24, 0x00DF
     f3a:	8d 7f       	andi	r24, 0xFD	; 253
     f3c:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     f40:	80 91 de 00 	lds	r24, 0x00DE
     f44:	82 60       	ori	r24, 0x02	; 2
     f46:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     f4a:	80 91 9e 00 	lds	r24, 0x009E
     f4e:	81 60       	ori	r24, 0x01	; 1
     f50:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     f54:	eb d0       	rcall	.+470    	; 0x112c <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     f56:	10 92 67 01 	sts	0x0167, r1
     f5a:	84 e6       	ldi	r24, 0x64	; 100
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	90 93 14 01 	sts	0x0114, r25
     f62:	80 93 13 01 	sts	0x0113, r24
     f66:	85 e0       	ldi	r24, 0x05	; 5
     f68:	5c c0       	rjmp	.+184    	; 0x1022 <USB_Host_ProcessNextHostState+0x20e>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     f6a:	a9 de       	rcall	.-686    	; 0xcbe <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     f6c:	10 92 67 01 	sts	0x0167, r1
     f70:	88 ec       	ldi	r24, 0xC8	; 200
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	90 93 14 01 	sts	0x0114, r25
     f78:	80 93 13 01 	sts	0x0113, r24
     f7c:	86 e0       	ldi	r24, 0x06	; 6
     f7e:	51 c0       	rjmp	.+162    	; 0x1022 <USB_Host_ProcessNextHostState+0x20e>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	40 e0       	ldi	r20, 0x00	; 0
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	00 e4       	ldi	r16, 0x40	; 64
     f8a:	10 e0       	ldi	r17, 0x00	; 0
     f8c:	ee 24       	eor	r14, r14
     f8e:	71 d0       	rcall	.+226    	; 0x1072 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     f90:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     f94:	87 ff       	sbrs	r24, 7
     f96:	59 c0       	rjmp	.+178    	; 0x104a <USB_Host_ProcessNextHostState+0x236>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     f98:	87 e0       	ldi	r24, 0x07	; 7
     f9a:	91 cf       	rjmp	.-222    	; 0xebe <USB_Host_ProcessNextHostState+0xaa>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     f9c:	af e5       	ldi	r26, 0x5F	; 95
     f9e:	b1 e0       	ldi	r27, 0x01	; 1
     fa0:	e8 e0       	ldi	r30, 0x08	; 8
     fa2:	f1 e0       	ldi	r31, 0x01	; 1
     fa4:	88 e0       	ldi	r24, 0x08	; 8
     fa6:	01 90       	ld	r0, Z+
     fa8:	0d 92       	st	X+, r0
     faa:	81 50       	subi	r24, 0x01	; 1
     fac:	e1 f7       	brne	.-8      	; 0xfa6 <USB_Host_ProcessNextHostState+0x192>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     fae:	ce 01       	movw	r24, r28
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	9a d3       	rcall	.+1844   	; 0x16e8 <USB_Host_SendControlRequest>
     fb4:	68 2f       	mov	r22, r24
     fb6:	88 23       	and	r24, r24
     fb8:	09 f0       	breq	.+2      	; 0xfbc <USB_Host_ProcessNextHostState+0x1a8>
     fba:	4a c0       	rjmp	.+148    	; 0x1050 <USB_Host_ProcessNextHostState+0x23c>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     fbc:	88 85       	ldd	r24, Y+8	; 0x08
     fbe:	80 93 10 01 	sts	0x0110, r24

			USB_Host_ResetDevice();
     fc2:	7d de       	rcall	.-774    	; 0xcbe <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     fc4:	10 92 67 01 	sts	0x0167, r1
     fc8:	88 ec       	ldi	r24, 0xC8	; 200
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	90 93 14 01 	sts	0x0114, r25
     fd0:	80 93 13 01 	sts	0x0113, r24
     fd4:	88 e0       	ldi	r24, 0x08	; 8
     fd6:	25 c0       	rjmp	.+74     	; 0x1022 <USB_Host_ProcessNextHostState+0x20e>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     fd8:	00 91 10 01 	lds	r16, 0x0110
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	60 e0       	ldi	r22, 0x00	; 0
     fe0:	40 e0       	ldi	r20, 0x00	; 0
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	10 e0       	ldi	r17, 0x00	; 0
     fe6:	ee 24       	eor	r14, r14
     fe8:	44 d0       	rcall	.+136    	; 0x1072 <Pipe_ConfigurePipe>
     fea:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     fee:	87 ff       	sbrs	r24, 7
     ff0:	2c c0       	rjmp	.+88     	; 0x104a <USB_Host_ProcessNextHostState+0x236>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     ff2:	af e5       	ldi	r26, 0x5F	; 95
     ff4:	b1 e0       	ldi	r27, 0x01	; 1
     ff6:	e0 e0       	ldi	r30, 0x00	; 0
     ff8:	f1 e0       	ldi	r31, 0x01	; 1
     ffa:	88 e0       	ldi	r24, 0x08	; 8
     ffc:	01 90       	ld	r0, Z+
     ffe:	0d 92       	st	X+, r0
    1000:	81 50       	subi	r24, 0x01	; 1
    1002:	e1 f7       	brne	.-8      	; 0xffc <USB_Host_ProcessNextHostState+0x1e8>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	6f d3       	rcall	.+1758   	; 0x16e8 <USB_Host_SendControlRequest>
    100a:	68 2f       	mov	r22, r24
    100c:	88 23       	and	r24, r24
    100e:	01 f5       	brne	.+64     	; 0x1050 <USB_Host_ProcessNextHostState+0x23c>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    1010:	10 92 67 01 	sts	0x0167, r1
    1014:	84 e6       	ldi	r24, 0x64	; 100
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	90 93 14 01 	sts	0x0114, r25
    101c:	80 93 13 01 	sts	0x0113, r24
    1020:	89 e0       	ldi	r24, 0x09	; 9
    1022:	80 93 12 01 	sts	0x0112, r24
			break;
    1026:	19 c0       	rjmp	.+50     	; 0x105a <USB_Host_ProcessNextHostState+0x246>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    102e:	8a e0       	ldi	r24, 0x0A	; 10
    1030:	80 93 67 01 	sts	0x0167, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
    1034:	fa d9       	rcall	.-3084   	; 0x42a <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
    1036:	11 c0       	rjmp	.+34     	; 0x105a <USB_Host_ProcessNextHostState+0x246>
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    1038:	58 da       	rcall	.-2896   	; 0x4ea <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    103a:	80 91 dd 00 	lds	r24, 0x00DD
    103e:	81 60       	ori	r24, 0x01	; 1
    1040:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    1044:	ee d9       	rcall	.-3108   	; 0x422 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1046:	cd d0       	rcall	.+410    	; 0x11e2 <USB_ResetInterface>
    1048:	08 c0       	rjmp	.+16     	; 0x105a <USB_Host_ProcessNextHostState+0x246>
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    104a:	60 e0       	ldi	r22, 0x00	; 0
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    104c:	84 e0       	ldi	r24, 0x04	; 4
    104e:	01 c0       	rjmp	.+2      	; 0x1052 <USB_Host_ProcessNextHostState+0x23e>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
    1050:	83 e0       	ldi	r24, 0x03	; 3

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    1052:	90 91 67 01 	lds	r25, 0x0167
    1056:	91 30       	cpi	r25, 0x01	; 1
    1058:	79 f7       	brne	.-34     	; 0x1038 <USB_Host_ProcessNextHostState+0x224>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
    105a:	28 96       	adiw	r28, 0x08	; 8
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ef 90       	pop	r14
    1070:	08 95       	ret

00001072 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    1072:	ef 92       	push	r14
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	5e 2d       	mov	r21, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
    107a:	62 95       	swap	r22
    107c:	66 0f       	add	r22, r22
    107e:	66 0f       	add	r22, r22
    1080:	60 7c       	andi	r22, 0xC0	; 192
    1082:	64 2b       	or	r22, r20
    1084:	2f 70       	andi	r18, 0x0F	; 15
    1086:	62 2b       	or	r22, r18

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    1088:	98 2f       	mov	r25, r24
		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    108a:	52 60       	ori	r21, 0x02	; 2

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    108c:	43 c0       	rjmp	.+134    	; 0x1114 <Pipe_ConfigurePipe+0xa2>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    108e:	90 93 a7 00 	sts	0x00A7, r25
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
    1092:	98 17       	cp	r25, r24
    1094:	a1 f4       	brne	.+40     	; 0x10be <Pipe_ConfigurePipe+0x4c>
    1096:	28 e0       	ldi	r18, 0x08	; 8
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	03 c0       	rjmp	.+6      	; 0x10a4 <Pipe_ConfigurePipe+0x32>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    109e:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    10a0:	22 0f       	add	r18, r18
    10a2:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    10a4:	20 17       	cp	r18, r16
    10a6:	31 07       	cpc	r19, r17
    10a8:	10 f4       	brcc	.+4      	; 0x10ae <Pipe_ConfigurePipe+0x3c>
    10aa:	45 30       	cpi	r20, 0x05	; 5
    10ac:	c1 f7       	brne	.-16     	; 0x109e <Pipe_ConfigurePipe+0x2c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    10ae:	24 2f       	mov	r18, r20
    10b0:	22 95       	swap	r18
    10b2:	20 7f       	andi	r18, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    10b4:	25 2b       	or	r18, r21

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
    10b6:	e6 2f       	mov	r30, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    10b8:	40 e0       	ldi	r20, 0x00	; 0
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	08 c0       	rjmp	.+16     	; 0x10ce <Pipe_ConfigurePipe+0x5c>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    10be:	e0 91 aa 00 	lds	r30, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    10c2:	20 91 ab 00 	lds	r18, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    10c6:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
    10ca:	40 91 ae 00 	lds	r20, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    10ce:	21 ff       	sbrs	r18, 1
    10d0:	20 c0       	rjmp	.+64     	; 0x1112 <Pipe_ConfigurePipe+0xa0>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    10d2:	30 91 a9 00 	lds	r19, 0x00A9
    10d6:	3e 7f       	andi	r19, 0xFE	; 254
    10d8:	30 93 a9 00 	sts	0x00A9, r19
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    10dc:	30 91 ab 00 	lds	r19, 0x00AB
    10e0:	3d 7f       	andi	r19, 0xFD	; 253
    10e2:	30 93 ab 00 	sts	0x00AB, r19
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    10e6:	30 91 a9 00 	lds	r19, 0x00A9
    10ea:	31 60       	ori	r19, 0x01	; 1
    10ec:	30 93 a9 00 	sts	0x00A9, r19

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    10f0:	e0 93 aa 00 	sts	0x00AA, r30
		UPCFG1X = UPCFG1XTemp;
    10f4:	20 93 ab 00 	sts	0x00AB, r18
		UPCFG2X = UPCFG2XTemp;
    10f8:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
    10fc:	40 93 ae 00 	sts	0x00AE, r20

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    1100:	20 91 a9 00 	lds	r18, 0x00A9
    1104:	20 62       	ori	r18, 0x20	; 32
    1106:	20 93 a9 00 	sts	0x00A9, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    110a:	20 91 ac 00 	lds	r18, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
    110e:	27 ff       	sbrs	r18, 7
    1110:	08 c0       	rjmp	.+16     	; 0x1122 <Pipe_ConfigurePipe+0xb0>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    1112:	9f 5f       	subi	r25, 0xFF	; 255
    1114:	97 30       	cpi	r25, 0x07	; 7
    1116:	08 f4       	brcc	.+2      	; 0x111a <Pipe_ConfigurePipe+0xa8>
    1118:	ba cf       	rjmp	.-140    	; 0x108e <Pipe_ConfigurePipe+0x1c>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    111a:	80 93 a7 00 	sts	0x00A7, r24
		if (!(Pipe_IsConfigured()))
		  return false;		
	}
		
	Pipe_SelectPipe(Number);	
	return true;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	01 c0       	rjmp	.+2      	; 0x1124 <Pipe_ConfigurePipe+0xb2>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
		  return false;		
    1122:	80 e0       	ldi	r24, 0x00	; 0
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	ef 90       	pop	r14
    112a:	08 95       	ret

0000112c <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    112c:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1136:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    113a:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    113e:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1142:	90 91 a9 00 	lds	r25, 0x00A9
    1146:	9e 7f       	andi	r25, 0xFE	; 254
    1148:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    114c:	8f 5f       	subi	r24, 0xFF	; 255
    114e:	87 30       	cpi	r24, 0x07	; 7
    1150:	81 f7       	brne	.-32     	; 0x1132 <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    1152:	08 95       	ret

00001154 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1154:	80 91 a2 00 	lds	r24, 0x00A2
    1158:	90 91 a3 00 	lds	r25, 0x00A3
}

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    115c:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    115e:	20 91 aa 00 	lds	r18, 0x00AA
    1162:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1164:	20 31       	cpi	r18, 0x10	; 16
    1166:	29 f4       	brne	.+10     	; 0x1172 <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1168:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    116c:	20 ff       	sbrs	r18, 0
    116e:	05 c0       	rjmp	.+10     	; 0x117a <Pipe_WaitUntilReady+0x26>
    1170:	18 c0       	rjmp	.+48     	; 0x11a2 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1172:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    1176:	22 fd       	sbrc	r18, 2
    1178:	14 c0       	rjmp	.+40     	; 0x11a2 <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    117a:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    117e:	21 fd       	sbrc	r18, 1
    1180:	12 c0       	rjmp	.+36     	; 0x11a6 <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    1182:	20 91 67 01 	lds	r18, 0x0167
    1186:	21 30       	cpi	r18, 0x01	; 1
    1188:	81 f0       	breq	.+32     	; 0x11aa <Pipe_WaitUntilReady+0x56>
    118a:	20 91 a2 00 	lds	r18, 0x00A2
    118e:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1192:	28 17       	cp	r18, r24
    1194:	39 07       	cpc	r19, r25
    1196:	19 f3       	breq	.-58     	; 0x115e <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1198:	44 23       	and	r20, r20
    119a:	49 f0       	breq	.+18     	; 0x11ae <Pipe_WaitUntilReady+0x5a>
    119c:	41 50       	subi	r20, 0x01	; 1
    119e:	c9 01       	movw	r24, r18
    11a0:	de cf       	rjmp	.-68     	; 0x115e <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    11ae:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    11b0:	08 95       	ret

000011b2 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    11b2:	70 d0       	rcall	.+224    	; 0x1294 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    11b4:	77 d0       	rcall	.+238    	; 0x12a4 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    11b6:	e0 ee       	ldi	r30, 0xE0	; 224
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	81 60       	ori	r24, 0x01	; 1
    11be:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
    11c0:	e8 ed       	ldi	r30, 0xD8	; 216
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	8f 77       	andi	r24, 0x7F	; 127
    11c8:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    11ca:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
    11cc:	a7 ed       	ldi	r26, 0xD7	; 215
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	8c 91       	ld	r24, X
    11d2:	8e 7f       	andi	r24, 0xFE	; 254
    11d4:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
    11d6:	80 81       	ld	r24, Z
    11d8:	8f 7e       	andi	r24, 0xEF	; 239
    11da:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    11dc:	10 92 5e 01 	sts	0x015E, r1
}
    11e0:	08 95       	ret

000011e2 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    11e2:	58 d0       	rcall	.+176    	; 0x1294 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    11e4:	5f d0       	rcall	.+190    	; 0x12a4 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    11e6:	80 91 d8 00 	lds	r24, 0x00D8
    11ea:	8f 77       	andi	r24, 0x7F	; 127
    11ec:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    11f0:	80 91 d8 00 	lds	r24, 0x00D8
    11f4:	80 68       	ori	r24, 0x80	; 128
    11f6:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    11fa:	80 91 d8 00 	lds	r24, 0x00D8
    11fe:	8f 7d       	andi	r24, 0xDF	; 223
    1200:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    1204:	80 91 d7 00 	lds	r24, 0x00D7
    1208:	8f 77       	andi	r24, 0x7F	; 127
    120a:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    120e:	84 e1       	ldi	r24, 0x14	; 20
    1210:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1212:	86 e1       	ldi	r24, 0x16	; 22
    1214:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
    1216:	09 b4       	in	r0, 0x29	; 41
    1218:	00 fe       	sbrs	r0, 0
    121a:	fd cf       	rjmp	.-6      	; 0x1216 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	80 93 67 01 	sts	0x0167, r24
	USB_Host_ConfigurationNumber = 0;
    1222:	10 92 5d 01 	sts	0x015D, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1226:	80 e4       	ldi	r24, 0x40	; 64
    1228:	80 93 10 01 	sts	0x0110, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    122c:	80 91 d8 00 	lds	r24, 0x00D8
    1230:	80 64       	ori	r24, 0x40	; 64
    1232:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1236:	80 91 dd 00 	lds	r24, 0x00DD
    123a:	81 60       	ori	r24, 0x01	; 1
    123c:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    1240:	80 91 dd 00 	lds	r24, 0x00DD
    1244:	84 60       	ori	r24, 0x04	; 4
    1246:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    124a:	80 91 d7 00 	lds	r24, 0x00D7
    124e:	8f 7e       	andi	r24, 0xEF	; 239
    1250:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    1254:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
    1256:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
    1258:	80 91 de 00 	lds	r24, 0x00DE
    125c:	81 60       	ori	r24, 0x01	; 1
    125e:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    1262:	80 91 de 00 	lds	r24, 0x00DE
    1266:	84 60       	ori	r24, 0x04	; 4
    1268:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    126c:	80 91 e0 00 	lds	r24, 0x00E0
    1270:	8e 7f       	andi	r24, 0xFE	; 254
    1272:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    1276:	80 91 d8 00 	lds	r24, 0x00D8
    127a:	80 61       	ori	r24, 0x10	; 16
    127c:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1280:	08 95       	ret

00001282 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    1282:	e7 ed       	ldi	r30, 0xD7	; 215
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	81 60       	ori	r24, 0x01	; 1
    128a:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	80 93 5e 01 	sts	0x015E, r24

	USB_ResetInterface();
}
    1292:	a7 cf       	rjmp	.-178    	; 0x11e2 <USB_ResetInterface>

00001294 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1294:	e8 ed       	ldi	r30, 0xD8	; 216
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	8c 7f       	andi	r24, 0xFC	; 252
    129c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    129e:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    12a2:	08 95       	ret

000012a4 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    12a4:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    12a8:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    12ac:	08 95       	ret

000012ae <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    12ae:	1f 92       	push	r1
    12b0:	0f 92       	push	r0
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	0f 92       	push	r0
    12b6:	0b b6       	in	r0, 0x3b	; 59
    12b8:	0f 92       	push	r0
    12ba:	11 24       	eor	r1, r1
    12bc:	2f 93       	push	r18
    12be:	3f 93       	push	r19
    12c0:	4f 93       	push	r20
    12c2:	5f 93       	push	r21
    12c4:	6f 93       	push	r22
    12c6:	7f 93       	push	r23
    12c8:	8f 93       	push	r24
    12ca:	9f 93       	push	r25
    12cc:	af 93       	push	r26
    12ce:	bf 93       	push	r27
    12d0:	ef 93       	push	r30
    12d2:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    12d4:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    12d8:	85 ff       	sbrs	r24, 5
    12da:	0a c0       	rjmp	.+20     	; 0x12f0 <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    12dc:	80 91 a0 00 	lds	r24, 0x00A0
    12e0:	85 ff       	sbrs	r24, 5
    12e2:	06 c0       	rjmp	.+12     	; 0x12f0 <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    12e4:	80 91 9f 00 	lds	r24, 0x009F
    12e8:	8f 7d       	andi	r24, 0xDF	; 223
    12ea:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    12ee:	d2 d1       	rcall	.+932    	; 0x1694 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    12f0:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    12f4:	81 ff       	sbrs	r24, 1
    12f6:	15 c0       	rjmp	.+42     	; 0x1322 <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    12f8:	80 91 a0 00 	lds	r24, 0x00A0
    12fc:	81 ff       	sbrs	r24, 1
    12fe:	11 c0       	rjmp	.+34     	; 0x1322 <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1300:	80 91 9f 00 	lds	r24, 0x009F
    1304:	8d 7f       	andi	r24, 0xFD	; 253
    1306:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    130a:	80 91 9f 00 	lds	r24, 0x009F
    130e:	8e 7f       	andi	r24, 0xFE	; 254
    1310:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1314:	80 91 a0 00 	lds	r24, 0x00A0
    1318:	8d 7f       	andi	r24, 0xFD	; 253
    131a:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    131e:	81 d8       	rcall	.-3838   	; 0x422 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    1320:	60 df       	rcall	.-320    	; 0x11e2 <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    1322:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1326:	81 ff       	sbrs	r24, 1
    1328:	15 c0       	rjmp	.+42     	; 0x1354 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    132a:	80 91 de 00 	lds	r24, 0x00DE
    132e:	81 ff       	sbrs	r24, 1
    1330:	11 c0       	rjmp	.+34     	; 0x1354 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1332:	80 91 df 00 	lds	r24, 0x00DF
    1336:	8d 7f       	andi	r24, 0xFD	; 253
    1338:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    133c:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    133e:	80 91 dd 00 	lds	r24, 0x00DD
    1342:	81 60       	ori	r24, 0x01	; 1
    1344:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	b1 d8       	rcall	.-3742   	; 0x4ae <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    134c:	6a d8       	rcall	.-3884   	; 0x422 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	80 93 67 01 	sts	0x0167, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1354:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1358:	80 ff       	sbrs	r24, 0
    135a:	17 c0       	rjmp	.+46     	; 0x138a <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    135c:	80 91 de 00 	lds	r24, 0x00DE
    1360:	80 ff       	sbrs	r24, 0
    1362:	13 c0       	rjmp	.+38     	; 0x138a <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1364:	80 91 df 00 	lds	r24, 0x00DF
    1368:	8e 7f       	andi	r24, 0xFE	; 254
    136a:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
    136e:	80 91 de 00 	lds	r24, 0x00DE
    1372:	8e 7f       	andi	r24, 0xFE	; 254
    1374:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    1378:	50 d8       	rcall	.-3936   	; 0x41a <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    137a:	80 91 a0 00 	lds	r24, 0x00A0
    137e:	82 60       	ori	r24, 0x02	; 2
    1380:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    1384:	82 e0       	ldi	r24, 0x02	; 2
    1386:	80 93 67 01 	sts	0x0167, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    138a:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    138e:	82 ff       	sbrs	r24, 2
    1390:	0e c0       	rjmp	.+28     	; 0x13ae <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1392:	80 91 de 00 	lds	r24, 0x00DE
    1396:	82 ff       	sbrs	r24, 2
    1398:	0a c0       	rjmp	.+20     	; 0x13ae <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    139a:	80 91 df 00 	lds	r24, 0x00DF
    139e:	8b 7f       	andi	r24, 0xFB	; 251
    13a0:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    13a4:	82 e0       	ldi	r24, 0x02	; 2
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	a0 d8       	rcall	.-3776   	; 0x4ea <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    13aa:	3b d8       	rcall	.-3978   	; 0x422 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    13ac:	1a df       	rcall	.-460    	; 0x11e2 <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    13ae:	ff 91       	pop	r31
    13b0:	ef 91       	pop	r30
    13b2:	bf 91       	pop	r27
    13b4:	af 91       	pop	r26
    13b6:	9f 91       	pop	r25
    13b8:	8f 91       	pop	r24
    13ba:	7f 91       	pop	r23
    13bc:	6f 91       	pop	r22
    13be:	5f 91       	pop	r21
    13c0:	4f 91       	pop	r20
    13c2:	3f 91       	pop	r19
    13c4:	2f 91       	pop	r18
    13c6:	0f 90       	pop	r0
    13c8:	0b be       	out	0x3b, r0	; 59
    13ca:	0f 90       	pop	r0
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	0f 90       	pop	r0
    13d0:	1f 90       	pop	r1
    13d2:	18 95       	reti

000013d4 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    13d4:	8f 92       	push	r8
    13d6:	9f 92       	push	r9
    13d8:	bf 92       	push	r11
    13da:	cf 92       	push	r12
    13dc:	df 92       	push	r13
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	0f 92       	push	r0
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	e8 2e       	mov	r14, r24
    13f2:	4b 01       	movw	r8, r22
    13f4:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    13f6:	80 91 aa 00 	lds	r24, 0x00AA
    13fa:	8f 7c       	andi	r24, 0xCF	; 207
    13fc:	80 62       	ori	r24, 0x20	; 32
    13fe:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1402:	99 83       	std	Y+1, r25	; 0x01
    1404:	a7 de       	rcall	.-690    	; 0x1154 <Pipe_WaitUntilReady>
    1406:	b8 2e       	mov	r11, r24
    1408:	99 81       	ldd	r25, Y+1	; 0x01
    140a:	88 23       	and	r24, r24
    140c:	c1 f5       	brne	.+112    	; 0x147e <Pipe_Write_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    140e:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1410:	01 15       	cp	r16, r1
    1412:	11 05       	cpc	r17, r1
    1414:	39 f0       	breq	.+14     	; 0x1424 <Pipe_Write_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
    1416:	f8 01       	movw	r30, r16
    1418:	20 81       	ld	r18, Z
    141a:	31 81       	ldd	r19, Z+1	; 0x01
    141c:	82 1a       	sub	r8, r18
    141e:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1420:	e2 0e       	add	r14, r18
    1422:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1424:	cc 24       	eor	r12, r12
    1426:	dd 24       	eor	r13, r13
    1428:	25 c0       	rjmp	.+74     	; 0x1474 <Pipe_Write_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    142a:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    142e:	85 fd       	sbrc	r24, 5
    1430:	16 c0       	rjmp	.+44     	; 0x145e <Pipe_Write_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1432:	80 91 a6 00 	lds	r24, 0x00A6
    1436:	8b 77       	andi	r24, 0x7B	; 123
    1438:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    143c:	01 15       	cp	r16, r1
    143e:	11 05       	cpc	r17, r1
    1440:	51 f0       	breq	.+20     	; 0x1456 <Pipe_Write_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
    1442:	f8 01       	movw	r30, r16
    1444:	80 81       	ld	r24, Z
    1446:	91 81       	ldd	r25, Z+1	; 0x01
    1448:	8c 0d       	add	r24, r12
    144a:	9d 1d       	adc	r25, r13
    144c:	91 83       	std	Z+1, r25	; 0x01
    144e:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
    1450:	24 e0       	ldi	r18, 0x04	; 4
    1452:	b2 2e       	mov	r11, r18
    1454:	14 c0       	rjmp	.+40     	; 0x147e <Pipe_Write_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1456:	7e de       	rcall	.-772    	; 0x1154 <Pipe_WaitUntilReady>
    1458:	88 23       	and	r24, r24
    145a:	61 f0       	breq	.+24     	; 0x1474 <Pipe_Write_Stream_LE+0xa0>
    145c:	0f c0       	rjmp	.+30     	; 0x147c <Pipe_Write_Stream_LE+0xa8>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    145e:	f7 01       	movw	r30, r14
    1460:	81 91       	ld	r24, Z+
    1462:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1464:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1468:	08 94       	sec
    146a:	81 08       	sbc	r8, r1
    146c:	91 08       	sbc	r9, r1
			BytesInTransfer++;
    146e:	08 94       	sec
    1470:	c1 1c       	adc	r12, r1
    1472:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    1474:	81 14       	cp	r8, r1
    1476:	91 04       	cpc	r9, r1
    1478:	c1 f6       	brne	.-80     	; 0x142a <Pipe_Write_Stream_LE+0x56>
    147a:	01 c0       	rjmp	.+2      	; 0x147e <Pipe_Write_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    147c:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    147e:	8b 2d       	mov	r24, r11
    1480:	0f 90       	pop	r0
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	1f 91       	pop	r17
    1488:	0f 91       	pop	r16
    148a:	ff 90       	pop	r15
    148c:	ef 90       	pop	r14
    148e:	df 90       	pop	r13
    1490:	cf 90       	pop	r12
    1492:	bf 90       	pop	r11
    1494:	9f 90       	pop	r9
    1496:	8f 90       	pop	r8
    1498:	08 95       	ret

0000149a <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    149a:	8f 92       	push	r8
    149c:	9f 92       	push	r9
    149e:	bf 92       	push	r11
    14a0:	cf 92       	push	r12
    14a2:	df 92       	push	r13
    14a4:	ef 92       	push	r14
    14a6:	ff 92       	push	r15
    14a8:	0f 93       	push	r16
    14aa:	1f 93       	push	r17
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	0f 92       	push	r0
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	e8 2e       	mov	r14, r24
    14b8:	4b 01       	movw	r8, r22
    14ba:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    14bc:	80 91 aa 00 	lds	r24, 0x00AA
    14c0:	8f 7c       	andi	r24, 0xCF	; 207
    14c2:	80 61       	ori	r24, 0x10	; 16
    14c4:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    14c8:	99 83       	std	Y+1, r25	; 0x01
    14ca:	44 de       	rcall	.-888    	; 0x1154 <Pipe_WaitUntilReady>
    14cc:	b8 2e       	mov	r11, r24
    14ce:	99 81       	ldd	r25, Y+1	; 0x01
    14d0:	88 23       	and	r24, r24
    14d2:	c1 f5       	brne	.+112    	; 0x1544 <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    14d4:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    14d6:	01 15       	cp	r16, r1
    14d8:	11 05       	cpc	r17, r1
    14da:	39 f0       	breq	.+14     	; 0x14ea <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
    14dc:	f8 01       	movw	r30, r16
    14de:	20 81       	ld	r18, Z
    14e0:	31 81       	ldd	r19, Z+1	; 0x01
    14e2:	82 1a       	sub	r8, r18
    14e4:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    14e6:	e2 0e       	add	r14, r18
    14e8:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    14ea:	cc 24       	eor	r12, r12
    14ec:	dd 24       	eor	r13, r13
    14ee:	25 c0       	rjmp	.+74     	; 0x153a <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    14f0:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    14f4:	85 fd       	sbrc	r24, 5
    14f6:	16 c0       	rjmp	.+44     	; 0x1524 <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    14f8:	80 91 a6 00 	lds	r24, 0x00A6
    14fc:	8e 77       	andi	r24, 0x7E	; 126
    14fe:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1502:	01 15       	cp	r16, r1
    1504:	11 05       	cpc	r17, r1
    1506:	51 f0       	breq	.+20     	; 0x151c <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
    1508:	f8 01       	movw	r30, r16
    150a:	80 81       	ld	r24, Z
    150c:	91 81       	ldd	r25, Z+1	; 0x01
    150e:	8c 0d       	add	r24, r12
    1510:	9d 1d       	adc	r25, r13
    1512:	91 83       	std	Z+1, r25	; 0x01
    1514:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
    1516:	44 e0       	ldi	r20, 0x04	; 4
    1518:	b4 2e       	mov	r11, r20
    151a:	14 c0       	rjmp	.+40     	; 0x1544 <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    151c:	1b de       	rcall	.-970    	; 0x1154 <Pipe_WaitUntilReady>
    151e:	88 23       	and	r24, r24
    1520:	61 f0       	breq	.+24     	; 0x153a <Pipe_Read_Stream_LE+0xa0>
    1522:	0f c0       	rjmp	.+30     	; 0x1542 <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1524:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1528:	f7 01       	movw	r30, r14
    152a:	81 93       	st	Z+, r24
    152c:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    152e:	08 94       	sec
    1530:	81 08       	sbc	r8, r1
    1532:	91 08       	sbc	r9, r1
			BytesInTransfer++;
    1534:	08 94       	sec
    1536:	c1 1c       	adc	r12, r1
    1538:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    153a:	81 14       	cp	r8, r1
    153c:	91 04       	cpc	r9, r1
    153e:	c1 f6       	brne	.-80     	; 0x14f0 <Pipe_Read_Stream_LE+0x56>
    1540:	01 c0       	rjmp	.+2      	; 0x1544 <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1542:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1544:	8b 2d       	mov	r24, r11
    1546:	0f 90       	pop	r0
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	ff 90       	pop	r15
    1552:	ef 90       	pop	r14
    1554:	df 90       	pop	r13
    1556:	cf 90       	pop	r12
    1558:	bf 90       	pop	r11
    155a:	9f 90       	pop	r9
    155c:	8f 90       	pop	r8
    155e:	08 95       	ret

00001560 <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1560:	cf 92       	push	r12
    1562:	df 92       	push	r13
    1564:	ef 92       	push	r14
    1566:	ff 92       	push	r15
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	29 97       	sbiw	r28, 0x09	; 9
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	6b 01       	movw	r12, r22
    1582:	8a 01       	movw	r16, r20
    1584:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1586:	90 e8       	ldi	r25, 0x80	; 128
    1588:	90 93 5f 01 	sts	0x015F, r25
    158c:	96 e0       	ldi	r25, 0x06	; 6
    158e:	90 93 60 01 	sts	0x0160, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1598:	90 93 62 01 	sts	0x0162, r25
    159c:	80 93 61 01 	sts	0x0161, r24
    15a0:	10 92 64 01 	sts	0x0164, r1
    15a4:	10 92 63 01 	sts	0x0163, r1
    15a8:	89 e0       	ldi	r24, 0x09	; 9
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	90 93 66 01 	sts	0x0166, r25
    15b0:	80 93 65 01 	sts	0x0165, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    15b4:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    15b8:	ce 01       	movw	r24, r28
    15ba:	01 96       	adiw	r24, 0x01	; 1
    15bc:	95 d0       	rcall	.+298    	; 0x16e8 <USB_Host_SendControlRequest>
    15be:	88 23       	and	r24, r24
    15c0:	b9 f4       	brne	.+46     	; 0x15f0 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	f6 01       	movw	r30, r12
    15c8:	91 83       	std	Z+1, r25	; 0x01
    15ca:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    15cc:	e8 16       	cp	r14, r24
    15ce:	f9 06       	cpc	r15, r25
    15d0:	70 f0       	brcs	.+28     	; 0x15ee <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    15d2:	90 93 66 01 	sts	0x0166, r25
    15d6:	80 93 65 01 	sts	0x0165, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    15da:	c8 01       	movw	r24, r16
    15dc:	85 d0       	rcall	.+266    	; 0x16e8 <USB_Host_SendControlRequest>
    15de:	88 23       	and	r24, r24
    15e0:	39 f4       	brne	.+14     	; 0x15f0 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    15e2:	f8 01       	movw	r30, r16
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	92 30       	cpi	r25, 0x02	; 2
    15e8:	19 f0       	breq	.+6      	; 0x15f0 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    15ea:	86 e0       	ldi	r24, 0x06	; 6
    15ec:	01 c0       	rjmp	.+2      	; 0x15f0 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    15ee:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    15f0:	29 96       	adiw	r28, 0x09	; 9
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	1f 91       	pop	r17
    1602:	0f 91       	pop	r16
    1604:	ff 90       	pop	r15
    1606:	ef 90       	pop	r14
    1608:	df 90       	pop	r13
    160a:	cf 90       	pop	r12
    160c:	08 95       	ret

0000160e <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    160e:	af 92       	push	r10
    1610:	bf 92       	push	r11
    1612:	cf 92       	push	r12
    1614:	df 92       	push	r13
    1616:	ef 92       	push	r14
    1618:	ff 92       	push	r15
    161a:	0f 93       	push	r16
    161c:	1f 93       	push	r17
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	8c 01       	movw	r16, r24
    1624:	eb 01       	movw	r28, r22
    1626:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1628:	23 c0       	rjmp	.+70     	; 0x1670 <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    162a:	e8 81       	ld	r30, Y
    162c:	f9 81       	ldd	r31, Y+1	; 0x01
    162e:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1630:	20 81       	ld	r18, Z
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	c7 01       	movw	r24, r14
    1636:	2e 15       	cp	r18, r14
    1638:	3f 05       	cpc	r19, r15
    163a:	08 f4       	brcc	.+2      	; 0x163e <USB_GetNextDescriptorComp+0x30>
    163c:	c9 01       	movw	r24, r18
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    163e:	e8 0f       	add	r30, r24
    1640:	f9 1f       	adc	r31, r25
    1642:	f9 83       	std	Y+1, r31	; 0x01
    1644:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    1646:	f8 01       	movw	r30, r16
    1648:	20 81       	ld	r18, Z
    164a:	31 81       	ldd	r19, Z+1	; 0x01
    164c:	28 1b       	sub	r18, r24
    164e:	39 0b       	sbc	r19, r25
    1650:	31 83       	std	Z+1, r19	; 0x01
    1652:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1654:	88 81       	ld	r24, Y
    1656:	99 81       	ldd	r25, Y+1	; 0x01
    1658:	f6 01       	movw	r30, r12
    165a:	09 95       	icall
    165c:	82 30       	cpi	r24, 0x02	; 2
    165e:	41 f0       	breq	.+16     	; 0x1670 <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1660:	81 30       	cpi	r24, 0x01	; 1
    1662:	69 f4       	brne	.+26     	; 0x167e <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
    1664:	a8 82       	st	Y, r10
    1666:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
    1668:	f8 01       	movw	r30, r16
    166a:	f1 82       	std	Z+1, r15	; 0x01
    166c:	e0 82       	st	Z, r14
    166e:	07 c0       	rjmp	.+14     	; 0x167e <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1670:	f8 01       	movw	r30, r16
    1672:	e0 80       	ld	r14, Z
    1674:	f1 80       	ldd	r15, Z+1	; 0x01
    1676:	e1 14       	cp	r14, r1
    1678:	f1 04       	cpc	r15, r1
    167a:	b9 f6       	brne	.-82     	; 0x162a <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    167c:	82 e0       	ldi	r24, 0x02	; 2
}
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	ff 90       	pop	r15
    1688:	ef 90       	pop	r14
    168a:	df 90       	pop	r13
    168c:	cf 90       	pop	r12
    168e:	bf 90       	pop	r11
    1690:	af 90       	pop	r10
    1692:	08 95       	ret

00001694 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1694:	08 95       	ret

00001696 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1696:	1f 93       	push	r17
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
    169c:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    169e:	c8 ee       	ldi	r28, 0xE8	; 232
    16a0:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    16a2:	07 c0       	rjmp	.+14     	; 0x16b2 <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	61 db       	rcall	.-2366   	; 0xd6a <USB_Host_WaitMS>
    16a8:	88 23       	and	r24, r24
    16aa:	d1 f4       	brne	.+52     	; 0x16e0 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    16ac:	20 97       	sbiw	r28, 0x00	; 0
    16ae:	b9 f0       	breq	.+46     	; 0x16de <USB_Host_WaitForIOS+0x48>
    16b0:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    16b2:	11 23       	and	r17, r17
    16b4:	29 f4       	brne	.+10     	; 0x16c0 <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    16b6:	80 91 a6 00 	lds	r24, 0x00A6
    16ba:	83 ff       	sbrs	r24, 3
    16bc:	f3 cf       	rjmp	.-26     	; 0x16a4 <USB_Host_WaitForIOS+0xe>
    16be:	0d c0       	rjmp	.+26     	; 0x16da <USB_Host_WaitForIOS+0x44>
    16c0:	11 30       	cpi	r17, 0x01	; 1
    16c2:	29 f4       	brne	.+10     	; 0x16ce <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    16c4:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    16c8:	80 ff       	sbrs	r24, 0
    16ca:	ec cf       	rjmp	.-40     	; 0x16a4 <USB_Host_WaitForIOS+0xe>
    16cc:	06 c0       	rjmp	.+12     	; 0x16da <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    16ce:	12 30       	cpi	r17, 0x02	; 2
    16d0:	49 f7       	brne	.-46     	; 0x16a4 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    16d2:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    16d6:	82 ff       	sbrs	r24, 2
    16d8:	e5 cf       	rjmp	.-54     	; 0x16a4 <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	01 c0       	rjmp	.+2      	; 0x16e0 <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    16de:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	1f 91       	pop	r17
    16e6:	08 95       	ret

000016e8 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    16e8:	ef 92       	push	r14
    16ea:	ff 92       	push	r15
    16ec:	0f 93       	push	r16
    16ee:	1f 93       	push	r17
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    16f6:	e0 90 9e 00 	lds	r14, 0x009E
    16fa:	ff 24       	eor	r15, r15
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	e8 22       	and	r14, r24
    1700:	ff 24       	eor	r15, r15
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1702:	c0 91 65 01 	lds	r28, 0x0165
    1706:	d0 91 66 01 	lds	r29, 0x0166
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    170a:	80 91 9e 00 	lds	r24, 0x009E
    170e:	81 60       	ori	r24, 0x01	; 1
    1710:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	29 db       	rcall	.-2478   	; 0xd6a <USB_Host_WaitMS>
    1718:	88 23       	and	r24, r24
    171a:	09 f0       	breq	.+2      	; 0x171e <USB_Host_SendControlRequest+0x36>
    171c:	cb c0       	rjmp	.+406    	; 0x18b4 <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    171e:	80 91 aa 00 	lds	r24, 0x00AA
    1722:	8f 7c       	andi	r24, 0xCF	; 207
    1724:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1728:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    172c:	80 91 a6 00 	lds	r24, 0x00A6
    1730:	8f 7e       	andi	r24, 0xEF	; 239
    1732:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1736:	80 91 a9 00 	lds	r24, 0x00A9
    173a:	8f 7b       	andi	r24, 0xBF	; 191
    173c:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1740:	ef e5       	ldi	r30, 0x5F	; 95
    1742:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    1744:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1746:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	e7 36       	cpi	r30, 0x67	; 103
    174e:	f8 07       	cpc	r31, r24
    1750:	c9 f7       	brne	.-14     	; 0x1744 <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1752:	80 91 a6 00 	lds	r24, 0x00A6
    1756:	87 77       	andi	r24, 0x77	; 119
    1758:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	9b df       	rcall	.-202    	; 0x1696 <USB_Host_WaitForIOS>
    1760:	88 23       	and	r24, r24
    1762:	09 f0       	breq	.+2      	; 0x1766 <USB_Host_SendControlRequest+0x7e>
    1764:	a7 c0       	rjmp	.+334    	; 0x18b4 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1766:	80 91 a9 00 	lds	r24, 0x00A9
    176a:	80 64       	ori	r24, 0x40	; 64
    176c:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	fb da       	rcall	.-2570   	; 0xd6a <USB_Host_WaitMS>
    1774:	88 23       	and	r24, r24
    1776:	09 f0       	breq	.+2      	; 0x177a <USB_Host_SendControlRequest+0x92>
    1778:	9d c0       	rjmp	.+314    	; 0x18b4 <USB_Host_SendControlRequest+0x1cc>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    177a:	80 91 5f 01 	lds	r24, 0x015F
    177e:	87 ff       	sbrs	r24, 7
    1780:	4f c0       	rjmp	.+158    	; 0x1820 <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1782:	80 91 aa 00 	lds	r24, 0x00AA
    1786:	8f 7c       	andi	r24, 0xCF	; 207
    1788:	80 61       	ori	r24, 0x10	; 16
    178a:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    178e:	01 15       	cp	r16, r1
    1790:	11 05       	cpc	r17, r1
    1792:	61 f5       	brne	.+88     	; 0x17ec <USB_Host_SendControlRequest+0x104>
    1794:	2d c0       	rjmp	.+90     	; 0x17f0 <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1796:	80 91 a9 00 	lds	r24, 0x00A9
    179a:	8f 7b       	andi	r24, 0xBF	; 191
    179c:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	79 df       	rcall	.-270    	; 0x1696 <USB_Host_WaitForIOS>
    17a4:	88 23       	and	r24, r24
    17a6:	09 f0       	breq	.+2      	; 0x17aa <USB_Host_SendControlRequest+0xc2>
    17a8:	85 c0       	rjmp	.+266    	; 0x18b4 <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    17aa:	80 91 f6 00 	lds	r24, 0x00F6
    17ae:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	49 f4       	brne	.+18     	; 0x17c8 <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    17b6:	c0 e0       	ldi	r28, 0x00	; 0
    17b8:	d0 e0       	ldi	r29, 0x00	; 0
    17ba:	06 c0       	rjmp	.+12     	; 0x17c8 <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    17bc:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    17c0:	f8 01       	movw	r30, r16
    17c2:	81 93       	st	Z+, r24
    17c4:	8f 01       	movw	r16, r30
					DataLen--;
    17c6:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    17c8:	80 91 f6 00 	lds	r24, 0x00F6
    17cc:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	11 f0       	breq	.+4      	; 0x17d8 <USB_Host_SendControlRequest+0xf0>
    17d4:	20 97       	sbiw	r28, 0x00	; 0
    17d6:	91 f7       	brne	.-28     	; 0x17bc <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    17d8:	80 91 a9 00 	lds	r24, 0x00A9
    17dc:	80 64       	ori	r24, 0x40	; 64
    17de:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    17e2:	80 91 a6 00 	lds	r24, 0x00A6
    17e6:	8e 77       	andi	r24, 0x7E	; 126
    17e8:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    17ec:	20 97       	sbiw	r28, 0x00	; 0
    17ee:	99 f6       	brne	.-90     	; 0x1796 <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    17f0:	80 91 aa 00 	lds	r24, 0x00AA
    17f4:	8f 7c       	andi	r24, 0xCF	; 207
    17f6:	80 62       	ori	r24, 0x20	; 32
    17f8:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    17fc:	80 91 a9 00 	lds	r24, 0x00A9
    1800:	8f 7b       	andi	r24, 0xBF	; 191
    1802:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1806:	82 e0       	ldi	r24, 0x02	; 2
    1808:	46 df       	rcall	.-372    	; 0x1696 <USB_Host_WaitForIOS>
    180a:	88 23       	and	r24, r24
    180c:	09 f0       	breq	.+2      	; 0x1810 <USB_Host_SendControlRequest+0x128>
    180e:	52 c0       	rjmp	.+164    	; 0x18b4 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1810:	80 91 a6 00 	lds	r24, 0x00A6
    1814:	8b 77       	andi	r24, 0x7B	; 123
    1816:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    181a:	82 e0       	ldi	r24, 0x02	; 2
    181c:	3c df       	rcall	.-392    	; 0x1696 <USB_Host_WaitForIOS>
    181e:	4a c0       	rjmp	.+148    	; 0x18b4 <USB_Host_SendControlRequest+0x1cc>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1820:	01 15       	cp	r16, r1
    1822:	11 05       	cpc	r17, r1
    1824:	99 f1       	breq	.+102    	; 0x188c <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1826:	80 91 aa 00 	lds	r24, 0x00AA
    182a:	8f 7c       	andi	r24, 0xCF	; 207
    182c:	80 62       	ori	r24, 0x20	; 32
    182e:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1832:	80 91 a9 00 	lds	r24, 0x00A9
    1836:	8f 7b       	andi	r24, 0xBF	; 191
    1838:	80 93 a9 00 	sts	0x00A9, r24
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    183c:	1c c0       	rjmp	.+56     	; 0x1876 <USB_Host_SendControlRequest+0x18e>
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    183e:	82 e0       	ldi	r24, 0x02	; 2
    1840:	2a df       	rcall	.-428    	; 0x1696 <USB_Host_WaitForIOS>
    1842:	88 23       	and	r24, r24
    1844:	b9 f5       	brne	.+110    	; 0x18b4 <USB_Host_SendControlRequest+0x1cc>
    1846:	f8 01       	movw	r30, r16
    1848:	06 c0       	rjmp	.+12     	; 0x1856 <USB_Host_SendControlRequest+0x16e>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    184a:	81 91       	ld	r24, Z+
    184c:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    184e:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1852:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1854:	59 f0       	breq	.+22     	; 0x186c <USB_Host_SendControlRequest+0x184>
    1856:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1858:	20 91 f6 00 	lds	r18, 0x00F6
    185c:	30 91 f7 00 	lds	r19, 0x00F7
    1860:	80 91 10 01 	lds	r24, 0x0110
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	28 17       	cp	r18, r24
    1868:	39 07       	cpc	r19, r25
    186a:	78 f3       	brcs	.-34     	; 0x184a <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    186c:	80 91 a6 00 	lds	r24, 0x00A6
    1870:	8b 77       	andi	r24, 0x7B	; 123
    1872:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1876:	20 97       	sbiw	r28, 0x00	; 0
    1878:	11 f7       	brne	.-60     	; 0x183e <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    187a:	82 e0       	ldi	r24, 0x02	; 2
    187c:	0c df       	rcall	.-488    	; 0x1696 <USB_Host_WaitForIOS>
    187e:	88 23       	and	r24, r24
    1880:	c9 f4       	brne	.+50     	; 0x18b4 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1882:	80 91 a9 00 	lds	r24, 0x00A9
    1886:	80 64       	ori	r24, 0x40	; 64
    1888:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    188c:	80 91 aa 00 	lds	r24, 0x00AA
    1890:	8f 7c       	andi	r24, 0xCF	; 207
    1892:	80 61       	ori	r24, 0x10	; 16
    1894:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1898:	80 91 a9 00 	lds	r24, 0x00A9
    189c:	8f 7b       	andi	r24, 0xBF	; 191
    189e:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	f8 de       	rcall	.-528    	; 0x1696 <USB_Host_WaitForIOS>
    18a6:	88 23       	and	r24, r24
    18a8:	29 f4       	brne	.+10     	; 0x18b4 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    18aa:	90 91 a6 00 	lds	r25, 0x00A6
    18ae:	9e 77       	andi	r25, 0x7E	; 126
    18b0:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    18b4:	90 91 a9 00 	lds	r25, 0x00A9
    18b8:	90 64       	ori	r25, 0x40	; 64
    18ba:	90 93 a9 00 	sts	0x00A9, r25
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    18be:	e1 14       	cp	r14, r1
    18c0:	f1 04       	cpc	r15, r1
    18c2:	29 f4       	brne	.+10     	; 0x18ce <USB_Host_SendControlRequest+0x1e6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    18c4:	90 91 9e 00 	lds	r25, 0x009E
    18c8:	9e 7f       	andi	r25, 0xFE	; 254
    18ca:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    18ce:	91 e0       	ldi	r25, 0x01	; 1
    18d0:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    18d4:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	1f 91       	pop	r17
    18de:	0f 91       	pop	r16
    18e0:	ff 90       	pop	r15
    18e2:	ef 90       	pop	r14
    18e4:	08 95       	ret

000018e6 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    18e6:	1f 93       	push	r17
    18e8:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    18ea:	10 92 5f 01 	sts	0x015F, r1
    18ee:	89 e0       	ldi	r24, 0x09	; 9
    18f0:	80 93 60 01 	sts	0x0160, r24
    18f4:	10 93 61 01 	sts	0x0161, r17
    18f8:	10 92 62 01 	sts	0x0162, r1
    18fc:	10 92 64 01 	sts	0x0164, r1
    1900:	10 92 63 01 	sts	0x0163, r1
    1904:	10 92 66 01 	sts	0x0166, r1
    1908:	10 92 65 01 	sts	0x0165, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    190c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	e9 de       	rcall	.-558    	; 0x16e8 <USB_Host_SendControlRequest>
    1916:	88 23       	and	r24, r24
    1918:	49 f4       	brne	.+18     	; 0x192c <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    191a:	10 93 5d 01 	sts	0x015D, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    191e:	11 23       	and	r17, r17
    1920:	11 f0       	breq	.+4      	; 0x1926 <USB_Host_SetDeviceConfiguration+0x40>
    1922:	9b e0       	ldi	r25, 0x0B	; 11
    1924:	01 c0       	rjmp	.+2      	; 0x1928 <USB_Host_SetDeviceConfiguration+0x42>
    1926:	9a e0       	ldi	r25, 0x0A	; 10
    1928:	90 93 67 01 	sts	0x0167, r25
	}

	return ErrorCode;
}
    192c:	1f 91       	pop	r17
    192e:	08 95       	ret

00001930 <USB_Host_ClearEndpointStall>:
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1930:	92 e0       	ldi	r25, 0x02	; 2
    1932:	90 93 5f 01 	sts	0x015F, r25
    1936:	91 e0       	ldi	r25, 0x01	; 1
    1938:	90 93 60 01 	sts	0x0160, r25
    193c:	10 92 62 01 	sts	0x0162, r1
    1940:	10 92 61 01 	sts	0x0161, r1
    1944:	80 93 63 01 	sts	0x0163, r24
    1948:	10 92 64 01 	sts	0x0164, r1
    194c:	10 92 66 01 	sts	0x0166, r1
    1950:	10 92 65 01 	sts	0x0165, r1
    1954:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	90 e0       	ldi	r25, 0x00	; 0
}
    195c:	c5 ce       	rjmp	.-630    	; 0x16e8 <USB_Host_SendControlRequest>

0000195e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    195e:	1f 93       	push	r17
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1964:	c7 ea       	ldi	r28, 0xA7	; 167
    1966:	d0 e0       	ldi	r29, 0x00	; 0
    1968:	18 81       	ld	r17, Y
    196a:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    196c:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    196e:	52 da       	rcall	.-2908   	; 0xe14 <USB_Host_ProcessNextHostState>
    1970:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	08 95       	ret

0000197a <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    197a:	90 91 c8 00 	lds	r25, 0x00C8
    197e:	95 ff       	sbrs	r25, 5
    1980:	fc cf       	rjmp	.-8      	; 0x197a <Serial_putchar>
				UDR1 = DataByte;
    1982:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	08 95       	ret

0000198c <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    198c:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    1990:	87 ff       	sbrs	r24, 7
    1992:	08 c0       	rjmp	.+16     	; 0x19a4 <Serial_getchar+0x18>
    1994:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    1998:	87 ff       	sbrs	r24, 7
    199a:	07 c0       	rjmp	.+14     	; 0x19aa <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    199c:	20 91 ce 00 	lds	r18, 0x00CE
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	05 c0       	rjmp	.+10     	; 0x19ae <Serial_getchar+0x22>
	  return _FDEV_EOF;
    19a4:	2e ef       	ldi	r18, 0xFE	; 254
    19a6:	3f ef       	ldi	r19, 0xFF	; 255
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    19aa:	2f ef       	ldi	r18, 0xFF	; 255
    19ac:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    19ae:	c9 01       	movw	r24, r18
    19b0:	08 95       	ret

000019b2 <printf_P>:
    19b2:	df 93       	push	r29
    19b4:	cf 93       	push	r28
    19b6:	cd b7       	in	r28, 0x3d	; 61
    19b8:	de b7       	in	r29, 0x3e	; 62
    19ba:	fe 01       	movw	r30, r28
    19bc:	35 96       	adiw	r30, 0x05	; 5
    19be:	61 91       	ld	r22, Z+
    19c0:	71 91       	ld	r23, Z+
    19c2:	80 91 78 01 	lds	r24, 0x0178
    19c6:	90 91 79 01 	lds	r25, 0x0179
    19ca:	dc 01       	movw	r26, r24
    19cc:	13 96       	adiw	r26, 0x03	; 3
    19ce:	2c 91       	ld	r18, X
    19d0:	13 97       	sbiw	r26, 0x03	; 3
    19d2:	28 60       	ori	r18, 0x08	; 8
    19d4:	13 96       	adiw	r26, 0x03	; 3
    19d6:	2c 93       	st	X, r18
    19d8:	af 01       	movw	r20, r30
    19da:	42 d0       	rcall	.+132    	; 0x1a60 <vfprintf>
    19dc:	e0 91 78 01 	lds	r30, 0x0178
    19e0:	f0 91 79 01 	lds	r31, 0x0179
    19e4:	23 81       	ldd	r18, Z+3	; 0x03
    19e6:	27 7f       	andi	r18, 0xF7	; 247
    19e8:	23 83       	std	Z+3, r18	; 0x03
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	08 95       	ret

000019f0 <puts_P>:
    19f0:	ef 92       	push	r14
    19f2:	ff 92       	push	r15
    19f4:	0f 93       	push	r16
    19f6:	1f 93       	push	r17
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	8c 01       	movw	r16, r24
    19fe:	e0 91 78 01 	lds	r30, 0x0178
    1a02:	f0 91 79 01 	lds	r31, 0x0179
    1a06:	83 81       	ldd	r24, Z+3	; 0x03
    1a08:	81 ff       	sbrs	r24, 1
    1a0a:	20 c0       	rjmp	.+64     	; 0x1a4c <puts_P+0x5c>
    1a0c:	c0 e0       	ldi	r28, 0x00	; 0
    1a0e:	d0 e0       	ldi	r29, 0x00	; 0
    1a10:	0c c0       	rjmp	.+24     	; 0x1a2a <puts_P+0x3a>
    1a12:	db 01       	movw	r26, r22
    1a14:	18 96       	adiw	r26, 0x08	; 8
    1a16:	ed 91       	ld	r30, X+
    1a18:	fc 91       	ld	r31, X
    1a1a:	19 97       	sbiw	r26, 0x09	; 9
    1a1c:	09 95       	icall
    1a1e:	00 97       	sbiw	r24, 0x00	; 0
    1a20:	11 f0       	breq	.+4      	; 0x1a26 <puts_P+0x36>
    1a22:	cf ef       	ldi	r28, 0xFF	; 255
    1a24:	df ef       	ldi	r29, 0xFF	; 255
    1a26:	0f 5f       	subi	r16, 0xFF	; 255
    1a28:	1f 4f       	sbci	r17, 0xFF	; 255
    1a2a:	f8 01       	movw	r30, r16
    1a2c:	84 91       	lpm	r24, Z+
    1a2e:	60 91 78 01 	lds	r22, 0x0178
    1a32:	70 91 79 01 	lds	r23, 0x0179
    1a36:	88 23       	and	r24, r24
    1a38:	61 f7       	brne	.-40     	; 0x1a12 <puts_P+0x22>
    1a3a:	db 01       	movw	r26, r22
    1a3c:	18 96       	adiw	r26, 0x08	; 8
    1a3e:	ed 91       	ld	r30, X+
    1a40:	fc 91       	ld	r31, X
    1a42:	19 97       	sbiw	r26, 0x09	; 9
    1a44:	8a e0       	ldi	r24, 0x0A	; 10
    1a46:	09 95       	icall
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	11 f0       	breq	.+4      	; 0x1a50 <puts_P+0x60>
    1a4c:	cf ef       	ldi	r28, 0xFF	; 255
    1a4e:	df ef       	ldi	r29, 0xFF	; 255
    1a50:	ce 01       	movw	r24, r28
    1a52:	df 91       	pop	r29
    1a54:	cf 91       	pop	r28
    1a56:	1f 91       	pop	r17
    1a58:	0f 91       	pop	r16
    1a5a:	ff 90       	pop	r15
    1a5c:	ef 90       	pop	r14
    1a5e:	08 95       	ret

00001a60 <vfprintf>:
    1a60:	2f 92       	push	r2
    1a62:	3f 92       	push	r3
    1a64:	4f 92       	push	r4
    1a66:	5f 92       	push	r5
    1a68:	6f 92       	push	r6
    1a6a:	7f 92       	push	r7
    1a6c:	8f 92       	push	r8
    1a6e:	9f 92       	push	r9
    1a70:	af 92       	push	r10
    1a72:	bf 92       	push	r11
    1a74:	cf 92       	push	r12
    1a76:	df 92       	push	r13
    1a78:	ef 92       	push	r14
    1a7a:	ff 92       	push	r15
    1a7c:	0f 93       	push	r16
    1a7e:	1f 93       	push	r17
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	2c 97       	sbiw	r28, 0x0c	; 12
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	6c 01       	movw	r12, r24
    1a96:	1b 01       	movw	r2, r22
    1a98:	8a 01       	movw	r16, r20
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	17 82       	std	Z+7, r1	; 0x07
    1a9e:	16 82       	std	Z+6, r1	; 0x06
    1aa0:	83 81       	ldd	r24, Z+3	; 0x03
    1aa2:	81 ff       	sbrs	r24, 1
    1aa4:	c4 c1       	rjmp	.+904    	; 0x1e2e <vfprintf+0x3ce>
    1aa6:	2e 01       	movw	r4, r28
    1aa8:	08 94       	sec
    1aaa:	41 1c       	adc	r4, r1
    1aac:	51 1c       	adc	r5, r1
    1aae:	f6 01       	movw	r30, r12
    1ab0:	93 81       	ldd	r25, Z+3	; 0x03
    1ab2:	f1 01       	movw	r30, r2
    1ab4:	93 fd       	sbrc	r25, 3
    1ab6:	85 91       	lpm	r24, Z+
    1ab8:	93 ff       	sbrs	r25, 3
    1aba:	81 91       	ld	r24, Z+
    1abc:	1f 01       	movw	r2, r30
    1abe:	88 23       	and	r24, r24
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <vfprintf+0x64>
    1ac2:	b1 c1       	rjmp	.+866    	; 0x1e26 <vfprintf+0x3c6>
    1ac4:	85 32       	cpi	r24, 0x25	; 37
    1ac6:	39 f4       	brne	.+14     	; 0x1ad6 <vfprintf+0x76>
    1ac8:	93 fd       	sbrc	r25, 3
    1aca:	85 91       	lpm	r24, Z+
    1acc:	93 ff       	sbrs	r25, 3
    1ace:	81 91       	ld	r24, Z+
    1ad0:	1f 01       	movw	r2, r30
    1ad2:	85 32       	cpi	r24, 0x25	; 37
    1ad4:	21 f4       	brne	.+8      	; 0x1ade <vfprintf+0x7e>
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	b6 01       	movw	r22, r12
    1ada:	db d1       	rcall	.+950    	; 0x1e92 <fputc>
    1adc:	e8 cf       	rjmp	.-48     	; 0x1aae <vfprintf+0x4e>
    1ade:	ee 24       	eor	r14, r14
    1ae0:	ff 24       	eor	r15, r15
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	20 32       	cpi	r18, 0x20	; 32
    1ae6:	b0 f4       	brcc	.+44     	; 0x1b14 <vfprintf+0xb4>
    1ae8:	8b 32       	cpi	r24, 0x2B	; 43
    1aea:	69 f0       	breq	.+26     	; 0x1b06 <vfprintf+0xa6>
    1aec:	8c 32       	cpi	r24, 0x2C	; 44
    1aee:	28 f4       	brcc	.+10     	; 0x1afa <vfprintf+0x9a>
    1af0:	80 32       	cpi	r24, 0x20	; 32
    1af2:	51 f0       	breq	.+20     	; 0x1b08 <vfprintf+0xa8>
    1af4:	83 32       	cpi	r24, 0x23	; 35
    1af6:	71 f4       	brne	.+28     	; 0x1b14 <vfprintf+0xb4>
    1af8:	0b c0       	rjmp	.+22     	; 0x1b10 <vfprintf+0xb0>
    1afa:	8d 32       	cpi	r24, 0x2D	; 45
    1afc:	39 f0       	breq	.+14     	; 0x1b0c <vfprintf+0xac>
    1afe:	80 33       	cpi	r24, 0x30	; 48
    1b00:	49 f4       	brne	.+18     	; 0x1b14 <vfprintf+0xb4>
    1b02:	21 60       	ori	r18, 0x01	; 1
    1b04:	2c c0       	rjmp	.+88     	; 0x1b5e <vfprintf+0xfe>
    1b06:	22 60       	ori	r18, 0x02	; 2
    1b08:	24 60       	ori	r18, 0x04	; 4
    1b0a:	29 c0       	rjmp	.+82     	; 0x1b5e <vfprintf+0xfe>
    1b0c:	28 60       	ori	r18, 0x08	; 8
    1b0e:	27 c0       	rjmp	.+78     	; 0x1b5e <vfprintf+0xfe>
    1b10:	20 61       	ori	r18, 0x10	; 16
    1b12:	25 c0       	rjmp	.+74     	; 0x1b5e <vfprintf+0xfe>
    1b14:	27 fd       	sbrc	r18, 7
    1b16:	2c c0       	rjmp	.+88     	; 0x1b70 <vfprintf+0x110>
    1b18:	38 2f       	mov	r19, r24
    1b1a:	30 53       	subi	r19, 0x30	; 48
    1b1c:	3a 30       	cpi	r19, 0x0A	; 10
    1b1e:	98 f4       	brcc	.+38     	; 0x1b46 <vfprintf+0xe6>
    1b20:	26 ff       	sbrs	r18, 6
    1b22:	08 c0       	rjmp	.+16     	; 0x1b34 <vfprintf+0xd4>
    1b24:	8e 2d       	mov	r24, r14
    1b26:	88 0f       	add	r24, r24
    1b28:	e8 2e       	mov	r14, r24
    1b2a:	ee 0c       	add	r14, r14
    1b2c:	ee 0c       	add	r14, r14
    1b2e:	e8 0e       	add	r14, r24
    1b30:	e3 0e       	add	r14, r19
    1b32:	15 c0       	rjmp	.+42     	; 0x1b5e <vfprintf+0xfe>
    1b34:	8f 2d       	mov	r24, r15
    1b36:	88 0f       	add	r24, r24
    1b38:	f8 2e       	mov	r15, r24
    1b3a:	ff 0c       	add	r15, r15
    1b3c:	ff 0c       	add	r15, r15
    1b3e:	f8 0e       	add	r15, r24
    1b40:	f3 0e       	add	r15, r19
    1b42:	20 62       	ori	r18, 0x20	; 32
    1b44:	0c c0       	rjmp	.+24     	; 0x1b5e <vfprintf+0xfe>
    1b46:	8e 32       	cpi	r24, 0x2E	; 46
    1b48:	21 f4       	brne	.+8      	; 0x1b52 <vfprintf+0xf2>
    1b4a:	26 fd       	sbrc	r18, 6
    1b4c:	6c c1       	rjmp	.+728    	; 0x1e26 <vfprintf+0x3c6>
    1b4e:	20 64       	ori	r18, 0x40	; 64
    1b50:	06 c0       	rjmp	.+12     	; 0x1b5e <vfprintf+0xfe>
    1b52:	8c 36       	cpi	r24, 0x6C	; 108
    1b54:	11 f4       	brne	.+4      	; 0x1b5a <vfprintf+0xfa>
    1b56:	20 68       	ori	r18, 0x80	; 128
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <vfprintf+0xfe>
    1b5a:	88 36       	cpi	r24, 0x68	; 104
    1b5c:	49 f4       	brne	.+18     	; 0x1b70 <vfprintf+0x110>
    1b5e:	f1 01       	movw	r30, r2
    1b60:	93 fd       	sbrc	r25, 3
    1b62:	85 91       	lpm	r24, Z+
    1b64:	93 ff       	sbrs	r25, 3
    1b66:	81 91       	ld	r24, Z+
    1b68:	1f 01       	movw	r2, r30
    1b6a:	88 23       	and	r24, r24
    1b6c:	09 f0       	breq	.+2      	; 0x1b70 <vfprintf+0x110>
    1b6e:	ba cf       	rjmp	.-140    	; 0x1ae4 <vfprintf+0x84>
    1b70:	98 2f       	mov	r25, r24
    1b72:	95 54       	subi	r25, 0x45	; 69
    1b74:	93 30       	cpi	r25, 0x03	; 3
    1b76:	18 f0       	brcs	.+6      	; 0x1b7e <vfprintf+0x11e>
    1b78:	90 52       	subi	r25, 0x20	; 32
    1b7a:	93 30       	cpi	r25, 0x03	; 3
    1b7c:	28 f4       	brcc	.+10     	; 0x1b88 <vfprintf+0x128>
    1b7e:	0c 5f       	subi	r16, 0xFC	; 252
    1b80:	1f 4f       	sbci	r17, 0xFF	; 255
    1b82:	ff e3       	ldi	r31, 0x3F	; 63
    1b84:	f9 83       	std	Y+1, r31	; 0x01
    1b86:	0d c0       	rjmp	.+26     	; 0x1ba2 <vfprintf+0x142>
    1b88:	83 36       	cpi	r24, 0x63	; 99
    1b8a:	31 f0       	breq	.+12     	; 0x1b98 <vfprintf+0x138>
    1b8c:	83 37       	cpi	r24, 0x73	; 115
    1b8e:	71 f0       	breq	.+28     	; 0x1bac <vfprintf+0x14c>
    1b90:	83 35       	cpi	r24, 0x53	; 83
    1b92:	09 f0       	breq	.+2      	; 0x1b96 <vfprintf+0x136>
    1b94:	5c c0       	rjmp	.+184    	; 0x1c4e <vfprintf+0x1ee>
    1b96:	21 c0       	rjmp	.+66     	; 0x1bda <vfprintf+0x17a>
    1b98:	f8 01       	movw	r30, r16
    1b9a:	80 81       	ld	r24, Z
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	0e 5f       	subi	r16, 0xFE	; 254
    1ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba2:	42 01       	movw	r8, r4
    1ba4:	71 e0       	ldi	r23, 0x01	; 1
    1ba6:	a7 2e       	mov	r10, r23
    1ba8:	b1 2c       	mov	r11, r1
    1baa:	15 c0       	rjmp	.+42     	; 0x1bd6 <vfprintf+0x176>
    1bac:	62 e0       	ldi	r22, 0x02	; 2
    1bae:	66 2e       	mov	r6, r22
    1bb0:	71 2c       	mov	r7, r1
    1bb2:	60 0e       	add	r6, r16
    1bb4:	71 1e       	adc	r7, r17
    1bb6:	f8 01       	movw	r30, r16
    1bb8:	80 80       	ld	r8, Z
    1bba:	91 80       	ldd	r9, Z+1	; 0x01
    1bbc:	26 ff       	sbrs	r18, 6
    1bbe:	03 c0       	rjmp	.+6      	; 0x1bc6 <vfprintf+0x166>
    1bc0:	6e 2d       	mov	r22, r14
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <vfprintf+0x16a>
    1bc6:	6f ef       	ldi	r22, 0xFF	; 255
    1bc8:	7f ef       	ldi	r23, 0xFF	; 255
    1bca:	c4 01       	movw	r24, r8
    1bcc:	2c 87       	std	Y+12, r18	; 0x0c
    1bce:	56 d1       	rcall	.+684    	; 0x1e7c <strnlen>
    1bd0:	5c 01       	movw	r10, r24
    1bd2:	83 01       	movw	r16, r6
    1bd4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bd6:	2f 77       	andi	r18, 0x7F	; 127
    1bd8:	16 c0       	rjmp	.+44     	; 0x1c06 <vfprintf+0x1a6>
    1bda:	52 e0       	ldi	r21, 0x02	; 2
    1bdc:	65 2e       	mov	r6, r21
    1bde:	71 2c       	mov	r7, r1
    1be0:	60 0e       	add	r6, r16
    1be2:	71 1e       	adc	r7, r17
    1be4:	f8 01       	movw	r30, r16
    1be6:	80 80       	ld	r8, Z
    1be8:	91 80       	ldd	r9, Z+1	; 0x01
    1bea:	26 ff       	sbrs	r18, 6
    1bec:	03 c0       	rjmp	.+6      	; 0x1bf4 <vfprintf+0x194>
    1bee:	6e 2d       	mov	r22, r14
    1bf0:	70 e0       	ldi	r23, 0x00	; 0
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <vfprintf+0x198>
    1bf4:	6f ef       	ldi	r22, 0xFF	; 255
    1bf6:	7f ef       	ldi	r23, 0xFF	; 255
    1bf8:	c4 01       	movw	r24, r8
    1bfa:	2c 87       	std	Y+12, r18	; 0x0c
    1bfc:	34 d1       	rcall	.+616    	; 0x1e66 <strnlen_P>
    1bfe:	5c 01       	movw	r10, r24
    1c00:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c02:	20 68       	ori	r18, 0x80	; 128
    1c04:	83 01       	movw	r16, r6
    1c06:	23 fd       	sbrc	r18, 3
    1c08:	1e c0       	rjmp	.+60     	; 0x1c46 <vfprintf+0x1e6>
    1c0a:	07 c0       	rjmp	.+14     	; 0x1c1a <vfprintf+0x1ba>
    1c0c:	80 e2       	ldi	r24, 0x20	; 32
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	b6 01       	movw	r22, r12
    1c12:	2c 87       	std	Y+12, r18	; 0x0c
    1c14:	3e d1       	rcall	.+636    	; 0x1e92 <fputc>
    1c16:	fa 94       	dec	r15
    1c18:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c1a:	8f 2d       	mov	r24, r15
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	a8 16       	cp	r10, r24
    1c20:	b9 06       	cpc	r11, r25
    1c22:	a0 f3       	brcs	.-24     	; 0x1c0c <vfprintf+0x1ac>
    1c24:	10 c0       	rjmp	.+32     	; 0x1c46 <vfprintf+0x1e6>
    1c26:	f4 01       	movw	r30, r8
    1c28:	27 fd       	sbrc	r18, 7
    1c2a:	85 91       	lpm	r24, Z+
    1c2c:	27 ff       	sbrs	r18, 7
    1c2e:	81 91       	ld	r24, Z+
    1c30:	4f 01       	movw	r8, r30
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	b6 01       	movw	r22, r12
    1c36:	2c 87       	std	Y+12, r18	; 0x0c
    1c38:	2c d1       	rcall	.+600    	; 0x1e92 <fputc>
    1c3a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c3c:	f1 10       	cpse	r15, r1
    1c3e:	fa 94       	dec	r15
    1c40:	08 94       	sec
    1c42:	a1 08       	sbc	r10, r1
    1c44:	b1 08       	sbc	r11, r1
    1c46:	a1 14       	cp	r10, r1
    1c48:	b1 04       	cpc	r11, r1
    1c4a:	69 f7       	brne	.-38     	; 0x1c26 <vfprintf+0x1c6>
    1c4c:	e9 c0       	rjmp	.+466    	; 0x1e20 <vfprintf+0x3c0>
    1c4e:	84 36       	cpi	r24, 0x64	; 100
    1c50:	11 f0       	breq	.+4      	; 0x1c56 <vfprintf+0x1f6>
    1c52:	89 36       	cpi	r24, 0x69	; 105
    1c54:	41 f5       	brne	.+80     	; 0x1ca6 <vfprintf+0x246>
    1c56:	27 ff       	sbrs	r18, 7
    1c58:	08 c0       	rjmp	.+16     	; 0x1c6a <vfprintf+0x20a>
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	60 81       	ld	r22, Z
    1c5e:	71 81       	ldd	r23, Z+1	; 0x01
    1c60:	82 81       	ldd	r24, Z+2	; 0x02
    1c62:	93 81       	ldd	r25, Z+3	; 0x03
    1c64:	0c 5f       	subi	r16, 0xFC	; 252
    1c66:	1f 4f       	sbci	r17, 0xFF	; 255
    1c68:	09 c0       	rjmp	.+18     	; 0x1c7c <vfprintf+0x21c>
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	60 81       	ld	r22, Z
    1c6e:	71 81       	ldd	r23, Z+1	; 0x01
    1c70:	88 27       	eor	r24, r24
    1c72:	77 fd       	sbrc	r23, 7
    1c74:	80 95       	com	r24
    1c76:	98 2f       	mov	r25, r24
    1c78:	0e 5f       	subi	r16, 0xFE	; 254
    1c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7c:	4f e6       	ldi	r20, 0x6F	; 111
    1c7e:	b4 2e       	mov	r11, r20
    1c80:	b2 22       	and	r11, r18
    1c82:	97 ff       	sbrs	r25, 7
    1c84:	09 c0       	rjmp	.+18     	; 0x1c98 <vfprintf+0x238>
    1c86:	90 95       	com	r25
    1c88:	80 95       	com	r24
    1c8a:	70 95       	com	r23
    1c8c:	61 95       	neg	r22
    1c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c90:	8f 4f       	sbci	r24, 0xFF	; 255
    1c92:	9f 4f       	sbci	r25, 0xFF	; 255
    1c94:	f0 e8       	ldi	r31, 0x80	; 128
    1c96:	bf 2a       	or	r11, r31
    1c98:	a2 01       	movw	r20, r4
    1c9a:	2a e0       	ldi	r18, 0x0A	; 10
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	25 d1       	rcall	.+586    	; 0x1eea <__ultoa_invert>
    1ca0:	78 2e       	mov	r7, r24
    1ca2:	74 18       	sub	r7, r4
    1ca4:	44 c0       	rjmp	.+136    	; 0x1d2e <vfprintf+0x2ce>
    1ca6:	85 37       	cpi	r24, 0x75	; 117
    1ca8:	31 f4       	brne	.+12     	; 0x1cb6 <vfprintf+0x256>
    1caa:	3f ee       	ldi	r19, 0xEF	; 239
    1cac:	b3 2e       	mov	r11, r19
    1cae:	b2 22       	and	r11, r18
    1cb0:	2a e0       	ldi	r18, 0x0A	; 10
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	25 c0       	rjmp	.+74     	; 0x1d00 <vfprintf+0x2a0>
    1cb6:	99 ef       	ldi	r25, 0xF9	; 249
    1cb8:	b9 2e       	mov	r11, r25
    1cba:	b2 22       	and	r11, r18
    1cbc:	8f 36       	cpi	r24, 0x6F	; 111
    1cbe:	c1 f0       	breq	.+48     	; 0x1cf0 <vfprintf+0x290>
    1cc0:	80 37       	cpi	r24, 0x70	; 112
    1cc2:	20 f4       	brcc	.+8      	; 0x1ccc <vfprintf+0x26c>
    1cc4:	88 35       	cpi	r24, 0x58	; 88
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <vfprintf+0x26a>
    1cc8:	ae c0       	rjmp	.+348    	; 0x1e26 <vfprintf+0x3c6>
    1cca:	0d c0       	rjmp	.+26     	; 0x1ce6 <vfprintf+0x286>
    1ccc:	80 37       	cpi	r24, 0x70	; 112
    1cce:	21 f0       	breq	.+8      	; 0x1cd8 <vfprintf+0x278>
    1cd0:	88 37       	cpi	r24, 0x78	; 120
    1cd2:	09 f0       	breq	.+2      	; 0x1cd6 <vfprintf+0x276>
    1cd4:	a8 c0       	rjmp	.+336    	; 0x1e26 <vfprintf+0x3c6>
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <vfprintf+0x27c>
    1cd8:	20 e1       	ldi	r18, 0x10	; 16
    1cda:	b2 2a       	or	r11, r18
    1cdc:	b4 fe       	sbrs	r11, 4
    1cde:	0b c0       	rjmp	.+22     	; 0x1cf6 <vfprintf+0x296>
    1ce0:	84 e0       	ldi	r24, 0x04	; 4
    1ce2:	b8 2a       	or	r11, r24
    1ce4:	08 c0       	rjmp	.+16     	; 0x1cf6 <vfprintf+0x296>
    1ce6:	b4 fe       	sbrs	r11, 4
    1ce8:	09 c0       	rjmp	.+18     	; 0x1cfc <vfprintf+0x29c>
    1cea:	e6 e0       	ldi	r30, 0x06	; 6
    1cec:	be 2a       	or	r11, r30
    1cee:	06 c0       	rjmp	.+12     	; 0x1cfc <vfprintf+0x29c>
    1cf0:	28 e0       	ldi	r18, 0x08	; 8
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	05 c0       	rjmp	.+10     	; 0x1d00 <vfprintf+0x2a0>
    1cf6:	20 e1       	ldi	r18, 0x10	; 16
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <vfprintf+0x2a0>
    1cfc:	20 e1       	ldi	r18, 0x10	; 16
    1cfe:	32 e0       	ldi	r19, 0x02	; 2
    1d00:	b7 fe       	sbrs	r11, 7
    1d02:	08 c0       	rjmp	.+16     	; 0x1d14 <vfprintf+0x2b4>
    1d04:	f8 01       	movw	r30, r16
    1d06:	60 81       	ld	r22, Z
    1d08:	71 81       	ldd	r23, Z+1	; 0x01
    1d0a:	82 81       	ldd	r24, Z+2	; 0x02
    1d0c:	93 81       	ldd	r25, Z+3	; 0x03
    1d0e:	0c 5f       	subi	r16, 0xFC	; 252
    1d10:	1f 4f       	sbci	r17, 0xFF	; 255
    1d12:	07 c0       	rjmp	.+14     	; 0x1d22 <vfprintf+0x2c2>
    1d14:	f8 01       	movw	r30, r16
    1d16:	60 81       	ld	r22, Z
    1d18:	71 81       	ldd	r23, Z+1	; 0x01
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	0e 5f       	subi	r16, 0xFE	; 254
    1d20:	1f 4f       	sbci	r17, 0xFF	; 255
    1d22:	a2 01       	movw	r20, r4
    1d24:	e2 d0       	rcall	.+452    	; 0x1eea <__ultoa_invert>
    1d26:	78 2e       	mov	r7, r24
    1d28:	74 18       	sub	r7, r4
    1d2a:	ff e7       	ldi	r31, 0x7F	; 127
    1d2c:	bf 22       	and	r11, r31
    1d2e:	b6 fe       	sbrs	r11, 6
    1d30:	0b c0       	rjmp	.+22     	; 0x1d48 <vfprintf+0x2e8>
    1d32:	2e ef       	ldi	r18, 0xFE	; 254
    1d34:	b2 22       	and	r11, r18
    1d36:	7e 14       	cp	r7, r14
    1d38:	38 f4       	brcc	.+14     	; 0x1d48 <vfprintf+0x2e8>
    1d3a:	b4 fe       	sbrs	r11, 4
    1d3c:	07 c0       	rjmp	.+14     	; 0x1d4c <vfprintf+0x2ec>
    1d3e:	b2 fc       	sbrc	r11, 2
    1d40:	05 c0       	rjmp	.+10     	; 0x1d4c <vfprintf+0x2ec>
    1d42:	8f ee       	ldi	r24, 0xEF	; 239
    1d44:	b8 22       	and	r11, r24
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <vfprintf+0x2ec>
    1d48:	a7 2c       	mov	r10, r7
    1d4a:	01 c0       	rjmp	.+2      	; 0x1d4e <vfprintf+0x2ee>
    1d4c:	ae 2c       	mov	r10, r14
    1d4e:	8b 2d       	mov	r24, r11
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	b4 fe       	sbrs	r11, 4
    1d54:	0d c0       	rjmp	.+26     	; 0x1d70 <vfprintf+0x310>
    1d56:	fe 01       	movw	r30, r28
    1d58:	e7 0d       	add	r30, r7
    1d5a:	f1 1d       	adc	r31, r1
    1d5c:	20 81       	ld	r18, Z
    1d5e:	20 33       	cpi	r18, 0x30	; 48
    1d60:	19 f4       	brne	.+6      	; 0x1d68 <vfprintf+0x308>
    1d62:	e9 ee       	ldi	r30, 0xE9	; 233
    1d64:	be 22       	and	r11, r30
    1d66:	09 c0       	rjmp	.+18     	; 0x1d7a <vfprintf+0x31a>
    1d68:	a3 94       	inc	r10
    1d6a:	b2 fe       	sbrs	r11, 2
    1d6c:	06 c0       	rjmp	.+12     	; 0x1d7a <vfprintf+0x31a>
    1d6e:	04 c0       	rjmp	.+8      	; 0x1d78 <vfprintf+0x318>
    1d70:	86 78       	andi	r24, 0x86	; 134
    1d72:	90 70       	andi	r25, 0x00	; 0
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	09 f0       	breq	.+2      	; 0x1d7a <vfprintf+0x31a>
    1d78:	a3 94       	inc	r10
    1d7a:	8b 2c       	mov	r8, r11
    1d7c:	99 24       	eor	r9, r9
    1d7e:	b3 fc       	sbrc	r11, 3
    1d80:	13 c0       	rjmp	.+38     	; 0x1da8 <vfprintf+0x348>
    1d82:	b0 fe       	sbrs	r11, 0
    1d84:	0e c0       	rjmp	.+28     	; 0x1da2 <vfprintf+0x342>
    1d86:	af 14       	cp	r10, r15
    1d88:	28 f4       	brcc	.+10     	; 0x1d94 <vfprintf+0x334>
    1d8a:	e7 2c       	mov	r14, r7
    1d8c:	ef 0c       	add	r14, r15
    1d8e:	ea 18       	sub	r14, r10
    1d90:	af 2c       	mov	r10, r15
    1d92:	07 c0       	rjmp	.+14     	; 0x1da2 <vfprintf+0x342>
    1d94:	e7 2c       	mov	r14, r7
    1d96:	05 c0       	rjmp	.+10     	; 0x1da2 <vfprintf+0x342>
    1d98:	80 e2       	ldi	r24, 0x20	; 32
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	b6 01       	movw	r22, r12
    1d9e:	79 d0       	rcall	.+242    	; 0x1e92 <fputc>
    1da0:	a3 94       	inc	r10
    1da2:	af 14       	cp	r10, r15
    1da4:	c8 f3       	brcs	.-14     	; 0x1d98 <vfprintf+0x338>
    1da6:	04 c0       	rjmp	.+8      	; 0x1db0 <vfprintf+0x350>
    1da8:	af 14       	cp	r10, r15
    1daa:	10 f4       	brcc	.+4      	; 0x1db0 <vfprintf+0x350>
    1dac:	fa 18       	sub	r15, r10
    1dae:	01 c0       	rjmp	.+2      	; 0x1db2 <vfprintf+0x352>
    1db0:	ff 24       	eor	r15, r15
    1db2:	84 fe       	sbrs	r8, 4
    1db4:	0e c0       	rjmp	.+28     	; 0x1dd2 <vfprintf+0x372>
    1db6:	80 e3       	ldi	r24, 0x30	; 48
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	b6 01       	movw	r22, r12
    1dbc:	6a d0       	rcall	.+212    	; 0x1e92 <fputc>
    1dbe:	82 fe       	sbrs	r8, 2
    1dc0:	1d c0       	rjmp	.+58     	; 0x1dfc <vfprintf+0x39c>
    1dc2:	81 fe       	sbrs	r8, 1
    1dc4:	03 c0       	rjmp	.+6      	; 0x1dcc <vfprintf+0x36c>
    1dc6:	88 e5       	ldi	r24, 0x58	; 88
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	10 c0       	rjmp	.+32     	; 0x1dec <vfprintf+0x38c>
    1dcc:	88 e7       	ldi	r24, 0x78	; 120
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	0d c0       	rjmp	.+26     	; 0x1dec <vfprintf+0x38c>
    1dd2:	c4 01       	movw	r24, r8
    1dd4:	86 78       	andi	r24, 0x86	; 134
    1dd6:	90 70       	andi	r25, 0x00	; 0
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	81 f0       	breq	.+32     	; 0x1dfc <vfprintf+0x39c>
    1ddc:	81 fc       	sbrc	r8, 1
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <vfprintf+0x384>
    1de0:	80 e2       	ldi	r24, 0x20	; 32
    1de2:	01 c0       	rjmp	.+2      	; 0x1de6 <vfprintf+0x386>
    1de4:	8b e2       	ldi	r24, 0x2B	; 43
    1de6:	b7 fc       	sbrc	r11, 7
    1de8:	8d e2       	ldi	r24, 0x2D	; 45
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	b6 01       	movw	r22, r12
    1dee:	51 d0       	rcall	.+162    	; 0x1e92 <fputc>
    1df0:	05 c0       	rjmp	.+10     	; 0x1dfc <vfprintf+0x39c>
    1df2:	80 e3       	ldi	r24, 0x30	; 48
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	b6 01       	movw	r22, r12
    1df8:	4c d0       	rcall	.+152    	; 0x1e92 <fputc>
    1dfa:	ea 94       	dec	r14
    1dfc:	7e 14       	cp	r7, r14
    1dfe:	c8 f3       	brcs	.-14     	; 0x1df2 <vfprintf+0x392>
    1e00:	7a 94       	dec	r7
    1e02:	f2 01       	movw	r30, r4
    1e04:	e7 0d       	add	r30, r7
    1e06:	f1 1d       	adc	r31, r1
    1e08:	80 81       	ld	r24, Z
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	b6 01       	movw	r22, r12
    1e0e:	41 d0       	rcall	.+130    	; 0x1e92 <fputc>
    1e10:	77 20       	and	r7, r7
    1e12:	b1 f7       	brne	.-20     	; 0x1e00 <vfprintf+0x3a0>
    1e14:	05 c0       	rjmp	.+10     	; 0x1e20 <vfprintf+0x3c0>
    1e16:	80 e2       	ldi	r24, 0x20	; 32
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	b6 01       	movw	r22, r12
    1e1c:	3a d0       	rcall	.+116    	; 0x1e92 <fputc>
    1e1e:	fa 94       	dec	r15
    1e20:	ff 20       	and	r15, r15
    1e22:	c9 f7       	brne	.-14     	; 0x1e16 <vfprintf+0x3b6>
    1e24:	44 ce       	rjmp	.-888    	; 0x1aae <vfprintf+0x4e>
    1e26:	f6 01       	movw	r30, r12
    1e28:	26 81       	ldd	r18, Z+6	; 0x06
    1e2a:	37 81       	ldd	r19, Z+7	; 0x07
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <vfprintf+0x3d2>
    1e2e:	2f ef       	ldi	r18, 0xFF	; 255
    1e30:	3f ef       	ldi	r19, 0xFF	; 255
    1e32:	c9 01       	movw	r24, r18
    1e34:	2c 96       	adiw	r28, 0x0c	; 12
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	ff 90       	pop	r15
    1e4a:	ef 90       	pop	r14
    1e4c:	df 90       	pop	r13
    1e4e:	cf 90       	pop	r12
    1e50:	bf 90       	pop	r11
    1e52:	af 90       	pop	r10
    1e54:	9f 90       	pop	r9
    1e56:	8f 90       	pop	r8
    1e58:	7f 90       	pop	r7
    1e5a:	6f 90       	pop	r6
    1e5c:	5f 90       	pop	r5
    1e5e:	4f 90       	pop	r4
    1e60:	3f 90       	pop	r3
    1e62:	2f 90       	pop	r2
    1e64:	08 95       	ret

00001e66 <strnlen_P>:
    1e66:	fc 01       	movw	r30, r24
    1e68:	05 90       	lpm	r0, Z+
    1e6a:	61 50       	subi	r22, 0x01	; 1
    1e6c:	70 40       	sbci	r23, 0x00	; 0
    1e6e:	01 10       	cpse	r0, r1
    1e70:	d8 f7       	brcc	.-10     	; 0x1e68 <strnlen_P+0x2>
    1e72:	80 95       	com	r24
    1e74:	90 95       	com	r25
    1e76:	8e 0f       	add	r24, r30
    1e78:	9f 1f       	adc	r25, r31
    1e7a:	08 95       	ret

00001e7c <strnlen>:
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	61 50       	subi	r22, 0x01	; 1
    1e80:	70 40       	sbci	r23, 0x00	; 0
    1e82:	01 90       	ld	r0, Z+
    1e84:	01 10       	cpse	r0, r1
    1e86:	d8 f7       	brcc	.-10     	; 0x1e7e <strnlen+0x2>
    1e88:	80 95       	com	r24
    1e8a:	90 95       	com	r25
    1e8c:	8e 0f       	add	r24, r30
    1e8e:	9f 1f       	adc	r25, r31
    1e90:	08 95       	ret

00001e92 <fputc>:
    1e92:	0f 93       	push	r16
    1e94:	1f 93       	push	r17
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
    1e9a:	8c 01       	movw	r16, r24
    1e9c:	eb 01       	movw	r28, r22
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	81 ff       	sbrs	r24, 1
    1ea2:	1b c0       	rjmp	.+54     	; 0x1eda <fputc+0x48>
    1ea4:	82 ff       	sbrs	r24, 2
    1ea6:	0d c0       	rjmp	.+26     	; 0x1ec2 <fputc+0x30>
    1ea8:	2e 81       	ldd	r18, Y+6	; 0x06
    1eaa:	3f 81       	ldd	r19, Y+7	; 0x07
    1eac:	8c 81       	ldd	r24, Y+4	; 0x04
    1eae:	9d 81       	ldd	r25, Y+5	; 0x05
    1eb0:	28 17       	cp	r18, r24
    1eb2:	39 07       	cpc	r19, r25
    1eb4:	64 f4       	brge	.+24     	; 0x1ece <fputc+0x3c>
    1eb6:	e8 81       	ld	r30, Y
    1eb8:	f9 81       	ldd	r31, Y+1	; 0x01
    1eba:	01 93       	st	Z+, r16
    1ebc:	f9 83       	std	Y+1, r31	; 0x01
    1ebe:	e8 83       	st	Y, r30
    1ec0:	06 c0       	rjmp	.+12     	; 0x1ece <fputc+0x3c>
    1ec2:	e8 85       	ldd	r30, Y+8	; 0x08
    1ec4:	f9 85       	ldd	r31, Y+9	; 0x09
    1ec6:	80 2f       	mov	r24, r16
    1ec8:	09 95       	icall
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	31 f4       	brne	.+12     	; 0x1eda <fputc+0x48>
    1ece:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ed2:	01 96       	adiw	r24, 0x01	; 1
    1ed4:	9f 83       	std	Y+7, r25	; 0x07
    1ed6:	8e 83       	std	Y+6, r24	; 0x06
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <fputc+0x4c>
    1eda:	0f ef       	ldi	r16, 0xFF	; 255
    1edc:	1f ef       	ldi	r17, 0xFF	; 255
    1ede:	c8 01       	movw	r24, r16
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	1f 91       	pop	r17
    1ee6:	0f 91       	pop	r16
    1ee8:	08 95       	ret

00001eea <__ultoa_invert>:
    1eea:	fa 01       	movw	r30, r20
    1eec:	aa 27       	eor	r26, r26
    1eee:	28 30       	cpi	r18, 0x08	; 8
    1ef0:	51 f1       	breq	.+84     	; 0x1f46 <__ultoa_invert+0x5c>
    1ef2:	20 31       	cpi	r18, 0x10	; 16
    1ef4:	81 f1       	breq	.+96     	; 0x1f56 <__ultoa_invert+0x6c>
    1ef6:	e8 94       	clt
    1ef8:	6f 93       	push	r22
    1efa:	6e 7f       	andi	r22, 0xFE	; 254
    1efc:	6e 5f       	subi	r22, 0xFE	; 254
    1efe:	7f 4f       	sbci	r23, 0xFF	; 255
    1f00:	8f 4f       	sbci	r24, 0xFF	; 255
    1f02:	9f 4f       	sbci	r25, 0xFF	; 255
    1f04:	af 4f       	sbci	r26, 0xFF	; 255
    1f06:	b1 e0       	ldi	r27, 0x01	; 1
    1f08:	3e d0       	rcall	.+124    	; 0x1f86 <__ultoa_invert+0x9c>
    1f0a:	b4 e0       	ldi	r27, 0x04	; 4
    1f0c:	3c d0       	rcall	.+120    	; 0x1f86 <__ultoa_invert+0x9c>
    1f0e:	67 0f       	add	r22, r23
    1f10:	78 1f       	adc	r23, r24
    1f12:	89 1f       	adc	r24, r25
    1f14:	9a 1f       	adc	r25, r26
    1f16:	a1 1d       	adc	r26, r1
    1f18:	68 0f       	add	r22, r24
    1f1a:	79 1f       	adc	r23, r25
    1f1c:	8a 1f       	adc	r24, r26
    1f1e:	91 1d       	adc	r25, r1
    1f20:	a1 1d       	adc	r26, r1
    1f22:	6a 0f       	add	r22, r26
    1f24:	71 1d       	adc	r23, r1
    1f26:	81 1d       	adc	r24, r1
    1f28:	91 1d       	adc	r25, r1
    1f2a:	a1 1d       	adc	r26, r1
    1f2c:	20 d0       	rcall	.+64     	; 0x1f6e <__ultoa_invert+0x84>
    1f2e:	09 f4       	brne	.+2      	; 0x1f32 <__ultoa_invert+0x48>
    1f30:	68 94       	set
    1f32:	3f 91       	pop	r19
    1f34:	2a e0       	ldi	r18, 0x0A	; 10
    1f36:	26 9f       	mul	r18, r22
    1f38:	11 24       	eor	r1, r1
    1f3a:	30 19       	sub	r19, r0
    1f3c:	30 5d       	subi	r19, 0xD0	; 208
    1f3e:	31 93       	st	Z+, r19
    1f40:	de f6       	brtc	.-74     	; 0x1ef8 <__ultoa_invert+0xe>
    1f42:	cf 01       	movw	r24, r30
    1f44:	08 95       	ret
    1f46:	46 2f       	mov	r20, r22
    1f48:	47 70       	andi	r20, 0x07	; 7
    1f4a:	40 5d       	subi	r20, 0xD0	; 208
    1f4c:	41 93       	st	Z+, r20
    1f4e:	b3 e0       	ldi	r27, 0x03	; 3
    1f50:	0f d0       	rcall	.+30     	; 0x1f70 <__ultoa_invert+0x86>
    1f52:	c9 f7       	brne	.-14     	; 0x1f46 <__ultoa_invert+0x5c>
    1f54:	f6 cf       	rjmp	.-20     	; 0x1f42 <__ultoa_invert+0x58>
    1f56:	46 2f       	mov	r20, r22
    1f58:	4f 70       	andi	r20, 0x0F	; 15
    1f5a:	40 5d       	subi	r20, 0xD0	; 208
    1f5c:	4a 33       	cpi	r20, 0x3A	; 58
    1f5e:	18 f0       	brcs	.+6      	; 0x1f66 <__ultoa_invert+0x7c>
    1f60:	49 5d       	subi	r20, 0xD9	; 217
    1f62:	31 fd       	sbrc	r19, 1
    1f64:	40 52       	subi	r20, 0x20	; 32
    1f66:	41 93       	st	Z+, r20
    1f68:	02 d0       	rcall	.+4      	; 0x1f6e <__ultoa_invert+0x84>
    1f6a:	a9 f7       	brne	.-22     	; 0x1f56 <__ultoa_invert+0x6c>
    1f6c:	ea cf       	rjmp	.-44     	; 0x1f42 <__ultoa_invert+0x58>
    1f6e:	b4 e0       	ldi	r27, 0x04	; 4
    1f70:	a6 95       	lsr	r26
    1f72:	97 95       	ror	r25
    1f74:	87 95       	ror	r24
    1f76:	77 95       	ror	r23
    1f78:	67 95       	ror	r22
    1f7a:	ba 95       	dec	r27
    1f7c:	c9 f7       	brne	.-14     	; 0x1f70 <__ultoa_invert+0x86>
    1f7e:	00 97       	sbiw	r24, 0x00	; 0
    1f80:	61 05       	cpc	r22, r1
    1f82:	71 05       	cpc	r23, r1
    1f84:	08 95       	ret
    1f86:	9b 01       	movw	r18, r22
    1f88:	ac 01       	movw	r20, r24
    1f8a:	0a 2e       	mov	r0, r26
    1f8c:	06 94       	lsr	r0
    1f8e:	57 95       	ror	r21
    1f90:	47 95       	ror	r20
    1f92:	37 95       	ror	r19
    1f94:	27 95       	ror	r18
    1f96:	ba 95       	dec	r27
    1f98:	c9 f7       	brne	.-14     	; 0x1f8c <__ultoa_invert+0xa2>
    1f9a:	62 0f       	add	r22, r18
    1f9c:	73 1f       	adc	r23, r19
    1f9e:	84 1f       	adc	r24, r20
    1fa0:	95 1f       	adc	r25, r21
    1fa2:	a0 1d       	adc	r26, r0
    1fa4:	08 95       	ret

00001fa6 <_exit>:
    1fa6:	f8 94       	cli

00001fa8 <__stop_program>:
    1fa8:	ff cf       	rjmp	.-2      	; 0x1fa8 <__stop_program>
