
Stabily.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800100  00005124  000051b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005124  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002b8  008001b8  008001b8  00005270  2**0
                  ALLOC
  3 .stab         0000141c  00000000  00000000  00005270  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000055f  00000000  00000000  0000668c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000a10  00000000  00000000  00006beb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000160c  00000000  00000000  000075fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000114c2  00000000  00000000  00008c07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000041b3  00000000  00000000  0001a0c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000d05d  00000000  00000000  0001e27c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f40  00000000  00000000  0002b2dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000074a0  00000000  00000000  0002c21c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000099ad  00000000  00000000  000336bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000236f  00000000  00000000  0003d069  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d50  00000000  00000000  0003f3d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	f9 c7       	rjmp	.+4082   	; 0xff4 <__ctors_end>
	for (; arrayLength>0; arrayLength--, (*count)-=2, (*pp)+=2)
	{
		printf_P(PSTR("%c"), (char)(**pp) );
	}
	return (arrayLength == 0);
}
       2:	00 00       	nop
       4:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__bad_interrupt>
       8:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__bad_interrupt>
       c:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__bad_interrupt>
      10:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__bad_interrupt>
      14:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__bad_interrupt>
      18:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__bad_interrupt>
      1c:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__bad_interrupt>
      20:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__bad_interrupt>
      24:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__bad_interrupt>
      28:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__vector_10>
      2c:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__bad_interrupt>
      30:	ff c7       	rjmp	.+4094   	; 0x1030 <__bad_interrupt>
      32:	00 00       	nop
      34:	fd c7       	rjmp	.+4090   	; 0x1030 <__bad_interrupt>
      36:	00 00       	nop
      38:	fb c7       	rjmp	.+4086   	; 0x1030 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f9 c7       	rjmp	.+4082   	; 0x1030 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f7 c7       	rjmp	.+4078   	; 0x1030 <__bad_interrupt>
      42:	00 00       	nop
      44:	f5 c7       	rjmp	.+4074   	; 0x1030 <__bad_interrupt>
      46:	00 00       	nop
      48:	f3 c7       	rjmp	.+4070   	; 0x1030 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f1 c7       	rjmp	.+4066   	; 0x1030 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ef c7       	rjmp	.+4062   	; 0x1030 <__bad_interrupt>
      52:	00 00       	nop
      54:	ed c7       	rjmp	.+4058   	; 0x1030 <__bad_interrupt>
      56:	00 00       	nop
      58:	eb c7       	rjmp	.+4054   	; 0x1030 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e9 c7       	rjmp	.+4050   	; 0x1030 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e7 c7       	rjmp	.+4046   	; 0x1030 <__bad_interrupt>
      62:	00 00       	nop
      64:	e5 c7       	rjmp	.+4042   	; 0x1030 <__bad_interrupt>
      66:	00 00       	nop
      68:	e3 c7       	rjmp	.+4038   	; 0x1030 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e1 c7       	rjmp	.+4034   	; 0x1030 <__bad_interrupt>
      6e:	00 00       	nop
      70:	df c7       	rjmp	.+4030   	; 0x1030 <__bad_interrupt>
      72:	00 00       	nop
      74:	dd c7       	rjmp	.+4026   	; 0x1030 <__bad_interrupt>
      76:	00 00       	nop
      78:	db c7       	rjmp	.+4022   	; 0x1030 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d9 c7       	rjmp	.+4018   	; 0x1030 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d7 c7       	rjmp	.+4014   	; 0x1030 <__bad_interrupt>
      82:	00 00       	nop
      84:	d5 c7       	rjmp	.+4010   	; 0x1030 <__bad_interrupt>
      86:	00 00       	nop
      88:	d3 c7       	rjmp	.+4006   	; 0x1030 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d1 c7       	rjmp	.+4002   	; 0x1030 <__bad_interrupt>
      8e:	00 00       	nop
      90:	cf c7       	rjmp	.+3998   	; 0x1030 <__bad_interrupt>
      92:	00 00       	nop
      94:	cd c7       	rjmp	.+3994   	; 0x1030 <__bad_interrupt>
      96:	00 00       	nop
      98:	f8 12       	cpse	r15, r24
      9a:	fc 12       	cpse	r15, r28
      9c:	00 13       	cpse	r16, r16
      9e:	04 13       	cpse	r16, r20
      a0:	08 13       	cpse	r16, r24
      a2:	0c 13       	cpse	r16, r28
      a4:	10 13       	cpse	r17, r16
      a6:	14 13       	cpse	r17, r20
      a8:	18 13       	cpse	r17, r24
      aa:	1c 13       	cpse	r17, r28
      ac:	20 13       	cpse	r18, r16
      ae:	24 13       	cpse	r18, r20
      b0:	28 13       	cpse	r18, r24
      b2:	2c 13       	cpse	r18, r28
      b4:	30 13       	cpse	r19, r16
      b6:	34 13       	cpse	r19, r20
      b8:	38 13       	cpse	r19, r24
      ba:	3c 13       	cpse	r19, r28
      bc:	40 13       	cpse	r20, r16
      be:	44 13       	cpse	r20, r20
      c0:	48 13       	cpse	r20, r24
      c2:	4c 13       	cpse	r20, r28
      c4:	50 13       	cpse	r21, r16
      c6:	54 13       	cpse	r21, r20
      c8:	58 13       	cpse	r21, r24
      ca:	5c 13       	cpse	r21, r28
      cc:	60 13       	cpse	r22, r16
      ce:	64 13       	cpse	r22, r20
      d0:	68 13       	cpse	r22, r24
      d2:	6c 13       	cpse	r22, r28
      d4:	70 13       	cpse	r23, r16
      d6:	74 13       	cpse	r23, r20

000000d8 <__c.4459>:
      d8:	1b 5b 33 36 6d 53 74 61 62 69 6c 79 20 76 31 2e     .[36mStabily v1.
      e8:	30 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b 33 37     0 running....[37
      f8:	6d 00                                               m.

000000fa <__c.4433>:
      fa:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
     10a:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
     11a:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
     12a:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
     13a:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
     14a:	1b 5b 33 37 6d 00                                   .[37m.

00000150 <__c.4426>:
     150:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
     160:	72 72 6f 72 0d 0a 20 2d 2d 20 56 42 55 53 20 76     rror.. -- VBUS v
     170:	6f 6c 74 61 67 65 20 64 72 6f 70 70 65 64 20 75     oltage dropped u
     180:	6e 64 65 72 20 34 2e 35 56 0d 0a 1b 5b 33 37 6d     nder 4.5V...[37m
     190:	00                                                  .

00000191 <__c.4421>:
     191:	43 61 6d 65 72 61 20 44 65 76 69 63 65 20 45 6e     Camera Device En
     1a1:	75 6d 65 72 61 74 65 64 2e 0d 0a 00                 umerated....

000001ad <__c.4419>:
     1ad:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     1bd:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     1cd:	6f 6e 2e 0d 0a 00                                   on....

000001d3 <__c.4417>:
     1d3:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     1e3:	4e 6f 74 20 61 20 56 61 6c 69 64 20 53 74 69 6c     Not a Valid Stil
     1f3:	6c 20 49 6d 61 67 65 20 43 6c 61 73 73 20 44 65     l Image Class De
     203:	76 69 63 65 2e 0d 0a 00                             vice....

0000020b <__c.4415>:
     20b:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     21b:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     22b:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

00000238 <__c.4408>:
     238:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     248:	68 65 64 2e 0d 0a 00                                hed....

0000024f <__c.4403>:
     24f:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     25f:	0d 0a 00                                            ...

00000262 <__c.4564>:
     262:	44 65 76 69 63 65 20 6e 6f 74 20 63 6f 6e 6e 65     Device not conne
     272:	63 74 65 64 2e 0d 0a 00                             cted....

0000027a <__c.4556>:
     27a:	44 65 76 69 63 65 20 6e 6f 74 20 63 6f 6e 6e 65     Device not conne
     28a:	63 74 65 64 2e 0d 0a 00                             cted....

00000292 <__c.4550>:
     292:	44 65 76 69 63 65 20 6e 6f 74 20 63 6f 6e 6e 65     Device not conne
     2a2:	63 74 65 64 2e 0d 0a 00                             cted....

000002aa <__c.4543>:
     2aa:	44 65 76 69 63 65 20 6e 6f 74 20 63 6f 6e 6e 65     Device not conne
     2ba:	63 74 65 64 2e 0d 0a 00                             cted....

000002c2 <__c.4528>:
     2c2:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 65 72 72     Unrecognized err
     2d2:	6f 72 2e 0d 0a 00                                   or....

000002d8 <__c.4525>:
     2d8:	45 72 72 6f 72 20 63 6f 64 65 20 66 6f 72 20 73     Error code for s
     2e8:	6f 6d 65 20 53 74 69 6c 6c 20 49 6d 61 67 65 20     ome Still Image 
     2f8:	48 6f 73 74 20 66 75 6e 63 74 69 6f 6e 73 2c 20     Host functions, 
     308:	69 6e 64 69 63 61 74 69 6e 67 20 61 20 6c 6f 67     indicating a log
     318:	69 63 61 6c 20 28 61 6e 64 20 6e 6f 74 20 68 61     ical (and not ha
     328:	72 64 77 61 72 65 29 20 65 72 72 6f 72 2e 0d 0a     rdware) error...
     338:	00                                                  .

00000339 <__c.4522>:
     339:	49 6e 64 69 63 61 74 65 73 20 74 68 61 74 20 74     Indicates that t
     349:	68 65 20 70 69 70 65 20 62 61 6e 6b 20 62 65 63     he pipe bank bec
     359:	61 6d 65 20 66 75 6c 6c 2f 65 6d 70 74 79 20 62     ame full/empty b
     369:	65 66 6f 72 65 20 74 68 65 20 63 6f 6d 70 6c 65     efore the comple
     379:	74 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66 20 74     te contents of t
     389:	68 65 20 73 74 72 65 61 6d 20 63 6f 75 6c 64 20     he stream could 
     399:	62 65 20 74 72 61 6e 73 66 65 72 72 65 64 2e 0d     be transferred..
     3a9:	0a 00                                               ..

000003ab <__c.4519>:
     3ab:	54 68 65 20 64 65 76 69 63 65 20 66 61 69 6c 65     The device faile
     3bb:	64 20 74 6f 20 61 63 63 65 70 74 20 6f 72 20 73     d to accept or s
     3cb:	65 6e 64 20 74 68 65 20 6e 65 78 74 20 70 61 63     end the next pac
     3db:	6b 65 74 20 77 69 74 68 69 6e 20 74 68 65 20 73     ket within the s
     3eb:	6f 66 74 77 61 72 65 20 74 69 6d 65 6f 75 74 20     oftware timeout 
     3fb:	70 65 72 69 6f 64 20 73 65 74 20 62 79 20 74 68     period set by th
     40b:	65 20 55 53 42 5f 53 54 52 45 41 4d 5f 54 49 4d     e USB_STREAM_TIM
     41b:	45 4f 55 54 5f 4d 53 20 6d 61 63 72 6f 2e 0d 0a     EOUT_MS macro...
     42b:	00                                                  .

0000042c <__c.4516>:
     42c:	44 65 76 69 63 65 20 77 61 73 20 64 69 73 63 6f     Device was disco
     43c:	6e 6e 65 63 74 65 64 20 66 72 6f 6d 20 74 68 65     nnected from the
     44c:	20 68 6f 73 74 20 64 75 72 69 6e 67 20 74 68 65      host during the
     45c:	20 74 72 61 6e 73 66 65 72 2e 0d 0a 00               transfer....

00000469 <__c.4512>:
     469:	54 68 65 20 64 65 76 69 63 65 20 73 74 61 6c 6c     The device stall
     479:	65 64 20 74 68 65 20 70 69 70 65 20 64 75 72 69     ed the pipe duri
     489:	6e 67 20 74 68 65 20 74 72 61 6e 73 66 65 72 2e     ng the transfer.
     499:	0d 0a 00                                            ...

0000049c <__c.4509>:
     49c:	50 49 4d 41 20 45 72 72 6f 72 20 28 25 64 29 3a     PIMA Error (%d):
     4ac:	20 00                                                .

000004ae <__c.4504>:
     4ae:	1b 5b 33 31 6d 55 6e 64 65 66 69 6e 65 64 20 6f     .[31mUndefined o
     4be:	72 20 56 65 6e 64 6f 72 20 53 70 65 63 69 66 69     r Vendor Specifi
     4ce:	63 0d 0a 1b 5b 33 37 6d 00                          c...[37m.

000004d7 <__c.4501>:
     4d7:	1b 5b 33 31 6d 53 70 65 63 69 66 69 63 61 74 69     .[31mSpecificati
     4e7:	6f 6e 20 6f 66 20 44 65 73 74 69 6e 61 74 69 6f     on of Destinatio
     4f7:	6e 20 55 6e 73 75 70 70 6f 72 74 65 64 0d 0a 1b     n Unsupported...
     507:	5b 33 37 6d 00                                      [37m.

0000050c <__c.4498>:
     50c:	1b 5b 33 31 6d 54 72 61 6e 73 61 63 74 69 6f 6e     .[31mTransaction
     51c:	20 43 61 6e 63 65 6c 6c 65 64 0d 0a 1b 5b 33 37      Cancelled...[37
     52c:	6d 00                                               m.

0000052e <__c.4495>:
     52e:	1b 5b 33 31 6d 53 65 73 73 69 6f 6e 20 41 6c 72     .[31mSession Alr
     53e:	65 61 64 79 20 4f 70 65 6e 0d 0a 1b 5b 33 37 6d     eady Open...[37m
     54e:	00                                                  .

0000054f <__c.4492>:
     54f:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 50 61 72     .[31mInvalid Par
     55f:	61 6d 65 74 65 72 0d 0a 1b 5b 33 37 6d 00           ameter...[37m.

0000056d <__c.4489>:
     56d:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     57d:	69 63 65 50 72 6f 70 20 56 61 6c 75 65 0d 0a 1b     iceProp Value...
     58d:	5b 33 37 6d 00                                      [37m.

00000592 <__c.4486>:
     592:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     5a2:	69 63 65 50 72 6f 70 20 46 6f 72 6d 61 74 0d 0a     iceProp Format..
     5b2:	1b 5b 33 37 6d 00                                   .[37m.

000005b8 <__c.4483>:
     5b8:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 50 61 72     .[31mInvalid Par
     5c8:	65 6e 74 4f 62 6a 65 63 74 0d 0a 1b 5b 33 37 6d     entObject...[37m
     5d8:	00                                                  .

000005d9 <__c.4480>:
     5d9:	1b 5b 33 31 6d 44 65 76 69 63 65 20 42 75 73 79     .[31mDevice Busy
     5e9:	0d 0a 1b 5b 33 37 6d 00                             ...[37m.

000005f1 <__c.4477>:
     5f1:	1b 5b 33 31 6d 43 61 70 74 75 72 65 20 41 6c 72     .[31mCapture Alr
     601:	65 61 64 79 20 54 65 72 6d 69 6e 61 74 65 64 0d     eady Terminated.
     611:	0a 1b 5b 33 37 6d 00                                ..[37m.

00000618 <__c.4474>:
     618:	1b 5b 33 31 6d 55 6e 6b 6e 6f 77 6e 20 56 65 6e     .[31mUnknown Ven
     628:	64 6f 72 20 43 6f 64 65 0d 0a 1b 5b 33 37 6d 00     dor Code...[37m.

00000638 <__c.4471>:
     638:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 43 6f 64     .[31mInvalid Cod
     648:	65 20 46 6f 72 6d 61 74 0d 0a 1b 5b 33 37 6d 00     e Format...[37m.

00000658 <__c.4468>:
     658:	1b 5b 33 31 6d 4e 6f 20 56 61 6c 69 64 20 4f 62     .[31mNo Valid Ob
     668:	6a 65 63 74 49 6e 66 6f 0d 0a 1b 5b 33 37 6d 00     jectInfo...[37m.

00000678 <__c.4465>:
     678:	1b 5b 33 31 6d 53 70 65 63 69 66 69 63 61 74 69     .[31mSpecificati
     688:	6f 6e 20 42 79 20 46 6f 72 6d 61 74 20 55 6e 73     on By Format Uns
     698:	75 70 70 6f 72 74 65 64 0d 0a 1b 5b 33 37 6d 00     upported...[37m.

000006a8 <__c.4462>:
     6a8:	1b 5b 33 31 6d 53 74 6f 72 65 20 4e 6f 74 20 41     .[31mStore Not A
     6b8:	76 61 69 6c 61 62 6c 65 0d 0a 1b 5b 33 37 6d 00     vailable...[37m.

000006c8 <__c.4459>:
     6c8:	1b 5b 33 31 6d 50 61 72 74 69 61 6c 20 44 65 6c     .[31mPartial Del
     6d8:	65 74 69 6f 6e 0d 0a 1b 5b 33 37 6d 00              etion...[37m.

000006e5 <__c.4456>:
     6e5:	1b 5b 33 31 6d 53 65 6c 66 54 65 73 74 20 46 61     .[31mSelfTest Fa
     6f5:	69 6c 65 64 0d 0a 1b 5b 33 37 6d 00                 iled...[37m.

00000701 <__c.4453>:
     701:	1b 5b 33 31 6d 4e 6f 20 54 68 75 6d 62 6e 61 69     .[31mNo Thumbnai
     711:	6c 20 50 72 65 73 65 6e 74 0d 0a 1b 5b 33 37 6d     l Present...[37m
     721:	00                                                  .

00000722 <__c.4450>:
     722:	1b 5b 33 31 6d 41 63 63 65 73 73 20 44 65 6e 69     .[31mAccess Deni
     732:	65 64 0d 0a 1b 5b 33 37 6d 00                       ed...[37m.

0000073c <__c.4447>:
     73c:	1b 5b 33 31 6d 53 74 6f 72 65 20 52 65 61 64 2d     .[31mStore Read-
     74c:	4f 6e 6c 79 0d 0a 1b 5b 33 37 6d 00                 Only...[37m.

00000758 <__c.4444>:
     758:	1b 5b 33 31 6d 4f 62 6a 65 63 74 20 57 72 69 74     .[31mObject Writ
     768:	65 50 72 6f 74 65 63 74 65 64 0d 0a 1b 5b 33 37     eProtected...[37
     778:	6d 00                                               m.

0000077a <__c.4441>:
     77a:	1b 5b 33 31 6d 53 74 6f 72 65 20 46 75 6c 6c 0d     .[31mStore Full.
     78a:	0a 1b 5b 33 37 6d 00                                ..[37m.

00000791 <__c.4438>:
     791:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 4f 62 6a     .[31mInvalid Obj
     7a1:	65 63 74 46 6f 72 6d 61 74 43 6f 64 65 0d 0a 1b     ectFormatCode...
     7b1:	5b 33 37 6d 00                                      [37m.

000007b6 <__c.4435>:
     7b6:	1b 5b 33 31 6d 44 65 76 69 63 65 50 72 6f 70 20     .[31mDeviceProp 
     7c6:	4e 6f 74 20 53 75 70 70 6f 72 74 65 64 0d 0a 1b     Not Supported...
     7d6:	5b 33 37 6d 00                                      [37m.

000007db <__c.4432>:
     7db:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 4f 62 6a     .[31mInvalid Obj
     7eb:	65 63 74 48 61 6e 64 6c 65 0d 0a 1b 5b 33 37 6d     ectHandle...[37m
     7fb:	00                                                  .

000007fc <__c.4429>:
     7fc:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 53 74 6f     .[31mInvalid Sto
     80c:	72 61 67 65 49 44 0d 0a 1b 5b 33 37 6d 00           rageID...[37m.

0000081a <__c.4426>:
     81a:	1b 5b 33 31 6d 49 6e 63 6f 6d 70 6c 65 74 65 20     .[31mIncomplete 
     82a:	54 72 61 6e 73 66 65 72 0d 0a 1b 5b 33 37 6d 00     Transfer...[37m.

0000083a <__c.4423>:
     83a:	1b 5b 33 31 6d 50 61 72 61 6d 65 74 65 72 20 4e     .[31mParameter N
     84a:	6f 74 20 53 75 70 70 6f 72 74 65 64 0d 0a 1b 5b     ot Supported...[
     85a:	33 37 6d 00                                         37m.

0000085e <__c.4420>:
     85e:	1b 5b 33 31 6d 4f 70 65 72 61 74 69 6f 6e 20 4e     .[31mOperation N
     86e:	6f 74 20 53 75 70 70 6f 72 74 65 64 0d 0a 1b 5b     ot Supported...[
     87e:	33 37 6d 00                                         37m.

00000882 <__c.4417>:
     882:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 54 72 61     .[31mInvalid Tra
     892:	6e 73 61 63 74 69 6f 6e 49 44 0d 0a 1b 5b 33 37     nsactionID...[37
     8a2:	6d 00                                               m.

000008a4 <__c.4414>:
     8a4:	1b 5b 33 31 6d 53 65 73 73 69 6f 6e 20 4e 6f 74     .[31mSession Not
     8b4:	20 4f 70 65 6e 0d 0a 1b 5b 33 37 6d 00               Open...[37m.

000008c1 <__c.4411>:
     8c1:	1b 5b 33 31 6d 47 65 6e 65 72 61 6c 20 45 72 72     .[31mGeneral Err
     8d1:	6f 72 0d 0a 1b 5b 33 37 6d 00                       or...[37m.

000008db <__c.4407>:
     8db:	1b 5b 33 36 6d 4f 4b 0d 0a 1b 5b 33 37 6d 00        .[36mOK...[37m.

000008ea <__c.4404>:
     8ea:	1b 5b 33 31 6d 09 09 5b 30 78 25 30 34 78 5d 20     .[31m..[0x%04x] 
     8fa:	1b 5b 33 37 6d 00                                   .[37m.

00000900 <__c.4402>:
     900:	1b 5b 33 36 6d 09 09 5b 30 78 25 30 34 78 5d 20     .[36m..[0x%04x] 
     910:	1b 5b 33 37 6d 00                                   .[37m.

00000916 <__c.4595>:
     916:	53 65 72 69 61 6c 20 4e 75 6d 2e 3a 09 25 73 0d     Serial Num.:.%s.
     926:	0a 00                                               ..

00000928 <__c.4593>:
     928:	44 65 76 69 63 65 20 76 65 72 2e 3a 09 25 73 0d     Device ver.:.%s.
     938:	0a 00                                               ..

0000093a <__c.4591>:
     93a:	4d 6f 64 65 6c 3a 09 09 25 73 0d 0a 00              Model:..%s...

00000947 <__c.4589>:
     947:	0d 0a 4d 61 6e 75 66 61 63 74 75 72 65 72 3a 09     ..Manufacturer:.
     957:	25 73 0d 0a 00                                      %s...

0000095c <__c.4584>:
     95c:	09 28 2d 29 20 30 78 25 30 34 78 0d 0a 00           .(-) 0x%04x...

0000096a <__c.4582>:
     96a:	0d 0a 49 6d 61 67 65 20 46 6f 72 6d 61 74 73 3a     ..Image Formats:
     97a:	0d 0a 00                                            ...

0000097d <__c.4575>:
     97d:	09 28 2d 29 20 30 78 25 30 34 78 0d 0a 00           .(-) 0x%04x...

0000098b <__c.4573>:
     98b:	0d 0a 43 61 70 74 75 72 65 20 66 6f 72 6d 61 74     ..Capture format
     99b:	73 3a 0d 0a 00                                      s:...

000009a0 <__c.4566>:
     9a0:	09 28 2d 29 20 30 78 25 30 34 78 0d 0a 00           .(-) 0x%04x...

000009ae <__c.4564>:
     9ae:	0d 0a 44 65 76 69 63 65 20 70 72 6f 70 65 72 74     ..Device propert
     9be:	69 65 73 20 73 75 70 70 6f 72 74 65 64 3a 0d 0a     ies supported:..
     9ce:	00                                                  .

000009cf <__c.4557>:
     9cf:	09 28 2d 29 20 30 78 25 30 34 78 0d 0a 00           .(-) 0x%04x...

000009dd <__c.4555>:
     9dd:	0d 0a 45 76 65 6e 74 73 20 73 75 70 70 6f 72 74     ..Events support
     9ed:	65 64 3a 0d 0a 00                                   ed:...

000009f3 <__c.4548>:
     9f3:	09 28 2d 29 20 30 78 25 30 34 78 0d 0a 00           .(-) 0x%04x...

00000a01 <__c.4546>:
     a01:	0d 0a 4f 70 65 72 61 74 69 6f 6e 73 20 73 75 70     ..Operations sup
     a11:	70 6f 72 74 65 64 3a 0d 0a 00                       ported:...

00000a1b <__c.4542>:
     a1b:	46 75 6e 63 2e 4d 6f 64 65 3a 09 25 64 0d 0a 00     Func.Mode:.%d...

00000a2b <__c.4540>:
     a2b:	0d 0a 56 65 6e 64 2e 45 78 74 2e 44 65 73 63 2e     ..Vend.Ext.Desc.
     a3b:	3a 09 25 73 0d 0a 00                                :.%s...

00000a42 <__c.4538>:
     a42:	56 65 6e 64 2e 45 78 74 2e 56 65 72 2e 3a 09 25     Vend.Ext.Ver.:.%
     a52:	64 0d 0a 00                                         d...

00000a56 <__c.4536>:
     a56:	56 65 6e 64 2e 45 78 74 2e 49 44 2e 3a 09 25 64     Vend.Ext.ID.:.%d
     a66:	0d 0a 00                                            ...

00000a69 <__c.4534>:
     a69:	53 74 64 2e 56 65 72 2e 3a 09 25 64 0d 0a 00        Std.Ver.:.%d...

00000a78 <__c.4532>:
     a78:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 64 65     Error reading de
     a88:	76 69 63 65 20 69 6e 66 6f 0d 0a 00                 vice info...

00000a94 <__c.4530>:
     a94:	44 65 76 69 63 65 20 6e 6f 74 20 63 6f 6e 6e 65     Device not conne
     aa4:	63 74 65 64 2e 0d 0a 00                             cted....

00000aac <__c.4522>:
     aac:	1b 5b 33 36 6d 09 47 6f 74 20 64 65 76 69 63 65     .[36m.Got device
     abc:	20 69 6e 66 6f 20 6f 66 20 25 64 20 62 79 74 65      info of %d byte
     acc:	73 2e 0d 0a 1b 5b 33 37 6d 00                       s....[37m.

00000ad6 <__c.4518>:
     ad6:	44 65 76 69 63 65 20 6e 6f 74 20 63 6f 6e 6e 65     Device not conne
     ae6:	63 74 65 64 2e 0d 0a 00                             cted....

00000aee <__c.4490>:
     aee:	09 28 2d 29 20 30 78 25 30 34 78 0d 0a 00           .(-) 0x%04x...

00000afc <__c.4488>:
     afc:	09 25 64 20 76 61 6c 75 65 73 20 61 72 72 61 79     .%d values array
     b0c:	0d 0a 00                                            ...

00000b0f <__c.4450>:
     b0f:	25 63 00                                            %c.

00000b12 <__c.4448>:
     b12:	28 6c 65 6e 2e 25 64 29 00                          (len.%d).

00000b1b <__c.4488>:
     b1b:	09 56 6f 6c 75 6d 65 20 6c 61 62 65 6c 3a 20 27     .Volume label: '
     b2b:	25 73 27 0d 0a 00                                   %s'...

00000b31 <__c.4486>:
     b31:	09 53 74 6f 72 61 67 65 20 64 65 73 63 72 69 70     .Storage descrip
     b41:	74 69 6f 6e 3a 20 27 25 73 27 0d 0a 00              tion: '%s'...

00000b4e <__c.4484>:
     b4e:	09 46 72 65 65 20 73 70 61 63 65 20 66 6f 72 20     .Free space for 
     b5e:	69 6d 61 67 65 73 3a 20 30 78 25 58 0d 0a 00        images: 0x%X...

00000b6d <__c.4482>:
     b6d:	09 46 72 65 65 20 73 70 61 63 65 3a 20 30 78 25     .Free space: 0x%
     b7d:	58 0d 0a 00                                         X...

00000b81 <__c.4480>:
     b81:	09 4d 61 78 20 63 61 70 61 63 69 74 79 3a 20 30     .Max capacity: 0
     b91:	78 25 58 0d 0a 00                                   x%X...

00000b97 <__c.4478>:
     b97:	09 41 63 63 65 73 73 20 63 61 70 61 62 69 6c 69     .Access capabili
     ba7:	74 79 3a 20 30 78 25 58 0d 0a 00                    ty: 0x%X...

00000bb2 <__c.4476>:
     bb2:	09 46 69 6c 65 2d 73 79 73 74 65 6d 20 74 79 70     .File-system typ
     bc2:	65 3a 20 30 78 25 58 0d 0a 00                       e: 0x%X...

00000bcc <__c.4474>:
     bcc:	09 53 74 6f 72 61 67 65 20 74 79 70 65 3a 20 30     .Storage type: 0
     bdc:	78 25 58 0d 0a 00                                   x%X...

00000be2 <__c.4472>:
     be2:	52 65 74 72 69 65 76 69 6e 67 20 73 74 6f 72 61     Retrieving stora
     bf2:	67 65 20 69 6e 64 65 78 20 25 64 20 28 49 44 3d     ge index %d (ID=
     c02:	30 78 25 58 29 0d 0a 00                             0x%X)...

00000c0a <__c.4470>:
     c0a:	44 65 76 69 63 65 20 6e 6f 74 20 63 6f 6e 6e 65     Device not conne
     c1a:	63 74 65 64 2e 0d 0a 00                             cted....

00000c22 <__c.4455>:
     c22:	1b 5b 33 36 6d 09 47 6f 74 20 73 74 6f 72 61 67     .[36m.Got storag
     c32:	65 20 69 6e 66 6f 20 6f 66 20 25 64 20 62 79 74     e info of %d byt
     c42:	65 73 2e 0d 0a 1b 5b 33 37 6d 00                    es....[37m.

00000c4d <__c.4451>:
     c4d:	45 72 72 6f 72 20 67 65 74 74 69 6e 67 20 73 74     Error getting st
     c5d:	6f 72 61 67 65 20 69 6e 66 6f 20 2d 20 73 74 6f     orage info - sto
     c6d:	72 61 67 65 20 69 6e 64 65 78 20 25 64 20 69 73     rage index %d is
     c7d:	20 62 69 67 67 65 72 20 74 68 65 6e 20 6e 75 6d      bigger then num
     c8d:	20 6f 66 20 73 74 6f 72 61 67 65 73 20 25 64 2e      of storages %d.
     c9d:	0d 0a 00                                            ...

00000ca0 <__c.4449>:
     ca0:	44 65 76 69 63 65 20 6e 6f 74 20 63 6f 6e 6e 65     Device not conne
     cb0:	63 74 65 64 2e 0d 0a 00                             cted....

00000cb8 <__c.4433>:
     cb8:	1b 5b 33 36 6d 09 47 6f 74 20 73 74 6f 72 61 67     .[36m.Got storag
     cc8:	65 20 49 44 73 20 6f 66 20 25 64 20 62 79 74 65     e IDs of %d byte
     cd8:	73 2e 0d 0a 1b 5b 33 37 6d 00                       s....[37m.

00000ce2 <__c.4429>:
     ce2:	44 65 76 69 63 65 20 6e 6f 74 20 63 6f 6e 6e 65     Device not conne
     cf2:	63 74 65 64 2e 0d 0a 00                             cted....

00000cfa <__c.4438>:
     cfa:	25 30 32 78 20 00                                   %02x .

00000d00 <__c.4434>:
     d00:	1b 5b 33 36 6d 09 47 6f 74 20 70 72 6f 70 65 72     .[36m.Got proper
     d10:	74 79 20 69 6e 66 6f 20 6f 66 20 25 64 20 62 79     ty info of %d by
     d20:	74 65 73 2e 0d 0a 1b 5b 33 37 6d 00                 tes....[37m.

00000d2c <__c.4429>:
     d2c:	44 65 76 69 63 65 20 6e 6f 74 20 63 6f 6e 6e 65     Device not conne
     d3c:	63 74 65 64 2e 0d 0a 00                             cted....

00000d44 <__c.4417>:
     d44:	0d 0a 53 74 6f 72 61 67 65 20 6e 6f 74 20 66 6f     ..Storage not fo
     d54:	75 6e 64 2e 20 52 75 6e 20 67 65 74 5f 73 74 6f     und. Run get_sto
     d64:	72 61 67 65 5f 69 6e 66 6f 2e 2e 2e 00              rage_info....

00000d71 <__c.4413>:
     d71:	44 65 76 69 63 65 20 6e 6f 74 20 63 6f 6e 6e 65     Device not conne
     d81:	63 74 65 64 2e 0d 0a 00                             cted....

00000d89 <__c.4462>:
     d89:	45 56 45 4e 54 20 5b 4e 49 4b 4f 4e 5d 3a 20 43     EVENT [NIKON]: C
     d99:	61 70 74 75 72 65 20 6f 76 65 72 66 6c 6f 77 20     apture overflow 
     da9:	49 44 3a 20 30 78 25 78 2e 0d 0a 00                 ID: 0x%x....

00000db5 <__c.4459>:
     db5:	45 56 45 4e 54 20 5b 4e 49 4b 4f 4e 5d 3a 20 4f     EVENT [NIKON]: O
     dc5:	62 6a 65 63 74 20 72 65 61 64 79 20 49 44 3a 20     bject ready ID: 
     dd5:	30 78 25 78 2e 0d 0a 00                             0x%x....

00000ddd <__c.4452>:
     ddd:	45 56 45 4e 54 3a 20 43 61 70 74 75 72 65 20 63     EVENT: Capture c
     ded:	6f 6d 70 6c 65 74 65 20 54 72 61 6e 73 49 44 3a     omplete TransID:
     dfd:	20 30 78 25 78 2e 0d 0a 00                           0x%x....

00000e06 <__c.4449>:
     e06:	45 56 45 4e 54 3a 20 53 74 6f 72 61 67 65 20 69     EVENT: Storage i
     e16:	6e 66 6f 20 63 68 61 6e 67 65 64 20 49 44 3a 20     nfo changed ID: 
     e26:	30 78 25 78 2e 0d 0a 00                             0x%x....

00000e2e <__c.4445>:
     e2e:	45 56 45 4e 54 3a 20 53 74 6f 72 61 67 65 20 66     EVENT: Storage f
     e3e:	75 6c 6c 20 49 44 3a 20 30 78 25 78 2e 0d 0a 00     ull ID: 0x%x....

00000e4e <__c.4441>:
     e4e:	45 56 45 4e 54 3a 20 44 65 76 20 69 6e 66 6f 20     EVENT: Dev info 
     e5e:	63 68 61 6e 67 65 64 2e 0d 0a 00                    changed....

00000e69 <__c.4438>:
     e69:	45 56 45 4e 54 3a 20 4f 62 6a 65 63 74 20 69 6e     EVENT: Object in
     e79:	66 6f 20 63 68 61 6e 67 65 64 20 49 44 3a 20 30     fo changed ID: 0
     e89:	78 25 78 2e 0d 0a 00                                x%x....

00000e90 <__c.4435>:
     e90:	45 56 45 4e 54 3a 20 50 72 6f 70 65 72 74 79 20     EVENT: Property 
     ea0:	63 68 61 6e 67 65 64 20 43 4f 44 45 3a 20 30 78     changed CODE: 0x
     eb0:	25 78 2e 0d 0a 00                                   %x....

00000eb6 <__c.4432>:
     eb6:	45 56 45 4e 54 3a 20 4f 62 6a 65 63 74 20 72 65     EVENT: Object re
     ec6:	6d 6f 76 65 64 20 49 44 3a 20 30 78 25 78 2e 0d     moved ID: 0x%x..
     ed6:	0a 00                                               ..

00000ed8 <__c.4429>:
     ed8:	45 56 45 4e 54 3a 20 53 74 6f 72 61 67 65 20 61     EVENT: Storage a
     ee8:	64 64 65 64 20 49 44 3a 20 30 78 25 78 2e 0d 0a     dded ID: 0x%x...
     ef8:	00                                                  .

00000ef9 <__c.4426>:
     ef9:	45 56 45 4e 54 3a 20 4f 62 6a 65 63 74 20 72 65     EVENT: Object re
     f09:	6d 6f 76 65 64 20 49 44 3a 20 30 78 25 78 2e 0d     moved ID: 0x%x..
     f19:	0a 00                                               ..

00000f1b <__c.4423>:
     f1b:	45 56 45 4e 54 3a 20 4f 62 6a 65 63 74 20 61 64     EVENT: Object ad
     f2b:	64 65 64 20 49 44 3a 20 30 78 25 78 2e 0d 0a 00     ded ID: 0x%x....

00000f3b <__c.4420>:
     f3b:	45 56 45 4e 54 3a 20 43 61 6e 63 65 6c 20 74 72     EVENT: Cancel tr
     f4b:	61 6e 73 61 63 74 69 6f 6e 2e 0d 0a 00              ansaction....

00000f58 <__c.4417>:
     f58:	45 56 45 4e 54 3a 20 55 6e 64 65 66 69 6e 65 64     EVENT: Undefined
     f68:	2e 0d 0a 00                                         ....

00000f6c <__c.4412>:
     f6c:	0d 0a 4e 65 77 20 65 76 65 6e 74 3a 00              ..New event:.

00000f79 <__c.4499>:
     f79:	4e 6f 20 53 74 61 74 75 73 00                       No Status.

00000f83 <__c.4493>:
     f83:	53 54 41 42 49 4c 59 20 56 45 52 53 49 4f 4e 3a     STABILY VERSION:
     f93:	25 30 33 64 2e 25 64 3b 43 4c 4f 43 4b 3a 25 30     %03d.%d;CLOCK:%0
     fa3:	33 64 20 4d 48 5a 3b 0d 0a 00                       3d MHZ;...

00000fad <__c.4487>:
     fad:	4f 4b 0d 0a 00                                      OK...

00000fb2 <__c.4481>:
     fb2:	4f 4b 0d 0a 00                                      OK...

00000fb7 <__c.4469>:
     fb7:	0d 0a 00                                            ...

00000fba <__c.4461>:
     fba:	25 73 3a 20 43 6f 6d 6d 61 6e 64 20 6e 6f 74 20     %s: Command not 
     fca:	72 65 63 6f 67 6e 69 7a 65 64 2e 0d 0a 00           recognized....

00000fd8 <__c.4448>:
     fd8:	53 54 41 42 49 4c 59 20 3e 3e 20 00                 STABILY >> .

00000fe4 <__c.4446>:
     fe4:	0d 0a 00                                            ...

00000fe7 <__c.2050>:
     fe7:	63 64 69 6e 6f 70 73 75 78 58 5b 00 00              cdinopsuxX[..

00000ff4 <__ctors_end>:
     ff4:	11 24       	eor	r1, r1
     ff6:	1f be       	out	0x3f, r1	; 63
     ff8:	cf ef       	ldi	r28, 0xFF	; 255
     ffa:	d0 e2       	ldi	r29, 0x20	; 32
     ffc:	de bf       	out	0x3e, r29	; 62
     ffe:	cd bf       	out	0x3d, r28	; 61

00001000 <__do_copy_data>:
    1000:	11 e0       	ldi	r17, 0x01	; 1
    1002:	a0 e0       	ldi	r26, 0x00	; 0
    1004:	b1 e0       	ldi	r27, 0x01	; 1
    1006:	e4 e2       	ldi	r30, 0x24	; 36
    1008:	f1 e5       	ldi	r31, 0x51	; 81
    100a:	00 e0       	ldi	r16, 0x00	; 0
    100c:	0b bf       	out	0x3b, r16	; 59
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <__do_copy_data+0x14>
    1010:	07 90       	elpm	r0, Z+
    1012:	0d 92       	st	X+, r0
    1014:	a8 3b       	cpi	r26, 0xB8	; 184
    1016:	b1 07       	cpc	r27, r17
    1018:	d9 f7       	brne	.-10     	; 0x1010 <__do_copy_data+0x10>

0000101a <__do_clear_bss>:
    101a:	14 e0       	ldi	r17, 0x04	; 4
    101c:	a8 eb       	ldi	r26, 0xB8	; 184
    101e:	b1 e0       	ldi	r27, 0x01	; 1
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <.do_clear_bss_start>

00001022 <.do_clear_bss_loop>:
    1022:	1d 92       	st	X+, r1

00001024 <.do_clear_bss_start>:
    1024:	a0 37       	cpi	r26, 0x70	; 112
    1026:	b1 07       	cpc	r27, r17
    1028:	e1 f7       	brne	.-8      	; 0x1022 <.do_clear_bss_loop>
    102a:	2f d1       	rcall	.+606    	; 0x128a <main>
    102c:	0c 94 90 28 	jmp	0x5120	; 0x5120 <_exit>

00001030 <__bad_interrupt>:
    1030:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001034 <__lshrdi3>:
    1034:	0f 93       	push	r16
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	60 97       	sbiw	r28, 0x10	; 16
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	00 23       	and	r16, r16
    104c:	09 f4       	brne	.+2      	; 0x1050 <__lshrdi3+0x1c>
    104e:	59 c0       	rjmp	.+178    	; 0x1102 <__lshrdi3+0xce>
    1050:	29 83       	std	Y+1, r18	; 0x01
    1052:	3a 83       	std	Y+2, r19	; 0x02
    1054:	4b 83       	std	Y+3, r20	; 0x03
    1056:	5c 83       	std	Y+4, r21	; 0x04
    1058:	6d 83       	std	Y+5, r22	; 0x05
    105a:	7e 83       	std	Y+6, r23	; 0x06
    105c:	8f 83       	std	Y+7, r24	; 0x07
    105e:	98 87       	std	Y+8, r25	; 0x08
    1060:	e0 e2       	ldi	r30, 0x20	; 32
    1062:	e0 1b       	sub	r30, r16
    1064:	2d 81       	ldd	r18, Y+5	; 0x05
    1066:	3e 81       	ldd	r19, Y+6	; 0x06
    1068:	4f 81       	ldd	r20, Y+7	; 0x07
    106a:	58 85       	ldd	r21, Y+8	; 0x08
    106c:	1e 16       	cp	r1, r30
    106e:	bc f0       	brlt	.+46     	; 0x109e <__lshrdi3+0x6a>
    1070:	1d 86       	std	Y+13, r1	; 0x0d
    1072:	1e 86       	std	Y+14, r1	; 0x0e
    1074:	1f 86       	std	Y+15, r1	; 0x0f
    1076:	18 8a       	std	Y+16, r1	; 0x10
    1078:	8e 2f       	mov	r24, r30
    107a:	99 27       	eor	r25, r25
    107c:	87 fd       	sbrc	r24, 7
    107e:	90 95       	com	r25
    1080:	90 95       	com	r25
    1082:	81 95       	neg	r24
    1084:	9f 4f       	sbci	r25, 0xFF	; 255
    1086:	04 c0       	rjmp	.+8      	; 0x1090 <__lshrdi3+0x5c>
    1088:	56 95       	lsr	r21
    108a:	47 95       	ror	r20
    108c:	37 95       	ror	r19
    108e:	27 95       	ror	r18
    1090:	8a 95       	dec	r24
    1092:	d2 f7       	brpl	.-12     	; 0x1088 <__lshrdi3+0x54>
    1094:	29 87       	std	Y+9, r18	; 0x09
    1096:	3a 87       	std	Y+10, r19	; 0x0a
    1098:	4b 87       	std	Y+11, r20	; 0x0b
    109a:	5c 87       	std	Y+12, r21	; 0x0c
    109c:	2a c0       	rjmp	.+84     	; 0x10f2 <__lshrdi3+0xbe>
    109e:	ca 01       	movw	r24, r20
    10a0:	b9 01       	movw	r22, r18
    10a2:	00 2e       	mov	r0, r16
    10a4:	04 c0       	rjmp	.+8      	; 0x10ae <__lshrdi3+0x7a>
    10a6:	96 95       	lsr	r25
    10a8:	87 95       	ror	r24
    10aa:	77 95       	ror	r23
    10ac:	67 95       	ror	r22
    10ae:	0a 94       	dec	r0
    10b0:	d2 f7       	brpl	.-12     	; 0x10a6 <__lshrdi3+0x72>
    10b2:	6d 87       	std	Y+13, r22	; 0x0d
    10b4:	7e 87       	std	Y+14, r23	; 0x0e
    10b6:	8f 87       	std	Y+15, r24	; 0x0f
    10b8:	98 8b       	std	Y+16, r25	; 0x10
    10ba:	da 01       	movw	r26, r20
    10bc:	c9 01       	movw	r24, r18
    10be:	04 c0       	rjmp	.+8      	; 0x10c8 <__lshrdi3+0x94>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	aa 1f       	adc	r26, r26
    10c6:	bb 1f       	adc	r27, r27
    10c8:	ea 95       	dec	r30
    10ca:	d2 f7       	brpl	.-12     	; 0x10c0 <__lshrdi3+0x8c>
    10cc:	29 81       	ldd	r18, Y+1	; 0x01
    10ce:	3a 81       	ldd	r19, Y+2	; 0x02
    10d0:	4b 81       	ldd	r20, Y+3	; 0x03
    10d2:	5c 81       	ldd	r21, Y+4	; 0x04
    10d4:	04 c0       	rjmp	.+8      	; 0x10de <__lshrdi3+0xaa>
    10d6:	56 95       	lsr	r21
    10d8:	47 95       	ror	r20
    10da:	37 95       	ror	r19
    10dc:	27 95       	ror	r18
    10de:	0a 95       	dec	r16
    10e0:	d2 f7       	brpl	.-12     	; 0x10d6 <__lshrdi3+0xa2>
    10e2:	82 2b       	or	r24, r18
    10e4:	93 2b       	or	r25, r19
    10e6:	a4 2b       	or	r26, r20
    10e8:	b5 2b       	or	r27, r21
    10ea:	89 87       	std	Y+9, r24	; 0x09
    10ec:	9a 87       	std	Y+10, r25	; 0x0a
    10ee:	ab 87       	std	Y+11, r26	; 0x0b
    10f0:	bc 87       	std	Y+12, r27	; 0x0c
    10f2:	29 85       	ldd	r18, Y+9	; 0x09
    10f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    10f6:	4b 85       	ldd	r20, Y+11	; 0x0b
    10f8:	5c 85       	ldd	r21, Y+12	; 0x0c
    10fa:	6d 85       	ldd	r22, Y+13	; 0x0d
    10fc:	7e 85       	ldd	r23, Y+14	; 0x0e
    10fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1100:	98 89       	ldd	r25, Y+16	; 0x10
    1102:	60 96       	adiw	r28, 0x10	; 16
    1104:	0f b6       	in	r0, 0x3f	; 63
    1106:	f8 94       	cli
    1108:	de bf       	out	0x3e, r29	; 62
    110a:	0f be       	out	0x3f, r0	; 63
    110c:	cd bf       	out	0x3d, r28	; 61
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	0f 91       	pop	r16
    1114:	08 95       	ret

00001116 <__ashldi3>:
    1116:	0f 93       	push	r16
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	60 97       	sbiw	r28, 0x10	; 16
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	00 23       	and	r16, r16
    112e:	09 f4       	brne	.+2      	; 0x1132 <__ashldi3+0x1c>
    1130:	59 c0       	rjmp	.+178    	; 0x11e4 <__ashldi3+0xce>
    1132:	29 83       	std	Y+1, r18	; 0x01
    1134:	3a 83       	std	Y+2, r19	; 0x02
    1136:	4b 83       	std	Y+3, r20	; 0x03
    1138:	5c 83       	std	Y+4, r21	; 0x04
    113a:	6d 83       	std	Y+5, r22	; 0x05
    113c:	7e 83       	std	Y+6, r23	; 0x06
    113e:	8f 83       	std	Y+7, r24	; 0x07
    1140:	98 87       	std	Y+8, r25	; 0x08
    1142:	e0 e2       	ldi	r30, 0x20	; 32
    1144:	e0 1b       	sub	r30, r16
    1146:	29 81       	ldd	r18, Y+1	; 0x01
    1148:	3a 81       	ldd	r19, Y+2	; 0x02
    114a:	4b 81       	ldd	r20, Y+3	; 0x03
    114c:	5c 81       	ldd	r21, Y+4	; 0x04
    114e:	1e 16       	cp	r1, r30
    1150:	bc f0       	brlt	.+46     	; 0x1180 <__ashldi3+0x6a>
    1152:	19 86       	std	Y+9, r1	; 0x09
    1154:	1a 86       	std	Y+10, r1	; 0x0a
    1156:	1b 86       	std	Y+11, r1	; 0x0b
    1158:	1c 86       	std	Y+12, r1	; 0x0c
    115a:	8e 2f       	mov	r24, r30
    115c:	99 27       	eor	r25, r25
    115e:	87 fd       	sbrc	r24, 7
    1160:	90 95       	com	r25
    1162:	90 95       	com	r25
    1164:	81 95       	neg	r24
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <__ashldi3+0x5c>
    116a:	22 0f       	add	r18, r18
    116c:	33 1f       	adc	r19, r19
    116e:	44 1f       	adc	r20, r20
    1170:	55 1f       	adc	r21, r21
    1172:	8a 95       	dec	r24
    1174:	d2 f7       	brpl	.-12     	; 0x116a <__ashldi3+0x54>
    1176:	2d 87       	std	Y+13, r18	; 0x0d
    1178:	3e 87       	std	Y+14, r19	; 0x0e
    117a:	4f 87       	std	Y+15, r20	; 0x0f
    117c:	58 8b       	std	Y+16, r21	; 0x10
    117e:	2a c0       	rjmp	.+84     	; 0x11d4 <__ashldi3+0xbe>
    1180:	ca 01       	movw	r24, r20
    1182:	b9 01       	movw	r22, r18
    1184:	00 2e       	mov	r0, r16
    1186:	04 c0       	rjmp	.+8      	; 0x1190 <__ashldi3+0x7a>
    1188:	66 0f       	add	r22, r22
    118a:	77 1f       	adc	r23, r23
    118c:	88 1f       	adc	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	d2 f7       	brpl	.-12     	; 0x1188 <__ashldi3+0x72>
    1194:	69 87       	std	Y+9, r22	; 0x09
    1196:	7a 87       	std	Y+10, r23	; 0x0a
    1198:	8b 87       	std	Y+11, r24	; 0x0b
    119a:	9c 87       	std	Y+12, r25	; 0x0c
    119c:	da 01       	movw	r26, r20
    119e:	c9 01       	movw	r24, r18
    11a0:	04 c0       	rjmp	.+8      	; 0x11aa <__ashldi3+0x94>
    11a2:	b6 95       	lsr	r27
    11a4:	a7 95       	ror	r26
    11a6:	97 95       	ror	r25
    11a8:	87 95       	ror	r24
    11aa:	ea 95       	dec	r30
    11ac:	d2 f7       	brpl	.-12     	; 0x11a2 <__ashldi3+0x8c>
    11ae:	2d 81       	ldd	r18, Y+5	; 0x05
    11b0:	3e 81       	ldd	r19, Y+6	; 0x06
    11b2:	4f 81       	ldd	r20, Y+7	; 0x07
    11b4:	58 85       	ldd	r21, Y+8	; 0x08
    11b6:	04 c0       	rjmp	.+8      	; 0x11c0 <__ashldi3+0xaa>
    11b8:	22 0f       	add	r18, r18
    11ba:	33 1f       	adc	r19, r19
    11bc:	44 1f       	adc	r20, r20
    11be:	55 1f       	adc	r21, r21
    11c0:	0a 95       	dec	r16
    11c2:	d2 f7       	brpl	.-12     	; 0x11b8 <__ashldi3+0xa2>
    11c4:	82 2b       	or	r24, r18
    11c6:	93 2b       	or	r25, r19
    11c8:	a4 2b       	or	r26, r20
    11ca:	b5 2b       	or	r27, r21
    11cc:	8d 87       	std	Y+13, r24	; 0x0d
    11ce:	9e 87       	std	Y+14, r25	; 0x0e
    11d0:	af 87       	std	Y+15, r26	; 0x0f
    11d2:	b8 8b       	std	Y+16, r27	; 0x10
    11d4:	29 85       	ldd	r18, Y+9	; 0x09
    11d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    11d8:	4b 85       	ldd	r20, Y+11	; 0x0b
    11da:	5c 85       	ldd	r21, Y+12	; 0x0c
    11dc:	6d 85       	ldd	r22, Y+13	; 0x0d
    11de:	7e 85       	ldd	r23, Y+14	; 0x0e
    11e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e2:	98 89       	ldd	r25, Y+16	; 0x10
    11e4:	60 96       	adiw	r28, 0x10	; 16
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	0f 91       	pop	r16
    11f6:	08 95       	ret

000011f8 <Stabily_SetupHardware>:
/*********************************************************************************************************************
 *  Configures the board hardware and chip peripherals for the demo's functionality. */
void Stabily_SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    11f8:	84 b7       	in	r24, 0x34	; 52
    11fa:	87 7f       	andi	r24, 0xF7	; 247
    11fc:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    11fe:	28 e1       	ldi	r18, 0x18	; 24
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	20 93 60 00 	sts	0x0060, r18
    1208:	10 92 60 00 	sts	0x0060, r1
    120c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	80 e8       	ldi	r24, 0x80	; 128
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	80 93 61 00 	sts	0x0061, r24
    121a:	90 93 61 00 	sts	0x0061, r25
    121e:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
    1220:	87 e6       	ldi	r24, 0x67	; 103
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	90 93 cd 00 	sts	0x00CD, r25
    1228:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
    122c:	86 e0       	ldi	r24, 0x06	; 6
    122e:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
    1232:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
    1236:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
    123a:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
    123c:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
    123e:	8a b1       	in	r24, 0x0a	; 10
    1240:	80 6f       	ori	r24, 0xF0	; 240
    1242:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
    1244:	8b b1       	in	r24, 0x0b	; 11
    1246:	8f 70       	andi	r24, 0x0F	; 15
    1248:	8b b9       	out	0x0b, r24	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
    124a:	31 d3       	rcall	.+1634   	; 0x18ae <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
    124c:	e4 e6       	ldi	r30, 0x64	; 100
    124e:	f3 e0       	ldi	r31, 0x03	; 3
    1250:	f0 93 6b 04 	sts	0x046B, r31
    1254:	e0 93 6a 04 	sts	0x046A, r30
					stdout = Stream;
    1258:	f0 93 6d 04 	sts	0x046D, r31
    125c:	e0 93 6c 04 	sts	0x046C, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1260:	8e e0       	ldi	r24, 0x0E	; 14
    1262:	df 01       	movw	r26, r30
    1264:	1d 92       	st	X+, r1
    1266:	8a 95       	dec	r24
    1268:	e9 f7       	brne	.-6      	; 0x1264 <Stabily_SetupHardware+0x6c>
    126a:	83 e0       	ldi	r24, 0x03	; 3
    126c:	80 93 67 03 	sts	0x0367, r24
    1270:	88 e1       	ldi	r24, 0x18	; 24
    1272:	92 e1       	ldi	r25, 0x12	; 18
    1274:	90 93 6d 03 	sts	0x036D, r25
    1278:	80 93 6c 03 	sts	0x036C, r24
    127c:	81 e2       	ldi	r24, 0x21	; 33
    127e:	92 e1       	ldi	r25, 0x12	; 18
    1280:	90 93 6f 03 	sts	0x036F, r25
    1284:	80 93 6e 03 	sts	0x036E, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
    1288:	08 95       	ret

0000128a <main>:
 *  Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	Stabily_SetupHardware();
    128a:	b6 df       	rcall	.-148    	; 0x11f8 <Stabily_SetupHardware>
	puts_P(PSTR(ESC_FG_CYAN "Stabily v1.0 running.\r\n" ESC_FG_WHITE));
    128c:	88 ed       	ldi	r24, 0xD8	; 216
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 89 22 	call	0x4512	; 0x4512 <puts_P>
	sei();
    1294:	78 94       	sei

	for (;;)
	{
		Stabily_ShellRX ( );
    1296:	0e 94 70 21 	call	0x42e0	; 0x42e0 <Stabily_ShellRX>

		CameraControl_DeviceEvents_PollEvents(&DigitalCamera_SI_Interface);
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	91 e0       	ldi	r25, 0x01	; 1
    129e:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <CameraControl_DeviceEvents_PollEvents>
		SI_Host_USBTask(&DigitalCamera_SI_Interface);
		USB_USBTask();
    12a2:	73 d6       	rcall	.+3302   	; 0x1f8a <USB_USBTask>
    12a4:	f8 cf       	rjmp	.-16     	; 0x1296 <main+0xc>

000012a6 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    12a6:	80 91 9e 00 	lds	r24, 0x009E
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	81 70       	andi	r24, 0x01	; 1
    12ae:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    12b0:	20 91 a0 00 	lds	r18, 0x00A0
    12b4:	2d 7f       	andi	r18, 0xFD	; 253
    12b6:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
    12ba:	20 91 9e 00 	lds	r18, 0x009E
    12be:	22 60       	ori	r18, 0x02	; 2
    12c0:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
    12c4:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
    12c8:	21 fd       	sbrc	r18, 1
    12ca:	fc cf       	rjmp	.-8      	; 0x12c4 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    12cc:	20 91 9e 00 	lds	r18, 0x009E
    12d0:	21 60       	ori	r18, 0x01	; 1
    12d2:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
    12d6:	10 92 59 03 	sts	0x0359, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    12da:	20 91 a0 00 	lds	r18, 0x00A0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	20 72       	andi	r18, 0x20	; 32
    12e2:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    12e4:	40 91 a0 00 	lds	r20, 0x00A0
    12e8:	4f 7d       	andi	r20, 0xDF	; 223
    12ea:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    12ee:	40 91 9f 00 	lds	r20, 0x009F
    12f2:	4f 7d       	andi	r20, 0xDF	; 223
    12f4:	40 93 9f 00 	sts	0x009F, r20
    12f8:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    12fa:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    12fe:	55 ff       	sbrs	r21, 5
    1300:	0b c0       	rjmp	.+22     	; 0x1318 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1302:	40 91 9f 00 	lds	r20, 0x009F
    1306:	4f 7d       	andi	r20, 0xDF	; 223
    1308:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    130c:	40 91 9f 00 	lds	r20, 0x009F
    1310:	4d 7f       	andi	r20, 0xFD	; 253
    1312:	40 93 9f 00 	sts	0x009F, r20
    1316:	08 c0       	rjmp	.+16     	; 0x1328 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1318:	ef e9       	ldi	r30, 0x9F	; 159
    131a:	ff e0       	ldi	r31, 0x0F	; 15
    131c:	31 97       	sbiw	r30, 0x01	; 1
    131e:	f1 f7       	brne	.-4      	; 0x131c <USB_Host_ResetDevice+0x76>
    1320:	00 c0       	rjmp	.+0      	; 0x1322 <USB_Host_ResetDevice+0x7c>
    1322:	00 00       	nop
    1324:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
    1326:	49 f7       	brne	.-46     	; 0x12fa <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
    1328:	21 15       	cp	r18, r1
    132a:	31 05       	cpc	r19, r1
    132c:	29 f0       	breq	.+10     	; 0x1338 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    132e:	20 91 a0 00 	lds	r18, 0x00A0
    1332:	20 62       	ori	r18, 0x20	; 32
    1334:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
    1338:	00 97       	sbiw	r24, 0x00	; 0
    133a:	29 f4       	brne	.+10     	; 0x1346 <USB_Host_ResetDevice+0xa0>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    133c:	80 91 9e 00 	lds	r24, 0x009E
    1340:	8e 7f       	andi	r24, 0xFE	; 254
    1342:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    1346:	80 91 a0 00 	lds	r24, 0x00A0
    134a:	82 60       	ori	r24, 0x02	; 2
    134c:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
    1350:	08 95       	ret

00001352 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1352:	40 91 9e 00 	lds	r20, 0x009E
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	41 70       	andi	r20, 0x01	; 1
    135a:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    135c:	20 91 a0 00 	lds	r18, 0x00A0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	20 72       	andi	r18, 0x20	; 32
    1364:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
    1366:	90 91 a0 00 	lds	r25, 0x00A0
    136a:	9f 7d       	andi	r25, 0xDF	; 223
    136c:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1370:	90 91 9f 00 	lds	r25, 0x009F
    1374:	9f 7d       	andi	r25, 0xDF	; 223
    1376:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    137a:	90 91 9e 00 	lds	r25, 0x009E
    137e:	91 60       	ori	r25, 0x01	; 1
    1380:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    1384:	26 c0       	rjmp	.+76     	; 0x13d2 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1386:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
    138a:	95 ff       	sbrs	r25, 5
    138c:	06 c0       	rjmp	.+12     	; 0x139a <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    138e:	90 91 9f 00 	lds	r25, 0x009F
    1392:	9f 7d       	andi	r25, 0xDF	; 223
    1394:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
    1398:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
    139a:	90 91 63 03 	lds	r25, 0x0363
    139e:	91 30       	cpi	r25, 0x01	; 1
    13a0:	d9 f0       	breq	.+54     	; 0x13d8 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
    13a2:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
    13a6:	94 ff       	sbrs	r25, 4
    13a8:	09 c0       	rjmp	.+18     	; 0x13bc <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    13aa:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    13ae:	80 91 a6 00 	lds	r24, 0x00A6
    13b2:	8f 7e       	andi	r24, 0xEF	; 239
    13b4:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
    13b8:	82 e0       	ldi	r24, 0x02	; 2

			break;
    13ba:	0f c0       	rjmp	.+30     	; 0x13da <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    13bc:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled() == true)
    13c0:	91 ff       	sbrs	r25, 1
    13c2:	07 c0       	rjmp	.+14     	; 0x13d2 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
    13c4:	80 91 a6 00 	lds	r24, 0x00A6
    13c8:	8d 7f       	andi	r24, 0xFD	; 253
    13ca:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
    13ce:	83 e0       	ldi	r24, 0x03	; 3

			break;
    13d0:	04 c0       	rjmp	.+8      	; 0x13da <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
    13d2:	88 23       	and	r24, r24
    13d4:	c1 f6       	brne	.-80     	; 0x1386 <USB_Host_WaitMS+0x34>
    13d6:	01 c0       	rjmp	.+2      	; 0x13da <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
    13d8:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
    13da:	41 15       	cp	r20, r1
    13dc:	51 05       	cpc	r21, r1
    13de:	29 f4       	brne	.+10     	; 0x13ea <USB_Host_WaitMS+0x98>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    13e0:	90 91 9e 00 	lds	r25, 0x009E
    13e4:	9e 7f       	andi	r25, 0xFE	; 254
    13e6:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
    13ea:	21 15       	cp	r18, r1
    13ec:	31 05       	cpc	r19, r1
    13ee:	29 f0       	breq	.+10     	; 0x13fa <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
    13f0:	90 91 a0 00 	lds	r25, 0x00A0
    13f4:	90 62       	ori	r25, 0x20	; 32
    13f6:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
    13fa:	08 95       	ret

000013fc <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
    13fc:	ef 92       	push	r14
    13fe:	0f 93       	push	r16
    1400:	1f 93       	push	r17
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	28 97       	sbiw	r28, 0x08	; 8
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
    1416:	80 91 63 03 	lds	r24, 0x0363
    141a:	85 30       	cpi	r24, 0x05	; 5
    141c:	09 f4       	brne	.+2      	; 0x1420 <USB_Host_ProcessNextHostState+0x24>
    141e:	99 c0       	rjmp	.+306    	; 0x1552 <USB_Host_ProcessNextHostState+0x156>
    1420:	86 30       	cpi	r24, 0x06	; 6
    1422:	68 f4       	brcc	.+26     	; 0x143e <USB_Host_ProcessNextHostState+0x42>
    1424:	82 30       	cpi	r24, 0x02	; 2
    1426:	c1 f1       	breq	.+112    	; 0x1498 <USB_Host_ProcessNextHostState+0x9c>
    1428:	83 30       	cpi	r24, 0x03	; 3
    142a:	18 f4       	brcc	.+6      	; 0x1432 <USB_Host_ProcessNextHostState+0x36>
    142c:	88 23       	and	r24, r24
    142e:	a1 f0       	breq	.+40     	; 0x1458 <USB_Host_ProcessNextHostState+0x5c>
    1430:	08 c1       	rjmp	.+528    	; 0x1642 <USB_Host_ProcessNextHostState+0x246>
    1432:	83 30       	cpi	r24, 0x03	; 3
    1434:	d9 f1       	breq	.+118    	; 0x14ac <USB_Host_ProcessNextHostState+0xb0>
    1436:	84 30       	cpi	r24, 0x04	; 4
    1438:	09 f0       	breq	.+2      	; 0x143c <USB_Host_ProcessNextHostState+0x40>
    143a:	03 c1       	rjmp	.+518    	; 0x1642 <USB_Host_ProcessNextHostState+0x246>
    143c:	62 c0       	rjmp	.+196    	; 0x1502 <USB_Host_ProcessNextHostState+0x106>
    143e:	87 30       	cpi	r24, 0x07	; 7
    1440:	09 f4       	brne	.+2      	; 0x1444 <USB_Host_ProcessNextHostState+0x48>
    1442:	a0 c0       	rjmp	.+320    	; 0x1584 <USB_Host_ProcessNextHostState+0x188>
    1444:	87 30       	cpi	r24, 0x07	; 7
    1446:	08 f4       	brcc	.+2      	; 0x144a <USB_Host_ProcessNextHostState+0x4e>
    1448:	8f c0       	rjmp	.+286    	; 0x1568 <USB_Host_ProcessNextHostState+0x16c>
    144a:	88 30       	cpi	r24, 0x08	; 8
    144c:	09 f4       	brne	.+2      	; 0x1450 <USB_Host_ProcessNextHostState+0x54>
    144e:	b8 c0       	rjmp	.+368    	; 0x15c0 <USB_Host_ProcessNextHostState+0x1c4>
    1450:	89 30       	cpi	r24, 0x09	; 9
    1452:	09 f0       	breq	.+2      	; 0x1456 <USB_Host_ProcessNextHostState+0x5a>
    1454:	f6 c0       	rjmp	.+492    	; 0x1642 <USB_Host_ProcessNextHostState+0x246>
    1456:	dc c0       	rjmp	.+440    	; 0x1610 <USB_Host_ProcessNextHostState+0x214>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
    1458:	00 91 b9 01 	lds	r16, 0x01B9
    145c:	10 91 ba 01 	lds	r17, 0x01BA
    1460:	01 15       	cp	r16, r1
    1462:	11 05       	cpc	r17, r1
    1464:	09 f4       	brne	.+2      	; 0x1468 <USB_Host_ProcessNextHostState+0x6c>
    1466:	ed c0       	rjmp	.+474    	; 0x1642 <USB_Host_ProcessNextHostState+0x246>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	73 df       	rcall	.-282    	; 0x1352 <USB_Host_WaitMS>
    146c:	68 2f       	mov	r22, r24
    146e:	88 23       	and	r24, r24
    1470:	31 f0       	breq	.+12     	; 0x147e <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
    1472:	80 91 b8 01 	lds	r24, 0x01B8
    1476:	80 93 63 03 	sts	0x0363, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
    147a:	81 e0       	ldi	r24, 0x01	; 1
					break;
    147c:	de c0       	rjmp	.+444    	; 0x163a <USB_Host_ProcessNextHostState+0x23e>
				}

				if (!(--WaitMSRemaining))
    147e:	01 50       	subi	r16, 0x01	; 1
    1480:	10 40       	sbci	r17, 0x00	; 0
    1482:	10 93 ba 01 	sts	0x01BA, r17
    1486:	00 93 b9 01 	sts	0x01B9, r16
    148a:	01 15       	cp	r16, r1
    148c:	11 05       	cpc	r17, r1
    148e:	09 f0       	breq	.+2      	; 0x1492 <USB_Host_ProcessNextHostState+0x96>
    1490:	d8 c0       	rjmp	.+432    	; 0x1642 <USB_Host_ProcessNextHostState+0x246>
				  USB_HostState = PostWaitState;
    1492:	80 91 b8 01 	lds	r24, 0x01B8
    1496:	07 c0       	rjmp	.+14     	; 0x14a6 <USB_Host_ProcessNextHostState+0xaa>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
    1498:	88 ee       	ldi	r24, 0xE8	; 232
    149a:	93 e0       	ldi	r25, 0x03	; 3
    149c:	90 93 ba 01 	sts	0x01BA, r25
    14a0:	80 93 b9 01 	sts	0x01B9, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
    14a4:	83 e0       	ldi	r24, 0x03	; 3
    14a6:	80 93 63 03 	sts	0x0363, r24
			break;
    14aa:	cb c0       	rjmp	.+406    	; 0x1642 <USB_Host_ProcessNextHostState+0x246>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
    14ac:	80 91 b9 01 	lds	r24, 0x01B9
    14b0:	90 91 ba 01 	lds	r25, 0x01BA
    14b4:	9c 01       	movw	r18, r24
    14b6:	21 50       	subi	r18, 0x01	; 1
    14b8:	30 40       	sbci	r19, 0x00	; 0
    14ba:	30 93 ba 01 	sts	0x01BA, r19
    14be:	20 93 b9 01 	sts	0x01B9, r18
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	39 f0       	breq	.+14     	; 0x14d4 <USB_Host_ProcessNextHostState+0xd8>
    14c6:	8f e9       	ldi	r24, 0x9F	; 159
    14c8:	9f e0       	ldi	r25, 0x0F	; 15
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <USB_Host_ProcessNextHostState+0xce>
    14ce:	00 c0       	rjmp	.+0      	; 0x14d0 <USB_Host_ProcessNextHostState+0xd4>
    14d0:	00 00       	nop
    14d2:	b7 c0       	rjmp	.+366    	; 0x1642 <USB_Host_ProcessNextHostState+0x246>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    14d4:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    14d6:	80 91 d8 00 	lds	r24, 0x00D8
    14da:	80 61       	ori	r24, 0x10	; 16
    14dc:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
    14e0:	80 91 dd 00 	lds	r24, 0x00DD
    14e4:	8b 7f       	andi	r24, 0xFB	; 251
    14e6:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
    14ea:	80 91 d7 00 	lds	r24, 0x00D7
    14ee:	80 61       	ori	r24, 0x10	; 16
    14f0:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
    14f4:	80 91 dd 00 	lds	r24, 0x00DD
    14f8:	82 60       	ori	r24, 0x02	; 2
    14fa:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
    14fe:	84 e0       	ldi	r24, 0x04	; 4
    1500:	d2 cf       	rjmp	.-92     	; 0x14a6 <USB_Host_ProcessNextHostState+0xaa>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
    1502:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
    1506:	80 ff       	sbrs	r24, 0
    1508:	9c c0       	rjmp	.+312    	; 0x1642 <USB_Host_ProcessNextHostState+0x246>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    150a:	80 91 9f 00 	lds	r24, 0x009F
    150e:	8e 7f       	andi	r24, 0xFE	; 254
    1510:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    1514:	80 91 9f 00 	lds	r24, 0x009F
    1518:	8d 7f       	andi	r24, 0xFD	; 253
    151a:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    151e:	80 91 df 00 	lds	r24, 0x00DF
    1522:	8d 7f       	andi	r24, 0xFD	; 253
    1524:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
    1528:	80 91 de 00 	lds	r24, 0x00DE
    152c:	82 60       	ori	r24, 0x02	; 2
    152e:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1532:	80 91 9e 00 	lds	r24, 0x009E
    1536:	81 60       	ori	r24, 0x01	; 1
    1538:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
    153c:	eb d0       	rcall	.+470    	; 0x1714 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
    153e:	10 92 63 03 	sts	0x0363, r1
    1542:	84 e6       	ldi	r24, 0x64	; 100
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	90 93 ba 01 	sts	0x01BA, r25
    154a:	80 93 b9 01 	sts	0x01B9, r24
    154e:	85 e0       	ldi	r24, 0x05	; 5
    1550:	5c c0       	rjmp	.+184    	; 0x160a <USB_Host_ProcessNextHostState+0x20e>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
    1552:	a9 de       	rcall	.-686    	; 0x12a6 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
    1554:	10 92 63 03 	sts	0x0363, r1
    1558:	88 ec       	ldi	r24, 0xC8	; 200
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	90 93 ba 01 	sts	0x01BA, r25
    1560:	80 93 b9 01 	sts	0x01B9, r24
    1564:	86 e0       	ldi	r24, 0x06	; 6
    1566:	51 c0       	rjmp	.+162    	; 0x160a <USB_Host_ProcessNextHostState+0x20e>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	40 e0       	ldi	r20, 0x00	; 0
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	00 e4       	ldi	r16, 0x40	; 64
    1572:	10 e0       	ldi	r17, 0x00	; 0
    1574:	ee 24       	eor	r14, r14
    1576:	71 d0       	rcall	.+226    	; 0x165a <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1578:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
    157c:	87 ff       	sbrs	r24, 7
    157e:	59 c0       	rjmp	.+178    	; 0x1632 <USB_Host_ProcessNextHostState+0x236>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
    1580:	87 e0       	ldi	r24, 0x07	; 7
    1582:	91 cf       	rjmp	.-222    	; 0x14a6 <USB_Host_ProcessNextHostState+0xaa>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
    1584:	ab e5       	ldi	r26, 0x5B	; 91
    1586:	b3 e0       	ldi	r27, 0x03	; 3
    1588:	eb e1       	ldi	r30, 0x1B	; 27
    158a:	f1 e0       	ldi	r31, 0x01	; 1
    158c:	88 e0       	ldi	r24, 0x08	; 8
    158e:	01 90       	ld	r0, Z+
    1590:	0d 92       	st	X+, r0
    1592:	81 50       	subi	r24, 0x01	; 1
    1594:	e1 f7       	brne	.-8      	; 0x158e <USB_Host_ProcessNextHostState+0x192>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
    1596:	ce 01       	movw	r24, r28
    1598:	01 96       	adiw	r24, 0x01	; 1
    159a:	bc d3       	rcall	.+1912   	; 0x1d14 <USB_Host_SendControlRequest>
    159c:	68 2f       	mov	r22, r24
    159e:	88 23       	and	r24, r24
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <USB_Host_ProcessNextHostState+0x1a8>
    15a2:	4a c0       	rjmp	.+148    	; 0x1638 <USB_Host_ProcessNextHostState+0x23c>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
    15a4:	88 85       	ldd	r24, Y+8	; 0x08
    15a6:	80 93 23 01 	sts	0x0123, r24

			USB_Host_ResetDevice();
    15aa:	7d de       	rcall	.-774    	; 0x12a6 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
    15ac:	10 92 63 03 	sts	0x0363, r1
    15b0:	88 ec       	ldi	r24, 0xC8	; 200
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	90 93 ba 01 	sts	0x01BA, r25
    15b8:	80 93 b9 01 	sts	0x01B9, r24
    15bc:	88 e0       	ldi	r24, 0x08	; 8
    15be:	25 c0       	rjmp	.+74     	; 0x160a <USB_Host_ProcessNextHostState+0x20e>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
    15c0:	00 91 23 01 	lds	r16, 0x0123
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	60 e0       	ldi	r22, 0x00	; 0
    15c8:	40 e0       	ldi	r20, 0x00	; 0
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	10 e0       	ldi	r17, 0x00	; 0
    15ce:	ee 24       	eor	r14, r14
    15d0:	44 d0       	rcall	.+136    	; 0x165a <Pipe_ConfigurePipe>
    15d2:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
    15d6:	87 ff       	sbrs	r24, 7
    15d8:	2c c0       	rjmp	.+88     	; 0x1632 <USB_Host_ProcessNextHostState+0x236>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
    15da:	ab e5       	ldi	r26, 0x5B	; 91
    15dc:	b3 e0       	ldi	r27, 0x03	; 3
    15de:	e3 e1       	ldi	r30, 0x13	; 19
    15e0:	f1 e0       	ldi	r31, 0x01	; 1
    15e2:	88 e0       	ldi	r24, 0x08	; 8
    15e4:	01 90       	ld	r0, Z+
    15e6:	0d 92       	st	X+, r0
    15e8:	81 50       	subi	r24, 0x01	; 1
    15ea:	e1 f7       	brne	.-8      	; 0x15e4 <USB_Host_ProcessNextHostState+0x1e8>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	91 d3       	rcall	.+1826   	; 0x1d14 <USB_Host_SendControlRequest>
    15f2:	68 2f       	mov	r22, r24
    15f4:	88 23       	and	r24, r24
    15f6:	01 f5       	brne	.+64     	; 0x1638 <USB_Host_ProcessNextHostState+0x23c>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
    15f8:	10 92 63 03 	sts	0x0363, r1
    15fc:	84 e6       	ldi	r24, 0x64	; 100
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	90 93 ba 01 	sts	0x01BA, r25
    1604:	80 93 b9 01 	sts	0x01B9, r24
    1608:	89 e0       	ldi	r24, 0x09	; 9
    160a:	80 93 b8 01 	sts	0x01B8, r24
			break;
    160e:	19 c0       	rjmp	.+50     	; 0x1642 <USB_Host_ProcessNextHostState+0x246>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
    1616:	8a e0       	ldi	r24, 0x0A	; 10
    1618:	80 93 63 03 	sts	0x0363, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
    161c:	2d d7       	rcall	.+3674   	; 0x2478 <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
    161e:	11 c0       	rjmp	.+34     	; 0x1642 <USB_Host_ProcessNextHostState+0x246>
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
    1620:	88 d7       	rcall	.+3856   	; 0x2532 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1622:	80 91 dd 00 	lds	r24, 0x00DD
    1626:	81 60       	ori	r24, 0x01	; 1
    1628:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
    162c:	21 d7       	rcall	.+3650   	; 0x2470 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    162e:	ef d0       	rcall	.+478    	; 0x180e <USB_ResetInterface>
    1630:	08 c0       	rjmp	.+16     	; 0x1642 <USB_Host_ProcessNextHostState+0x246>
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
    1632:	60 e0       	ldi	r22, 0x00	; 0
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
    1634:	84 e0       	ldi	r24, 0x04	; 4
    1636:	01 c0       	rjmp	.+2      	; 0x163a <USB_Host_ProcessNextHostState+0x23e>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
    1638:	83 e0       	ldi	r24, 0x03	; 3

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
    163a:	90 91 63 03 	lds	r25, 0x0363
    163e:	91 30       	cpi	r25, 0x01	; 1
    1640:	79 f7       	brne	.-34     	; 0x1620 <USB_Host_ProcessNextHostState+0x224>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
    1642:	28 96       	adiw	r28, 0x08	; 8
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	de bf       	out	0x3e, r29	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	cd bf       	out	0x3d, r28	; 61
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	ef 90       	pop	r14
    1658:	08 95       	ret

0000165a <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
    165a:	ef 92       	push	r14
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	5e 2d       	mov	r21, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
    1662:	62 95       	swap	r22
    1664:	66 0f       	add	r22, r22
    1666:	66 0f       	add	r22, r22
    1668:	60 7c       	andi	r22, 0xC0	; 192
    166a:	64 2b       	or	r22, r20
    166c:	2f 70       	andi	r18, 0x0F	; 15
    166e:	62 2b       	or	r22, r18

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    1670:	98 2f       	mov	r25, r24
		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    1672:	52 60       	ori	r21, 0x02	; 2

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    1674:	43 c0       	rjmp	.+134    	; 0x16fc <Pipe_ConfigurePipe+0xa2>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1676:	90 93 a7 00 	sts	0x00A7, r25
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
    167a:	98 17       	cp	r25, r24
    167c:	a1 f4       	brne	.+40     	; 0x16a6 <Pipe_ConfigurePipe+0x4c>
    167e:	28 e0       	ldi	r18, 0x08	; 8
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	40 e0       	ldi	r20, 0x00	; 0
    1684:	03 c0       	rjmp	.+6      	; 0x168c <Pipe_ConfigurePipe+0x32>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
    1686:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1688:	22 0f       	add	r18, r18
    168a:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
    168c:	20 17       	cp	r18, r16
    168e:	31 07       	cpc	r19, r17
    1690:	10 f4       	brcc	.+4      	; 0x1696 <Pipe_ConfigurePipe+0x3c>
    1692:	45 30       	cpi	r20, 0x05	; 5
    1694:	c1 f7       	brne	.-16     	; 0x1686 <Pipe_ConfigurePipe+0x2c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
    1696:	24 2f       	mov	r18, r20
    1698:	22 95       	swap	r18
    169a:	20 7f       	andi	r18, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
    169c:	25 2b       	or	r18, r21

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
    169e:	e6 2f       	mov	r30, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
    16a0:	40 e0       	ldi	r20, 0x00	; 0
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	08 c0       	rjmp	.+16     	; 0x16b6 <Pipe_ConfigurePipe+0x5c>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
    16a6:	e0 91 aa 00 	lds	r30, 0x00AA
			UPCFG1XTemp = UPCFG1X;
    16aa:	20 91 ab 00 	lds	r18, 0x00AB
			UPCFG2XTemp = UPCFG2X;
    16ae:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
    16b2:	40 91 ae 00 	lds	r20, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
    16b6:	21 ff       	sbrs	r18, 1
    16b8:	20 c0       	rjmp	.+64     	; 0x16fa <Pipe_ConfigurePipe+0xa0>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    16ba:	30 91 a9 00 	lds	r19, 0x00A9
    16be:	3e 7f       	andi	r19, 0xFE	; 254
    16c0:	30 93 a9 00 	sts	0x00A9, r19
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
    16c4:	30 91 ab 00 	lds	r19, 0x00AB
    16c8:	3d 7f       	andi	r19, 0xFD	; 253
    16ca:	30 93 ab 00 	sts	0x00AB, r19
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
    16ce:	30 91 a9 00 	lds	r19, 0x00A9
    16d2:	31 60       	ori	r19, 0x01	; 1
    16d4:	30 93 a9 00 	sts	0x00A9, r19

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
    16d8:	e0 93 aa 00 	sts	0x00AA, r30
		UPCFG1X = UPCFG1XTemp;
    16dc:	20 93 ab 00 	sts	0x00AB, r18
		UPCFG2X = UPCFG2XTemp;
    16e0:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
    16e4:	40 93 ae 00 	sts	0x00AE, r20

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
    16e8:	20 91 a9 00 	lds	r18, 0x00A9
    16ec:	20 62       	ori	r18, 0x20	; 32
    16ee:	20 93 a9 00 	sts	0x00A9, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    16f2:	20 91 ac 00 	lds	r18, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
    16f6:	27 ff       	sbrs	r18, 7
    16f8:	08 c0       	rjmp	.+16     	; 0x170a <Pipe_ConfigurePipe+0xb0>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
    16fa:	9f 5f       	subi	r25, 0xFF	; 255
    16fc:	97 30       	cpi	r25, 0x07	; 7
    16fe:	08 f4       	brcc	.+2      	; 0x1702 <Pipe_ConfigurePipe+0xa8>
    1700:	ba cf       	rjmp	.-140    	; 0x1676 <Pipe_ConfigurePipe+0x1c>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1702:	80 93 a7 00 	sts	0x00A7, r24
		if (!(Pipe_IsConfigured()))
		  return false;		
	}
		
	Pipe_SelectPipe(Number);	
	return true;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	01 c0       	rjmp	.+2      	; 0x170c <Pipe_ConfigurePipe+0xb2>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
		  return false;		
    170a:	80 e0       	ldi	r24, 0x00	; 0
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	ef 90       	pop	r14
    1712:	08 95       	ret

00001714 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
    1714:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    171e:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
    1722:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
    1726:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    172a:	90 91 a9 00 	lds	r25, 0x00A9
    172e:	9e 7f       	andi	r25, 0xFE	; 254
    1730:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1734:	8f 5f       	subi	r24, 0xFF	; 255
    1736:	87 30       	cpi	r24, 0x07	; 7
    1738:	81 f7       	brne	.-32     	; 0x171a <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
    173a:	08 95       	ret

0000173c <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    173c:	40 91 a7 00 	lds	r20, 0x00A7

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    1740:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1742:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1746:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    174a:	27 ff       	sbrs	r18, 7
    174c:	0e c0       	rjmp	.+28     	; 0x176a <Pipe_IsEndpointBound+0x2e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    174e:	20 91 aa 00 	lds	r18, 0x00AA
    1752:	2f 70       	andi	r18, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1754:	30 91 aa 00 	lds	r19, 0x00AA
    1758:	30 73       	andi	r19, 0x30	; 48
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    175a:	30 31       	cpi	r19, 0x10	; 16
    175c:	11 f4       	brne	.+4      	; 0x1762 <Pipe_IsEndpointBound+0x26>
    175e:	30 e8       	ldi	r19, 0x80	; 128
    1760:	01 c0       	rjmp	.+2      	; 0x1764 <Pipe_IsEndpointBound+0x28>
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	23 2b       	or	r18, r19
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    1766:	28 17       	cp	r18, r24
    1768:	49 f0       	breq	.+18     	; 0x177c <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
    176a:	9f 5f       	subi	r25, 0xFF	; 255
    176c:	97 30       	cpi	r25, 0x07	; 7
    176e:	49 f7       	brne	.-46     	; 0x1742 <Pipe_IsEndpointBound+0x6>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1770:	84 2f       	mov	r24, r20
    1772:	87 70       	andi	r24, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1774:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
    177c:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
    177e:	08 95       	ret

00001780 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    1780:	80 91 a2 00 	lds	r24, 0x00A2
    1784:	90 91 a3 00 	lds	r25, 0x00A3

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
    1788:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    178a:	20 91 aa 00 	lds	r18, 0x00AA
    178e:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    1790:	20 31       	cpi	r18, 0x10	; 16
    1792:	29 f4       	brne	.+10     	; 0x179e <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1794:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
    1798:	20 ff       	sbrs	r18, 0
    179a:	05 c0       	rjmp	.+10     	; 0x17a6 <Pipe_WaitUntilReady+0x26>
    179c:	18 c0       	rjmp	.+48     	; 0x17ce <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    179e:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    17a2:	22 fd       	sbrc	r18, 2
    17a4:	14 c0       	rjmp	.+40     	; 0x17ce <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    17a6:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    17aa:	21 fd       	sbrc	r18, 1
    17ac:	12 c0       	rjmp	.+36     	; 0x17d2 <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    17ae:	20 91 63 03 	lds	r18, 0x0363
    17b2:	21 30       	cpi	r18, 0x01	; 1
    17b4:	81 f0       	breq	.+32     	; 0x17d6 <Pipe_WaitUntilReady+0x56>
    17b6:	20 91 a2 00 	lds	r18, 0x00A2
    17ba:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    17be:	28 17       	cp	r18, r24
    17c0:	39 07       	cpc	r19, r25
    17c2:	19 f3       	breq	.-58     	; 0x178a <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    17c4:	44 23       	and	r20, r20
    17c6:	49 f0       	breq	.+18     	; 0x17da <Pipe_WaitUntilReady+0x5a>
    17c8:	41 50       	subi	r20, 0x01	; 1
    17ca:	c9 01       	movw	r24, r18
    17cc:	de cf       	rjmp	.-68     	; 0x178a <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    17d6:	82 e0       	ldi	r24, 0x02	; 2
    17d8:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    17da:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    17dc:	08 95       	ret

000017de <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    17de:	70 d0       	rcall	.+224    	; 0x18c0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    17e0:	77 d0       	rcall	.+238    	; 0x18d0 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    17e2:	e0 ee       	ldi	r30, 0xE0	; 224
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	81 60       	ori	r24, 0x01	; 1
    17ea:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
    17ec:	e8 ed       	ldi	r30, 0xD8	; 216
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	8f 77       	andi	r24, 0x7F	; 127
    17f4:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    17f6:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
    17f8:	a7 ed       	ldi	r26, 0xD7	; 215
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	8c 91       	ld	r24, X
    17fe:	8e 7f       	andi	r24, 0xFE	; 254
    1800:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
    1802:	80 81       	ld	r24, Z
    1804:	8f 7e       	andi	r24, 0xEF	; 239
    1806:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1808:	10 92 5a 03 	sts	0x035A, r1
}
    180c:	08 95       	ret

0000180e <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    180e:	58 d0       	rcall	.+176    	; 0x18c0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1810:	5f d0       	rcall	.+190    	; 0x18d0 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1812:	80 91 d8 00 	lds	r24, 0x00D8
    1816:	8f 77       	andi	r24, 0x7F	; 127
    1818:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    181c:	80 91 d8 00 	lds	r24, 0x00D8
    1820:	80 68       	ori	r24, 0x80	; 128
    1822:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    1826:	80 91 d8 00 	lds	r24, 0x00D8
    182a:	8f 7d       	andi	r24, 0xDF	; 223
    182c:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    1830:	80 91 d7 00 	lds	r24, 0x00D7
    1834:	8f 77       	andi	r24, 0x7F	; 127
    1836:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    183a:	84 e1       	ldi	r24, 0x14	; 20
    183c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    183e:	86 e1       	ldi	r24, 0x16	; 22
    1840:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
    1842:	09 b4       	in	r0, 0x29	; 41
    1844:	00 fe       	sbrs	r0, 0
    1846:	fd cf       	rjmp	.-6      	; 0x1842 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	80 93 63 03 	sts	0x0363, r24
	USB_Host_ConfigurationNumber = 0;
    184e:	10 92 59 03 	sts	0x0359, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    1852:	80 e4       	ldi	r24, 0x40	; 64
    1854:	80 93 23 01 	sts	0x0123, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    1858:	80 91 d8 00 	lds	r24, 0x00D8
    185c:	80 64       	ori	r24, 0x40	; 64
    185e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    1862:	80 91 dd 00 	lds	r24, 0x00DD
    1866:	81 60       	ori	r24, 0x01	; 1
    1868:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    186c:	80 91 dd 00 	lds	r24, 0x00DD
    1870:	84 60       	ori	r24, 0x04	; 4
    1872:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    1876:	80 91 d7 00 	lds	r24, 0x00D7
    187a:	8f 7e       	andi	r24, 0xEF	; 239
    187c:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    1880:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
    1882:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
    1884:	80 91 de 00 	lds	r24, 0x00DE
    1888:	81 60       	ori	r24, 0x01	; 1
    188a:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    188e:	80 91 de 00 	lds	r24, 0x00DE
    1892:	84 60       	ori	r24, 0x04	; 4
    1894:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1898:	80 91 e0 00 	lds	r24, 0x00E0
    189c:	8e 7f       	andi	r24, 0xFE	; 254
    189e:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    18a2:	80 91 d8 00 	lds	r24, 0x00D8
    18a6:	80 61       	ori	r24, 0x10	; 16
    18a8:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    18ac:	08 95       	ret

000018ae <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    18ae:	e7 ed       	ldi	r30, 0xD7	; 215
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	81 60       	ori	r24, 0x01	; 1
    18b6:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	80 93 5a 03 	sts	0x035A, r24

	USB_ResetInterface();
}
    18be:	a7 cf       	rjmp	.-178    	; 0x180e <USB_ResetInterface>

000018c0 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    18c0:	e8 ed       	ldi	r30, 0xD8	; 216
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	8c 7f       	andi	r24, 0xFC	; 252
    18c8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    18ca:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    18ce:	08 95       	ret

000018d0 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    18d0:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    18d4:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    18d8:	08 95       	ret

000018da <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    18da:	1f 92       	push	r1
    18dc:	0f 92       	push	r0
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	0f 92       	push	r0
    18e2:	0b b6       	in	r0, 0x3b	; 59
    18e4:	0f 92       	push	r0
    18e6:	11 24       	eor	r1, r1
    18e8:	2f 93       	push	r18
    18ea:	3f 93       	push	r19
    18ec:	4f 93       	push	r20
    18ee:	5f 93       	push	r21
    18f0:	6f 93       	push	r22
    18f2:	7f 93       	push	r23
    18f4:	8f 93       	push	r24
    18f6:	9f 93       	push	r25
    18f8:	af 93       	push	r26
    18fa:	bf 93       	push	r27
    18fc:	ef 93       	push	r30
    18fe:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    1900:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    1904:	85 ff       	sbrs	r24, 5
    1906:	0a c0       	rjmp	.+20     	; 0x191c <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1908:	80 91 a0 00 	lds	r24, 0x00A0
    190c:	85 ff       	sbrs	r24, 5
    190e:	06 c0       	rjmp	.+12     	; 0x191c <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    1910:	80 91 9f 00 	lds	r24, 0x009F
    1914:	8f 7d       	andi	r24, 0xDF	; 223
    1916:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    191a:	d2 d1       	rcall	.+932    	; 0x1cc0 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    191c:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1920:	81 ff       	sbrs	r24, 1
    1922:	15 c0       	rjmp	.+42     	; 0x194e <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    1924:	80 91 a0 00 	lds	r24, 0x00A0
    1928:	81 ff       	sbrs	r24, 1
    192a:	11 c0       	rjmp	.+34     	; 0x194e <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    192c:	80 91 9f 00 	lds	r24, 0x009F
    1930:	8d 7f       	andi	r24, 0xFD	; 253
    1932:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1936:	80 91 9f 00 	lds	r24, 0x009F
    193a:	8e 7f       	andi	r24, 0xFE	; 254
    193c:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1940:	80 91 a0 00 	lds	r24, 0x00A0
    1944:	8d 7f       	andi	r24, 0xFD	; 253
    1946:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    194a:	92 d5       	rcall	.+2852   	; 0x2470 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    194c:	60 df       	rcall	.-320    	; 0x180e <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    194e:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1952:	81 ff       	sbrs	r24, 1
    1954:	15 c0       	rjmp	.+42     	; 0x1980 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1956:	80 91 de 00 	lds	r24, 0x00DE
    195a:	81 ff       	sbrs	r24, 1
    195c:	11 c0       	rjmp	.+34     	; 0x1980 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    195e:	80 91 df 00 	lds	r24, 0x00DF
    1962:	8d 7f       	andi	r24, 0xFD	; 253
    1964:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
    1968:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    196a:	80 91 dd 00 	lds	r24, 0x00DD
    196e:	81 60       	ori	r24, 0x01	; 1
    1970:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	bf d5       	rcall	.+2942   	; 0x24f6 <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    1978:	7b d5       	rcall	.+2806   	; 0x2470 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	80 93 63 03 	sts	0x0363, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    1980:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1984:	80 ff       	sbrs	r24, 0
    1986:	17 c0       	rjmp	.+46     	; 0x19b6 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1988:	80 91 de 00 	lds	r24, 0x00DE
    198c:	80 ff       	sbrs	r24, 0
    198e:	13 c0       	rjmp	.+38     	; 0x19b6 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    1990:	80 91 df 00 	lds	r24, 0x00DF
    1994:	8e 7f       	andi	r24, 0xFE	; 254
    1996:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
    199a:	80 91 de 00 	lds	r24, 0x00DE
    199e:	8e 7f       	andi	r24, 0xFE	; 254
    19a0:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    19a4:	61 d5       	rcall	.+2754   	; 0x2468 <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    19a6:	80 91 a0 00 	lds	r24, 0x00A0
    19aa:	82 60       	ori	r24, 0x02	; 2
    19ac:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    19b0:	82 e0       	ldi	r24, 0x02	; 2
    19b2:	80 93 63 03 	sts	0x0363, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    19b6:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    19ba:	82 ff       	sbrs	r24, 2
    19bc:	0e c0       	rjmp	.+28     	; 0x19da <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    19be:	80 91 de 00 	lds	r24, 0x00DE
    19c2:	82 ff       	sbrs	r24, 2
    19c4:	0a c0       	rjmp	.+20     	; 0x19da <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    19c6:	80 91 df 00 	lds	r24, 0x00DF
    19ca:	8b 7f       	andi	r24, 0xFB	; 251
    19cc:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    19d0:	82 e0       	ldi	r24, 0x02	; 2
    19d2:	60 e0       	ldi	r22, 0x00	; 0
    19d4:	ae d5       	rcall	.+2908   	; 0x2532 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    19d6:	4c d5       	rcall	.+2712   	; 0x2470 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    19d8:	1a df       	rcall	.-460    	; 0x180e <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    19da:	ff 91       	pop	r31
    19dc:	ef 91       	pop	r30
    19de:	bf 91       	pop	r27
    19e0:	af 91       	pop	r26
    19e2:	9f 91       	pop	r25
    19e4:	8f 91       	pop	r24
    19e6:	7f 91       	pop	r23
    19e8:	6f 91       	pop	r22
    19ea:	5f 91       	pop	r21
    19ec:	4f 91       	pop	r20
    19ee:	3f 91       	pop	r19
    19f0:	2f 91       	pop	r18
    19f2:	0f 90       	pop	r0
    19f4:	0b be       	out	0x3b, r0	; 59
    19f6:	0f 90       	pop	r0
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	0f 90       	pop	r0
    19fc:	1f 90       	pop	r1
    19fe:	18 95       	reti

00001a00 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1a00:	8f 92       	push	r8
    1a02:	9f 92       	push	r9
    1a04:	bf 92       	push	r11
    1a06:	cf 92       	push	r12
    1a08:	df 92       	push	r13
    1a0a:	ef 92       	push	r14
    1a0c:	ff 92       	push	r15
    1a0e:	0f 93       	push	r16
    1a10:	1f 93       	push	r17
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	0f 92       	push	r0
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	e8 2e       	mov	r14, r24
    1a1e:	4b 01       	movw	r8, r22
    1a20:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1a22:	80 91 aa 00 	lds	r24, 0x00AA
    1a26:	8f 7c       	andi	r24, 0xCF	; 207
    1a28:	80 62       	ori	r24, 0x20	; 32
    1a2a:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1a2e:	99 83       	std	Y+1, r25	; 0x01
    1a30:	a7 de       	rcall	.-690    	; 0x1780 <Pipe_WaitUntilReady>
    1a32:	b8 2e       	mov	r11, r24
    1a34:	99 81       	ldd	r25, Y+1	; 0x01
    1a36:	88 23       	and	r24, r24
    1a38:	c1 f5       	brne	.+112    	; 0x1aaa <Pipe_Write_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1a3a:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1a3c:	01 15       	cp	r16, r1
    1a3e:	11 05       	cpc	r17, r1
    1a40:	39 f0       	breq	.+14     	; 0x1a50 <Pipe_Write_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
    1a42:	f8 01       	movw	r30, r16
    1a44:	20 81       	ld	r18, Z
    1a46:	31 81       	ldd	r19, Z+1	; 0x01
    1a48:	82 1a       	sub	r8, r18
    1a4a:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1a4c:	e2 0e       	add	r14, r18
    1a4e:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1a50:	cc 24       	eor	r12, r12
    1a52:	dd 24       	eor	r13, r13
    1a54:	25 c0       	rjmp	.+74     	; 0x1aa0 <Pipe_Write_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1a56:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1a5a:	85 fd       	sbrc	r24, 5
    1a5c:	16 c0       	rjmp	.+44     	; 0x1a8a <Pipe_Write_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1a5e:	80 91 a6 00 	lds	r24, 0x00A6
    1a62:	8b 77       	andi	r24, 0x7B	; 123
    1a64:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1a68:	01 15       	cp	r16, r1
    1a6a:	11 05       	cpc	r17, r1
    1a6c:	51 f0       	breq	.+20     	; 0x1a82 <Pipe_Write_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
    1a6e:	f8 01       	movw	r30, r16
    1a70:	80 81       	ld	r24, Z
    1a72:	91 81       	ldd	r25, Z+1	; 0x01
    1a74:	8c 0d       	add	r24, r12
    1a76:	9d 1d       	adc	r25, r13
    1a78:	91 83       	std	Z+1, r25	; 0x01
    1a7a:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
    1a7c:	24 e0       	ldi	r18, 0x04	; 4
    1a7e:	b2 2e       	mov	r11, r18
    1a80:	14 c0       	rjmp	.+40     	; 0x1aaa <Pipe_Write_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1a82:	7e de       	rcall	.-772    	; 0x1780 <Pipe_WaitUntilReady>
    1a84:	88 23       	and	r24, r24
    1a86:	61 f0       	breq	.+24     	; 0x1aa0 <Pipe_Write_Stream_LE+0xa0>
    1a88:	0f c0       	rjmp	.+30     	; 0x1aa8 <Pipe_Write_Stream_LE+0xa8>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1a8a:	f7 01       	movw	r30, r14
    1a8c:	81 91       	ld	r24, Z+
    1a8e:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1a90:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1a94:	08 94       	sec
    1a96:	81 08       	sbc	r8, r1
    1a98:	91 08       	sbc	r9, r1
			BytesInTransfer++;
    1a9a:	08 94       	sec
    1a9c:	c1 1c       	adc	r12, r1
    1a9e:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    1aa0:	81 14       	cp	r8, r1
    1aa2:	91 04       	cpc	r9, r1
    1aa4:	c1 f6       	brne	.-80     	; 0x1a56 <Pipe_Write_Stream_LE+0x56>
    1aa6:	01 c0       	rjmp	.+2      	; 0x1aaa <Pipe_Write_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1aa8:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1aaa:	8b 2d       	mov	r24, r11
    1aac:	0f 90       	pop	r0
    1aae:	cf 91       	pop	r28
    1ab0:	df 91       	pop	r29
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	ff 90       	pop	r15
    1ab8:	ef 90       	pop	r14
    1aba:	df 90       	pop	r13
    1abc:	cf 90       	pop	r12
    1abe:	bf 90       	pop	r11
    1ac0:	9f 90       	pop	r9
    1ac2:	8f 90       	pop	r8
    1ac4:	08 95       	ret

00001ac6 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1ac6:	8f 92       	push	r8
    1ac8:	9f 92       	push	r9
    1aca:	bf 92       	push	r11
    1acc:	cf 92       	push	r12
    1ace:	df 92       	push	r13
    1ad0:	ef 92       	push	r14
    1ad2:	ff 92       	push	r15
    1ad4:	0f 93       	push	r16
    1ad6:	1f 93       	push	r17
    1ad8:	df 93       	push	r29
    1ada:	cf 93       	push	r28
    1adc:	0f 92       	push	r0
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
    1ae2:	e8 2e       	mov	r14, r24
    1ae4:	4b 01       	movw	r8, r22
    1ae6:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1ae8:	80 91 aa 00 	lds	r24, 0x00AA
    1aec:	8f 7c       	andi	r24, 0xCF	; 207
    1aee:	80 61       	ori	r24, 0x10	; 16
    1af0:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1af4:	99 83       	std	Y+1, r25	; 0x01
    1af6:	44 de       	rcall	.-888    	; 0x1780 <Pipe_WaitUntilReady>
    1af8:	b8 2e       	mov	r11, r24
    1afa:	99 81       	ldd	r25, Y+1	; 0x01
    1afc:	88 23       	and	r24, r24
    1afe:	c1 f5       	brne	.+112    	; 0x1b70 <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1b00:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1b02:	01 15       	cp	r16, r1
    1b04:	11 05       	cpc	r17, r1
    1b06:	39 f0       	breq	.+14     	; 0x1b16 <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
    1b08:	f8 01       	movw	r30, r16
    1b0a:	20 81       	ld	r18, Z
    1b0c:	31 81       	ldd	r19, Z+1	; 0x01
    1b0e:	82 1a       	sub	r8, r18
    1b10:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1b12:	e2 0e       	add	r14, r18
    1b14:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1b16:	cc 24       	eor	r12, r12
    1b18:	dd 24       	eor	r13, r13
    1b1a:	25 c0       	rjmp	.+74     	; 0x1b66 <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1b1c:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
    1b20:	85 fd       	sbrc	r24, 5
    1b22:	16 c0       	rjmp	.+44     	; 0x1b50 <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1b24:	80 91 a6 00 	lds	r24, 0x00A6
    1b28:	8e 77       	andi	r24, 0x7E	; 126
    1b2a:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
    1b2e:	01 15       	cp	r16, r1
    1b30:	11 05       	cpc	r17, r1
    1b32:	51 f0       	breq	.+20     	; 0x1b48 <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
    1b34:	f8 01       	movw	r30, r16
    1b36:	80 81       	ld	r24, Z
    1b38:	91 81       	ldd	r25, Z+1	; 0x01
    1b3a:	8c 0d       	add	r24, r12
    1b3c:	9d 1d       	adc	r25, r13
    1b3e:	91 83       	std	Z+1, r25	; 0x01
    1b40:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
    1b42:	44 e0       	ldi	r20, 0x04	; 4
    1b44:	b4 2e       	mov	r11, r20
    1b46:	14 c0       	rjmp	.+40     	; 0x1b70 <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1b48:	1b de       	rcall	.-970    	; 0x1780 <Pipe_WaitUntilReady>
    1b4a:	88 23       	and	r24, r24
    1b4c:	61 f0       	breq	.+24     	; 0x1b66 <Pipe_Read_Stream_LE+0xa0>
    1b4e:	0f c0       	rjmp	.+30     	; 0x1b6e <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1b50:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1b54:	f7 01       	movw	r30, r14
    1b56:	81 93       	st	Z+, r24
    1b58:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1b5a:	08 94       	sec
    1b5c:	81 08       	sbc	r8, r1
    1b5e:	91 08       	sbc	r9, r1
			BytesInTransfer++;
    1b60:	08 94       	sec
    1b62:	c1 1c       	adc	r12, r1
    1b64:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
    1b66:	81 14       	cp	r8, r1
    1b68:	91 04       	cpc	r9, r1
    1b6a:	c1 f6       	brne	.-80     	; 0x1b1c <Pipe_Read_Stream_LE+0x56>
    1b6c:	01 c0       	rjmp	.+2      	; 0x1b70 <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    1b6e:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    1b70:	8b 2d       	mov	r24, r11
    1b72:	0f 90       	pop	r0
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	1f 91       	pop	r17
    1b7a:	0f 91       	pop	r16
    1b7c:	ff 90       	pop	r15
    1b7e:	ef 90       	pop	r14
    1b80:	df 90       	pop	r13
    1b82:	cf 90       	pop	r12
    1b84:	bf 90       	pop	r11
    1b86:	9f 90       	pop	r9
    1b88:	8f 90       	pop	r8
    1b8a:	08 95       	ret

00001b8c <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    1b8c:	cf 92       	push	r12
    1b8e:	df 92       	push	r13
    1b90:	ef 92       	push	r14
    1b92:	ff 92       	push	r15
    1b94:	0f 93       	push	r16
    1b96:	1f 93       	push	r17
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	29 97       	sbiw	r28, 0x09	; 9
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
    1bac:	6b 01       	movw	r12, r22
    1bae:	8a 01       	movw	r16, r20
    1bb0:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1bb2:	90 e8       	ldi	r25, 0x80	; 128
    1bb4:	90 93 5b 03 	sts	0x035B, r25
    1bb8:	96 e0       	ldi	r25, 0x06	; 6
    1bba:	90 93 5c 03 	sts	0x035C, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1bc4:	90 93 5e 03 	sts	0x035E, r25
    1bc8:	80 93 5d 03 	sts	0x035D, r24
    1bcc:	10 92 60 03 	sts	0x0360, r1
    1bd0:	10 92 5f 03 	sts	0x035F, r1
    1bd4:	89 e0       	ldi	r24, 0x09	; 9
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	90 93 62 03 	sts	0x0362, r25
    1bdc:	80 93 61 03 	sts	0x0361, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1be0:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1be4:	ce 01       	movw	r24, r28
    1be6:	01 96       	adiw	r24, 0x01	; 1
    1be8:	95 d0       	rcall	.+298    	; 0x1d14 <USB_Host_SendControlRequest>
    1bea:	88 23       	and	r24, r24
    1bec:	b9 f4       	brne	.+46     	; 0x1c1c <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	f6 01       	movw	r30, r12
    1bf4:	91 83       	std	Z+1, r25	; 0x01
    1bf6:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1bf8:	e8 16       	cp	r14, r24
    1bfa:	f9 06       	cpc	r15, r25
    1bfc:	70 f0       	brcs	.+28     	; 0x1c1a <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    1bfe:	90 93 62 03 	sts	0x0362, r25
    1c02:	80 93 61 03 	sts	0x0361, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1c06:	c8 01       	movw	r24, r16
    1c08:	85 d0       	rcall	.+266    	; 0x1d14 <USB_Host_SendControlRequest>
    1c0a:	88 23       	and	r24, r24
    1c0c:	39 f4       	brne	.+14     	; 0x1c1c <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    1c0e:	f8 01       	movw	r30, r16
    1c10:	91 81       	ldd	r25, Z+1	; 0x01
    1c12:	92 30       	cpi	r25, 0x02	; 2
    1c14:	19 f0       	breq	.+6      	; 0x1c1c <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
    1c16:	86 e0       	ldi	r24, 0x06	; 6
    1c18:	01 c0       	rjmp	.+2      	; 0x1c1c <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
    1c1a:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    1c1c:	29 96       	adiw	r28, 0x09	; 9
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	1f 91       	pop	r17
    1c2e:	0f 91       	pop	r16
    1c30:	ff 90       	pop	r15
    1c32:	ef 90       	pop	r14
    1c34:	df 90       	pop	r13
    1c36:	cf 90       	pop	r12
    1c38:	08 95       	ret

00001c3a <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    1c3a:	af 92       	push	r10
    1c3c:	bf 92       	push	r11
    1c3e:	cf 92       	push	r12
    1c40:	df 92       	push	r13
    1c42:	ef 92       	push	r14
    1c44:	ff 92       	push	r15
    1c46:	0f 93       	push	r16
    1c48:	1f 93       	push	r17
    1c4a:	cf 93       	push	r28
    1c4c:	df 93       	push	r29
    1c4e:	8c 01       	movw	r16, r24
    1c50:	eb 01       	movw	r28, r22
    1c52:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    1c54:	23 c0       	rjmp	.+70     	; 0x1c9c <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    1c56:	e8 81       	ld	r30, Y
    1c58:	f9 81       	ldd	r31, Y+1	; 0x01
    1c5a:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1c5c:	20 81       	ld	r18, Z
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	c7 01       	movw	r24, r14
    1c62:	2e 15       	cp	r18, r14
    1c64:	3f 05       	cpc	r19, r15
    1c66:	08 f4       	brcc	.+2      	; 0x1c6a <USB_GetNextDescriptorComp+0x30>
    1c68:	c9 01       	movw	r24, r18
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    1c6a:	e8 0f       	add	r30, r24
    1c6c:	f9 1f       	adc	r31, r25
    1c6e:	f9 83       	std	Y+1, r31	; 0x01
    1c70:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    1c72:	f8 01       	movw	r30, r16
    1c74:	20 81       	ld	r18, Z
    1c76:	31 81       	ldd	r19, Z+1	; 0x01
    1c78:	28 1b       	sub	r18, r24
    1c7a:	39 0b       	sbc	r19, r25
    1c7c:	31 83       	std	Z+1, r19	; 0x01
    1c7e:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1c80:	88 81       	ld	r24, Y
    1c82:	99 81       	ldd	r25, Y+1	; 0x01
    1c84:	f6 01       	movw	r30, r12
    1c86:	09 95       	icall
    1c88:	82 30       	cpi	r24, 0x02	; 2
    1c8a:	41 f0       	breq	.+16     	; 0x1c9c <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1c8c:	81 30       	cpi	r24, 0x01	; 1
    1c8e:	69 f4       	brne	.+26     	; 0x1caa <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
    1c90:	a8 82       	st	Y, r10
    1c92:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
    1c94:	f8 01       	movw	r30, r16
    1c96:	f1 82       	std	Z+1, r15	; 0x01
    1c98:	e0 82       	st	Z, r14
    1c9a:	07 c0       	rjmp	.+14     	; 0x1caa <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
    1c9c:	f8 01       	movw	r30, r16
    1c9e:	e0 80       	ld	r14, Z
    1ca0:	f1 80       	ldd	r15, Z+1	; 0x01
    1ca2:	e1 14       	cp	r14, r1
    1ca4:	f1 04       	cpc	r15, r1
    1ca6:	b9 f6       	brne	.-82     	; 0x1c56 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    1ca8:	82 e0       	ldi	r24, 0x02	; 2
}
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	1f 91       	pop	r17
    1cb0:	0f 91       	pop	r16
    1cb2:	ff 90       	pop	r15
    1cb4:	ef 90       	pop	r14
    1cb6:	df 90       	pop	r13
    1cb8:	cf 90       	pop	r12
    1cba:	bf 90       	pop	r11
    1cbc:	af 90       	pop	r10
    1cbe:	08 95       	ret

00001cc0 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1cc0:	08 95       	ret

00001cc2 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1cc2:	1f 93       	push	r17
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
    1cca:	c8 ee       	ldi	r28, 0xE8	; 232
    1ccc:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1cce:	07 c0       	rjmp	.+14     	; 0x1cde <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	3f db       	rcall	.-2434   	; 0x1352 <USB_Host_WaitMS>
    1cd4:	88 23       	and	r24, r24
    1cd6:	d1 f4       	brne	.+52     	; 0x1d0c <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1cd8:	20 97       	sbiw	r28, 0x00	; 0
    1cda:	b9 f0       	breq	.+46     	; 0x1d0a <USB_Host_WaitForIOS+0x48>
    1cdc:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1cde:	11 23       	and	r17, r17
    1ce0:	29 f4       	brne	.+10     	; 0x1cec <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    1ce2:	80 91 a6 00 	lds	r24, 0x00A6
    1ce6:	83 ff       	sbrs	r24, 3
    1ce8:	f3 cf       	rjmp	.-26     	; 0x1cd0 <USB_Host_WaitForIOS+0xe>
    1cea:	0d c0       	rjmp	.+26     	; 0x1d06 <USB_Host_WaitForIOS+0x44>
    1cec:	11 30       	cpi	r17, 0x01	; 1
    1cee:	29 f4       	brne	.+10     	; 0x1cfa <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1cf0:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    1cf4:	80 ff       	sbrs	r24, 0
    1cf6:	ec cf       	rjmp	.-40     	; 0x1cd0 <USB_Host_WaitForIOS+0xe>
    1cf8:	06 c0       	rjmp	.+12     	; 0x1d06 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1cfa:	12 30       	cpi	r17, 0x02	; 2
    1cfc:	49 f7       	brne	.-46     	; 0x1cd0 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1cfe:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1d02:	82 ff       	sbrs	r24, 2
    1d04:	e5 cf       	rjmp	.-54     	; 0x1cd0 <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	01 c0       	rjmp	.+2      	; 0x1d0c <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1d0a:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	1f 91       	pop	r17
    1d12:	08 95       	ret

00001d14 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    1d14:	ef 92       	push	r14
    1d16:	ff 92       	push	r15
    1d18:	0f 93       	push	r16
    1d1a:	1f 93       	push	r17
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    1d22:	e0 90 9e 00 	lds	r14, 0x009E
    1d26:	ff 24       	eor	r15, r15
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	e8 22       	and	r14, r24
    1d2c:	ff 24       	eor	r15, r15
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    1d2e:	c0 91 61 03 	lds	r28, 0x0361
    1d32:	d0 91 62 03 	lds	r29, 0x0362
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    1d36:	80 91 9e 00 	lds	r24, 0x009E
    1d3a:	81 60       	ori	r24, 0x01	; 1
    1d3c:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	07 db       	rcall	.-2546   	; 0x1352 <USB_Host_WaitMS>
    1d44:	88 23       	and	r24, r24
    1d46:	09 f0       	breq	.+2      	; 0x1d4a <USB_Host_SendControlRequest+0x36>
    1d48:	cb c0       	rjmp	.+406    	; 0x1ee0 <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1d4a:	80 91 aa 00 	lds	r24, 0x00AA
    1d4e:	8f 7c       	andi	r24, 0xCF	; 207
    1d50:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    1d54:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1d58:	80 91 a6 00 	lds	r24, 0x00A6
    1d5c:	8f 7e       	andi	r24, 0xEF	; 239
    1d5e:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1d62:	80 91 a9 00 	lds	r24, 0x00A9
    1d66:	8f 7b       	andi	r24, 0xBF	; 191
    1d68:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
    1d6c:	eb e5       	ldi	r30, 0x5B	; 91
    1d6e:	f3 e0       	ldi	r31, 0x03	; 3

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    1d70:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1d72:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1d76:	83 e0       	ldi	r24, 0x03	; 3
    1d78:	e3 36       	cpi	r30, 0x63	; 99
    1d7a:	f8 07       	cpc	r31, r24
    1d7c:	c9 f7       	brne	.-14     	; 0x1d70 <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1d7e:	80 91 a6 00 	lds	r24, 0x00A6
    1d82:	87 77       	andi	r24, 0x77	; 119
    1d84:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	9b df       	rcall	.-202    	; 0x1cc2 <USB_Host_WaitForIOS>
    1d8c:	88 23       	and	r24, r24
    1d8e:	09 f0       	breq	.+2      	; 0x1d92 <USB_Host_SendControlRequest+0x7e>
    1d90:	a7 c0       	rjmp	.+334    	; 0x1ee0 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1d92:	80 91 a9 00 	lds	r24, 0x00A9
    1d96:	80 64       	ori	r24, 0x40	; 64
    1d98:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1d9c:	81 e0       	ldi	r24, 0x01	; 1
    1d9e:	d9 da       	rcall	.-2638   	; 0x1352 <USB_Host_WaitMS>
    1da0:	88 23       	and	r24, r24
    1da2:	09 f0       	breq	.+2      	; 0x1da6 <USB_Host_SendControlRequest+0x92>
    1da4:	9d c0       	rjmp	.+314    	; 0x1ee0 <USB_Host_SendControlRequest+0x1cc>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1da6:	80 91 5b 03 	lds	r24, 0x035B
    1daa:	87 ff       	sbrs	r24, 7
    1dac:	4f c0       	rjmp	.+158    	; 0x1e4c <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1dae:	80 91 aa 00 	lds	r24, 0x00AA
    1db2:	8f 7c       	andi	r24, 0xCF	; 207
    1db4:	80 61       	ori	r24, 0x10	; 16
    1db6:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1dba:	01 15       	cp	r16, r1
    1dbc:	11 05       	cpc	r17, r1
    1dbe:	61 f5       	brne	.+88     	; 0x1e18 <USB_Host_SendControlRequest+0x104>
    1dc0:	2d c0       	rjmp	.+90     	; 0x1e1c <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1dc2:	80 91 a9 00 	lds	r24, 0x00A9
    1dc6:	8f 7b       	andi	r24, 0xBF	; 191
    1dc8:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	79 df       	rcall	.-270    	; 0x1cc2 <USB_Host_WaitForIOS>
    1dd0:	88 23       	and	r24, r24
    1dd2:	09 f0       	breq	.+2      	; 0x1dd6 <USB_Host_SendControlRequest+0xc2>
    1dd4:	85 c0       	rjmp	.+266    	; 0x1ee0 <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1dd6:	80 91 f6 00 	lds	r24, 0x00F6
    1dda:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	49 f4       	brne	.+18     	; 0x1df4 <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    1de2:	c0 e0       	ldi	r28, 0x00	; 0
    1de4:	d0 e0       	ldi	r29, 0x00	; 0
    1de6:	06 c0       	rjmp	.+12     	; 0x1df4 <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1de8:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    1dec:	f8 01       	movw	r30, r16
    1dee:	81 93       	st	Z+, r24
    1df0:	8f 01       	movw	r16, r30
					DataLen--;
    1df2:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1df4:	80 91 f6 00 	lds	r24, 0x00F6
    1df8:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	11 f0       	breq	.+4      	; 0x1e04 <USB_Host_SendControlRequest+0xf0>
    1e00:	20 97       	sbiw	r28, 0x00	; 0
    1e02:	91 f7       	brne	.-28     	; 0x1de8 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1e04:	80 91 a9 00 	lds	r24, 0x00A9
    1e08:	80 64       	ori	r24, 0x40	; 64
    1e0a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1e0e:	80 91 a6 00 	lds	r24, 0x00A6
    1e12:	8e 77       	andi	r24, 0x7E	; 126
    1e14:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    1e18:	20 97       	sbiw	r28, 0x00	; 0
    1e1a:	99 f6       	brne	.-90     	; 0x1dc2 <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1e1c:	80 91 aa 00 	lds	r24, 0x00AA
    1e20:	8f 7c       	andi	r24, 0xCF	; 207
    1e22:	80 62       	ori	r24, 0x20	; 32
    1e24:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1e28:	80 91 a9 00 	lds	r24, 0x00A9
    1e2c:	8f 7b       	andi	r24, 0xBF	; 191
    1e2e:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	46 df       	rcall	.-372    	; 0x1cc2 <USB_Host_WaitForIOS>
    1e36:	88 23       	and	r24, r24
    1e38:	09 f0       	breq	.+2      	; 0x1e3c <USB_Host_SendControlRequest+0x128>
    1e3a:	52 c0       	rjmp	.+164    	; 0x1ee0 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1e3c:	80 91 a6 00 	lds	r24, 0x00A6
    1e40:	8b 77       	andi	r24, 0x7B	; 123
    1e42:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1e46:	82 e0       	ldi	r24, 0x02	; 2
    1e48:	3c df       	rcall	.-392    	; 0x1cc2 <USB_Host_WaitForIOS>
    1e4a:	4a c0       	rjmp	.+148    	; 0x1ee0 <USB_Host_SendControlRequest+0x1cc>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    1e4c:	01 15       	cp	r16, r1
    1e4e:	11 05       	cpc	r17, r1
    1e50:	99 f1       	breq	.+102    	; 0x1eb8 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1e52:	80 91 aa 00 	lds	r24, 0x00AA
    1e56:	8f 7c       	andi	r24, 0xCF	; 207
    1e58:	80 62       	ori	r24, 0x20	; 32
    1e5a:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1e5e:	80 91 a9 00 	lds	r24, 0x00A9
    1e62:	8f 7b       	andi	r24, 0xBF	; 191
    1e64:	80 93 a9 00 	sts	0x00A9, r24
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1e68:	1c c0       	rjmp	.+56     	; 0x1ea2 <USB_Host_SendControlRequest+0x18e>
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1e6a:	82 e0       	ldi	r24, 0x02	; 2
    1e6c:	2a df       	rcall	.-428    	; 0x1cc2 <USB_Host_WaitForIOS>
    1e6e:	88 23       	and	r24, r24
    1e70:	b9 f5       	brne	.+110    	; 0x1ee0 <USB_Host_SendControlRequest+0x1cc>
    1e72:	f8 01       	movw	r30, r16
    1e74:	06 c0       	rjmp	.+12     	; 0x1e82 <USB_Host_SendControlRequest+0x16e>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1e76:	81 91       	ld	r24, Z+
    1e78:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1e7a:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    1e7e:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1e80:	59 f0       	breq	.+22     	; 0x1e98 <USB_Host_SendControlRequest+0x184>
    1e82:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1e84:	20 91 f6 00 	lds	r18, 0x00F6
    1e88:	30 91 f7 00 	lds	r19, 0x00F7
    1e8c:	80 91 23 01 	lds	r24, 0x0123
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	28 17       	cp	r18, r24
    1e94:	39 07       	cpc	r19, r25
    1e96:	78 f3       	brcs	.-34     	; 0x1e76 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1e98:	80 91 a6 00 	lds	r24, 0x00A6
    1e9c:	8b 77       	andi	r24, 0x7B	; 123
    1e9e:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1ea2:	20 97       	sbiw	r28, 0x00	; 0
    1ea4:	11 f7       	brne	.-60     	; 0x1e6a <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1ea6:	82 e0       	ldi	r24, 0x02	; 2
    1ea8:	0c df       	rcall	.-488    	; 0x1cc2 <USB_Host_WaitForIOS>
    1eaa:	88 23       	and	r24, r24
    1eac:	c9 f4       	brne	.+50     	; 0x1ee0 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1eae:	80 91 a9 00 	lds	r24, 0x00A9
    1eb2:	80 64       	ori	r24, 0x40	; 64
    1eb4:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1eb8:	80 91 aa 00 	lds	r24, 0x00AA
    1ebc:	8f 7c       	andi	r24, 0xCF	; 207
    1ebe:	80 61       	ori	r24, 0x10	; 16
    1ec0:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1ec4:	80 91 a9 00 	lds	r24, 0x00A9
    1ec8:	8f 7b       	andi	r24, 0xBF	; 191
    1eca:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	f8 de       	rcall	.-528    	; 0x1cc2 <USB_Host_WaitForIOS>
    1ed2:	88 23       	and	r24, r24
    1ed4:	29 f4       	brne	.+10     	; 0x1ee0 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1ed6:	90 91 a6 00 	lds	r25, 0x00A6
    1eda:	9e 77       	andi	r25, 0x7E	; 126
    1edc:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1ee0:	90 91 a9 00 	lds	r25, 0x00A9
    1ee4:	90 64       	ori	r25, 0x40	; 64
    1ee6:	90 93 a9 00 	sts	0x00A9, r25
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1eea:	e1 14       	cp	r14, r1
    1eec:	f1 04       	cpc	r15, r1
    1eee:	29 f4       	brne	.+10     	; 0x1efa <USB_Host_SendControlRequest+0x1e6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1ef0:	90 91 9e 00 	lds	r25, 0x009E
    1ef4:	9e 7f       	andi	r25, 0xFE	; 254
    1ef6:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1efa:	91 e0       	ldi	r25, 0x01	; 1
    1efc:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    1f00:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1f04:	df 91       	pop	r29
    1f06:	cf 91       	pop	r28
    1f08:	1f 91       	pop	r17
    1f0a:	0f 91       	pop	r16
    1f0c:	ff 90       	pop	r15
    1f0e:	ef 90       	pop	r14
    1f10:	08 95       	ret

00001f12 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1f12:	1f 93       	push	r17
    1f14:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1f16:	10 92 5b 03 	sts	0x035B, r1
    1f1a:	89 e0       	ldi	r24, 0x09	; 9
    1f1c:	80 93 5c 03 	sts	0x035C, r24
    1f20:	10 93 5d 03 	sts	0x035D, r17
    1f24:	10 92 5e 03 	sts	0x035E, r1
    1f28:	10 92 60 03 	sts	0x0360, r1
    1f2c:	10 92 5f 03 	sts	0x035F, r1
    1f30:	10 92 62 03 	sts	0x0362, r1
    1f34:	10 92 61 03 	sts	0x0361, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1f38:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	e9 de       	rcall	.-558    	; 0x1d14 <USB_Host_SendControlRequest>
    1f42:	88 23       	and	r24, r24
    1f44:	49 f4       	brne	.+18     	; 0x1f58 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1f46:	10 93 59 03 	sts	0x0359, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1f4a:	11 23       	and	r17, r17
    1f4c:	11 f0       	breq	.+4      	; 0x1f52 <USB_Host_SetDeviceConfiguration+0x40>
    1f4e:	9b e0       	ldi	r25, 0x0B	; 11
    1f50:	01 c0       	rjmp	.+2      	; 0x1f54 <USB_Host_SetDeviceConfiguration+0x42>
    1f52:	9a e0       	ldi	r25, 0x0A	; 10
    1f54:	90 93 63 03 	sts	0x0363, r25
	}

	return ErrorCode;
}
    1f58:	1f 91       	pop	r17
    1f5a:	08 95       	ret

00001f5c <USB_Host_ClearEndpointStall>:
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1f5c:	92 e0       	ldi	r25, 0x02	; 2
    1f5e:	90 93 5b 03 	sts	0x035B, r25
    1f62:	91 e0       	ldi	r25, 0x01	; 1
    1f64:	90 93 5c 03 	sts	0x035C, r25
    1f68:	10 92 5e 03 	sts	0x035E, r1
    1f6c:	10 92 5d 03 	sts	0x035D, r1
    1f70:	80 93 5f 03 	sts	0x035F, r24
    1f74:	10 92 60 03 	sts	0x0360, r1
    1f78:	10 92 62 03 	sts	0x0362, r1
    1f7c:	10 92 61 03 	sts	0x0361, r1
    1f80:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	90 e0       	ldi	r25, 0x00	; 0
}
    1f88:	c5 ce       	rjmp	.-630    	; 0x1d14 <USB_Host_SendControlRequest>

00001f8a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1f8a:	1f 93       	push	r17
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1f90:	c7 ea       	ldi	r28, 0xA7	; 167
    1f92:	d0 e0       	ldi	r29, 0x00	; 0
    1f94:	18 81       	ld	r17, Y
    1f96:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1f98:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1f9a:	30 da       	rcall	.-2976   	; 0x13fc <USB_Host_ProcessNextHostState>
    1f9c:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    1f9e:	df 91       	pop	r29
    1fa0:	cf 91       	pop	r28
    1fa2:	1f 91       	pop	r17
    1fa4:	08 95       	ret

00001fa6 <DCOMP_SI_Host_NextSIInterface>:

	return SI_ENUMERROR_NoError;
}

uint8_t DCOMP_SI_Host_NextSIInterface(void* const CurrentDescriptor)
{
    1fa6:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1fa8:	81 81       	ldd	r24, Z+1	; 0x01
    1faa:	84 30       	cpi	r24, 0x04	; 4
    1fac:	49 f4       	brne	.+18     	; 0x1fc0 <DCOMP_SI_Host_NextSIInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
    1fae:	85 81       	ldd	r24, Z+5	; 0x05
    1fb0:	86 30       	cpi	r24, 0x06	; 6
    1fb2:	31 f4       	brne	.+12     	; 0x1fc0 <DCOMP_SI_Host_NextSIInterface+0x1a>
    1fb4:	86 81       	ldd	r24, Z+6	; 0x06
    1fb6:	81 30       	cpi	r24, 0x01	; 1
    1fb8:	19 f4       	brne	.+6      	; 0x1fc0 <DCOMP_SI_Host_NextSIInterface+0x1a>
		    (Interface->SubClass == SI_CSCP_StillImageSubclass) &&
    1fba:	87 81       	ldd	r24, Z+7	; 0x07
    1fbc:	81 30       	cpi	r24, 0x01	; 1
    1fbe:	11 f0       	breq	.+4      	; 0x1fc4 <DCOMP_SI_Host_NextSIInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1fc0:	82 e0       	ldi	r24, 0x02	; 2
    1fc2:	08 95       	ret

		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
		    (Interface->SubClass == SI_CSCP_StillImageSubclass) &&
		    (Interface->Protocol == SI_CSCP_BulkOnlyProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1fc6:	08 95       	ret

00001fc8 <DCOMP_SI_Host_NextSIInterfaceEndpoint>:

uint8_t DCOMP_SI_Host_NextSIInterfaceEndpoint(void* const CurrentDescriptor)
{
    1fc8:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1fca:	81 81       	ldd	r24, Z+1	; 0x01
    1fcc:	85 30       	cpi	r24, 0x05	; 5
    1fce:	51 f4       	brne	.+20     	; 0x1fe4 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    1fd0:	83 81       	ldd	r24, Z+3	; 0x03
    1fd2:	83 70       	andi	r24, 0x03	; 3

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    1fd4:	82 50       	subi	r24, 0x02	; 2
    1fd6:	82 30       	cpi	r24, 0x02	; 2
    1fd8:	38 f4       	brcc	.+14     	; 0x1fe8 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x20>
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	af db       	rcall	.-2210   	; 0x173c <Pipe_IsEndpointBound>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    1fde:	88 23       	and	r24, r24
    1fe0:	19 f4       	brne	.+6      	; 0x1fe8 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x20>
    1fe2:	04 c0       	rjmp	.+8      	; 0x1fec <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x24>
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    1fe4:	84 30       	cpi	r24, 0x04	; 4
    1fe6:	21 f0       	breq	.+8      	; 0x1ff0 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x28>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1fe8:	82 e0       	ldi	r24, 0x02	; 2
    1fea:	08 95       	ret
		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		{
			return DESCRIPTOR_SEARCH_Found;
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	08 95       	ret
		}
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1ff2:	08 95       	ret

00001ff4 <SI_Host_ConfigurePipes>:
#include "StillImage.h"

uint8_t SI_Host_ConfigurePipes(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                               uint16_t ConfigDescriptorSize,
                               void* ConfigDescriptorData)
{
    1ff4:	4f 92       	push	r4
    1ff6:	5f 92       	push	r5
    1ff8:	6f 92       	push	r6
    1ffa:	7f 92       	push	r7
    1ffc:	8f 92       	push	r8
    1ffe:	9f 92       	push	r9
    2000:	af 92       	push	r10
    2002:	bf 92       	push	r11
    2004:	cf 92       	push	r12
    2006:	df 92       	push	r13
    2008:	ef 92       	push	r14
    200a:	ff 92       	push	r15
    200c:	0f 93       	push	r16
    200e:	1f 93       	push	r17
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	00 d0       	rcall	.+0      	; 0x2016 <SI_Host_ConfigurePipes+0x22>
    2016:	00 d0       	rcall	.+0      	; 0x2018 <SI_Host_ConfigurePipes+0x24>
    2018:	00 d0       	rcall	.+0      	; 0x201a <SI_Host_ConfigurePipes+0x26>
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	6c 01       	movw	r12, r24
    2020:	7a 83       	std	Y+2, r23	; 0x02
    2022:	69 83       	std	Y+1, r22	; 0x01
    2024:	5c 83       	std	Y+4, r21	; 0x04
    2026:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint     = NULL;
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;
	USB_Descriptor_Interface_t* StillImageInterface = NULL;

	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));
    2028:	06 96       	adiw	r24, 0x06	; 6
    202a:	fc 01       	movw	r30, r24
    202c:	8d e0       	ldi	r24, 0x0D	; 13
    202e:	df 01       	movw	r26, r30
    2030:	1d 92       	st	X+, r1
    2032:	8a 95       	dec	r24
    2034:	e9 f7       	brne	.-6      	; 0x2030 <SI_Host_ConfigurePipes+0x3c>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    2036:	eb 81       	ldd	r30, Y+3	; 0x03
    2038:	fc 81       	ldd	r31, Y+4	; 0x04
    203a:	81 81       	ldd	r24, Z+1	; 0x01
    203c:	82 30       	cpi	r24, 0x02	; 2
    203e:	09 f0       	breq	.+2      	; 0x2042 <SI_Host_ConfigurePipes+0x4e>
    2040:	9e c0       	rjmp	.+316    	; 0x217e <__stack+0x7f>
    2042:	44 24       	eor	r4, r4
    2044:	55 24       	eor	r5, r5
    2046:	aa 24       	eor	r10, r10
    2048:	bb 24       	eor	r11, r11
    204a:	88 24       	eor	r8, r8
    204c:	99 24       	eor	r9, r9
    204e:	66 24       	eor	r6, r6
    2050:	77 24       	eor	r7, r7
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
	{
		if (!(StillImageInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    2052:	83 e0       	ldi	r24, 0x03	; 3
    2054:	e8 2e       	mov	r14, r24
    2056:	f1 2c       	mov	r15, r1
    2058:	ec 0e       	add	r14, r28
    205a:	fd 1e       	adc	r15, r29
    205c:	8e 01       	movw	r16, r28
    205e:	0f 5f       	subi	r16, 0xFF	; 255
    2060:	1f 4f       	sbci	r17, 0xFF	; 255
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
	{
		if (!(StillImageInterface) ||
    2062:	41 14       	cp	r4, r1
    2064:	51 04       	cpc	r5, r1
    2066:	39 f0       	breq	.+14     	; 0x2076 <SI_Host_ConfigurePipes+0x82>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    2068:	c8 01       	movw	r24, r16
    206a:	b7 01       	movw	r22, r14
    206c:	44 ee       	ldi	r20, 0xE4	; 228
    206e:	5f e0       	ldi	r21, 0x0F	; 15
    2070:	e4 dd       	rcall	.-1080   	; 0x1c3a <USB_GetNextDescriptorComp>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
	{
		if (!(StillImageInterface) ||
    2072:	88 23       	and	r24, r24
    2074:	89 f0       	breq	.+34     	; 0x2098 <SI_Host_ConfigurePipes+0xa4>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_SI_Host_NextSIInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    2076:	c8 01       	movw	r24, r16
    2078:	b7 01       	movw	r22, r14
    207a:	43 ed       	ldi	r20, 0xD3	; 211
    207c:	5f e0       	ldi	r21, 0x0F	; 15
    207e:	dd dd       	rcall	.-1094   	; 0x1c3a <USB_GetNextDescriptorComp>
    2080:	88 23       	and	r24, r24
    2082:	09 f0       	breq	.+2      	; 0x2086 <SI_Host_ConfigurePipes+0x92>
    2084:	7e c0       	rjmp	.+252    	; 0x2182 <__stack+0x83>
			                              DCOMP_SI_Host_NextSIInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return SI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			StillImageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    2086:	4b 80       	ldd	r4, Y+3	; 0x03
    2088:	5c 80       	ldd	r5, Y+4	; 0x04

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
			EventsEndpoint  = NULL;
    208a:	aa 24       	eor	r10, r10
    208c:	bb 24       	eor	r11, r11
			}

			StillImageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    208e:	88 24       	eor	r8, r8
    2090:	99 24       	eor	r9, r9
			                              DCOMP_SI_Host_NextSIInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return SI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			StillImageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    2092:	66 24       	eor	r6, r6
    2094:	77 24       	eor	r7, r7
    2096:	e5 cf       	rjmp	.-54     	; 0x2062 <SI_Host_ConfigurePipes+0x6e>
			EventsEndpoint  = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    2098:	eb 81       	ldd	r30, Y+3	; 0x03
    209a:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    209c:	82 81       	ldd	r24, Z+2	; 0x02
    209e:	87 ff       	sbrs	r24, 7
    20a0:	06 c0       	rjmp	.+12     	; 0x20ae <SI_Host_ConfigurePipes+0xba>
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
    20a2:	83 81       	ldd	r24, Z+3	; 0x03
    20a4:	83 70       	andi	r24, 0x03	; 3
    20a6:	83 30       	cpi	r24, 0x03	; 3
    20a8:	21 f4       	brne	.+8      	; 0x20b2 <SI_Host_ConfigurePipes+0xbe>
			  EventsEndpoint = EndpointData;
    20aa:	5f 01       	movw	r10, r30
    20ac:	03 c0       	rjmp	.+6      	; 0x20b4 <SI_Host_ConfigurePipes+0xc0>
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
    20ae:	4f 01       	movw	r8, r30
    20b0:	01 c0       	rjmp	.+2      	; 0x20b4 <SI_Host_ConfigurePipes+0xc0>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  EventsEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
    20b2:	3f 01       	movw	r6, r30
	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
    20b4:	61 14       	cp	r6, r1
    20b6:	71 04       	cpc	r7, r1
    20b8:	a1 f2       	breq	.-88     	; 0x2062 <SI_Host_ConfigurePipes+0x6e>
    20ba:	81 14       	cp	r8, r1
    20bc:	91 04       	cpc	r9, r1
    20be:	89 f2       	breq	.-94     	; 0x2062 <SI_Host_ConfigurePipes+0x6e>
    20c0:	a1 14       	cp	r10, r1
    20c2:	b1 04       	cpc	r11, r1
    20c4:	71 f2       	breq	.-100    	; 0x2062 <SI_Host_ConfigurePipes+0x6e>
    20c6:	91 e0       	ldi	r25, 0x01	; 1
		uint8_t  Token;
		uint8_t  EndpointAddress;
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
    20c8:	f6 01       	movw	r30, r12
    20ca:	80 81       	ld	r24, Z
    20cc:	98 17       	cp	r25, r24
    20ce:	71 f4       	brne	.+28     	; 0x20ec <SI_Host_ConfigurePipes+0xf8>
		{
			Size            = DataINEndpoint->EndpointSize;
    20d0:	d3 01       	movw	r26, r6
    20d2:	14 96       	adiw	r26, 0x04	; 4
    20d4:	0d 91       	ld	r16, X+
    20d6:	1c 91       	ld	r17, X
    20d8:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    20da:	12 96       	adiw	r26, 0x02	; 2
    20dc:	2c 91       	ld	r18, X
    20de:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
    20e0:	81 81       	ldd	r24, Z+1	; 0x01
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    20e2:	11 87       	std	Z+9, r17	; 0x09
    20e4:	00 87       	std	Z+8, r16	; 0x08
			Size            = DataINEndpoint->EndpointSize;
			EndpointAddress = DataINEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
			InterruptPeriod = 0;
    20e6:	30 e0       	ldi	r19, 0x00	; 0

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
		{
			Size            = DataINEndpoint->EndpointSize;
			EndpointAddress = DataINEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
    20e8:	40 e1       	ldi	r20, 0x10	; 16
    20ea:	11 c0       	rjmp	.+34     	; 0x210e <__stack+0xf>
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
    20ec:	f6 01       	movw	r30, r12
    20ee:	82 81       	ldd	r24, Z+2	; 0x02
    20f0:	98 17       	cp	r25, r24
    20f2:	79 f4       	brne	.+30     	; 0x2112 <__stack+0x13>
		{
			Size            = DataOUTEndpoint->EndpointSize;
    20f4:	d4 01       	movw	r26, r8
    20f6:	14 96       	adiw	r26, 0x04	; 4
    20f8:	0d 91       	ld	r16, X+
    20fa:	1c 91       	ld	r17, X
    20fc:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    20fe:	12 96       	adiw	r26, 0x02	; 2
    2100:	2c 91       	ld	r18, X
    2102:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
    2104:	83 81       	ldd	r24, Z+3	; 0x03
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    2106:	13 87       	std	Z+11, r17	; 0x0b
    2108:	02 87       	std	Z+10, r16	; 0x0a
			Size            = DataOUTEndpoint->EndpointSize;
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = 0;
    210a:	30 e0       	ldi	r19, 0x00	; 0
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
		{
			Size            = DataOUTEndpoint->EndpointSize;
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_OUT;
    210c:	40 e2       	ldi	r20, 0x20	; 32
			Type            = EP_TYPE_BULK;
    210e:	62 e0       	ldi	r22, 0x02	; 2
    2110:	14 c0       	rjmp	.+40     	; 0x213a <__stack+0x3b>
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
    2112:	f6 01       	movw	r30, r12
    2114:	84 81       	ldd	r24, Z+4	; 0x04
    2116:	98 17       	cp	r25, r24
    2118:	11 f5       	brne	.+68     	; 0x215e <__stack+0x5f>
		{
			Size            = EventsEndpoint->EndpointSize;
    211a:	d5 01       	movw	r26, r10
    211c:	14 96       	adiw	r26, 0x04	; 4
    211e:	0d 91       	ld	r16, X+
    2120:	1c 91       	ld	r17, X
    2122:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = EventsEndpoint->EndpointAddress;
    2124:	12 96       	adiw	r26, 0x02	; 2
    2126:	2c 91       	ld	r18, X
    2128:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = SIInterfaceInfo->Config.EventsPipeDoubleBank;
    212a:	85 81       	ldd	r24, Z+5	; 0x05
			InterruptPeriod = EventsEndpoint->PollingIntervalMS;
    212c:	16 96       	adiw	r26, 0x06	; 6
    212e:	3c 91       	ld	r19, X
    2130:	16 97       	sbiw	r26, 0x06	; 6

			SIInterfaceInfo->State.EventsPipeSize = EventsEndpoint->EndpointSize;
    2132:	15 87       	std	Z+13, r17	; 0x0d
    2134:	04 87       	std	Z+12, r16	; 0x0c
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
		{
			Size            = EventsEndpoint->EndpointSize;
			EndpointAddress = EventsEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
    2136:	40 e1       	ldi	r20, 0x10	; 16
			Type            = EP_TYPE_INTERRUPT;
    2138:	63 e0       	ldi	r22, 0x03	; 3
		else
		{
			continue;
		}
		
		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    213a:	88 23       	and	r24, r24
    213c:	11 f0       	breq	.+4      	; 0x2142 <__stack+0x43>
    213e:	54 e0       	ldi	r21, 0x04	; 4
    2140:	01 c0       	rjmp	.+2      	; 0x2144 <__stack+0x45>
    2142:	50 e0       	ldi	r21, 0x00	; 0
    2144:	89 2f       	mov	r24, r25
    2146:	e5 2e       	mov	r14, r21
    2148:	3d 83       	std	Y+5, r19	; 0x05
    214a:	9e 83       	std	Y+6, r25	; 0x06
    214c:	86 da       	rcall	.-2804   	; 0x165a <Pipe_ConfigurePipe>
    214e:	3d 81       	ldd	r19, Y+5	; 0x05
    2150:	9e 81       	ldd	r25, Y+6	; 0x06
    2152:	88 23       	and	r24, r24
    2154:	c1 f0       	breq	.+48     	; 0x2186 <__stack+0x87>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return SI_ENUMERROR_PipeConfigurationFailed;
		}
		
		if (InterruptPeriod)
    2156:	33 23       	and	r19, r19
    2158:	11 f0       	breq	.+4      	; 0x215e <__stack+0x5f>
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    215a:	30 93 ad 00 	sts	0x00AD, r19
		{
			DataOUTEndpoint = EndpointData;
		}
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    215e:	9f 5f       	subi	r25, 0xFF	; 255
    2160:	97 30       	cpi	r25, 0x07	; 7
    2162:	09 f0       	breq	.+2      	; 0x2166 <__stack+0x67>
    2164:	b1 cf       	rjmp	.-158    	; 0x20c8 <SI_Host_ConfigurePipes+0xd4>
		
		if (InterruptPeriod)
		  Pipe_SetInterruptPeriod(InterruptPeriod);
	}

	SIInterfaceInfo->State.InterfaceNumber = StillImageInterface->InterfaceNumber;
    2166:	f2 01       	movw	r30, r4
    2168:	82 81       	ldd	r24, Z+2	; 0x02
    216a:	d6 01       	movw	r26, r12
    216c:	17 96       	adiw	r26, 0x07	; 7
    216e:	8c 93       	st	X, r24
    2170:	17 97       	sbiw	r26, 0x07	; 7
	SIInterfaceInfo->State.IsActive = true;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	16 96       	adiw	r26, 0x06	; 6
    2176:	8c 93       	st	X, r24
    2178:	16 97       	sbiw	r26, 0x06	; 6

	return SI_ENUMERROR_NoError;
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	05 c0       	rjmp	.+10     	; 0x2188 <__stack+0x89>
	USB_Descriptor_Interface_t* StillImageInterface = NULL;

	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	03 c0       	rjmp	.+6      	; 0x2188 <__stack+0x89>
		                              DCOMP_SI_Host_NextSIInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_SI_Host_NextSIInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return SI_ENUMERROR_NoCompatibleInterfaceFound;
    2182:	82 e0       	ldi	r24, 0x02	; 2
    2184:	01 c0       	rjmp	.+2      	; 0x2188 <__stack+0x89>
		}
		
		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return SI_ENUMERROR_PipeConfigurationFailed;
    2186:	83 e0       	ldi	r24, 0x03	; 3

	SIInterfaceInfo->State.InterfaceNumber = StillImageInterface->InterfaceNumber;
	SIInterfaceInfo->State.IsActive = true;

	return SI_ENUMERROR_NoError;
}
    2188:	26 96       	adiw	r28, 0x06	; 6
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	1f 91       	pop	r17
    219a:	0f 91       	pop	r16
    219c:	ff 90       	pop	r15
    219e:	ef 90       	pop	r14
    21a0:	df 90       	pop	r13
    21a2:	cf 90       	pop	r12
    21a4:	bf 90       	pop	r11
    21a6:	af 90       	pop	r10
    21a8:	9f 90       	pop	r9
    21aa:	8f 90       	pop	r8
    21ac:	7f 90       	pop	r7
    21ae:	6f 90       	pop	r6
    21b0:	5f 90       	pop	r5
    21b2:	4f 90       	pop	r4
    21b4:	08 95       	ret

000021b6 <SI_Host_SendBlockHeader>:
	return DESCRIPTOR_SEARCH_NotFound;
}

uint8_t SI_Host_SendBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                PIMA_Container_t* const PIMAHeader)
{
    21b6:	1f 93       	push	r17
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	fc 01       	movw	r30, r24
    21be:	eb 01       	movw	r28, r22
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    21c0:	80 91 63 03 	lds	r24, 0x0363
    21c4:	8b 30       	cpi	r24, 0x0B	; 11
    21c6:	09 f0       	breq	.+2      	; 0x21ca <SI_Host_SendBlockHeader+0x14>
    21c8:	3d c0       	rjmp	.+122    	; 0x2244 <SI_Host_SendBlockHeader+0x8e>
    21ca:	86 81       	ldd	r24, Z+6	; 0x06
    21cc:	88 23       	and	r24, r24
    21ce:	d1 f1       	breq	.+116    	; 0x2244 <SI_Host_SendBlockHeader+0x8e>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	if (SIInterfaceInfo->State.IsSessionOpen)
    21d0:	86 85       	ldd	r24, Z+14	; 0x0e
    21d2:	88 23       	and	r24, r24
    21d4:	81 f0       	breq	.+32     	; 0x21f6 <SI_Host_SendBlockHeader+0x40>
	  PIMAHeader->TransactionID = cpu_to_le32(SIInterfaceInfo->State.TransactionID++);
    21d6:	27 85       	ldd	r18, Z+15	; 0x0f
    21d8:	30 89       	ldd	r19, Z+16	; 0x10
    21da:	41 89       	ldd	r20, Z+17	; 0x11
    21dc:	52 89       	ldd	r21, Z+18	; 0x12
    21de:	28 87       	std	Y+8, r18	; 0x08
    21e0:	39 87       	std	Y+9, r19	; 0x09
    21e2:	4a 87       	std	Y+10, r20	; 0x0a
    21e4:	5b 87       	std	Y+11, r21	; 0x0b
    21e6:	2f 5f       	subi	r18, 0xFF	; 255
    21e8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ea:	4f 4f       	sbci	r20, 0xFF	; 255
    21ec:	5f 4f       	sbci	r21, 0xFF	; 255
    21ee:	27 87       	std	Z+15, r18	; 0x0f
    21f0:	30 8b       	std	Z+16, r19	; 0x10
    21f2:	41 8b       	std	Z+17, r20	; 0x11
    21f4:	52 8b       	std	Z+18, r21	; 0x12

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataOUTPipeNumber);
    21f6:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    21f8:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    21fc:	80 91 a9 00 	lds	r24, 0x00A9
    2200:	8f 7b       	andi	r24, 0xBF	; 191
    2202:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(PIMAHeader, PIMA_COMMAND_SIZE(0), NULL)) != PIPE_RWSTREAM_NoError)
    2206:	ce 01       	movw	r24, r28
    2208:	6c e0       	ldi	r22, 0x0C	; 12
    220a:	70 e0       	ldi	r23, 0x00	; 0
    220c:	40 e0       	ldi	r20, 0x00	; 0
    220e:	50 e0       	ldi	r21, 0x00	; 0
    2210:	f7 db       	rcall	.-2066   	; 0x1a00 <Pipe_Write_Stream_LE>
    2212:	18 2f       	mov	r17, r24
    2214:	88 23       	and	r24, r24
    2216:	c9 f4       	brne	.+50     	; 0x224a <SI_Host_SendBlockHeader+0x94>
	  return ErrorCode;

	uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));
    2218:	68 81       	ld	r22, Y
    221a:	6c 50       	subi	r22, 0x0C	; 12

	if (ParamBytes)
    221c:	41 f0       	breq	.+16     	; 0x222e <SI_Host_SendBlockHeader+0x78>
	{
		if ((ErrorCode = Pipe_Write_Stream_LE(&PIMAHeader->Params, ParamBytes, NULL)) != PIPE_RWSTREAM_NoError)
    221e:	ce 01       	movw	r24, r28
    2220:	0c 96       	adiw	r24, 0x0c	; 12
    2222:	70 e0       	ldi	r23, 0x00	; 0
    2224:	40 e0       	ldi	r20, 0x00	; 0
    2226:	50 e0       	ldi	r21, 0x00	; 0
    2228:	eb db       	rcall	.-2090   	; 0x1a00 <Pipe_Write_Stream_LE>
    222a:	88 23       	and	r24, r24
    222c:	69 f4       	brne	.+26     	; 0x2248 <SI_Host_SendBlockHeader+0x92>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    222e:	80 91 a6 00 	lds	r24, 0x00A6
    2232:	8b 77       	andi	r24, 0x7B	; 123
    2234:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    2238:	80 91 a9 00 	lds	r24, 0x00A9
    223c:	80 64       	ori	r24, 0x40	; 64
    223e:	80 93 a9 00 	sts	0x00A9, r24
	}

	Pipe_ClearOUT();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    2242:	03 c0       	rjmp	.+6      	; 0x224a <SI_Host_SendBlockHeader+0x94>
                                PIMA_Container_t* const PIMAHeader)
{
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    2244:	12 e0       	ldi	r17, 0x02	; 2
    2246:	01 c0       	rjmp	.+2      	; 0x224a <SI_Host_SendBlockHeader+0x94>

	uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));

	if (ParamBytes)
	{
		if ((ErrorCode = Pipe_Write_Stream_LE(&PIMAHeader->Params, ParamBytes, NULL)) != PIPE_RWSTREAM_NoError)
    2248:	18 2f       	mov	r17, r24

	Pipe_ClearOUT();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    224a:	81 2f       	mov	r24, r17
    224c:	df 91       	pop	r29
    224e:	cf 91       	pop	r28
    2250:	1f 91       	pop	r17
    2252:	08 95       	ret

00002254 <SI_Host_ReceiveBlockHeader>:

uint8_t SI_Host_ReceiveBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                   PIMA_Container_t* const PIMAHeader)
{
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	fc 01       	movw	r30, r24
    225a:	eb 01       	movw	r28, r22
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    225c:	20 91 a2 00 	lds	r18, 0x00A2
    2260:	30 91 a3 00 	lds	r19, 0x00A3
	uint16_t TimeoutMSRem        = SI_COMMAND_DATA_TIMEOUT_MS;
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    2264:	80 91 63 03 	lds	r24, 0x0363
    2268:	8b 30       	cpi	r24, 0x0B	; 11
    226a:	09 f0       	breq	.+2      	; 0x226e <SI_Host_ReceiveBlockHeader+0x1a>
    226c:	76 c0       	rjmp	.+236    	; 0x235a <SI_Host_ReceiveBlockHeader+0x106>
    226e:	86 81       	ldd	r24, Z+6	; 0x06
    2270:	88 23       	and	r24, r24
    2272:	09 f4       	brne	.+2      	; 0x2276 <SI_Host_ReceiveBlockHeader+0x22>
    2274:	72 c0       	rjmp	.+228    	; 0x235a <SI_Host_ReceiveBlockHeader+0x106>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
    2276:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    2278:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    227c:	80 91 a9 00 	lds	r24, 0x00A9
    2280:	8f 7b       	andi	r24, 0xBF	; 191
    2282:	80 93 a9 00 	sts	0x00A9, r24
}

uint8_t SI_Host_ReceiveBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                   PIMA_Container_t* const PIMAHeader)
{
	uint16_t TimeoutMSRem        = SI_COMMAND_DATA_TIMEOUT_MS;
    2286:	80 e1       	ldi	r24, 0x10	; 16
    2288:	97 e2       	ldi	r25, 0x27	; 39
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
	Pipe_Unfreeze();

	while (!(Pipe_IsINReceived()))
    228a:	41 c0       	rjmp	.+130    	; 0x230e <SI_Host_ReceiveBlockHeader+0xba>
    228c:	40 91 a2 00 	lds	r20, 0x00A2
    2290:	50 91 a3 00 	lds	r21, 0x00A3
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    2294:	42 17       	cp	r20, r18
    2296:	53 07       	cpc	r21, r19
    2298:	29 f0       	breq	.+10     	; 0x22a4 <SI_Host_ReceiveBlockHeader+0x50>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	09 f4       	brne	.+2      	; 0x22a0 <SI_Host_ReceiveBlockHeader+0x4c>
    229e:	5b c0       	rjmp	.+182    	; 0x2356 <SI_Host_ReceiveBlockHeader+0x102>
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	9a 01       	movw	r18, r20

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    22a4:	40 91 a9 00 	lds	r20, 0x00A9
    22a8:	40 64       	ori	r20, 0x40	; 64
    22aa:	40 93 a9 00 	sts	0x00A9, r20
			  return PIPE_RWSTREAM_Timeout;
		}

		Pipe_Freeze();
		Pipe_SelectPipe(SIInterfaceInfo->Config.DataOUTPipeNumber);
    22ae:	42 81       	ldd	r20, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    22b0:	40 93 a7 00 	sts	0x00A7, r20

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    22b4:	40 91 a9 00 	lds	r20, 0x00A9
    22b8:	4f 7b       	andi	r20, 0xBF	; 191
    22ba:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    22be:	40 91 a6 00 	lds	r20, 0x00A6
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    22c2:	41 fd       	sbrc	r20, 1
    22c4:	11 c0       	rjmp	.+34     	; 0x22e8 <SI_Host_ReceiveBlockHeader+0x94>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    22c6:	40 91 a9 00 	lds	r20, 0x00A9
    22ca:	40 64       	ori	r20, 0x40	; 64
    22cc:	40 93 a9 00 	sts	0x00A9, r20
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
			return PIPE_RWSTREAM_PipeStalled;
		}

		Pipe_Freeze();
		Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
    22d0:	40 81       	ld	r20, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    22d2:	40 93 a7 00 	sts	0x00A7, r20

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    22d6:	40 91 a9 00 	lds	r20, 0x00A9
    22da:	4f 7b       	andi	r20, 0xBF	; 191
    22dc:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    22e0:	40 91 a6 00 	lds	r20, 0x00A6
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    22e4:	41 ff       	sbrs	r20, 1
    22e6:	0f c0       	rjmp	.+30     	; 0x2306 <SI_Host_ReceiveBlockHeader+0xb2>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    22e8:	80 91 aa 00 	lds	r24, 0x00AA
    22ec:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    22ee:	90 91 aa 00 	lds	r25, 0x00AA
    22f2:	90 73       	andi	r25, 0x30	; 48
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    22f4:	90 31       	cpi	r25, 0x10	; 16
    22f6:	11 f4       	brne	.+4      	; 0x22fc <SI_Host_ReceiveBlockHeader+0xa8>
    22f8:	90 e8       	ldi	r25, 0x80	; 128
    22fa:	01 c0       	rjmp	.+2      	; 0x22fe <SI_Host_ReceiveBlockHeader+0xaa>
    22fc:	90 e0       	ldi	r25, 0x00	; 0
		{
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
    22fe:	89 2b       	or	r24, r25
    2300:	2d de       	rcall	.-934    	; 0x1f5c <USB_Host_ClearEndpointStall>
			return PIPE_RWSTREAM_PipeStalled;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	2b c0       	rjmp	.+86     	; 0x235c <SI_Host_ReceiveBlockHeader+0x108>
		}

		if (USB_HostState == HOST_STATE_Unattached)
    2306:	40 91 63 03 	lds	r20, 0x0363
    230a:	41 30       	cpi	r20, 0x01	; 1
    230c:	31 f1       	breq	.+76     	; 0x235a <SI_Host_ReceiveBlockHeader+0x106>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    230e:	40 91 a6 00 	lds	r20, 0x00A6
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
	Pipe_Unfreeze();

	while (!(Pipe_IsINReceived()))
    2312:	40 ff       	sbrs	r20, 0
    2314:	bb cf       	rjmp	.-138    	; 0x228c <SI_Host_ReceiveBlockHeader+0x38>

		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
	}

	Pipe_Read_Stream_LE(PIMAHeader, PIMA_COMMAND_SIZE(0), NULL);
    2316:	ce 01       	movw	r24, r28
    2318:	6c e0       	ldi	r22, 0x0C	; 12
    231a:	70 e0       	ldi	r23, 0x00	; 0
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	50 e0       	ldi	r21, 0x00	; 0
    2320:	d2 db       	rcall	.-2140   	; 0x1ac6 <Pipe_Read_Stream_LE>

	if (PIMAHeader->Type == CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock))
    2322:	8c 81       	ldd	r24, Y+4	; 0x04
    2324:	9d 81       	ldd	r25, Y+5	; 0x05
    2326:	83 30       	cpi	r24, 0x03	; 3
    2328:	91 05       	cpc	r25, r1
    232a:	71 f4       	brne	.+28     	; 0x2348 <SI_Host_ReceiveBlockHeader+0xf4>
	{
		uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));
    232c:	68 81       	ld	r22, Y
    232e:	6c 50       	subi	r22, 0x0C	; 12

		if (ParamBytes)
    2330:	31 f0       	breq	.+12     	; 0x233e <SI_Host_ReceiveBlockHeader+0xea>
		  Pipe_Read_Stream_LE(&PIMAHeader->Params, ParamBytes, NULL);
    2332:	ce 01       	movw	r24, r28
    2334:	0c 96       	adiw	r24, 0x0c	; 12
    2336:	70 e0       	ldi	r23, 0x00	; 0
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	50 e0       	ldi	r21, 0x00	; 0
    233c:	c4 db       	rcall	.-2168   	; 0x1ac6 <Pipe_Read_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    233e:	80 91 a6 00 	lds	r24, 0x00A6
    2342:	8e 77       	andi	r24, 0x7E	; 126
    2344:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    2348:	80 91 a9 00 	lds	r24, 0x00A9
    234c:	80 64       	ori	r24, 0x40	; 64
    234e:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_ClearIN();
	}

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	03 c0       	rjmp	.+6      	; 0x235c <SI_Host_ReceiveBlockHeader+0x108>
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_RWSTREAM_Timeout;
    2356:	83 e0       	ldi	r24, 0x03	; 3
    2358:	01 c0       	rjmp	.+2      	; 0x235c <SI_Host_ReceiveBlockHeader+0x108>
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
			return PIPE_RWSTREAM_PipeStalled;
		}

		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
    235a:	82 e0       	ldi	r24, 0x02	; 2
	}

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	08 95       	ret

00002362 <SI_Host_ReadData>:
}

uint8_t SI_Host_ReadData(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                         void* Buffer,
                         const uint16_t Bytes)
{
    2362:	fc 01       	movw	r30, r24
    2364:	cb 01       	movw	r24, r22
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    2366:	20 91 63 03 	lds	r18, 0x0363
    236a:	2b 30       	cpi	r18, 0x0B	; 11
    236c:	a9 f4       	brne	.+42     	; 0x2398 <SI_Host_ReadData+0x36>
    236e:	26 81       	ldd	r18, Z+6	; 0x06
    2370:	22 23       	and	r18, r18
    2372:	a1 f0       	breq	.+40     	; 0x239c <SI_Host_ReadData+0x3a>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
    2374:	20 81       	ld	r18, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    2376:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    237a:	20 91 a9 00 	lds	r18, 0x00A9
    237e:	2f 7b       	andi	r18, 0xBF	; 191
    2380:	20 93 a9 00 	sts	0x00A9, r18
	Pipe_Unfreeze();

	ErrorCode = Pipe_Read_Stream_LE(Buffer, Bytes, NULL);
    2384:	ba 01       	movw	r22, r20
    2386:	40 e0       	ldi	r20, 0x00	; 0
    2388:	50 e0       	ldi	r21, 0x00	; 0
    238a:	9d db       	rcall	.-2246   	; 0x1ac6 <Pipe_Read_Stream_LE>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    238c:	90 91 a9 00 	lds	r25, 0x00A9
    2390:	90 64       	ori	r25, 0x40	; 64
    2392:	90 93 a9 00 	sts	0x00A9, r25

	Pipe_Freeze();

	return ErrorCode;
    2396:	08 95       	ret
                         const uint16_t Bytes)
{
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    2398:	82 e0       	ldi	r24, 0x02	; 2
    239a:	08 95       	ret
    239c:	82 e0       	ldi	r24, 0x02	; 2
	ErrorCode = Pipe_Read_Stream_LE(Buffer, Bytes, NULL);

	Pipe_Freeze();

	return ErrorCode;
}
    239e:	08 95       	ret

000023a0 <SI_Host_IsEventReceived>:

bool SI_Host_IsEventReceived(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    23a0:	fc 01       	movw	r30, r24
	bool IsEventReceived = false;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    23a2:	80 91 63 03 	lds	r24, 0x0363
    23a6:	8b 30       	cpi	r24, 0x0B	; 11
    23a8:	d1 f4       	brne	.+52     	; 0x23de <SI_Host_IsEventReceived+0x3e>
    23aa:	86 81       	ldd	r24, Z+6	; 0x06
    23ac:	88 23       	and	r24, r24
    23ae:	c9 f0       	breq	.+50     	; 0x23e2 <SI_Host_IsEventReceived+0x42>
	  return false;

	Pipe_SelectPipe(SIInterfaceInfo->Config.EventsPipeNumber);
    23b0:	84 81       	ldd	r24, Z+4	; 0x04
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    23b2:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    23b6:	80 91 a9 00 	lds	r24, 0x00A9
    23ba:	8f 7b       	andi	r24, 0xBF	; 191
    23bc:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    23c0:	20 91 f6 00 	lds	r18, 0x00F6
    23c4:	30 91 f7 00 	lds	r19, 0x00F7
	Pipe_Freeze();

	return ErrorCode;
}

bool SI_Host_IsEventReceived(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	21 15       	cp	r18, r1
    23cc:	31 05       	cpc	r19, r1
    23ce:	09 f4       	brne	.+2      	; 0x23d2 <SI_Host_IsEventReceived+0x32>
    23d0:	80 e0       	ldi	r24, 0x00	; 0

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    23d2:	90 91 a9 00 	lds	r25, 0x00A9
    23d6:	90 64       	ori	r25, 0x40	; 64
    23d8:	90 93 a9 00 	sts	0x00A9, r25
	if (Pipe_BytesInPipe())
	  IsEventReceived = true;

	Pipe_Freeze();

	return IsEventReceived;
    23dc:	08 95       	ret
bool SI_Host_IsEventReceived(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
	bool IsEventReceived = false;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return false;
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	08 95       	ret
    23e2:	80 e0       	ldi	r24, 0x00	; 0
	  IsEventReceived = true;

	Pipe_Freeze();

	return IsEventReceived;
}
    23e4:	08 95       	ret

000023e6 <SI_Host_ReceiveEventHeader>:

uint8_t SI_Host_ReceiveEventHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                   PIMA_Container_t* const PIMAHeader)
{
    23e6:	fc 01       	movw	r30, r24
    23e8:	cb 01       	movw	r24, r22
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    23ea:	20 91 63 03 	lds	r18, 0x0363
    23ee:	2b 30       	cpi	r18, 0x0B	; 11
    23f0:	d9 f4       	brne	.+54     	; 0x2428 <SI_Host_ReceiveEventHeader+0x42>
    23f2:	26 81       	ldd	r18, Z+6	; 0x06
    23f4:	22 23       	and	r18, r18
    23f6:	d1 f0       	breq	.+52     	; 0x242c <SI_Host_ReceiveEventHeader+0x46>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.EventsPipeNumber);
    23f8:	24 81       	ldd	r18, Z+4	; 0x04
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    23fa:	20 93 a7 00 	sts	0x00A7, r18

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    23fe:	20 91 a9 00 	lds	r18, 0x00A9
    2402:	2f 7b       	andi	r18, 0xBF	; 191
    2404:	20 93 a9 00 	sts	0x00A9, r18
	Pipe_Unfreeze();

	ErrorCode = Pipe_Read_Stream_LE(PIMAHeader, sizeof(PIMA_Container_t), NULL);
    2408:	68 e1       	ldi	r22, 0x18	; 24
    240a:	70 e0       	ldi	r23, 0x00	; 0
    240c:	40 e0       	ldi	r20, 0x00	; 0
    240e:	50 e0       	ldi	r21, 0x00	; 0
    2410:	5a db       	rcall	.-2380   	; 0x1ac6 <Pipe_Read_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    2412:	90 91 a6 00 	lds	r25, 0x00A6
    2416:	9e 77       	andi	r25, 0x7E	; 126
    2418:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    241c:	90 91 a9 00 	lds	r25, 0x00A9
    2420:	90 64       	ori	r25, 0x40	; 64
    2422:	90 93 a9 00 	sts	0x00A9, r25

	Pipe_ClearIN();
	Pipe_Freeze();

	return ErrorCode;
    2426:	08 95       	ret
                                   PIMA_Container_t* const PIMAHeader)
{
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    2428:	82 e0       	ldi	r24, 0x02	; 2
    242a:	08 95       	ret
    242c:	82 e0       	ldi	r24, 0x02	; 2

	Pipe_ClearIN();
	Pipe_Freeze();

	return ErrorCode;
}
    242e:	08 95       	ret

00002430 <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    2430:	90 91 c8 00 	lds	r25, 0x00C8
    2434:	95 ff       	sbrs	r25, 5
    2436:	fc cf       	rjmp	.-8      	; 0x2430 <Serial_putchar>
				UDR1 = DataByte;
    2438:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	08 95       	ret

00002442 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    2442:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    2446:	87 ff       	sbrs	r24, 7
    2448:	08 c0       	rjmp	.+16     	; 0x245a <Serial_getchar+0x18>
    244a:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    244e:	87 ff       	sbrs	r24, 7
    2450:	07 c0       	rjmp	.+14     	; 0x2460 <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    2452:	20 91 ce 00 	lds	r18, 0x00CE
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	05 c0       	rjmp	.+10     	; 0x2464 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    245a:	2e ef       	ldi	r18, 0xFE	; 254
    245c:	3f ef       	ldi	r19, 0xFF	; 255
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    2460:	2f ef       	ldi	r18, 0xFF	; 255
    2462:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    2464:	c9 01       	movw	r24, r18
    2466:	08 95       	ret

00002468 <EVENT_USB_Host_DeviceAttached>:
 *  Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
    2468:	8f e4       	ldi	r24, 0x4F	; 79
    246a:	92 e0       	ldi	r25, 0x02	; 2
    246c:	0c 94 89 22 	jmp	0x4512	; 0x4512 <puts_P>

00002470 <EVENT_USB_Host_DeviceUnattached>:
 *  Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
    2470:	88 e3       	ldi	r24, 0x38	; 56
    2472:	92 e0       	ldi	r25, 0x02	; 2
    2474:	0c 94 89 22 	jmp	0x4512	; 0x4512 <puts_P>

00002478 <EVENT_USB_Host_DeviceEnumerationComplete>:
/*********************************************************************************************************************
 *  Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
    2478:	0f 93       	push	r16
    247a:	1f 93       	push	r17
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	c2 50       	subi	r28, 0x02	; 2
    2486:	d2 40       	sbci	r29, 0x02	; 2
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	cd bf       	out	0x3d, r28	; 61
	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
    2492:	8e 01       	movw	r16, r28
    2494:	0d 5f       	subi	r16, 0xFD	; 253
    2496:	1f 4f       	sbci	r17, 0xFF	; 255
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	be 01       	movw	r22, r28
    249c:	6f 5f       	subi	r22, 0xFF	; 255
    249e:	7f 4f       	sbci	r23, 0xFF	; 255
    24a0:	a8 01       	movw	r20, r16
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	32 e0       	ldi	r19, 0x02	; 2
    24a6:	72 db       	rcall	.-2332   	; 0x1b8c <USB_Host_GetDeviceConfigDescriptor>
    24a8:	88 23       	and	r24, r24
    24aa:	19 f0       	breq	.+6      	; 0x24b2 <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
    24ac:	8b e0       	ldi	r24, 0x0B	; 11
    24ae:	92 e0       	ldi	r25, 0x02	; 2
    24b0:	14 c0       	rjmp	.+40     	; 0x24da <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
		return;
	}

	if (SI_Host_ConfigurePipes(&DigitalCamera_SI_Interface,
    24b2:	69 81       	ldd	r22, Y+1	; 0x01
    24b4:	7a 81       	ldd	r23, Y+2	; 0x02
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	91 e0       	ldi	r25, 0x01	; 1
    24ba:	a8 01       	movw	r20, r16
    24bc:	9b dd       	rcall	.-1226   	; 0x1ff4 <SI_Host_ConfigurePipes>
    24be:	88 23       	and	r24, r24
    24c0:	19 f0       	breq	.+6      	; 0x24c8 <EVENT_USB_Host_DeviceEnumerationComplete+0x50>
	                           ConfigDescriptorSize, ConfigDescriptorData) != SI_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Still Image Class Device.\r\n"));
    24c2:	83 ed       	ldi	r24, 0xD3	; 211
    24c4:	91 e0       	ldi	r25, 0x01	; 1
    24c6:	09 c0       	rjmp	.+18     	; 0x24da <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	23 dd       	rcall	.-1466   	; 0x1f12 <USB_Host_SetDeviceConfiguration>
    24cc:	88 23       	and	r24, r24
    24ce:	19 f0       	breq	.+6      	; 0x24d6 <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
    24d0:	8d ea       	ldi	r24, 0xAD	; 173
    24d2:	91 e0       	ldi	r25, 0x01	; 1
    24d4:	02 c0       	rjmp	.+4      	; 0x24da <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
		return;
	}

	puts_P(PSTR("Camera Device Enumerated.\r\n"));
    24d6:	81 e9       	ldi	r24, 0x91	; 145
    24d8:	91 e0       	ldi	r25, 0x01	; 1
    24da:	0e 94 89 22 	call	0x4512	; 0x4512 <puts_P>
}
    24de:	ce 5f       	subi	r28, 0xFE	; 254
    24e0:	dd 4f       	sbci	r29, 0xFD	; 253
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	de bf       	out	0x3e, r29	; 62
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	cd bf       	out	0x3d, r28	; 61
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	1f 91       	pop	r17
    24f2:	0f 91       	pop	r16
    24f4:	08 95       	ret

000024f6 <EVENT_USB_Host_HostError>:

/*********************************************************************************************************************
 *  Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	0f 92       	push	r0
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
    2500:	89 83       	std	Y+1, r24	; 0x01
    2502:	6d d9       	rcall	.-3366   	; 0x17de <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
    2504:	00 d0       	rcall	.+0      	; 0x2506 <EVENT_USB_Host_HostError+0x10>
    2506:	00 d0       	rcall	.+0      	; 0x2508 <EVENT_USB_Host_HostError+0x12>
    2508:	ed b7       	in	r30, 0x3d	; 61
    250a:	fe b7       	in	r31, 0x3e	; 62
    250c:	31 96       	adiw	r30, 0x01	; 1
    250e:	20 e5       	ldi	r18, 0x50	; 80
    2510:	31 e0       	ldi	r19, 0x01	; 1
    2512:	ad b7       	in	r26, 0x3d	; 61
    2514:	be b7       	in	r27, 0x3e	; 62
    2516:	12 96       	adiw	r26, 0x02	; 2
    2518:	3c 93       	st	X, r19
    251a:	2e 93       	st	-X, r18
    251c:	11 97       	sbiw	r26, 0x01	; 1
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	82 83       	std	Z+2, r24	; 0x02
    2522:	13 82       	std	Z+3, r1	; 0x03
    2524:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	ff cf       	rjmp	.-2      	; 0x2530 <EVENT_USB_Host_HostError+0x3a>

00002532 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
    2532:	90 91 63 03 	lds	r25, 0x0363
    2536:	2d b7       	in	r18, 0x3d	; 61
    2538:	3e b7       	in	r19, 0x3e	; 62
    253a:	28 50       	subi	r18, 0x08	; 8
    253c:	30 40       	sbci	r19, 0x00	; 0
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	3e bf       	out	0x3e, r19	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	2d bf       	out	0x3d, r18	; 61
    2548:	ed b7       	in	r30, 0x3d	; 61
    254a:	fe b7       	in	r31, 0x3e	; 62
    254c:	31 96       	adiw	r30, 0x01	; 1
    254e:	2a ef       	ldi	r18, 0xFA	; 250
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	ad b7       	in	r26, 0x3d	; 61
    2554:	be b7       	in	r27, 0x3e	; 62
    2556:	12 96       	adiw	r26, 0x02	; 2
    2558:	3c 93       	st	X, r19
    255a:	2e 93       	st	-X, r18
    255c:	11 97       	sbiw	r26, 0x01	; 1
    255e:	82 83       	std	Z+2, r24	; 0x02
    2560:	13 82       	std	Z+3, r1	; 0x03
    2562:	64 83       	std	Z+4, r22	; 0x04
    2564:	15 82       	std	Z+5, r1	; 0x05
    2566:	96 83       	std	Z+6, r25	; 0x06
    2568:	17 82       	std	Z+7, r1	; 0x07
    256a:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    256e:	2d b7       	in	r18, 0x3d	; 61
    2570:	3e b7       	in	r19, 0x3e	; 62
    2572:	28 5f       	subi	r18, 0xF8	; 248
    2574:	3f 4f       	sbci	r19, 0xFF	; 255
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	3e bf       	out	0x3e, r19	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

}
    2580:	08 95       	ret

00002582 <CameraControl_PTPErrorDescription>:

/*------------------------------------------------------------------------------
 * CameraControl_PTPErrorDescription
 */
void CameraControl_PTPErrorDescription ( uint16_t errNum )
{
    2582:	cf 93       	push	r28
    2584:	df 93       	push	r29
    2586:	ec 01       	movw	r28, r24
	if (errNum==0x2001)
    2588:	80 e2       	ldi	r24, 0x20	; 32
    258a:	c1 30       	cpi	r28, 0x01	; 1
    258c:	d8 07       	cpc	r29, r24
    258e:	89 f4       	brne	.+34     	; 0x25b2 <CameraControl_PTPErrorDescription+0x30>
		printf_P(PSTR(ESC_FG_CYAN "		[0x%04x] " ESC_FG_WHITE), errNum); 
    2590:	00 d0       	rcall	.+0      	; 0x2592 <CameraControl_PTPErrorDescription+0x10>
    2592:	00 d0       	rcall	.+0      	; 0x2594 <CameraControl_PTPErrorDescription+0x12>
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	99 e0       	ldi	r25, 0x09	; 9
    2598:	ed b7       	in	r30, 0x3d	; 61
    259a:	fe b7       	in	r31, 0x3e	; 62
    259c:	92 83       	std	Z+2, r25	; 0x02
    259e:	81 83       	std	Z+1, r24	; 0x01
    25a0:	d4 83       	std	Z+4, r29	; 0x04
    25a2:	c3 83       	std	Z+3, r28	; 0x03
    25a4:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	0f 90       	pop	r0
    25b0:	1f c0       	rjmp	.+62     	; 0x25f0 <CameraControl_PTPErrorDescription+0x6e>
	else
		printf_P(PSTR(ESC_FG_RED "		[0x%04x] " ESC_FG_WHITE), errNum); 
    25b2:	00 d0       	rcall	.+0      	; 0x25b4 <CameraControl_PTPErrorDescription+0x32>
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <CameraControl_PTPErrorDescription+0x34>
    25b6:	8a ee       	ldi	r24, 0xEA	; 234
    25b8:	98 e0       	ldi	r25, 0x08	; 8
    25ba:	ed b7       	in	r30, 0x3d	; 61
    25bc:	fe b7       	in	r31, 0x3e	; 62
    25be:	92 83       	std	Z+2, r25	; 0x02
    25c0:	81 83       	std	Z+1, r24	; 0x01
    25c2:	d4 83       	std	Z+4, r29	; 0x04
    25c4:	c3 83       	std	Z+3, r28	; 0x03
    25c6:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>

	switch (errNum)
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	fe 01       	movw	r30, r28
    25d4:	e1 50       	subi	r30, 0x01	; 1
    25d6:	f0 42       	sbci	r31, 0x20	; 32
    25d8:	e0 32       	cpi	r30, 0x20	; 32
    25da:	f1 05       	cpc	r31, r1
    25dc:	08 f0       	brcs	.+2      	; 0x25e0 <CameraControl_PTPErrorDescription+0x5e>
    25de:	88 c0       	rjmp	.+272    	; 0x26f0 <CameraControl_PTPErrorDescription+0x16e>
    25e0:	e4 5b       	subi	r30, 0xB4	; 180
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	ee 0f       	add	r30, r30
    25e6:	ff 1f       	adc	r31, r31
    25e8:	05 90       	lpm	r0, Z+
    25ea:	f4 91       	lpm	r31, Z+
    25ec:	e0 2d       	mov	r30, r0
    25ee:	09 94       	ijmp
	{
		case 0x2001: printf_P(PSTR(ESC_FG_CYAN "OK\r\n" ESC_FG_WHITE)); break;
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <CameraControl_PTPErrorDescription+0x70>
    25f2:	8b ed       	ldi	r24, 0xDB	; 219
    25f4:	98 e0       	ldi	r25, 0x08	; 8
    25f6:	7f c0       	rjmp	.+254    	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x2002: printf_P(PSTR(ESC_FG_RED "General Error\r\n" ESC_FG_WHITE)); break; 
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <CameraControl_PTPErrorDescription+0x78>
    25fa:	81 ec       	ldi	r24, 0xC1	; 193
    25fc:	98 e0       	ldi	r25, 0x08	; 8
    25fe:	7b c0       	rjmp	.+246    	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x2003: printf_P(PSTR(ESC_FG_RED "Session Not Open\r\n" ESC_FG_WHITE)); break; 
    2600:	00 d0       	rcall	.+0      	; 0x2602 <CameraControl_PTPErrorDescription+0x80>
    2602:	84 ea       	ldi	r24, 0xA4	; 164
    2604:	98 e0       	ldi	r25, 0x08	; 8
    2606:	77 c0       	rjmp	.+238    	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x2004: printf_P(PSTR(ESC_FG_RED "Invalid TransactionID\r\n" ESC_FG_WHITE)); break; 
    2608:	00 d0       	rcall	.+0      	; 0x260a <CameraControl_PTPErrorDescription+0x88>
    260a:	82 e8       	ldi	r24, 0x82	; 130
    260c:	98 e0       	ldi	r25, 0x08	; 8
    260e:	73 c0       	rjmp	.+230    	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x2005: printf_P(PSTR(ESC_FG_RED "Operation Not Supported\r\n" ESC_FG_WHITE)); break; 
    2610:	00 d0       	rcall	.+0      	; 0x2612 <CameraControl_PTPErrorDescription+0x90>
    2612:	8e e5       	ldi	r24, 0x5E	; 94
    2614:	98 e0       	ldi	r25, 0x08	; 8
    2616:	6f c0       	rjmp	.+222    	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x2006: printf_P(PSTR(ESC_FG_RED "Parameter Not Supported\r\n" ESC_FG_WHITE)); break;
    2618:	00 d0       	rcall	.+0      	; 0x261a <CameraControl_PTPErrorDescription+0x98>
    261a:	8a e3       	ldi	r24, 0x3A	; 58
    261c:	98 e0       	ldi	r25, 0x08	; 8
    261e:	6b c0       	rjmp	.+214    	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x2007: printf_P(PSTR(ESC_FG_RED "Incomplete Transfer\r\n" ESC_FG_WHITE)); break; 
    2620:	00 d0       	rcall	.+0      	; 0x2622 <CameraControl_PTPErrorDescription+0xa0>
    2622:	8a e1       	ldi	r24, 0x1A	; 26
    2624:	98 e0       	ldi	r25, 0x08	; 8
    2626:	67 c0       	rjmp	.+206    	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x2008: printf_P(PSTR(ESC_FG_RED "Invalid StorageID\r\n" ESC_FG_WHITE)); break;
    2628:	00 d0       	rcall	.+0      	; 0x262a <CameraControl_PTPErrorDescription+0xa8>
    262a:	8c ef       	ldi	r24, 0xFC	; 252
    262c:	97 e0       	ldi	r25, 0x07	; 7
    262e:	63 c0       	rjmp	.+198    	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x2009: printf_P(PSTR(ESC_FG_RED "Invalid ObjectHandle\r\n" ESC_FG_WHITE)); break; 
    2630:	00 d0       	rcall	.+0      	; 0x2632 <CameraControl_PTPErrorDescription+0xb0>
    2632:	8b ed       	ldi	r24, 0xDB	; 219
    2634:	97 e0       	ldi	r25, 0x07	; 7
    2636:	5f c0       	rjmp	.+190    	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x200A: printf_P(PSTR(ESC_FG_RED "DeviceProp Not Supported\r\n" ESC_FG_WHITE)); break; 
    2638:	00 d0       	rcall	.+0      	; 0x263a <CameraControl_PTPErrorDescription+0xb8>
    263a:	86 eb       	ldi	r24, 0xB6	; 182
    263c:	97 e0       	ldi	r25, 0x07	; 7
    263e:	5b c0       	rjmp	.+182    	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x200B: printf_P(PSTR(ESC_FG_RED "Invalid ObjectFormatCode\r\n" ESC_FG_WHITE)); break;
    2640:	00 d0       	rcall	.+0      	; 0x2642 <CameraControl_PTPErrorDescription+0xc0>
    2642:	81 e9       	ldi	r24, 0x91	; 145
    2644:	97 e0       	ldi	r25, 0x07	; 7
    2646:	57 c0       	rjmp	.+174    	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x200C: printf_P(PSTR(ESC_FG_RED "Store Full\r\n" ESC_FG_WHITE)); break;
    2648:	00 d0       	rcall	.+0      	; 0x264a <CameraControl_PTPErrorDescription+0xc8>
    264a:	8a e7       	ldi	r24, 0x7A	; 122
    264c:	97 e0       	ldi	r25, 0x07	; 7
    264e:	53 c0       	rjmp	.+166    	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x200D: printf_P(PSTR(ESC_FG_RED "Object WriteProtected\r\n" ESC_FG_WHITE)); break; 
    2650:	00 d0       	rcall	.+0      	; 0x2652 <CameraControl_PTPErrorDescription+0xd0>
    2652:	88 e5       	ldi	r24, 0x58	; 88
    2654:	97 e0       	ldi	r25, 0x07	; 7
    2656:	4f c0       	rjmp	.+158    	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x200E: printf_P(PSTR(ESC_FG_RED "Store Read-Only\r\n" ESC_FG_WHITE)); break;
    2658:	00 d0       	rcall	.+0      	; 0x265a <CameraControl_PTPErrorDescription+0xd8>
    265a:	8c e3       	ldi	r24, 0x3C	; 60
    265c:	97 e0       	ldi	r25, 0x07	; 7
    265e:	4b c0       	rjmp	.+150    	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x200F: printf_P(PSTR(ESC_FG_RED "Access Denied\r\n" ESC_FG_WHITE)); break;
    2660:	00 d0       	rcall	.+0      	; 0x2662 <CameraControl_PTPErrorDescription+0xe0>
    2662:	82 e2       	ldi	r24, 0x22	; 34
    2664:	97 e0       	ldi	r25, 0x07	; 7
    2666:	47 c0       	rjmp	.+142    	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x2010: printf_P(PSTR(ESC_FG_RED "No Thumbnail Present\r\n" ESC_FG_WHITE)); break;
    2668:	00 d0       	rcall	.+0      	; 0x266a <CameraControl_PTPErrorDescription+0xe8>
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	97 e0       	ldi	r25, 0x07	; 7
    266e:	43 c0       	rjmp	.+134    	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x2011: printf_P(PSTR(ESC_FG_RED "SelfTest Failed\r\n" ESC_FG_WHITE)); break;
    2670:	00 d0       	rcall	.+0      	; 0x2672 <CameraControl_PTPErrorDescription+0xf0>
    2672:	85 ee       	ldi	r24, 0xE5	; 229
    2674:	96 e0       	ldi	r25, 0x06	; 6
    2676:	3f c0       	rjmp	.+126    	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x2012: printf_P(PSTR(ESC_FG_RED "Partial Deletion\r\n" ESC_FG_WHITE)); break;
    2678:	00 d0       	rcall	.+0      	; 0x267a <CameraControl_PTPErrorDescription+0xf8>
    267a:	88 ec       	ldi	r24, 0xC8	; 200
    267c:	96 e0       	ldi	r25, 0x06	; 6
    267e:	3b c0       	rjmp	.+118    	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x2013: printf_P(PSTR(ESC_FG_RED "Store Not Available\r\n" ESC_FG_WHITE)); break;
    2680:	00 d0       	rcall	.+0      	; 0x2682 <CameraControl_PTPErrorDescription+0x100>
    2682:	88 ea       	ldi	r24, 0xA8	; 168
    2684:	96 e0       	ldi	r25, 0x06	; 6
    2686:	37 c0       	rjmp	.+110    	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x2014: printf_P(PSTR(ESC_FG_RED "Specification By Format Unsupported\r\n" ESC_FG_WHITE)); break; 
    2688:	00 d0       	rcall	.+0      	; 0x268a <CameraControl_PTPErrorDescription+0x108>
    268a:	88 e7       	ldi	r24, 0x78	; 120
    268c:	96 e0       	ldi	r25, 0x06	; 6
    268e:	33 c0       	rjmp	.+102    	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x2015: printf_P(PSTR(ESC_FG_RED "No Valid ObjectInfo\r\n" ESC_FG_WHITE)); break;
    2690:	00 d0       	rcall	.+0      	; 0x2692 <CameraControl_PTPErrorDescription+0x110>
    2692:	88 e5       	ldi	r24, 0x58	; 88
    2694:	96 e0       	ldi	r25, 0x06	; 6
    2696:	2f c0       	rjmp	.+94     	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x2016: printf_P(PSTR(ESC_FG_RED "Invalid Code Format\r\n" ESC_FG_WHITE)); break; 
    2698:	00 d0       	rcall	.+0      	; 0x269a <CameraControl_PTPErrorDescription+0x118>
    269a:	88 e3       	ldi	r24, 0x38	; 56
    269c:	96 e0       	ldi	r25, 0x06	; 6
    269e:	2b c0       	rjmp	.+86     	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x2017: printf_P(PSTR(ESC_FG_RED "Unknown Vendor Code\r\n" ESC_FG_WHITE)); break; 
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <CameraControl_PTPErrorDescription+0x120>
    26a2:	88 e1       	ldi	r24, 0x18	; 24
    26a4:	96 e0       	ldi	r25, 0x06	; 6
    26a6:	27 c0       	rjmp	.+78     	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x2018: printf_P(PSTR(ESC_FG_RED "Capture Already Terminated\r\n" ESC_FG_WHITE)); break;
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <CameraControl_PTPErrorDescription+0x128>
    26aa:	81 ef       	ldi	r24, 0xF1	; 241
    26ac:	95 e0       	ldi	r25, 0x05	; 5
    26ae:	23 c0       	rjmp	.+70     	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x2019: printf_P(PSTR(ESC_FG_RED "Device Busy\r\n" ESC_FG_WHITE)); break; 
    26b0:	00 d0       	rcall	.+0      	; 0x26b2 <CameraControl_PTPErrorDescription+0x130>
    26b2:	89 ed       	ldi	r24, 0xD9	; 217
    26b4:	95 e0       	ldi	r25, 0x05	; 5
    26b6:	1f c0       	rjmp	.+62     	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x201A: printf_P(PSTR(ESC_FG_RED "Invalid ParentObject\r\n" ESC_FG_WHITE)); break; 
    26b8:	00 d0       	rcall	.+0      	; 0x26ba <CameraControl_PTPErrorDescription+0x138>
    26ba:	88 eb       	ldi	r24, 0xB8	; 184
    26bc:	95 e0       	ldi	r25, 0x05	; 5
    26be:	1b c0       	rjmp	.+54     	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x201B: printf_P(PSTR(ESC_FG_RED "Invalid DeviceProp Format\r\n" ESC_FG_WHITE)); break; 
    26c0:	00 d0       	rcall	.+0      	; 0x26c2 <CameraControl_PTPErrorDescription+0x140>
    26c2:	82 e9       	ldi	r24, 0x92	; 146
    26c4:	95 e0       	ldi	r25, 0x05	; 5
    26c6:	17 c0       	rjmp	.+46     	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x201C: printf_P(PSTR(ESC_FG_RED "Invalid DeviceProp Value\r\n" ESC_FG_WHITE)); break; 
    26c8:	00 d0       	rcall	.+0      	; 0x26ca <CameraControl_PTPErrorDescription+0x148>
    26ca:	8d e6       	ldi	r24, 0x6D	; 109
    26cc:	95 e0       	ldi	r25, 0x05	; 5
    26ce:	13 c0       	rjmp	.+38     	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x201D: printf_P(PSTR(ESC_FG_RED "Invalid Parameter\r\n" ESC_FG_WHITE)); break;
    26d0:	00 d0       	rcall	.+0      	; 0x26d2 <CameraControl_PTPErrorDescription+0x150>
    26d2:	8f e4       	ldi	r24, 0x4F	; 79
    26d4:	95 e0       	ldi	r25, 0x05	; 5
    26d6:	0f c0       	rjmp	.+30     	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x201E: printf_P(PSTR(ESC_FG_RED "Session Already Open\r\n" ESC_FG_WHITE)); break;
    26d8:	00 d0       	rcall	.+0      	; 0x26da <CameraControl_PTPErrorDescription+0x158>
    26da:	8e e2       	ldi	r24, 0x2E	; 46
    26dc:	95 e0       	ldi	r25, 0x05	; 5
    26de:	0b c0       	rjmp	.+22     	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x201F: printf_P(PSTR(ESC_FG_RED "Transaction Cancelled\r\n" ESC_FG_WHITE)); break;
    26e0:	00 d0       	rcall	.+0      	; 0x26e2 <CameraControl_PTPErrorDescription+0x160>
    26e2:	8c e0       	ldi	r24, 0x0C	; 12
    26e4:	95 e0       	ldi	r25, 0x05	; 5
    26e6:	07 c0       	rjmp	.+14     	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		case 0x2020: printf_P(PSTR(ESC_FG_RED "Specification of Destination Unsupported\r\n" ESC_FG_WHITE)); break;
    26e8:	00 d0       	rcall	.+0      	; 0x26ea <CameraControl_PTPErrorDescription+0x168>
    26ea:	87 ed       	ldi	r24, 0xD7	; 215
    26ec:	94 e0       	ldi	r25, 0x04	; 4
    26ee:	03 c0       	rjmp	.+6      	; 0x26f6 <CameraControl_PTPErrorDescription+0x174>
		default: 	 printf_P(PSTR(ESC_FG_RED "Undefined or Vendor Specific\r\n" ESC_FG_WHITE)); break;
    26f0:	00 d0       	rcall	.+0      	; 0x26f2 <CameraControl_PTPErrorDescription+0x170>
    26f2:	8e ea       	ldi	r24, 0xAE	; 174
    26f4:	94 e0       	ldi	r25, 0x04	; 4
    26f6:	ed b7       	in	r30, 0x3d	; 61
    26f8:	fe b7       	in	r31, 0x3e	; 62
    26fa:	92 83       	std	Z+2, r25	; 0x02
    26fc:	81 83       	std	Z+1, r24	; 0x01
    26fe:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
	}
}
    2706:	df 91       	pop	r29
    2708:	cf 91       	pop	r28
    270a:	08 95       	ret

0000270c <CameraControl_DescribePIPE_RWSTREAMError>:

/*------------------------------------------------------------------------------
 * CameraControl_DescribePIPE_RWSTREAMError
 */
void CameraControl_DescribePIPE_RWSTREAMError ( uint8_t uiStatus )
{
    270c:	1f 93       	push	r17
    270e:	18 2f       	mov	r17, r24
	printf_P(PSTR("PIMA Error (%d): "), uiStatus);
    2710:	00 d0       	rcall	.+0      	; 0x2712 <CameraControl_DescribePIPE_RWSTREAMError+0x6>
    2712:	00 d0       	rcall	.+0      	; 0x2714 <CameraControl_DescribePIPE_RWSTREAMError+0x8>
    2714:	ed b7       	in	r30, 0x3d	; 61
    2716:	fe b7       	in	r31, 0x3e	; 62
    2718:	31 96       	adiw	r30, 0x01	; 1
    271a:	2c e9       	ldi	r18, 0x9C	; 156
    271c:	34 e0       	ldi	r19, 0x04	; 4
    271e:	ad b7       	in	r26, 0x3d	; 61
    2720:	be b7       	in	r27, 0x3e	; 62
    2722:	12 96       	adiw	r26, 0x02	; 2
    2724:	3c 93       	st	X, r19
    2726:	2e 93       	st	-X, r18
    2728:	11 97       	sbiw	r26, 0x01	; 1
    272a:	82 83       	std	Z+2, r24	; 0x02
    272c:	13 82       	std	Z+3, r1	; 0x03
    272e:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>

	switch (uiStatus)
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	13 30       	cpi	r17, 0x03	; 3
    273c:	a1 f0       	breq	.+40     	; 0x2766 <CameraControl_DescribePIPE_RWSTREAMError+0x5a>
    273e:	14 30       	cpi	r17, 0x04	; 4
    2740:	28 f4       	brcc	.+10     	; 0x274c <CameraControl_DescribePIPE_RWSTREAMError+0x40>
    2742:	11 30       	cpi	r17, 0x01	; 1
    2744:	41 f0       	breq	.+16     	; 0x2756 <CameraControl_DescribePIPE_RWSTREAMError+0x4a>
    2746:	12 30       	cpi	r17, 0x02	; 2
    2748:	f1 f4       	brne	.+60     	; 0x2786 <CameraControl_DescribePIPE_RWSTREAMError+0x7a>
    274a:	09 c0       	rjmp	.+18     	; 0x275e <CameraControl_DescribePIPE_RWSTREAMError+0x52>
    274c:	14 30       	cpi	r17, 0x04	; 4
    274e:	79 f0       	breq	.+30     	; 0x276e <CameraControl_DescribePIPE_RWSTREAMError+0x62>
    2750:	10 38       	cpi	r17, 0x80	; 128
    2752:	c9 f4       	brne	.+50     	; 0x2786 <CameraControl_DescribePIPE_RWSTREAMError+0x7a>
    2754:	10 c0       	rjmp	.+32     	; 0x2776 <CameraControl_DescribePIPE_RWSTREAMError+0x6a>
	{
		case PIPE_RWSTREAM_PipeStalled:
			printf_P(PSTR("The device stalled the pipe during the transfer.\r\n"));
    2756:	00 d0       	rcall	.+0      	; 0x2758 <CameraControl_DescribePIPE_RWSTREAMError+0x4c>
    2758:	89 e6       	ldi	r24, 0x69	; 105
    275a:	94 e0       	ldi	r25, 0x04	; 4
    275c:	0f c0       	rjmp	.+30     	; 0x277c <CameraControl_DescribePIPE_RWSTREAMError+0x70>
			break;
		case PIPE_RWSTREAM_DeviceDisconnected:
			printf_P(PSTR("Device was disconnected from the host during the transfer.\r\n"));
    275e:	00 d0       	rcall	.+0      	; 0x2760 <CameraControl_DescribePIPE_RWSTREAMError+0x54>
    2760:	8c e2       	ldi	r24, 0x2C	; 44
    2762:	94 e0       	ldi	r25, 0x04	; 4
    2764:	13 c0       	rjmp	.+38     	; 0x278c <CameraControl_DescribePIPE_RWSTREAMError+0x80>
			break;
		case PIPE_RWSTREAM_Timeout:
			printf_P(PSTR("The device failed to accept or send the next packet within the software timeout period set by the USB_STREAM_TIMEOUT_MS macro.\r\n"));
    2766:	00 d0       	rcall	.+0      	; 0x2768 <CameraControl_DescribePIPE_RWSTREAMError+0x5c>
    2768:	8b ea       	ldi	r24, 0xAB	; 171
    276a:	93 e0       	ldi	r25, 0x03	; 3
    276c:	07 c0       	rjmp	.+14     	; 0x277c <CameraControl_DescribePIPE_RWSTREAMError+0x70>
			break;
		case PIPE_RWSTREAM_IncompleteTransfer:
			printf_P(PSTR("Indicates that the pipe bank became full/empty before the complete contents of the stream could be transferred.\r\n"));
    276e:	00 d0       	rcall	.+0      	; 0x2770 <CameraControl_DescribePIPE_RWSTREAMError+0x64>
    2770:	89 e3       	ldi	r24, 0x39	; 57
    2772:	93 e0       	ldi	r25, 0x03	; 3
    2774:	0b c0       	rjmp	.+22     	; 0x278c <CameraControl_DescribePIPE_RWSTREAMError+0x80>
			break;
		case SI_ERROR_LOGICAL_CMD_FAILED:
			printf_P(PSTR("Error code for some Still Image Host functions, indicating a logical (and not hardware) error.\r\n"));
    2776:	00 d0       	rcall	.+0      	; 0x2778 <CameraControl_DescribePIPE_RWSTREAMError+0x6c>
    2778:	88 ed       	ldi	r24, 0xD8	; 216
    277a:	92 e0       	ldi	r25, 0x02	; 2
    277c:	ed b7       	in	r30, 0x3d	; 61
    277e:	fe b7       	in	r31, 0x3e	; 62
    2780:	92 83       	std	Z+2, r25	; 0x02
    2782:	81 83       	std	Z+1, r24	; 0x01
    2784:	09 c0       	rjmp	.+18     	; 0x2798 <CameraControl_DescribePIPE_RWSTREAMError+0x8c>
			break;
		default:
			printf_P(PSTR("Unrecognized error.\r\n"));
    2786:	00 d0       	rcall	.+0      	; 0x2788 <CameraControl_DescribePIPE_RWSTREAMError+0x7c>
    2788:	82 ec       	ldi	r24, 0xC2	; 194
    278a:	92 e0       	ldi	r25, 0x02	; 2
    278c:	ad b7       	in	r26, 0x3d	; 61
    278e:	be b7       	in	r27, 0x3e	; 62
    2790:	12 96       	adiw	r26, 0x02	; 2
    2792:	9c 93       	st	X, r25
    2794:	8e 93       	st	-X, r24
    2796:	11 97       	sbiw	r26, 0x01	; 1
    2798:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
	}

}
    27a0:	1f 91       	pop	r17
    27a2:	08 95       	ret

000027a4 <CameraControl_GetResponseAndCheck>:
/*------------------------------------------------------------------------------
 * CameraControl_GetResponseAndCheck
 */
uint8_t CameraControl_GetResponseAndCheck ( USB_ClassInfo_SI_Host_t* SIInterfaceInfo,
											PIMA_Container_t *PIMABlock )
{
    27a4:	1f 93       	push	r17
    27a6:	cf 93       	push	r28
    27a8:	df 93       	push	r29
    27aa:	eb 01       	movw	r28, r22
	uint8_t ErrorCode;

	CHECK_CAMERA_CONNECTION;
    27ac:	20 91 63 03 	lds	r18, 0x0363
    27b0:	2b 30       	cpi	r18, 0x0B	; 11
    27b2:	21 f4       	brne	.+8      	; 0x27bc <CameraControl_GetResponseAndCheck+0x18>
    27b4:	fc 01       	movw	r30, r24
    27b6:	26 81       	ldd	r18, Z+6	; 0x06
    27b8:	22 23       	and	r18, r18
    27ba:	61 f4       	brne	.+24     	; 0x27d4 <CameraControl_GetResponseAndCheck+0x30>
    27bc:	00 d0       	rcall	.+0      	; 0x27be <CameraControl_GetResponseAndCheck+0x1a>
    27be:	8a ea       	ldi	r24, 0xAA	; 170
    27c0:	92 e0       	ldi	r25, 0x02	; 2
    27c2:	ed b7       	in	r30, 0x3d	; 61
    27c4:	fe b7       	in	r31, 0x3e	; 62
    27c6:	92 83       	std	Z+2, r25	; 0x02
    27c8:	81 83       	std	Z+1, r24	; 0x01
    27ca:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	17 c0       	rjmp	.+46     	; 0x2802 <CameraControl_GetResponseAndCheck+0x5e>

	// Receive the final response block from the device 
	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, PIMABlock)) != PIPE_RWSTREAM_NoError)
    27d4:	3f dd       	rcall	.-1410   	; 0x2254 <SI_Host_ReceiveBlockHeader>
    27d6:	18 2f       	mov	r17, r24
    27d8:	88 23       	and	r24, r24
    27da:	19 f0       	breq	.+6      	; 0x27e2 <CameraControl_GetResponseAndCheck+0x3e>
	{
		CameraControl_DescribePIPE_RWSTREAMError (ErrorCode);
    27dc:	97 df       	rcall	.-210    	; 0x270c <CameraControl_DescribePIPE_RWSTREAMError>
		if ( ErrorCode != SI_ERROR_LOGICAL_CMD_FAILED )
    27de:	10 38       	cpi	r17, 0x80	; 128
    27e0:	89 f4       	brne	.+34     	; 0x2804 <CameraControl_GetResponseAndCheck+0x60>
			return ErrorCode;
	}

	// Verify that the command completed successfully
	if ((PIMABlock->Type != PIMA_CONTAINER_ResponseBlock) || (PIMABlock->Code != PTP_RC_OK))
    27e2:	8c 81       	ldd	r24, Y+4	; 0x04
    27e4:	9d 81       	ldd	r25, Y+5	; 0x05
    27e6:	83 30       	cpi	r24, 0x03	; 3
    27e8:	91 05       	cpc	r25, r1
    27ea:	31 f4       	brne	.+12     	; 0x27f8 <CameraControl_GetResponseAndCheck+0x54>
    27ec:	8e 81       	ldd	r24, Y+6	; 0x06
    27ee:	9f 81       	ldd	r25, Y+7	; 0x07
    27f0:	f0 e2       	ldi	r31, 0x20	; 32
    27f2:	81 30       	cpi	r24, 0x01	; 1
    27f4:	9f 07       	cpc	r25, r31
    27f6:	29 f0       	breq	.+10     	; 0x2802 <CameraControl_GetResponseAndCheck+0x5e>
	{
		CameraControl_PTPErrorDescription ( PIMABlock->Code );
    27f8:	8e 81       	ldd	r24, Y+6	; 0x06
    27fa:	9f 81       	ldd	r25, Y+7	; 0x07
    27fc:	c2 de       	rcall	.-636    	; 0x2582 <CameraControl_PTPErrorDescription>
		return SI_ERROR_LOGICAL_CMD_FAILED;
    27fe:	10 e8       	ldi	r17, 0x80	; 128
    2800:	01 c0       	rjmp	.+2      	; 0x2804 <CameraControl_GetResponseAndCheck+0x60>
	}

	return PIPE_RWSTREAM_NoError;
    2802:	10 e0       	ldi	r17, 0x00	; 0
}
    2804:	81 2f       	mov	r24, r17
    2806:	df 91       	pop	r29
    2808:	cf 91       	pop	r28
    280a:	1f 91       	pop	r17
    280c:	08 95       	ret

0000280e <CameraControl_InitiateTransaction>:
/*------------------------------------------------------------------------------
 * CameraControl_InitiateTransaction
 */
uint8_t CameraControl_InitiateTransaction ( USB_ClassInfo_SI_Host_t* SIInterfaceInfo,
											PIMA_Container_t *PIMABlock )
{
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
    2816:	ec 01       	movw	r28, r24
    2818:	8b 01       	movw	r16, r22
	uint8_t ErrorCode;

	CHECK_CAMERA_CONNECTION;
    281a:	80 91 63 03 	lds	r24, 0x0363
    281e:	8b 30       	cpi	r24, 0x0B	; 11
    2820:	19 f4       	brne	.+6      	; 0x2828 <CameraControl_InitiateTransaction+0x1a>
    2822:	8e 81       	ldd	r24, Y+6	; 0x06
    2824:	88 23       	and	r24, r24
    2826:	61 f4       	brne	.+24     	; 0x2840 <CameraControl_InitiateTransaction+0x32>
    2828:	00 d0       	rcall	.+0      	; 0x282a <CameraControl_InitiateTransaction+0x1c>
    282a:	82 e9       	ldi	r24, 0x92	; 146
    282c:	92 e0       	ldi	r25, 0x02	; 2
    282e:	ed b7       	in	r30, 0x3d	; 61
    2830:	fe b7       	in	r31, 0x3e	; 62
    2832:	92 83       	std	Z+2, r25	; 0x02
    2834:	81 83       	std	Z+1, r24	; 0x01
    2836:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    283a:	0f 90       	pop	r0
    283c:	0f 90       	pop	r0
    283e:	15 c0       	rjmp	.+42     	; 0x286a <CameraControl_InitiateTransaction+0x5c>

	// Check connectivity
	if (CAMERA_CONTROL_NOT_CONNECTED)
    2840:	80 91 63 03 	lds	r24, 0x0363
    2844:	8b 30       	cpi	r24, 0x0B	; 11
    2846:	21 f0       	breq	.+8      	; 0x2850 <CameraControl_InitiateTransaction+0x42>
	{
		CameraControl_DescribePIPE_RWSTREAMError (PIPE_RWSTREAM_DeviceDisconnected);
    2848:	82 e0       	ldi	r24, 0x02	; 2
    284a:	60 df       	rcall	.-320    	; 0x270c <CameraControl_DescribePIPE_RWSTREAMError>
		return PIPE_RWSTREAM_DeviceDisconnected;
    284c:	02 e0       	ldi	r16, 0x02	; 2
    284e:	10 c0       	rjmp	.+32     	; 0x2870 <CameraControl_InitiateTransaction+0x62>
	}

	// Send the block - info request
	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, PIMABlock)) != PIPE_RWSTREAM_NoError)
    2850:	ce 01       	movw	r24, r28
    2852:	b1 dc       	rcall	.-1694   	; 0x21b6 <SI_Host_SendBlockHeader>
    2854:	88 23       	and	r24, r24
    2856:	59 f4       	brne	.+22     	; 0x286e <CameraControl_InitiateTransaction+0x60>
	{
		return ErrorCode;
	}

	// Get the answer in the same memory block
	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, PIMABlock)) != PIPE_RWSTREAM_NoError)
    2858:	ce 01       	movw	r24, r28
    285a:	b8 01       	movw	r22, r16
    285c:	fb dc       	rcall	.-1546   	; 0x2254 <SI_Host_ReceiveBlockHeader>
    285e:	08 2f       	mov	r16, r24
    2860:	88 23       	and	r24, r24
    2862:	31 f0       	breq	.+12     	; 0x2870 <CameraControl_InitiateTransaction+0x62>
	{
		CameraControl_DescribePIPE_RWSTREAMError (ErrorCode);
    2864:	53 df       	rcall	.-346    	; 0x270c <CameraControl_DescribePIPE_RWSTREAMError>
		if ( ErrorCode != SI_ERROR_LOGICAL_CMD_FAILED )
    2866:	00 38       	cpi	r16, 0x80	; 128
    2868:	19 f4       	brne	.+6      	; 0x2870 <CameraControl_InitiateTransaction+0x62>
			return ErrorCode;
	}
	
	return PIPE_RWSTREAM_NoError;
    286a:	00 e0       	ldi	r16, 0x00	; 0
    286c:	01 c0       	rjmp	.+2      	; 0x2870 <CameraControl_InitiateTransaction+0x62>
		CameraControl_DescribePIPE_RWSTREAMError (PIPE_RWSTREAM_DeviceDisconnected);
		return PIPE_RWSTREAM_DeviceDisconnected;
	}

	// Send the block - info request
	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, PIMABlock)) != PIPE_RWSTREAM_NoError)
    286e:	08 2f       	mov	r16, r24
		if ( ErrorCode != SI_ERROR_LOGICAL_CMD_FAILED )
			return ErrorCode;
	}
	
	return PIPE_RWSTREAM_NoError;
}
    2870:	80 2f       	mov	r24, r16
    2872:	df 91       	pop	r29
    2874:	cf 91       	pop	r28
    2876:	1f 91       	pop	r17
    2878:	0f 91       	pop	r16
    287a:	08 95       	ret

0000287c <CameraControl_OpenSession>:

/*------------------------------------------------------------------------------
 * CameraControl_OpenSession
 */
uint8_t CameraControl_OpenSession(USB_ClassInfo_SI_Host_t* SIInterfaceInfo)
{
    287c:	0f 93       	push	r16
    287e:	1f 93       	push	r17
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	68 97       	sbiw	r28, 0x18	; 24
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	f8 94       	cli
    288e:	de bf       	out	0x3e, r29	; 62
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	cd bf       	out	0x3d, r28	; 61
    2894:	8c 01       	movw	r16, r24
	uint8_t ErrorCode;

	CHECK_CAMERA_CONNECTION;
    2896:	80 91 63 03 	lds	r24, 0x0363
    289a:	8b 30       	cpi	r24, 0x0B	; 11
    289c:	21 f4       	brne	.+8      	; 0x28a6 <CameraControl_OpenSession+0x2a>
    289e:	f8 01       	movw	r30, r16
    28a0:	86 81       	ldd	r24, Z+6	; 0x06
    28a2:	88 23       	and	r24, r24
    28a4:	69 f4       	brne	.+26     	; 0x28c0 <CameraControl_OpenSession+0x44>
    28a6:	00 d0       	rcall	.+0      	; 0x28a8 <CameraControl_OpenSession+0x2c>
    28a8:	8a e7       	ldi	r24, 0x7A	; 122
    28aa:	92 e0       	ldi	r25, 0x02	; 2
    28ac:	ed b7       	in	r30, 0x3d	; 61
    28ae:	fe b7       	in	r31, 0x3e	; 62
    28b0:	92 83       	std	Z+2, r25	; 0x02
    28b2:	81 83       	std	Z+1, r24	; 0x01
    28b4:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    28b8:	0f 90       	pop	r0
    28ba:	0f 90       	pop	r0
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	2d c0       	rjmp	.+90     	; 0x291a <CameraControl_OpenSession+0x9e>

	SIInterfaceInfo->State.TransactionID = 0;
    28c0:	f8 01       	movw	r30, r16
    28c2:	17 86       	std	Z+15, r1	; 0x0f
    28c4:	10 8a       	std	Z+16, r1	; 0x10
    28c6:	11 8a       	std	Z+17, r1	; 0x11
    28c8:	12 8a       	std	Z+18, r1	; 0x12
	SIInterfaceInfo->State.IsSessionOpen = false;
    28ca:	16 86       	std	Z+14, r1	; 0x0e

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    28cc:	be 01       	movw	r22, r28
    28ce:	6f 5f       	subi	r22, 0xFF	; 255
    28d0:	7f 4f       	sbci	r23, 0xFF	; 255
    28d2:	88 e1       	ldi	r24, 0x18	; 24
    28d4:	fb 01       	movw	r30, r22
    28d6:	11 92       	st	Z+, r1
    28d8:	8a 95       	dec	r24
    28da:	e9 f7       	brne	.-6      	; 0x28d6 <CameraControl_OpenSession+0x5a>
    28dc:	80 e1       	ldi	r24, 0x10	; 16
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	a0 e0       	ldi	r26, 0x00	; 0
    28e2:	b0 e0       	ldi	r27, 0x00	; 0
    28e4:	89 83       	std	Y+1, r24	; 0x01
    28e6:	9a 83       	std	Y+2, r25	; 0x02
    28e8:	ab 83       	std	Y+3, r26	; 0x03
    28ea:	bc 83       	std	Y+4, r27	; 0x04
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	9e 83       	std	Y+6, r25	; 0x06
    28f2:	8d 83       	std	Y+5, r24	; 0x05
    28f4:	82 e0       	ldi	r24, 0x02	; 2
    28f6:	90 e1       	ldi	r25, 0x10	; 16
    28f8:	98 87       	std	Y+8, r25	; 0x08
    28fa:	8f 83       	std	Y+7, r24	; 0x07
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	a0 e0       	ldi	r26, 0x00	; 0
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	8d 87       	std	Y+13, r24	; 0x0d
    2906:	9e 87       	std	Y+14, r25	; 0x0e
    2908:	af 87       	std	Y+15, r26	; 0x0f
    290a:	b8 8b       	std	Y+16, r27	; 0x10
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = CPU_TO_LE16(PTP_OC_OpenSession),
			.Params        = {CPU_TO_LE32(1)},
		};

	ErrorCode = CameraControl_InitiateTransaction ( SIInterfaceInfo, &PIMABlock );
    290c:	c8 01       	movw	r24, r16
    290e:	7f df       	rcall	.-258    	; 0x280e <CameraControl_InitiateTransaction>

	if ( ErrorCode == PIPE_RWSTREAM_NoError ) SIInterfaceInfo->State.IsSessionOpen = true;
    2910:	88 23       	and	r24, r24
    2912:	19 f4       	brne	.+6      	; 0x291a <CameraControl_OpenSession+0x9e>
    2914:	91 e0       	ldi	r25, 0x01	; 1
    2916:	f8 01       	movw	r30, r16
    2918:	96 87       	std	Z+14, r25	; 0x0e

	return ErrorCode;
}
    291a:	68 96       	adiw	r28, 0x18	; 24
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	1f 91       	pop	r17
    292c:	0f 91       	pop	r16
    292e:	08 95       	ret

00002930 <CameraControl_CloseSession>:

/*------------------------------------------------------------------------------
 * CameraControl_CloseSession
 */
uint8_t CameraControl_CloseSession(USB_ClassInfo_SI_Host_t* SIInterfaceInfo)
{
    2930:	0f 93       	push	r16
    2932:	1f 93       	push	r17
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	68 97       	sbiw	r28, 0x18	; 24
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	8c 01       	movw	r16, r24
	uint8_t ErrorCode;

	CHECK_CAMERA_CONNECTION;
    294a:	80 91 63 03 	lds	r24, 0x0363
    294e:	8b 30       	cpi	r24, 0x0B	; 11
    2950:	21 f4       	brne	.+8      	; 0x295a <CameraControl_CloseSession+0x2a>
    2952:	f8 01       	movw	r30, r16
    2954:	86 81       	ldd	r24, Z+6	; 0x06
    2956:	88 23       	and	r24, r24
    2958:	69 f4       	brne	.+26     	; 0x2974 <CameraControl_CloseSession+0x44>
    295a:	00 d0       	rcall	.+0      	; 0x295c <CameraControl_CloseSession+0x2c>
    295c:	82 e6       	ldi	r24, 0x62	; 98
    295e:	92 e0       	ldi	r25, 0x02	; 2
    2960:	ed b7       	in	r30, 0x3d	; 61
    2962:	fe b7       	in	r31, 0x3e	; 62
    2964:	92 83       	std	Z+2, r25	; 0x02
    2966:	81 83       	std	Z+1, r24	; 0x01
    2968:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    296c:	0f 90       	pop	r0
    296e:	0f 90       	pop	r0
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	1e c0       	rjmp	.+60     	; 0x29b0 <CameraControl_CloseSession+0x80>

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    2974:	be 01       	movw	r22, r28
    2976:	6f 5f       	subi	r22, 0xFF	; 255
    2978:	7f 4f       	sbci	r23, 0xFF	; 255
    297a:	88 e1       	ldi	r24, 0x18	; 24
    297c:	fb 01       	movw	r30, r22
    297e:	11 92       	st	Z+, r1
    2980:	8a 95       	dec	r24
    2982:	e9 f7       	brne	.-6      	; 0x297e <CameraControl_CloseSession+0x4e>
    2984:	8c e0       	ldi	r24, 0x0C	; 12
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	a0 e0       	ldi	r26, 0x00	; 0
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	89 83       	std	Y+1, r24	; 0x01
    298e:	9a 83       	std	Y+2, r25	; 0x02
    2990:	ab 83       	std	Y+3, r26	; 0x03
    2992:	bc 83       	std	Y+4, r27	; 0x04
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	9e 83       	std	Y+6, r25	; 0x06
    299a:	8d 83       	std	Y+5, r24	; 0x05
    299c:	83 e0       	ldi	r24, 0x03	; 3
    299e:	90 e1       	ldi	r25, 0x10	; 16
    29a0:	98 87       	std	Y+8, r25	; 0x08
    29a2:	8f 83       	std	Y+7, r24	; 0x07
			.DataLength    = CPU_TO_LE32(PIMA_COMMAND_SIZE(0)),
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = CPU_TO_LE16(PTP_OC_CloseSession),
		};

	ErrorCode = CameraControl_InitiateTransaction ( SIInterfaceInfo, &PIMABlock );
    29a4:	c8 01       	movw	r24, r16
    29a6:	33 df       	rcall	.-410    	; 0x280e <CameraControl_InitiateTransaction>

	if ( ErrorCode == PIPE_RWSTREAM_NoError ) SIInterfaceInfo->State.IsSessionOpen = false;
    29a8:	88 23       	and	r24, r24
    29aa:	11 f4       	brne	.+4      	; 0x29b0 <CameraControl_CloseSession+0x80>
    29ac:	f8 01       	movw	r30, r16
    29ae:	16 86       	std	Z+14, r1	; 0x0e

	return ErrorCode;
}
    29b0:	68 96       	adiw	r28, 0x18	; 24
    29b2:	0f b6       	in	r0, 0x3f	; 63
    29b4:	f8 94       	cli
    29b6:	de bf       	out	0x3e, r29	; 62
    29b8:	0f be       	out	0x3f, r0	; 63
    29ba:	cd bf       	out	0x3d, r28	; 61
    29bc:	cf 91       	pop	r28
    29be:	df 91       	pop	r29
    29c0:	1f 91       	pop	r17
    29c2:	0f 91       	pop	r16
    29c4:	08 95       	ret

000029c6 <CameraControl_DeviceInfo_CopyString>:
/*------------------------------------------------------------------------------
 * CameraControl_DeviceInfo_CopyString
 */
bool CameraControl_DeviceInfo_CopyString(	uint8_t **pp, uint16_t *count, 
											char *dest, uint8_t maxLen)
{
    29c6:	ef 92       	push	r14
    29c8:	ff 92       	push	r15
    29ca:	0f 93       	push	r16
    29cc:	1f 93       	push	r17
    29ce:	cf 93       	push	r28
    29d0:	df 93       	push	r29
    29d2:	fc 01       	movw	r30, r24
    29d4:	db 01       	movw	r26, r22
	uint8_t arrayLength = *(uint8_t*)(*pp);
    29d6:	c0 81       	ld	r28, Z
    29d8:	d1 81       	ldd	r29, Z+1	; 0x01
    29da:	19 91       	ld	r17, Y+
	uint8_t pos = 0;
	(*pp)+=1; (*count)-=1;
    29dc:	d1 83       	std	Z+1, r29	; 0x01
    29de:	c0 83       	st	Z, r28
    29e0:	8d 91       	ld	r24, X+
    29e2:	9c 91       	ld	r25, X
    29e4:	11 97       	sbiw	r26, 0x01	; 1
    29e6:	01 97       	sbiw	r24, 0x01	; 1
    29e8:	11 96       	adiw	r26, 0x01	; 1
    29ea:	9c 93       	st	X, r25
    29ec:	8e 93       	st	-X, r24
    29ee:	7a 01       	movw	r14, r20

	for (; arrayLength>0; arrayLength--, (*count)-=2, (*pp)+=2, pos++)
    29f0:	80 e0       	ldi	r24, 0x00	; 0
    29f2:	90 e0       	ldi	r25, 0x00	; 0
	{
		if ( pos == (maxLen-1) )
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	21 50       	subi	r18, 0x01	; 1
    29f8:	30 40       	sbci	r19, 0x00	; 0
{
	uint8_t arrayLength = *(uint8_t*)(*pp);
	uint8_t pos = 0;
	(*pp)+=1; (*count)-=1;

	for (; arrayLength>0; arrayLength--, (*count)-=2, (*pp)+=2, pos++)
    29fa:	1a c0       	rjmp	.+52     	; 0x2a30 <CameraControl_DeviceInfo_CopyString+0x6a>
	{
		if ( pos == (maxLen-1) )
    29fc:	82 17       	cp	r24, r18
    29fe:	93 07       	cpc	r25, r19
    2a00:	d1 f0       	breq	.+52     	; 0x2a36 <CameraControl_DeviceInfo_CopyString+0x70>
			break;

		dest[pos] = (char)(**pp);
    2a02:	60 81       	ld	r22, Z
    2a04:	71 81       	ldd	r23, Z+1	; 0x01
    2a06:	eb 01       	movw	r28, r22
    2a08:	68 81       	ld	r22, Y
    2a0a:	e7 01       	movw	r28, r14
    2a0c:	69 93       	st	Y+, r22
    2a0e:	7e 01       	movw	r14, r28
{
	uint8_t arrayLength = *(uint8_t*)(*pp);
	uint8_t pos = 0;
	(*pp)+=1; (*count)-=1;

	for (; arrayLength>0; arrayLength--, (*count)-=2, (*pp)+=2, pos++)
    2a10:	11 50       	subi	r17, 0x01	; 1
    2a12:	6d 91       	ld	r22, X+
    2a14:	7c 91       	ld	r23, X
    2a16:	11 97       	sbiw	r26, 0x01	; 1
    2a18:	62 50       	subi	r22, 0x02	; 2
    2a1a:	70 40       	sbci	r23, 0x00	; 0
    2a1c:	11 96       	adiw	r26, 0x01	; 1
    2a1e:	7c 93       	st	X, r23
    2a20:	6e 93       	st	-X, r22
    2a22:	60 81       	ld	r22, Z
    2a24:	71 81       	ldd	r23, Z+1	; 0x01
    2a26:	6e 5f       	subi	r22, 0xFE	; 254
    2a28:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2a:	71 83       	std	Z+1, r23	; 0x01
    2a2c:	60 83       	st	Z, r22
    2a2e:	01 96       	adiw	r24, 0x01	; 1
    2a30:	08 2f       	mov	r16, r24
    2a32:	11 23       	and	r17, r17
    2a34:	19 f7       	brne	.-58     	; 0x29fc <CameraControl_DeviceInfo_CopyString+0x36>
			break;

		dest[pos] = (char)(**pp);
	}

	(*count)-=arrayLength*2;
    2a36:	21 2f       	mov	r18, r17
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	b9 01       	movw	r22, r18
    2a3c:	66 0f       	add	r22, r22
    2a3e:	77 1f       	adc	r23, r23
    2a40:	8d 91       	ld	r24, X+
    2a42:	9c 91       	ld	r25, X
    2a44:	11 97       	sbiw	r26, 0x01	; 1
    2a46:	86 1b       	sub	r24, r22
    2a48:	97 0b       	sbc	r25, r23
    2a4a:	11 96       	adiw	r26, 0x01	; 1
    2a4c:	9c 93       	st	X, r25
    2a4e:	8e 93       	st	-X, r24
	(*pp)+=arrayLength*2;
    2a50:	80 81       	ld	r24, Z
    2a52:	91 81       	ldd	r25, Z+1	; 0x01
    2a54:	86 0f       	add	r24, r22
    2a56:	97 1f       	adc	r25, r23
    2a58:	91 83       	std	Z+1, r25	; 0x01
    2a5a:	80 83       	st	Z, r24

	dest[pos] = '\0';
    2a5c:	40 0f       	add	r20, r16
    2a5e:	51 1d       	adc	r21, r1
    2a60:	fa 01       	movw	r30, r20
    2a62:	10 82       	st	Z, r1

	return (arrayLength == 0);
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	11 11       	cpse	r17, r1
    2a68:	80 e0       	ldi	r24, 0x00	; 0
}
    2a6a:	df 91       	pop	r29
    2a6c:	cf 91       	pop	r28
    2a6e:	1f 91       	pop	r17
    2a70:	0f 91       	pop	r16
    2a72:	ff 90       	pop	r15
    2a74:	ef 90       	pop	r14
    2a76:	08 95       	ret

00002a78 <CameraControl_DeviceInfo_CopyArray>:
/*------------------------------------------------------------------------------
 * CameraControl_DeviceInfo_CopyArray
 */
bool CameraControl_DeviceInfo_CopyArray(	uint8_t **pp, uint16_t *count, uint8_t elSize, 
											uint64_t *dest, uint16_t base)
{
    2a78:	2f 92       	push	r2
    2a7a:	3f 92       	push	r3
    2a7c:	4f 92       	push	r4
    2a7e:	5f 92       	push	r5
    2a80:	6f 92       	push	r6
    2a82:	7f 92       	push	r7
    2a84:	8f 92       	push	r8
    2a86:	9f 92       	push	r9
    2a88:	af 92       	push	r10
    2a8a:	bf 92       	push	r11
    2a8c:	cf 92       	push	r12
    2a8e:	df 92       	push	r13
    2a90:	ef 92       	push	r14
    2a92:	ff 92       	push	r15
    2a94:	0f 93       	push	r16
    2a96:	1f 93       	push	r17
    2a98:	df 93       	push	r29
    2a9a:	cf 93       	push	r28
    2a9c:	00 d0       	rcall	.+0      	; 0x2a9e <CameraControl_DeviceInfo_CopyArray+0x26>
    2a9e:	00 d0       	rcall	.+0      	; 0x2aa0 <CameraControl_DeviceInfo_CopyArray+0x28>
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
    2aa4:	7c 01       	movw	r14, r24
    2aa6:	7a 83       	std	Y+2, r23	; 0x02
    2aa8:	69 83       	std	Y+1, r22	; 0x01
    2aaa:	3c 83       	std	Y+4, r19	; 0x04
    2aac:	2b 83       	std	Y+3, r18	; 0x03
	uint32_t iMSB = 0;
	uint32_t iLSB = 0;

	uint32_t arrayLength = *(uint32_t*)(*pp);
    2aae:	dc 01       	movw	r26, r24
    2ab0:	2d 91       	ld	r18, X+
    2ab2:	3c 91       	ld	r19, X
    2ab4:	f9 01       	movw	r30, r18
    2ab6:	81 91       	ld	r24, Z+
    2ab8:	91 91       	ld	r25, Z+
    2aba:	a1 91       	ld	r26, Z+
    2abc:	b1 91       	ld	r27, Z+
    2abe:	9f 01       	movw	r18, r30
	(*pp)+=4; (*count)-=4;
    2ac0:	f7 01       	movw	r30, r14
    2ac2:	31 83       	std	Z+1, r19	; 0x01
    2ac4:	20 83       	st	Z, r18
    2ac6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac8:	fa 81       	ldd	r31, Y+2	; 0x02
    2aca:	20 81       	ld	r18, Z
    2acc:	31 81       	ldd	r19, Z+1	; 0x01
    2ace:	24 50       	subi	r18, 0x04	; 4
    2ad0:	30 40       	sbci	r19, 0x00	; 0
    2ad2:	31 83       	std	Z+1, r19	; 0x01
    2ad4:	20 83       	st	Z, r18

	*dest = 0;
    2ad6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ad8:	fc 81       	ldd	r31, Y+4	; 0x04
    2ada:	10 82       	st	Z, r1
    2adc:	11 82       	std	Z+1, r1	; 0x01
    2ade:	12 82       	std	Z+2, r1	; 0x02
    2ae0:	13 82       	std	Z+3, r1	; 0x03
    2ae2:	14 82       	std	Z+4, r1	; 0x04
    2ae4:	15 82       	std	Z+5, r1	; 0x05
    2ae6:	16 82       	std	Z+6, r1	; 0x06
    2ae8:	17 82       	std	Z+7, r1	; 0x07
 */
bool CameraControl_DeviceInfo_CopyArray(	uint8_t **pp, uint16_t *count, uint8_t elSize, 
											uint64_t *dest, uint16_t base)
{
	uint32_t iMSB = 0;
	uint32_t iLSB = 0;
    2aea:	22 24       	eor	r2, r2
    2aec:	33 24       	eor	r3, r3
    2aee:	21 01       	movw	r4, r2
 * CameraControl_DeviceInfo_CopyArray
 */
bool CameraControl_DeviceInfo_CopyArray(	uint8_t **pp, uint16_t *count, uint8_t elSize, 
											uint64_t *dest, uint16_t base)
{
	uint32_t iMSB = 0;
    2af0:	aa 24       	eor	r10, r10
    2af2:	bb 24       	eor	r11, r11
    2af4:	65 01       	movw	r12, r10
			continue;

		uint16_t distance = currentEl - base; 

		if (distance<32) iLSB |= (1<<(distance));
		else if (distance<64) iMSB |= (1<<(distance-32));
    2af6:	21 e0       	ldi	r18, 0x01	; 1
    2af8:	82 2e       	mov	r8, r18
    2afa:	91 2c       	mov	r9, r1
	uint32_t arrayLength = *(uint32_t*)(*pp);
	(*pp)+=4; (*count)-=4;

	*dest = 0;

	for ( ; arrayLength>0; arrayLength--, (*pp)+=elSize, (*count)-=elSize )
    2afc:	64 2e       	mov	r6, r20
    2afe:	77 24       	eor	r7, r7
    2b00:	43 c0       	rjmp	.+134    	; 0x2b88 <CameraControl_DeviceInfo_CopyArray+0x110>
	{
		uint16_t currentEl = *((uint16_t*)(*pp));
    2b02:	f7 01       	movw	r30, r14
    2b04:	60 81       	ld	r22, Z
    2b06:	71 81       	ldd	r23, Z+1	; 0x01
    2b08:	fb 01       	movw	r30, r22
    2b0a:	20 81       	ld	r18, Z
    2b0c:	31 81       	ldd	r19, Z+1	; 0x01

		if ( currentEl<base )
    2b0e:	20 17       	cp	r18, r16
    2b10:	31 07       	cpc	r19, r17
    2b12:	48 f1       	brcs	.+82     	; 0x2b66 <CameraControl_DeviceInfo_CopyArray+0xee>
			continue;

		uint16_t distance = currentEl - base; 
    2b14:	20 1b       	sub	r18, r16
    2b16:	31 0b       	sbc	r19, r17

		if (distance<32) iLSB |= (1<<(distance));
    2b18:	20 32       	cpi	r18, 0x20	; 32
    2b1a:	31 05       	cpc	r19, r1
    2b1c:	80 f4       	brcc	.+32     	; 0x2b3e <CameraControl_DeviceInfo_CopyArray+0xc6>
    2b1e:	a4 01       	movw	r20, r8
    2b20:	02 c0       	rjmp	.+4      	; 0x2b26 <CameraControl_DeviceInfo_CopyArray+0xae>
    2b22:	44 0f       	add	r20, r20
    2b24:	55 1f       	adc	r21, r21
    2b26:	2a 95       	dec	r18
    2b28:	e2 f7       	brpl	.-8      	; 0x2b22 <CameraControl_DeviceInfo_CopyArray+0xaa>
    2b2a:	9a 01       	movw	r18, r20
    2b2c:	44 27       	eor	r20, r20
    2b2e:	37 fd       	sbrc	r19, 7
    2b30:	40 95       	com	r20
    2b32:	54 2f       	mov	r21, r20
    2b34:	22 2a       	or	r2, r18
    2b36:	33 2a       	or	r3, r19
    2b38:	44 2a       	or	r4, r20
    2b3a:	55 2a       	or	r5, r21
    2b3c:	14 c0       	rjmp	.+40     	; 0x2b66 <CameraControl_DeviceInfo_CopyArray+0xee>
		else if (distance<64) iMSB |= (1<<(distance-32));
    2b3e:	20 34       	cpi	r18, 0x40	; 64
    2b40:	31 05       	cpc	r19, r1
    2b42:	88 f4       	brcc	.+34     	; 0x2b66 <CameraControl_DeviceInfo_CopyArray+0xee>
    2b44:	20 52       	subi	r18, 0x20	; 32
    2b46:	30 40       	sbci	r19, 0x00	; 0
    2b48:	f4 01       	movw	r30, r8
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <CameraControl_DeviceInfo_CopyArray+0xd8>
    2b4c:	ee 0f       	add	r30, r30
    2b4e:	ff 1f       	adc	r31, r31
    2b50:	2a 95       	dec	r18
    2b52:	e2 f7       	brpl	.-8      	; 0x2b4c <CameraControl_DeviceInfo_CopyArray+0xd4>
    2b54:	9f 01       	movw	r18, r30
    2b56:	44 27       	eor	r20, r20
    2b58:	37 fd       	sbrc	r19, 7
    2b5a:	40 95       	com	r20
    2b5c:	54 2f       	mov	r21, r20
    2b5e:	a2 2a       	or	r10, r18
    2b60:	b3 2a       	or	r11, r19
    2b62:	c4 2a       	or	r12, r20
    2b64:	d5 2a       	or	r13, r21
	uint32_t arrayLength = *(uint32_t*)(*pp);
	(*pp)+=4; (*count)-=4;

	*dest = 0;

	for ( ; arrayLength>0; arrayLength--, (*pp)+=elSize, (*count)-=elSize )
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	a1 09       	sbc	r26, r1
    2b6a:	b1 09       	sbc	r27, r1
    2b6c:	9b 01       	movw	r18, r22
    2b6e:	26 0d       	add	r18, r6
    2b70:	37 1d       	adc	r19, r7
    2b72:	f7 01       	movw	r30, r14
    2b74:	31 83       	std	Z+1, r19	; 0x01
    2b76:	20 83       	st	Z, r18
    2b78:	e9 81       	ldd	r30, Y+1	; 0x01
    2b7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b7c:	20 81       	ld	r18, Z
    2b7e:	31 81       	ldd	r19, Z+1	; 0x01
    2b80:	26 19       	sub	r18, r6
    2b82:	37 09       	sbc	r19, r7
    2b84:	31 83       	std	Z+1, r19	; 0x01
    2b86:	20 83       	st	Z, r18
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	a1 05       	cpc	r26, r1
    2b8c:	b1 05       	cpc	r27, r1
    2b8e:	09 f0       	breq	.+2      	; 0x2b92 <CameraControl_DeviceInfo_CopyArray+0x11a>
    2b90:	b8 cf       	rjmp	.-144    	; 0x2b02 <CameraControl_DeviceInfo_CopyArray+0x8a>

		if (distance<32) iLSB |= (1<<(distance));
		else if (distance<64) iMSB |= (1<<(distance-32));
	}

	*dest = (uint64_t)(iLSB)|((uint64_t)(iMSB)<<32);
    2b92:	95 01       	movw	r18, r10
    2b94:	a6 01       	movw	r20, r12
    2b96:	60 e0       	ldi	r22, 0x00	; 0
    2b98:	70 e0       	ldi	r23, 0x00	; 0
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	00 e2       	ldi	r16, 0x20	; 32
    2ba0:	0e 94 8b 08 	call	0x1116	; 0x1116 <__ashldi3>
    2ba4:	82 2e       	mov	r8, r18
    2ba6:	63 2e       	mov	r6, r19
    2ba8:	da 01       	movw	r26, r20
    2baa:	92 01       	movw	r18, r4
    2bac:	81 01       	movw	r16, r2
    2bae:	82 28       	or	r8, r2
    2bb0:	eb 81       	ldd	r30, Y+3	; 0x03
    2bb2:	fc 81       	ldd	r31, Y+4	; 0x04
    2bb4:	80 82       	st	Z, r8
    2bb6:	61 2a       	or	r6, r17
    2bb8:	61 82       	std	Z+1, r6	; 0x01
    2bba:	a2 2b       	or	r26, r18
    2bbc:	a2 83       	std	Z+2, r26	; 0x02
    2bbe:	b3 2b       	or	r27, r19
    2bc0:	b3 83       	std	Z+3, r27	; 0x03
    2bc2:	64 83       	std	Z+4, r22	; 0x04
    2bc4:	75 83       	std	Z+5, r23	; 0x05
    2bc6:	86 83       	std	Z+6, r24	; 0x06
    2bc8:	97 83       	std	Z+7, r25	; 0x07

	return (arrayLength == 0);
}
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	0f 90       	pop	r0
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	cf 91       	pop	r28
    2bd6:	df 91       	pop	r29
    2bd8:	1f 91       	pop	r17
    2bda:	0f 91       	pop	r16
    2bdc:	ff 90       	pop	r15
    2bde:	ef 90       	pop	r14
    2be0:	df 90       	pop	r13
    2be2:	cf 90       	pop	r12
    2be4:	bf 90       	pop	r11
    2be6:	af 90       	pop	r10
    2be8:	9f 90       	pop	r9
    2bea:	8f 90       	pop	r8
    2bec:	7f 90       	pop	r7
    2bee:	6f 90       	pop	r6
    2bf0:	5f 90       	pop	r5
    2bf2:	4f 90       	pop	r4
    2bf4:	3f 90       	pop	r3
    2bf6:	2f 90       	pop	r2
    2bf8:	08 95       	ret

00002bfa <CameraControl_DeviceInfo_Parse>:

/*------------------------------------------------------------------------------
 * CameraControl_DeviceInfo_Parse
 */
void CameraControl_DeviceInfo_Parse(uint16_t len, uint8_t *pbuf)
{
    2bfa:	0f 93       	push	r16
    2bfc:	1f 93       	push	r17
    2bfe:	df 93       	push	r29
    2c00:	cf 93       	push	r28
    2c02:	00 d0       	rcall	.+0      	; 0x2c04 <CameraControl_DeviceInfo_Parse+0xa>
    2c04:	00 d0       	rcall	.+0      	; 0x2c06 <CameraControl_DeviceInfo_Parse+0xc>
    2c06:	cd b7       	in	r28, 0x3d	; 61
    2c08:	de b7       	in	r29, 0x3e	; 62
    2c0a:	fb 01       	movw	r30, r22
	uint16_t	count	= (uint16_t)len;
    2c0c:	9a 83       	std	Y+2, r25	; 0x02
    2c0e:	89 83       	std	Y+1, r24	; 0x01
	uint8_t		*p		= (uint8_t*)pbuf;
    2c10:	7c 83       	std	Y+4, r23	; 0x04
    2c12:	6b 83       	std	Y+3, r22	; 0x03

	switch (g_nStage)
    2c14:	20 91 bb 01 	lds	r18, 0x01BB
    2c18:	25 30       	cpi	r18, 0x05	; 5
    2c1a:	09 f4       	brne	.+2      	; 0x2c1e <CameraControl_DeviceInfo_Parse+0x24>
    2c1c:	8f c0       	rjmp	.+286    	; 0x2d3c <CameraControl_DeviceInfo_Parse+0x142>
    2c1e:	26 30       	cpi	r18, 0x06	; 6
    2c20:	90 f4       	brcc	.+36     	; 0x2c46 <CameraControl_DeviceInfo_Parse+0x4c>
    2c22:	22 30       	cpi	r18, 0x02	; 2
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <CameraControl_DeviceInfo_Parse+0x2e>
    2c26:	56 c0       	rjmp	.+172    	; 0x2cd4 <CameraControl_DeviceInfo_Parse+0xda>
    2c28:	23 30       	cpi	r18, 0x03	; 3
    2c2a:	30 f4       	brcc	.+12     	; 0x2c38 <CameraControl_DeviceInfo_Parse+0x3e>
    2c2c:	22 23       	and	r18, r18
    2c2e:	09 f1       	breq	.+66     	; 0x2c72 <CameraControl_DeviceInfo_Parse+0x78>
    2c30:	21 30       	cpi	r18, 0x01	; 1
    2c32:	09 f0       	breq	.+2      	; 0x2c36 <CameraControl_DeviceInfo_Parse+0x3c>
    2c34:	e8 c0       	rjmp	.+464    	; 0x2e06 <CameraControl_DeviceInfo_Parse+0x20c>
    2c36:	40 c0       	rjmp	.+128    	; 0x2cb8 <CameraControl_DeviceInfo_Parse+0xbe>
    2c38:	23 30       	cpi	r18, 0x03	; 3
    2c3a:	09 f4       	brne	.+2      	; 0x2c3e <CameraControl_DeviceInfo_Parse+0x44>
    2c3c:	5f c0       	rjmp	.+190    	; 0x2cfc <CameraControl_DeviceInfo_Parse+0x102>
    2c3e:	24 30       	cpi	r18, 0x04	; 4
    2c40:	09 f0       	breq	.+2      	; 0x2c44 <CameraControl_DeviceInfo_Parse+0x4a>
    2c42:	e1 c0       	rjmp	.+450    	; 0x2e06 <CameraControl_DeviceInfo_Parse+0x20c>
    2c44:	6b c0       	rjmp	.+214    	; 0x2d1c <CameraControl_DeviceInfo_Parse+0x122>
    2c46:	28 30       	cpi	r18, 0x08	; 8
    2c48:	09 f4       	brne	.+2      	; 0x2c4c <CameraControl_DeviceInfo_Parse+0x52>
    2c4a:	a8 c0       	rjmp	.+336    	; 0x2d9c <CameraControl_DeviceInfo_Parse+0x1a2>
    2c4c:	29 30       	cpi	r18, 0x09	; 9
    2c4e:	38 f4       	brcc	.+14     	; 0x2c5e <CameraControl_DeviceInfo_Parse+0x64>
    2c50:	26 30       	cpi	r18, 0x06	; 6
    2c52:	09 f4       	brne	.+2      	; 0x2c56 <CameraControl_DeviceInfo_Parse+0x5c>
    2c54:	83 c0       	rjmp	.+262    	; 0x2d5c <CameraControl_DeviceInfo_Parse+0x162>
    2c56:	27 30       	cpi	r18, 0x07	; 7
    2c58:	09 f0       	breq	.+2      	; 0x2c5c <CameraControl_DeviceInfo_Parse+0x62>
    2c5a:	d5 c0       	rjmp	.+426    	; 0x2e06 <CameraControl_DeviceInfo_Parse+0x20c>
    2c5c:	8f c0       	rjmp	.+286    	; 0x2d7c <CameraControl_DeviceInfo_Parse+0x182>
    2c5e:	2a 30       	cpi	r18, 0x0A	; 10
    2c60:	09 f4       	brne	.+2      	; 0x2c64 <CameraControl_DeviceInfo_Parse+0x6a>
    2c62:	b8 c0       	rjmp	.+368    	; 0x2dd4 <CameraControl_DeviceInfo_Parse+0x1da>
    2c64:	2a 30       	cpi	r18, 0x0A	; 10
    2c66:	08 f4       	brcc	.+2      	; 0x2c6a <CameraControl_DeviceInfo_Parse+0x70>
    2c68:	a7 c0       	rjmp	.+334    	; 0x2db8 <CameraControl_DeviceInfo_Parse+0x1be>
    2c6a:	2b 30       	cpi	r18, 0x0B	; 11
    2c6c:	09 f0       	breq	.+2      	; 0x2c70 <CameraControl_DeviceInfo_Parse+0x76>
    2c6e:	cb c0       	rjmp	.+406    	; 0x2e06 <CameraControl_DeviceInfo_Parse+0x20c>
    2c70:	bf c0       	rjmp	.+382    	; 0x2df0 <CameraControl_DeviceInfo_Parse+0x1f6>
	{
	case 0:
		g_stDeviceInfo.iStandardVersion = *(uint16_t*)p;
    2c72:	20 81       	ld	r18, Z
    2c74:	31 81       	ldd	r19, Z+1	; 0x01
    2c76:	30 93 be 01 	sts	0x01BE, r19
    2c7a:	20 93 bd 01 	sts	0x01BD, r18
		p += 2;		count -= 2;

		g_stDeviceInfo.iVendorExtensionID = *((uint32_t*)p);
    2c7e:	22 81       	ldd	r18, Z+2	; 0x02
    2c80:	33 81       	ldd	r19, Z+3	; 0x03
    2c82:	44 81       	ldd	r20, Z+4	; 0x04
    2c84:	55 81       	ldd	r21, Z+5	; 0x05
    2c86:	20 93 bf 01 	sts	0x01BF, r18
    2c8a:	30 93 c0 01 	sts	0x01C0, r19
    2c8e:	40 93 c1 01 	sts	0x01C1, r20
    2c92:	50 93 c2 01 	sts	0x01C2, r21
		p += 4; 	count -= 4;

		g_stDeviceInfo.iVendorExtensionVersion = *((uint16_t*)p);
    2c96:	26 81       	ldd	r18, Z+6	; 0x06
    2c98:	37 81       	ldd	r19, Z+7	; 0x07
    2c9a:	30 93 c4 01 	sts	0x01C4, r19
    2c9e:	20 93 c3 01 	sts	0x01C3, r18
		p += 2;		count -=2;
    2ca2:	38 96       	adiw	r30, 0x08	; 8
    2ca4:	fc 83       	std	Y+4, r31	; 0x04
    2ca6:	eb 83       	std	Y+3, r30	; 0x03
    2ca8:	08 97       	sbiw	r24, 0x08	; 8
    2caa:	9a 83       	std	Y+2, r25	; 0x02
    2cac:	89 83       	std	Y+1, r24	; 0x01

		g_nStage ++;
    2cae:	80 91 bb 01 	lds	r24, 0x01BB
    2cb2:	8f 5f       	subi	r24, 0xFF	; 255
    2cb4:	80 93 bb 01 	sts	0x01BB, r24
	case 1:
		// Vendor Extendion Description
		CameraControl_DeviceInfo_CopyString(&p, &count, 
    2cb8:	ce 01       	movw	r24, r28
    2cba:	03 96       	adiw	r24, 0x03	; 3
    2cbc:	be 01       	movw	r22, r28
    2cbe:	6f 5f       	subi	r22, 0xFF	; 255
    2cc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc2:	45 ec       	ldi	r20, 0xC5	; 197
    2cc4:	51 e0       	ldi	r21, 0x01	; 1
    2cc6:	24 e1       	ldi	r18, 0x14	; 20
    2cc8:	7e de       	rcall	.-772    	; 0x29c6 <CameraControl_DeviceInfo_CopyString>
											g_stDeviceInfo.sVendorExtensionDescription, 
											DEVINFO_MAX_STRING_SIZE);
		g_nStage ++;
    2cca:	80 91 bb 01 	lds	r24, 0x01BB
    2cce:	8f 5f       	subi	r24, 0xFF	; 255
    2cd0:	80 93 bb 01 	sts	0x01BB, r24
	case 2:
		// Function Mode
		g_stDeviceInfo.iFunctionMode = *((uint16_t*)p);
    2cd4:	eb 81       	ldd	r30, Y+3	; 0x03
    2cd6:	fc 81       	ldd	r31, Y+4	; 0x04
    2cd8:	81 91       	ld	r24, Z+
    2cda:	91 91       	ld	r25, Z+
    2cdc:	90 93 da 01 	sts	0x01DA, r25
    2ce0:	80 93 d9 01 	sts	0x01D9, r24
		p += 2;		count -=2;
    2ce4:	fc 83       	std	Y+4, r31	; 0x04
    2ce6:	eb 83       	std	Y+3, r30	; 0x03
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	9a 81       	ldd	r25, Y+2	; 0x02
    2cec:	02 97       	sbiw	r24, 0x02	; 2
    2cee:	9a 83       	std	Y+2, r25	; 0x02
    2cf0:	89 83       	std	Y+1, r24	; 0x01
		g_nStage ++;
    2cf2:	80 91 bb 01 	lds	r24, 0x01BB
    2cf6:	8f 5f       	subi	r24, 0xFF	; 255
    2cf8:	80 93 bb 01 	sts	0x01BB, r24
	case 3:
		// Operations Supported
		CameraControl_DeviceInfo_CopyArray(&p, &count, 2, &g_stDeviceInfo.iOperationsSupported, OPERATION_SUPPORT_BASE);
    2cfc:	ce 01       	movw	r24, r28
    2cfe:	03 96       	adiw	r24, 0x03	; 3
    2d00:	be 01       	movw	r22, r28
    2d02:	6f 5f       	subi	r22, 0xFF	; 255
    2d04:	7f 4f       	sbci	r23, 0xFF	; 255
    2d06:	42 e0       	ldi	r20, 0x02	; 2
    2d08:	2b ed       	ldi	r18, 0xDB	; 219
    2d0a:	31 e0       	ldi	r19, 0x01	; 1
    2d0c:	00 e0       	ldi	r16, 0x00	; 0
    2d0e:	10 e1       	ldi	r17, 0x10	; 16
    2d10:	b3 de       	rcall	.-666    	; 0x2a78 <CameraControl_DeviceInfo_CopyArray>
		g_nStage ++;
    2d12:	80 91 bb 01 	lds	r24, 0x01BB
    2d16:	8f 5f       	subi	r24, 0xFF	; 255
    2d18:	80 93 bb 01 	sts	0x01BB, r24
	case 4:
		// Events Supported
		CameraControl_DeviceInfo_CopyArray(&p, &count, 2, &g_stDeviceInfo.iEventsSupported, EVENT_SUPPORT_BASE);
    2d1c:	ce 01       	movw	r24, r28
    2d1e:	03 96       	adiw	r24, 0x03	; 3
    2d20:	be 01       	movw	r22, r28
    2d22:	6f 5f       	subi	r22, 0xFF	; 255
    2d24:	7f 4f       	sbci	r23, 0xFF	; 255
    2d26:	42 e0       	ldi	r20, 0x02	; 2
    2d28:	23 ee       	ldi	r18, 0xE3	; 227
    2d2a:	31 e0       	ldi	r19, 0x01	; 1
    2d2c:	00 e0       	ldi	r16, 0x00	; 0
    2d2e:	10 e4       	ldi	r17, 0x40	; 64
    2d30:	a3 de       	rcall	.-698    	; 0x2a78 <CameraControl_DeviceInfo_CopyArray>
		g_nStage ++;
    2d32:	80 91 bb 01 	lds	r24, 0x01BB
    2d36:	8f 5f       	subi	r24, 0xFF	; 255
    2d38:	80 93 bb 01 	sts	0x01BB, r24
	case 5:
		// Device Properties Supported
		CameraControl_DeviceInfo_CopyArray(&p, &count, 2, &g_stDeviceInfo.iPropertiesSupported, PROPERTY_SUPPORT_BASE);
    2d3c:	ce 01       	movw	r24, r28
    2d3e:	03 96       	adiw	r24, 0x03	; 3
    2d40:	be 01       	movw	r22, r28
    2d42:	6f 5f       	subi	r22, 0xFF	; 255
    2d44:	7f 4f       	sbci	r23, 0xFF	; 255
    2d46:	42 e0       	ldi	r20, 0x02	; 2
    2d48:	2b ee       	ldi	r18, 0xEB	; 235
    2d4a:	31 e0       	ldi	r19, 0x01	; 1
    2d4c:	00 e0       	ldi	r16, 0x00	; 0
    2d4e:	10 e5       	ldi	r17, 0x50	; 80
    2d50:	93 de       	rcall	.-730    	; 0x2a78 <CameraControl_DeviceInfo_CopyArray>
		g_nStage ++;
    2d52:	80 91 bb 01 	lds	r24, 0x01BB
    2d56:	8f 5f       	subi	r24, 0xFF	; 255
    2d58:	80 93 bb 01 	sts	0x01BB, r24
	case 6:
		// Capture formats
		CameraControl_DeviceInfo_CopyArray(&p, &count, 2, &g_stDeviceInfo.iCaptureFormatsSupported, CAP_FORMAT_SUPPORT_BASE);
    2d5c:	ce 01       	movw	r24, r28
    2d5e:	03 96       	adiw	r24, 0x03	; 3
    2d60:	be 01       	movw	r22, r28
    2d62:	6f 5f       	subi	r22, 0xFF	; 255
    2d64:	7f 4f       	sbci	r23, 0xFF	; 255
    2d66:	42 e0       	ldi	r20, 0x02	; 2
    2d68:	23 ef       	ldi	r18, 0xF3	; 243
    2d6a:	31 e0       	ldi	r19, 0x01	; 1
    2d6c:	00 e0       	ldi	r16, 0x00	; 0
    2d6e:	10 e3       	ldi	r17, 0x30	; 48
    2d70:	83 de       	rcall	.-762    	; 0x2a78 <CameraControl_DeviceInfo_CopyArray>
		g_nStage ++;
    2d72:	80 91 bb 01 	lds	r24, 0x01BB
    2d76:	8f 5f       	subi	r24, 0xFF	; 255
    2d78:	80 93 bb 01 	sts	0x01BB, r24
	case 7:
		// Image Formats
		CameraControl_DeviceInfo_CopyArray(&p, &count, 2, &g_stDeviceInfo.iImageFormatsSupported, IM_FORMAT_SUPPORT_BASE);
    2d7c:	ce 01       	movw	r24, r28
    2d7e:	03 96       	adiw	r24, 0x03	; 3
    2d80:	be 01       	movw	r22, r28
    2d82:	6f 5f       	subi	r22, 0xFF	; 255
    2d84:	7f 4f       	sbci	r23, 0xFF	; 255
    2d86:	42 e0       	ldi	r20, 0x02	; 2
    2d88:	2b ef       	ldi	r18, 0xFB	; 251
    2d8a:	31 e0       	ldi	r19, 0x01	; 1
    2d8c:	00 e0       	ldi	r16, 0x00	; 0
    2d8e:	18 e3       	ldi	r17, 0x38	; 56
    2d90:	73 de       	rcall	.-794    	; 0x2a78 <CameraControl_DeviceInfo_CopyArray>
		g_nStage ++;
    2d92:	80 91 bb 01 	lds	r24, 0x01BB
    2d96:	8f 5f       	subi	r24, 0xFF	; 255
    2d98:	80 93 bb 01 	sts	0x01BB, r24
	case 8:
		// Manufacturer
		CameraControl_DeviceInfo_CopyString(&p, &count, 
    2d9c:	ce 01       	movw	r24, r28
    2d9e:	03 96       	adiw	r24, 0x03	; 3
    2da0:	be 01       	movw	r22, r28
    2da2:	6f 5f       	subi	r22, 0xFF	; 255
    2da4:	7f 4f       	sbci	r23, 0xFF	; 255
    2da6:	43 e0       	ldi	r20, 0x03	; 3
    2da8:	52 e0       	ldi	r21, 0x02	; 2
    2daa:	24 e1       	ldi	r18, 0x14	; 20
    2dac:	0c de       	rcall	.-1000   	; 0x29c6 <CameraControl_DeviceInfo_CopyString>
											g_stDeviceInfo.sManufacturer, 
											DEVINFO_MAX_STRING_SIZE);
		g_nStage ++;
    2dae:	80 91 bb 01 	lds	r24, 0x01BB
    2db2:	8f 5f       	subi	r24, 0xFF	; 255
    2db4:	80 93 bb 01 	sts	0x01BB, r24
	case 9:
		// Model
		CameraControl_DeviceInfo_CopyString(&p, &count, 
    2db8:	ce 01       	movw	r24, r28
    2dba:	03 96       	adiw	r24, 0x03	; 3
    2dbc:	be 01       	movw	r22, r28
    2dbe:	6f 5f       	subi	r22, 0xFF	; 255
    2dc0:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc2:	47 e1       	ldi	r20, 0x17	; 23
    2dc4:	52 e0       	ldi	r21, 0x02	; 2
    2dc6:	24 e1       	ldi	r18, 0x14	; 20
    2dc8:	fe dd       	rcall	.-1028   	; 0x29c6 <CameraControl_DeviceInfo_CopyString>
											g_stDeviceInfo.Model, 
											DEVINFO_MAX_STRING_SIZE);
		g_nStage ++;
    2dca:	80 91 bb 01 	lds	r24, 0x01BB
    2dce:	8f 5f       	subi	r24, 0xFF	; 255
    2dd0:	80 93 bb 01 	sts	0x01BB, r24
	case 10:
		// Device version
		CameraControl_DeviceInfo_CopyString(&p, &count, 
    2dd4:	ce 01       	movw	r24, r28
    2dd6:	03 96       	adiw	r24, 0x03	; 3
    2dd8:	be 01       	movw	r22, r28
    2dda:	6f 5f       	subi	r22, 0xFF	; 255
    2ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dde:	4b e2       	ldi	r20, 0x2B	; 43
    2de0:	52 e0       	ldi	r21, 0x02	; 2
    2de2:	24 e1       	ldi	r18, 0x14	; 20
    2de4:	f0 dd       	rcall	.-1056   	; 0x29c6 <CameraControl_DeviceInfo_CopyString>
											g_stDeviceInfo.DeviceVersion, 
											DEVINFO_MAX_STRING_SIZE);
		g_nStage ++;
    2de6:	80 91 bb 01 	lds	r24, 0x01BB
    2dea:	8f 5f       	subi	r24, 0xFF	; 255
    2dec:	80 93 bb 01 	sts	0x01BB, r24
	case 11:
		// Serial number
		CameraControl_DeviceInfo_CopyString(&p, &count, 
    2df0:	ce 01       	movw	r24, r28
    2df2:	03 96       	adiw	r24, 0x03	; 3
    2df4:	be 01       	movw	r22, r28
    2df6:	6f 5f       	subi	r22, 0xFF	; 255
    2df8:	7f 4f       	sbci	r23, 0xFF	; 255
    2dfa:	4f e3       	ldi	r20, 0x3F	; 63
    2dfc:	52 e0       	ldi	r21, 0x02	; 2
    2dfe:	24 e1       	ldi	r18, 0x14	; 20
    2e00:	e2 dd       	rcall	.-1084   	; 0x29c6 <CameraControl_DeviceInfo_CopyString>
											g_stDeviceInfo.SerialNumber, 
											DEVINFO_MAX_STRING_SIZE);
		g_nStage = 0;
    2e02:	10 92 bb 01 	sts	0x01BB, r1
	}
}
    2e06:	0f 90       	pop	r0
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	1f 91       	pop	r17
    2e14:	0f 91       	pop	r16
    2e16:	08 95       	ret

00002e18 <CameraControl_DeviceInfo_GetInfo>:

/*------------------------------------------------------------------------------
 * CameraControl_DeviceInfo_GetInfo
 */
uint8_t CameraControl_DeviceInfo_GetInfo ( USB_ClassInfo_SI_Host_t* SIInterfaceInfo )
{
    2e18:	8f 92       	push	r8
    2e1a:	9f 92       	push	r9
    2e1c:	af 92       	push	r10
    2e1e:	bf 92       	push	r11
    2e20:	cf 92       	push	r12
    2e22:	df 92       	push	r13
    2e24:	ef 92       	push	r14
    2e26:	ff 92       	push	r15
    2e28:	0f 93       	push	r16
    2e2a:	1f 93       	push	r17
    2e2c:	df 93       	push	r29
    2e2e:	cf 93       	push	r28
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62
    2e34:	68 97       	sbiw	r28, 0x18	; 24
    2e36:	0f b6       	in	r0, 0x3f	; 63
    2e38:	f8 94       	cli
    2e3a:	de bf       	out	0x3e, r29	; 62
    2e3c:	0f be       	out	0x3f, r0	; 63
    2e3e:	cd bf       	out	0x3d, r28	; 61
    2e40:	7c 01       	movw	r14, r24

	g_iDataIsValid = 1;
	
	// Receive the final response block from the device 
	return CameraControl_GetResponseAndCheck (SIInterfaceInfo, &PIMABlock);
}
    2e42:	8d b6       	in	r8, 0x3d	; 61
    2e44:	9e b6       	in	r9, 0x3e	; 62
uint8_t CameraControl_DeviceInfo_GetInfo ( USB_ClassInfo_SI_Host_t* SIInterfaceInfo )
{
	uint16_t DeviceInfoSize;
	uint8_t ErrorCode;

	CHECK_CAMERA_CONNECTION;
    2e46:	80 91 63 03 	lds	r24, 0x0363
    2e4a:	8b 30       	cpi	r24, 0x0B	; 11
    2e4c:	21 f4       	brne	.+8      	; 0x2e56 <CameraControl_DeviceInfo_GetInfo+0x3e>
    2e4e:	f7 01       	movw	r30, r14
    2e50:	86 81       	ldd	r24, Z+6	; 0x06
    2e52:	88 23       	and	r24, r24
    2e54:	69 f4       	brne	.+26     	; 0x2e70 <CameraControl_DeviceInfo_GetInfo+0x58>
    2e56:	00 d0       	rcall	.+0      	; 0x2e58 <CameraControl_DeviceInfo_GetInfo+0x40>
    2e58:	86 ed       	ldi	r24, 0xD6	; 214
    2e5a:	9a e0       	ldi	r25, 0x0A	; 10
    2e5c:	ed b7       	in	r30, 0x3d	; 61
    2e5e:	fe b7       	in	r31, 0x3e	; 62
    2e60:	92 83       	std	Z+2, r25	; 0x02
    2e62:	81 83       	std	Z+1, r24	; 0x01
    2e64:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    2e68:	0f 90       	pop	r0
    2e6a:	0f 90       	pop	r0
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	57 c0       	rjmp	.+174    	; 0x2f1e <CameraControl_DeviceInfo_GetInfo+0x106>

	SIInterfaceInfo->State.TransactionID = 0;
    2e70:	f7 01       	movw	r30, r14
    2e72:	17 86       	std	Z+15, r1	; 0x0f
    2e74:	10 8a       	std	Z+16, r1	; 0x10
    2e76:	11 8a       	std	Z+17, r1	; 0x11
    2e78:	12 8a       	std	Z+18, r1	; 0x12

	// Create PIMA message block
	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    2e7a:	6e 01       	movw	r12, r28
    2e7c:	08 94       	sec
    2e7e:	c1 1c       	adc	r12, r1
    2e80:	d1 1c       	adc	r13, r1
    2e82:	88 e1       	ldi	r24, 0x18	; 24
    2e84:	f6 01       	movw	r30, r12
    2e86:	11 92       	st	Z+, r1
    2e88:	8a 95       	dec	r24
    2e8a:	e9 f7       	brne	.-6      	; 0x2e86 <CameraControl_DeviceInfo_GetInfo+0x6e>
    2e8c:	8c e0       	ldi	r24, 0x0C	; 12
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	a0 e0       	ldi	r26, 0x00	; 0
    2e92:	b0 e0       	ldi	r27, 0x00	; 0
    2e94:	89 83       	std	Y+1, r24	; 0x01
    2e96:	9a 83       	std	Y+2, r25	; 0x02
    2e98:	ab 83       	std	Y+3, r26	; 0x03
    2e9a:	bc 83       	std	Y+4, r27	; 0x04
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	9e 83       	std	Y+6, r25	; 0x06
    2ea2:	8d 83       	std	Y+5, r24	; 0x05
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	90 e1       	ldi	r25, 0x10	; 16
    2ea8:	98 87       	std	Y+8, r25	; 0x08
    2eaa:	8f 83       	std	Y+7, r24	; 0x07
			.Code          = CPU_TO_LE16(PTP_OC_GetDeviceInfo),
			.TransactionID = CPU_TO_LE32(0x00000000),
			.Params        = {},
		};

	ErrorCode = CameraControl_InitiateTransaction ( SIInterfaceInfo, &PIMABlock );
    2eac:	c7 01       	movw	r24, r14
    2eae:	b6 01       	movw	r22, r12
    2eb0:	ae dc       	rcall	.-1700   	; 0x280e <CameraControl_InitiateTransaction>

	// Get the size (in bytes) of the device info structure
	DeviceInfoSize = (PIMABlock.DataLength - PIMA_COMMAND_SIZE(0));
    2eb2:	09 81       	ldd	r16, Y+1	; 0x01
    2eb4:	1a 81       	ldd	r17, Y+2	; 0x02
    2eb6:	0c 50       	subi	r16, 0x0C	; 12
    2eb8:	10 40       	sbci	r17, 0x00	; 0
	printf_P(PSTR(ESC_FG_CYAN "	Got device info of %d bytes.\r\n" ESC_FG_WHITE), DeviceInfoSize);
    2eba:	00 d0       	rcall	.+0      	; 0x2ebc <CameraControl_DeviceInfo_GetInfo+0xa4>
    2ebc:	00 d0       	rcall	.+0      	; 0x2ebe <CameraControl_DeviceInfo_GetInfo+0xa6>
    2ebe:	8c ea       	ldi	r24, 0xAC	; 172
    2ec0:	9a e0       	ldi	r25, 0x0A	; 10
    2ec2:	ed b7       	in	r30, 0x3d	; 61
    2ec4:	fe b7       	in	r31, 0x3e	; 62
    2ec6:	92 83       	std	Z+2, r25	; 0x02
    2ec8:	81 83       	std	Z+1, r24	; 0x01
    2eca:	14 83       	std	Z+4, r17	; 0x04
    2ecc:	03 83       	std	Z+3, r16	; 0x03
    2ece:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>

	// Create a buffer large enough to hold the entire device info
	uint8_t DeviceInfo[DeviceInfoSize];
    2ed2:	0f 90       	pop	r0
    2ed4:	0f 90       	pop	r0
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	8d b7       	in	r24, 0x3d	; 61
    2edc:	9e b7       	in	r25, 0x3e	; 62
    2ede:	80 1b       	sub	r24, r16
    2ee0:	91 0b       	sbc	r25, r17
    2ee2:	0f b6       	in	r0, 0x3f	; 63
    2ee4:	f8 94       	cli
    2ee6:	9e bf       	out	0x3e, r25	; 62
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	8d bf       	out	0x3d, r24	; 61
    2eec:	ad b6       	in	r10, 0x3d	; 61
    2eee:	be b6       	in	r11, 0x3e	; 62
    2ef0:	08 94       	sec
    2ef2:	a1 1c       	adc	r10, r1
    2ef4:	b1 1c       	adc	r11, r1

	// Read in the data block data (containing device info)
	SI_Host_ReadData(SIInterfaceInfo, DeviceInfo, DeviceInfoSize);
    2ef6:	c7 01       	movw	r24, r14
    2ef8:	b5 01       	movw	r22, r10
    2efa:	a8 01       	movw	r20, r16
    2efc:	32 da       	rcall	.-2972   	; 0x2362 <SI_Host_ReadData>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    2efe:	80 91 a6 00 	lds	r24, 0x00A6
    2f02:	8e 77       	andi	r24, 0x7E	; 126
    2f04:	80 93 a6 00 	sts	0x00A6, r24
	Pipe_ClearIN();

	// Create a pointer for walking through the info dataset 
	uint8_t* DeviceInfoPos = DeviceInfo;

	g_nStage = 0;
    2f08:	10 92 bb 01 	sts	0x01BB, r1
	CameraControl_DeviceInfo_Parse(DeviceInfoSize, DeviceInfoPos);
    2f0c:	c8 01       	movw	r24, r16
    2f0e:	b5 01       	movw	r22, r10
    2f10:	74 de       	rcall	.-792    	; 0x2bfa <CameraControl_DeviceInfo_Parse>

	g_iDataIsValid = 1;
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	80 93 bc 01 	sts	0x01BC, r24
	
	// Receive the final response block from the device 
	return CameraControl_GetResponseAndCheck (SIInterfaceInfo, &PIMABlock);
    2f18:	c7 01       	movw	r24, r14
    2f1a:	b6 01       	movw	r22, r12
    2f1c:	43 dc       	rcall	.-1914   	; 0x27a4 <CameraControl_GetResponseAndCheck>
}
    2f1e:	0f b6       	in	r0, 0x3f	; 63
    2f20:	f8 94       	cli
    2f22:	9e be       	out	0x3e, r9	; 62
    2f24:	0f be       	out	0x3f, r0	; 63
    2f26:	8d be       	out	0x3d, r8	; 61
    2f28:	68 96       	adiw	r28, 0x18	; 24
    2f2a:	0f b6       	in	r0, 0x3f	; 63
    2f2c:	f8 94       	cli
    2f2e:	de bf       	out	0x3e, r29	; 62
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	cd bf       	out	0x3d, r28	; 61
    2f34:	cf 91       	pop	r28
    2f36:	df 91       	pop	r29
    2f38:	1f 91       	pop	r17
    2f3a:	0f 91       	pop	r16
    2f3c:	ff 90       	pop	r15
    2f3e:	ef 90       	pop	r14
    2f40:	df 90       	pop	r13
    2f42:	cf 90       	pop	r12
    2f44:	bf 90       	pop	r11
    2f46:	af 90       	pop	r10
    2f48:	9f 90       	pop	r9
    2f4a:	8f 90       	pop	r8
    2f4c:	08 95       	ret

00002f4e <CameraControl_DeviceInfo_Printout>:

/*------------------------------------------------------------------------------
 * CameraControl_DeviceInfo_Printout
 */
uint8_t CameraControl_DeviceInfo_Printout ( USB_ClassInfo_SI_Host_t* SIInterfaceInfo )
{
    2f4e:	8f 92       	push	r8
    2f50:	9f 92       	push	r9
    2f52:	af 92       	push	r10
    2f54:	bf 92       	push	r11
    2f56:	cf 92       	push	r12
    2f58:	df 92       	push	r13
    2f5a:	ef 92       	push	r14
    2f5c:	ff 92       	push	r15
    2f5e:	0f 93       	push	r16
    2f60:	1f 93       	push	r17
    2f62:	cf 93       	push	r28
    2f64:	df 93       	push	r29
	uint8_t 	errorCode = 0;

	CHECK_CAMERA_CONNECTION;
    2f66:	20 91 63 03 	lds	r18, 0x0363
    2f6a:	2b 30       	cpi	r18, 0x0B	; 11
    2f6c:	21 f4       	brne	.+8      	; 0x2f76 <CameraControl_DeviceInfo_Printout+0x28>
    2f6e:	fc 01       	movw	r30, r24
    2f70:	26 81       	ldd	r18, Z+6	; 0x06
    2f72:	22 23       	and	r18, r18
    2f74:	61 f4       	brne	.+24     	; 0x2f8e <CameraControl_DeviceInfo_Printout+0x40>
    2f76:	00 d0       	rcall	.+0      	; 0x2f78 <CameraControl_DeviceInfo_Printout+0x2a>
    2f78:	84 e9       	ldi	r24, 0x94	; 148
    2f7a:	9a e0       	ldi	r25, 0x0A	; 10
    2f7c:	ed b7       	in	r30, 0x3d	; 61
    2f7e:	fe b7       	in	r31, 0x3e	; 62
    2f80:	92 83       	std	Z+2, r25	; 0x02
    2f82:	81 83       	std	Z+1, r24	; 0x01
    2f84:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    2f88:	0f 90       	pop	r0
    2f8a:	0f 90       	pop	r0
    2f8c:	f2 c1       	rjmp	.+996    	; 0x3372 <CameraControl_DeviceInfo_Printout+0x424>

	if ( !g_iDataIsValid )
    2f8e:	20 91 bc 01 	lds	r18, 0x01BC
    2f92:	22 23       	and	r18, r18
    2f94:	81 f4       	brne	.+32     	; 0x2fb6 <CameraControl_DeviceInfo_Printout+0x68>
	{
		errorCode = CameraControl_DeviceInfo_GetInfo ( SIInterfaceInfo );
    2f96:	40 df       	rcall	.-384    	; 0x2e18 <CameraControl_DeviceInfo_GetInfo>
    2f98:	18 2f       	mov	r17, r24
		if (PIPE_RWSTREAM_NoError != errorCode )
    2f9a:	88 23       	and	r24, r24
    2f9c:	61 f0       	breq	.+24     	; 0x2fb6 <CameraControl_DeviceInfo_Printout+0x68>
		{
			printf_P(PSTR("Error reading device info\r\n"));
    2f9e:	00 d0       	rcall	.+0      	; 0x2fa0 <CameraControl_DeviceInfo_Printout+0x52>
    2fa0:	28 e7       	ldi	r18, 0x78	; 120
    2fa2:	3a e0       	ldi	r19, 0x0A	; 10
    2fa4:	ed b7       	in	r30, 0x3d	; 61
    2fa6:	fe b7       	in	r31, 0x3e	; 62
    2fa8:	32 83       	std	Z+2, r19	; 0x02
    2faa:	21 83       	std	Z+1, r18	; 0x01
    2fac:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
			return errorCode;	
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	df c1       	rjmp	.+958    	; 0x3374 <CameraControl_DeviceInfo_Printout+0x426>
		}
	}

	printf_P(PSTR("Std.Ver.:\t%d\r\n"), g_stDeviceInfo.iStandardVersion);
    2fb6:	00 d0       	rcall	.+0      	; 0x2fb8 <CameraControl_DeviceInfo_Printout+0x6a>
    2fb8:	00 d0       	rcall	.+0      	; 0x2fba <CameraControl_DeviceInfo_Printout+0x6c>
    2fba:	89 e6       	ldi	r24, 0x69	; 105
    2fbc:	9a e0       	ldi	r25, 0x0A	; 10
    2fbe:	ed b7       	in	r30, 0x3d	; 61
    2fc0:	fe b7       	in	r31, 0x3e	; 62
    2fc2:	92 83       	std	Z+2, r25	; 0x02
    2fc4:	81 83       	std	Z+1, r24	; 0x01
    2fc6:	80 91 bd 01 	lds	r24, 0x01BD
    2fca:	90 91 be 01 	lds	r25, 0x01BE
    2fce:	94 83       	std	Z+4, r25	; 0x04
    2fd0:	83 83       	std	Z+3, r24	; 0x03
    2fd2:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
	printf_P(PSTR("Vend.Ext.ID.:\t%d\r\n"), g_stDeviceInfo.iVendorExtensionID);
    2fd6:	00 d0       	rcall	.+0      	; 0x2fd8 <CameraControl_DeviceInfo_Printout+0x8a>
    2fd8:	86 e5       	ldi	r24, 0x56	; 86
    2fda:	9a e0       	ldi	r25, 0x0A	; 10
    2fdc:	ed b7       	in	r30, 0x3d	; 61
    2fde:	fe b7       	in	r31, 0x3e	; 62
    2fe0:	92 83       	std	Z+2, r25	; 0x02
    2fe2:	81 83       	std	Z+1, r24	; 0x01
    2fe4:	80 91 bf 01 	lds	r24, 0x01BF
    2fe8:	90 91 c0 01 	lds	r25, 0x01C0
    2fec:	a0 91 c1 01 	lds	r26, 0x01C1
    2ff0:	b0 91 c2 01 	lds	r27, 0x01C2
    2ff4:	83 83       	std	Z+3, r24	; 0x03
    2ff6:	94 83       	std	Z+4, r25	; 0x04
    2ff8:	a5 83       	std	Z+5, r26	; 0x05
    2ffa:	b6 83       	std	Z+6, r27	; 0x06
    2ffc:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
	printf_P(PSTR("Vend.Ext.Ver.:\t%d\r\n"), g_stDeviceInfo.iVendorExtensionVersion);
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	82 e4       	ldi	r24, 0x42	; 66
    3006:	9a e0       	ldi	r25, 0x0A	; 10
    3008:	ed b7       	in	r30, 0x3d	; 61
    300a:	fe b7       	in	r31, 0x3e	; 62
    300c:	92 83       	std	Z+2, r25	; 0x02
    300e:	81 83       	std	Z+1, r24	; 0x01
    3010:	80 91 c3 01 	lds	r24, 0x01C3
    3014:	90 91 c4 01 	lds	r25, 0x01C4
    3018:	94 83       	std	Z+4, r25	; 0x04
    301a:	83 83       	std	Z+3, r24	; 0x03
    301c:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
	printf_P(PSTR("\r\nVend.Ext.Desc.:\t%s\r\n"), g_stDeviceInfo.sVendorExtensionDescription);
    3020:	8b e2       	ldi	r24, 0x2B	; 43
    3022:	9a e0       	ldi	r25, 0x0A	; 10
    3024:	ed b7       	in	r30, 0x3d	; 61
    3026:	fe b7       	in	r31, 0x3e	; 62
    3028:	92 83       	std	Z+2, r25	; 0x02
    302a:	81 83       	std	Z+1, r24	; 0x01
    302c:	85 ec       	ldi	r24, 0xC5	; 197
    302e:	91 e0       	ldi	r25, 0x01	; 1
    3030:	94 83       	std	Z+4, r25	; 0x04
    3032:	83 83       	std	Z+3, r24	; 0x03
    3034:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
	printf_P(PSTR("Func.Mode:\t%d\r\n"), g_stDeviceInfo.iFunctionMode);
    3038:	8b e1       	ldi	r24, 0x1B	; 27
    303a:	9a e0       	ldi	r25, 0x0A	; 10
    303c:	ed b7       	in	r30, 0x3d	; 61
    303e:	fe b7       	in	r31, 0x3e	; 62
    3040:	92 83       	std	Z+2, r25	; 0x02
    3042:	81 83       	std	Z+1, r24	; 0x01
    3044:	80 91 d9 01 	lds	r24, 0x01D9
    3048:	90 91 da 01 	lds	r25, 0x01DA
    304c:	94 83       	std	Z+4, r25	; 0x04
    304e:	83 83       	std	Z+3, r24	; 0x03
    3050:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
	
	PRINT_CAPS(g_stDeviceInfo.iOperationsSupported,"\r\nOperations supported:\r\n",OPERATION_SUPPORT_BASE);
    3054:	a0 90 db 01 	lds	r10, 0x01DB
    3058:	b0 90 dc 01 	lds	r11, 0x01DC
    305c:	c0 90 dd 01 	lds	r12, 0x01DD
    3060:	d0 90 de 01 	lds	r13, 0x01DE
    3064:	e0 90 df 01 	lds	r14, 0x01DF
    3068:	f0 90 e0 01 	lds	r15, 0x01E0
    306c:	00 91 e1 01 	lds	r16, 0x01E1
    3070:	10 91 e2 01 	lds	r17, 0x01E2
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	9a e0       	ldi	r25, 0x0A	; 10
    307c:	ed b7       	in	r30, 0x3d	; 61
    307e:	fe b7       	in	r31, 0x3e	; 62
    3080:	92 83       	std	Z+2, r25	; 0x02
    3082:	81 83       	std	Z+1, r24	; 0x01
    3084:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	c0 e0       	ldi	r28, 0x00	; 0
    308e:	d0 e1       	ldi	r29, 0x10	; 16
    3090:	e3 ef       	ldi	r30, 0xF3	; 243
    3092:	8e 2e       	mov	r8, r30
    3094:	e9 e0       	ldi	r30, 0x09	; 9
    3096:	9e 2e       	mov	r9, r30
    3098:	c5 01       	movw	r24, r10
    309a:	81 70       	andi	r24, 0x01	; 1
    309c:	90 70       	andi	r25, 0x00	; 0
    309e:	00 97       	sbiw	r24, 0x00	; 0
    30a0:	71 f0       	breq	.+28     	; 0x30be <CameraControl_DeviceInfo_Printout+0x170>
    30a2:	00 d0       	rcall	.+0      	; 0x30a4 <CameraControl_DeviceInfo_Printout+0x156>
    30a4:	00 d0       	rcall	.+0      	; 0x30a6 <CameraControl_DeviceInfo_Printout+0x158>
    30a6:	ed b7       	in	r30, 0x3d	; 61
    30a8:	fe b7       	in	r31, 0x3e	; 62
    30aa:	92 82       	std	Z+2, r9	; 0x02
    30ac:	81 82       	std	Z+1, r8	; 0x01
    30ae:	d4 83       	std	Z+4, r29	; 0x04
    30b0:	c3 83       	std	Z+3, r28	; 0x03
    30b2:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    30b6:	0f 90       	pop	r0
    30b8:	0f 90       	pop	r0
    30ba:	0f 90       	pop	r0
    30bc:	0f 90       	pop	r0
    30be:	21 96       	adiw	r28, 0x01	; 1
    30c0:	f0 e1       	ldi	r31, 0x10	; 16
    30c2:	c0 34       	cpi	r28, 0x40	; 64
    30c4:	df 07       	cpc	r29, r31
    30c6:	61 f0       	breq	.+24     	; 0x30e0 <CameraControl_DeviceInfo_Printout+0x192>
    30c8:	95 01       	movw	r18, r10
    30ca:	a6 01       	movw	r20, r12
    30cc:	b7 01       	movw	r22, r14
    30ce:	c8 01       	movw	r24, r16
    30d0:	01 e0       	ldi	r16, 0x01	; 1
    30d2:	0e 94 1a 08 	call	0x1034	; 0x1034 <__lshrdi3>
    30d6:	59 01       	movw	r10, r18
    30d8:	6a 01       	movw	r12, r20
    30da:	7b 01       	movw	r14, r22
    30dc:	8c 01       	movw	r16, r24
    30de:	dc cf       	rjmp	.-72     	; 0x3098 <CameraControl_DeviceInfo_Printout+0x14a>
	PRINT_CAPS(g_stDeviceInfo.iEventsSupported,"\r\nEvents supported:\r\n",EVENT_SUPPORT_BASE);
    30e0:	a0 90 e3 01 	lds	r10, 0x01E3
    30e4:	b0 90 e4 01 	lds	r11, 0x01E4
    30e8:	c0 90 e5 01 	lds	r12, 0x01E5
    30ec:	d0 90 e6 01 	lds	r13, 0x01E6
    30f0:	e0 90 e7 01 	lds	r14, 0x01E7
    30f4:	f0 90 e8 01 	lds	r15, 0x01E8
    30f8:	00 91 e9 01 	lds	r16, 0x01E9
    30fc:	10 91 ea 01 	lds	r17, 0x01EA
    3100:	00 d0       	rcall	.+0      	; 0x3102 <CameraControl_DeviceInfo_Printout+0x1b4>
    3102:	8d ed       	ldi	r24, 0xDD	; 221
    3104:	99 e0       	ldi	r25, 0x09	; 9
    3106:	ed b7       	in	r30, 0x3d	; 61
    3108:	fe b7       	in	r31, 0x3e	; 62
    310a:	92 83       	std	Z+2, r25	; 0x02
    310c:	81 83       	std	Z+1, r24	; 0x01
    310e:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    3112:	0f 90       	pop	r0
    3114:	0f 90       	pop	r0
    3116:	c0 e0       	ldi	r28, 0x00	; 0
    3118:	d0 e4       	ldi	r29, 0x40	; 64
    311a:	7f ec       	ldi	r23, 0xCF	; 207
    311c:	87 2e       	mov	r8, r23
    311e:	79 e0       	ldi	r23, 0x09	; 9
    3120:	97 2e       	mov	r9, r23
    3122:	c5 01       	movw	r24, r10
    3124:	81 70       	andi	r24, 0x01	; 1
    3126:	90 70       	andi	r25, 0x00	; 0
    3128:	00 97       	sbiw	r24, 0x00	; 0
    312a:	71 f0       	breq	.+28     	; 0x3148 <CameraControl_DeviceInfo_Printout+0x1fa>
    312c:	00 d0       	rcall	.+0      	; 0x312e <CameraControl_DeviceInfo_Printout+0x1e0>
    312e:	00 d0       	rcall	.+0      	; 0x3130 <CameraControl_DeviceInfo_Printout+0x1e2>
    3130:	ed b7       	in	r30, 0x3d	; 61
    3132:	fe b7       	in	r31, 0x3e	; 62
    3134:	92 82       	std	Z+2, r9	; 0x02
    3136:	81 82       	std	Z+1, r8	; 0x01
    3138:	d4 83       	std	Z+4, r29	; 0x04
    313a:	c3 83       	std	Z+3, r28	; 0x03
    313c:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    3140:	0f 90       	pop	r0
    3142:	0f 90       	pop	r0
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	21 96       	adiw	r28, 0x01	; 1
    314a:	f0 e4       	ldi	r31, 0x40	; 64
    314c:	c0 34       	cpi	r28, 0x40	; 64
    314e:	df 07       	cpc	r29, r31
    3150:	61 f0       	breq	.+24     	; 0x316a <CameraControl_DeviceInfo_Printout+0x21c>
    3152:	95 01       	movw	r18, r10
    3154:	a6 01       	movw	r20, r12
    3156:	b7 01       	movw	r22, r14
    3158:	c8 01       	movw	r24, r16
    315a:	01 e0       	ldi	r16, 0x01	; 1
    315c:	0e 94 1a 08 	call	0x1034	; 0x1034 <__lshrdi3>
    3160:	59 01       	movw	r10, r18
    3162:	6a 01       	movw	r12, r20
    3164:	7b 01       	movw	r14, r22
    3166:	8c 01       	movw	r16, r24
    3168:	dc cf       	rjmp	.-72     	; 0x3122 <CameraControl_DeviceInfo_Printout+0x1d4>
	PRINT_CAPS(g_stDeviceInfo.iPropertiesSupported,"\r\nDevice properties supported:\r\n",PROPERTY_SUPPORT_BASE);
    316a:	a0 90 eb 01 	lds	r10, 0x01EB
    316e:	b0 90 ec 01 	lds	r11, 0x01EC
    3172:	c0 90 ed 01 	lds	r12, 0x01ED
    3176:	d0 90 ee 01 	lds	r13, 0x01EE
    317a:	e0 90 ef 01 	lds	r14, 0x01EF
    317e:	f0 90 f0 01 	lds	r15, 0x01F0
    3182:	00 91 f1 01 	lds	r16, 0x01F1
    3186:	10 91 f2 01 	lds	r17, 0x01F2
    318a:	00 d0       	rcall	.+0      	; 0x318c <CameraControl_DeviceInfo_Printout+0x23e>
    318c:	8e ea       	ldi	r24, 0xAE	; 174
    318e:	99 e0       	ldi	r25, 0x09	; 9
    3190:	ed b7       	in	r30, 0x3d	; 61
    3192:	fe b7       	in	r31, 0x3e	; 62
    3194:	92 83       	std	Z+2, r25	; 0x02
    3196:	81 83       	std	Z+1, r24	; 0x01
    3198:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    319c:	0f 90       	pop	r0
    319e:	0f 90       	pop	r0
    31a0:	c0 e0       	ldi	r28, 0x00	; 0
    31a2:	d0 e5       	ldi	r29, 0x50	; 80
    31a4:	60 ea       	ldi	r22, 0xA0	; 160
    31a6:	86 2e       	mov	r8, r22
    31a8:	69 e0       	ldi	r22, 0x09	; 9
    31aa:	96 2e       	mov	r9, r22
    31ac:	c5 01       	movw	r24, r10
    31ae:	81 70       	andi	r24, 0x01	; 1
    31b0:	90 70       	andi	r25, 0x00	; 0
    31b2:	00 97       	sbiw	r24, 0x00	; 0
    31b4:	71 f0       	breq	.+28     	; 0x31d2 <CameraControl_DeviceInfo_Printout+0x284>
    31b6:	00 d0       	rcall	.+0      	; 0x31b8 <CameraControl_DeviceInfo_Printout+0x26a>
    31b8:	00 d0       	rcall	.+0      	; 0x31ba <CameraControl_DeviceInfo_Printout+0x26c>
    31ba:	ed b7       	in	r30, 0x3d	; 61
    31bc:	fe b7       	in	r31, 0x3e	; 62
    31be:	92 82       	std	Z+2, r9	; 0x02
    31c0:	81 82       	std	Z+1, r8	; 0x01
    31c2:	d4 83       	std	Z+4, r29	; 0x04
    31c4:	c3 83       	std	Z+3, r28	; 0x03
    31c6:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    31ca:	0f 90       	pop	r0
    31cc:	0f 90       	pop	r0
    31ce:	0f 90       	pop	r0
    31d0:	0f 90       	pop	r0
    31d2:	21 96       	adiw	r28, 0x01	; 1
    31d4:	f0 e5       	ldi	r31, 0x50	; 80
    31d6:	c0 34       	cpi	r28, 0x40	; 64
    31d8:	df 07       	cpc	r29, r31
    31da:	61 f0       	breq	.+24     	; 0x31f4 <CameraControl_DeviceInfo_Printout+0x2a6>
    31dc:	95 01       	movw	r18, r10
    31de:	a6 01       	movw	r20, r12
    31e0:	b7 01       	movw	r22, r14
    31e2:	c8 01       	movw	r24, r16
    31e4:	01 e0       	ldi	r16, 0x01	; 1
    31e6:	0e 94 1a 08 	call	0x1034	; 0x1034 <__lshrdi3>
    31ea:	59 01       	movw	r10, r18
    31ec:	6a 01       	movw	r12, r20
    31ee:	7b 01       	movw	r14, r22
    31f0:	8c 01       	movw	r16, r24
    31f2:	dc cf       	rjmp	.-72     	; 0x31ac <CameraControl_DeviceInfo_Printout+0x25e>
	PRINT_CAPS(g_stDeviceInfo.iCaptureFormatsSupported,"\r\nCapture formats:\r\n",CAP_FORMAT_SUPPORT_BASE);
    31f4:	a0 90 f3 01 	lds	r10, 0x01F3
    31f8:	b0 90 f4 01 	lds	r11, 0x01F4
    31fc:	c0 90 f5 01 	lds	r12, 0x01F5
    3200:	d0 90 f6 01 	lds	r13, 0x01F6
    3204:	e0 90 f7 01 	lds	r14, 0x01F7
    3208:	f0 90 f8 01 	lds	r15, 0x01F8
    320c:	00 91 f9 01 	lds	r16, 0x01F9
    3210:	10 91 fa 01 	lds	r17, 0x01FA
    3214:	00 d0       	rcall	.+0      	; 0x3216 <CameraControl_DeviceInfo_Printout+0x2c8>
    3216:	8b e8       	ldi	r24, 0x8B	; 139
    3218:	99 e0       	ldi	r25, 0x09	; 9
    321a:	ed b7       	in	r30, 0x3d	; 61
    321c:	fe b7       	in	r31, 0x3e	; 62
    321e:	92 83       	std	Z+2, r25	; 0x02
    3220:	81 83       	std	Z+1, r24	; 0x01
    3222:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    3226:	0f 90       	pop	r0
    3228:	0f 90       	pop	r0
    322a:	c0 e0       	ldi	r28, 0x00	; 0
    322c:	d0 e3       	ldi	r29, 0x30	; 48
    322e:	5d e7       	ldi	r21, 0x7D	; 125
    3230:	85 2e       	mov	r8, r21
    3232:	59 e0       	ldi	r21, 0x09	; 9
    3234:	95 2e       	mov	r9, r21
    3236:	c5 01       	movw	r24, r10
    3238:	81 70       	andi	r24, 0x01	; 1
    323a:	90 70       	andi	r25, 0x00	; 0
    323c:	00 97       	sbiw	r24, 0x00	; 0
    323e:	71 f0       	breq	.+28     	; 0x325c <CameraControl_DeviceInfo_Printout+0x30e>
    3240:	00 d0       	rcall	.+0      	; 0x3242 <CameraControl_DeviceInfo_Printout+0x2f4>
    3242:	00 d0       	rcall	.+0      	; 0x3244 <CameraControl_DeviceInfo_Printout+0x2f6>
    3244:	ed b7       	in	r30, 0x3d	; 61
    3246:	fe b7       	in	r31, 0x3e	; 62
    3248:	92 82       	std	Z+2, r9	; 0x02
    324a:	81 82       	std	Z+1, r8	; 0x01
    324c:	d4 83       	std	Z+4, r29	; 0x04
    324e:	c3 83       	std	Z+3, r28	; 0x03
    3250:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    3254:	0f 90       	pop	r0
    3256:	0f 90       	pop	r0
    3258:	0f 90       	pop	r0
    325a:	0f 90       	pop	r0
    325c:	21 96       	adiw	r28, 0x01	; 1
    325e:	f0 e3       	ldi	r31, 0x30	; 48
    3260:	c0 34       	cpi	r28, 0x40	; 64
    3262:	df 07       	cpc	r29, r31
    3264:	61 f0       	breq	.+24     	; 0x327e <CameraControl_DeviceInfo_Printout+0x330>
    3266:	95 01       	movw	r18, r10
    3268:	a6 01       	movw	r20, r12
    326a:	b7 01       	movw	r22, r14
    326c:	c8 01       	movw	r24, r16
    326e:	01 e0       	ldi	r16, 0x01	; 1
    3270:	0e 94 1a 08 	call	0x1034	; 0x1034 <__lshrdi3>
    3274:	59 01       	movw	r10, r18
    3276:	6a 01       	movw	r12, r20
    3278:	7b 01       	movw	r14, r22
    327a:	8c 01       	movw	r16, r24
    327c:	dc cf       	rjmp	.-72     	; 0x3236 <CameraControl_DeviceInfo_Printout+0x2e8>
	PRINT_CAPS(g_stDeviceInfo.iImageFormatsSupported,"\r\nImage Formats:\r\n",IM_FORMAT_SUPPORT_BASE);
    327e:	a0 90 fb 01 	lds	r10, 0x01FB
    3282:	b0 90 fc 01 	lds	r11, 0x01FC
    3286:	c0 90 fd 01 	lds	r12, 0x01FD
    328a:	d0 90 fe 01 	lds	r13, 0x01FE
    328e:	e0 90 ff 01 	lds	r14, 0x01FF
    3292:	f0 90 00 02 	lds	r15, 0x0200
    3296:	00 91 01 02 	lds	r16, 0x0201
    329a:	10 91 02 02 	lds	r17, 0x0202
    329e:	00 d0       	rcall	.+0      	; 0x32a0 <CameraControl_DeviceInfo_Printout+0x352>
    32a0:	8a e6       	ldi	r24, 0x6A	; 106
    32a2:	99 e0       	ldi	r25, 0x09	; 9
    32a4:	ed b7       	in	r30, 0x3d	; 61
    32a6:	fe b7       	in	r31, 0x3e	; 62
    32a8:	92 83       	std	Z+2, r25	; 0x02
    32aa:	81 83       	std	Z+1, r24	; 0x01
    32ac:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    32b0:	0f 90       	pop	r0
    32b2:	0f 90       	pop	r0
    32b4:	c0 e0       	ldi	r28, 0x00	; 0
    32b6:	d8 e3       	ldi	r29, 0x38	; 56
    32b8:	4c e5       	ldi	r20, 0x5C	; 92
    32ba:	84 2e       	mov	r8, r20
    32bc:	49 e0       	ldi	r20, 0x09	; 9
    32be:	94 2e       	mov	r9, r20
    32c0:	c5 01       	movw	r24, r10
    32c2:	81 70       	andi	r24, 0x01	; 1
    32c4:	90 70       	andi	r25, 0x00	; 0
    32c6:	00 97       	sbiw	r24, 0x00	; 0
    32c8:	71 f0       	breq	.+28     	; 0x32e6 <CameraControl_DeviceInfo_Printout+0x398>
    32ca:	00 d0       	rcall	.+0      	; 0x32cc <CameraControl_DeviceInfo_Printout+0x37e>
    32cc:	00 d0       	rcall	.+0      	; 0x32ce <CameraControl_DeviceInfo_Printout+0x380>
    32ce:	ed b7       	in	r30, 0x3d	; 61
    32d0:	fe b7       	in	r31, 0x3e	; 62
    32d2:	92 82       	std	Z+2, r9	; 0x02
    32d4:	81 82       	std	Z+1, r8	; 0x01
    32d6:	d4 83       	std	Z+4, r29	; 0x04
    32d8:	c3 83       	std	Z+3, r28	; 0x03
    32da:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    32de:	0f 90       	pop	r0
    32e0:	0f 90       	pop	r0
    32e2:	0f 90       	pop	r0
    32e4:	0f 90       	pop	r0
    32e6:	21 96       	adiw	r28, 0x01	; 1
    32e8:	f8 e3       	ldi	r31, 0x38	; 56
    32ea:	c0 34       	cpi	r28, 0x40	; 64
    32ec:	df 07       	cpc	r29, r31
    32ee:	61 f0       	breq	.+24     	; 0x3308 <CameraControl_DeviceInfo_Printout+0x3ba>
    32f0:	95 01       	movw	r18, r10
    32f2:	a6 01       	movw	r20, r12
    32f4:	b7 01       	movw	r22, r14
    32f6:	c8 01       	movw	r24, r16
    32f8:	01 e0       	ldi	r16, 0x01	; 1
    32fa:	0e 94 1a 08 	call	0x1034	; 0x1034 <__lshrdi3>
    32fe:	59 01       	movw	r10, r18
    3300:	6a 01       	movw	r12, r20
    3302:	7b 01       	movw	r14, r22
    3304:	8c 01       	movw	r16, r24
    3306:	dc cf       	rjmp	.-72     	; 0x32c0 <CameraControl_DeviceInfo_Printout+0x372>

	printf_P(PSTR("\r\nManufacturer:\t%s\r\n"), g_stDeviceInfo.sManufacturer);
    3308:	00 d0       	rcall	.+0      	; 0x330a <CameraControl_DeviceInfo_Printout+0x3bc>
    330a:	00 d0       	rcall	.+0      	; 0x330c <CameraControl_DeviceInfo_Printout+0x3be>
    330c:	87 e4       	ldi	r24, 0x47	; 71
    330e:	99 e0       	ldi	r25, 0x09	; 9
    3310:	ed b7       	in	r30, 0x3d	; 61
    3312:	fe b7       	in	r31, 0x3e	; 62
    3314:	92 83       	std	Z+2, r25	; 0x02
    3316:	81 83       	std	Z+1, r24	; 0x01
    3318:	c3 e0       	ldi	r28, 0x03	; 3
    331a:	d2 e0       	ldi	r29, 0x02	; 2
    331c:	d4 83       	std	Z+4, r29	; 0x04
    331e:	c3 83       	std	Z+3, r28	; 0x03
    3320:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
	printf_P(PSTR("Model:\t\t%s\r\n"), g_stDeviceInfo.Model);
    3324:	8a e3       	ldi	r24, 0x3A	; 58
    3326:	99 e0       	ldi	r25, 0x09	; 9
    3328:	ed b7       	in	r30, 0x3d	; 61
    332a:	fe b7       	in	r31, 0x3e	; 62
    332c:	92 83       	std	Z+2, r25	; 0x02
    332e:	81 83       	std	Z+1, r24	; 0x01
    3330:	ce 01       	movw	r24, r28
    3332:	44 96       	adiw	r24, 0x14	; 20
    3334:	94 83       	std	Z+4, r25	; 0x04
    3336:	83 83       	std	Z+3, r24	; 0x03
    3338:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
	printf_P(PSTR("Device ver.:\t%s\r\n"), g_stDeviceInfo.DeviceVersion);
    333c:	88 e2       	ldi	r24, 0x28	; 40
    333e:	99 e0       	ldi	r25, 0x09	; 9
    3340:	ed b7       	in	r30, 0x3d	; 61
    3342:	fe b7       	in	r31, 0x3e	; 62
    3344:	92 83       	std	Z+2, r25	; 0x02
    3346:	81 83       	std	Z+1, r24	; 0x01
    3348:	ce 01       	movw	r24, r28
    334a:	88 96       	adiw	r24, 0x28	; 40
    334c:	94 83       	std	Z+4, r25	; 0x04
    334e:	83 83       	std	Z+3, r24	; 0x03
    3350:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
	printf_P(PSTR("Serial Num.:\t%s\r\n"), g_stDeviceInfo.SerialNumber);
    3354:	86 e1       	ldi	r24, 0x16	; 22
    3356:	99 e0       	ldi	r25, 0x09	; 9
    3358:	ed b7       	in	r30, 0x3d	; 61
    335a:	fe b7       	in	r31, 0x3e	; 62
    335c:	92 83       	std	Z+2, r25	; 0x02
    335e:	81 83       	std	Z+1, r24	; 0x01
    3360:	ec 96       	adiw	r28, 0x3c	; 60
    3362:	d4 83       	std	Z+4, r29	; 0x04
    3364:	c3 83       	std	Z+3, r28	; 0x03
    3366:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>

	return 0;
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	0f 90       	pop	r0
    3372:	10 e0       	ldi	r17, 0x00	; 0
}
    3374:	81 2f       	mov	r24, r17
    3376:	df 91       	pop	r29
    3378:	cf 91       	pop	r28
    337a:	1f 91       	pop	r17
    337c:	0f 91       	pop	r16
    337e:	ff 90       	pop	r15
    3380:	ef 90       	pop	r14
    3382:	df 90       	pop	r13
    3384:	cf 90       	pop	r12
    3386:	bf 90       	pop	r11
    3388:	af 90       	pop	r10
    338a:	9f 90       	pop	r9
    338c:	8f 90       	pop	r8
    338e:	08 95       	ret

00003390 <CameraControl_GetStorageIDs>:

/*------------------------------------------------------------------------------
 * CameraControl_GetStorageIDs
 */
uint8_t CameraControl_GetStorageIDs ( USB_ClassInfo_SI_Host_t* SIInterfaceInfo )
{
    3390:	af 92       	push	r10
    3392:	bf 92       	push	r11
    3394:	cf 92       	push	r12
    3396:	df 92       	push	r13
    3398:	ef 92       	push	r14
    339a:	ff 92       	push	r15
    339c:	0f 93       	push	r16
    339e:	1f 93       	push	r17
    33a0:	df 93       	push	r29
    33a2:	cf 93       	push	r28
    33a4:	cd b7       	in	r28, 0x3d	; 61
    33a6:	de b7       	in	r29, 0x3e	; 62
    33a8:	68 97       	sbiw	r28, 0x18	; 24
    33aa:	0f b6       	in	r0, 0x3f	; 63
    33ac:	f8 94       	cli
    33ae:	de bf       	out	0x3e, r29	; 62
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	cd bf       	out	0x3d, r28	; 61
    33b4:	7c 01       	movw	r14, r24
		g_aiStorageIDs[iIDNum++]=*StorageInfoPos++;
	}

	// Receive the final response block from the device 
	return CameraControl_GetResponseAndCheck (SIInterfaceInfo, &PIMABlock);
}
    33b6:	ad b6       	in	r10, 0x3d	; 61
    33b8:	be b6       	in	r11, 0x3e	; 62
	uint16_t ArrayLength;
	uint8_t ErrorCode;
	uint8_t	iCount = 0;
	uint8_t iIDNum = 0;

	CHECK_CAMERA_CONNECTION;
    33ba:	80 91 63 03 	lds	r24, 0x0363
    33be:	8b 30       	cpi	r24, 0x0B	; 11
    33c0:	21 f4       	brne	.+8      	; 0x33ca <CameraControl_GetStorageIDs+0x3a>
    33c2:	f7 01       	movw	r30, r14
    33c4:	86 81       	ldd	r24, Z+6	; 0x06
    33c6:	88 23       	and	r24, r24
    33c8:	69 f4       	brne	.+26     	; 0x33e4 <CameraControl_GetStorageIDs+0x54>
    33ca:	00 d0       	rcall	.+0      	; 0x33cc <CameraControl_GetStorageIDs+0x3c>
    33cc:	82 ee       	ldi	r24, 0xE2	; 226
    33ce:	9c e0       	ldi	r25, 0x0C	; 12
    33d0:	ed b7       	in	r30, 0x3d	; 61
    33d2:	fe b7       	in	r31, 0x3e	; 62
    33d4:	92 83       	std	Z+2, r25	; 0x02
    33d6:	81 83       	std	Z+1, r24	; 0x01
    33d8:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>
    33dc:	0f 90       	pop	r0
    33de:	0f 90       	pop	r0
    33e0:	80 e0       	ldi	r24, 0x00	; 0
    33e2:	76 c0       	rjmp	.+236    	; 0x34d0 <CameraControl_GetStorageIDs+0x140>
	
	// Create PIMA message block
	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    33e4:	be 01       	movw	r22, r28
    33e6:	6f 5f       	subi	r22, 0xFF	; 255
    33e8:	7f 4f       	sbci	r23, 0xFF	; 255
    33ea:	88 e1       	ldi	r24, 0x18	; 24
    33ec:	fb 01       	movw	r30, r22
    33ee:	11 92       	st	Z+, r1
    33f0:	8a 95       	dec	r24
    33f2:	e9 f7       	brne	.-6      	; 0x33ee <CameraControl_GetStorageIDs+0x5e>
    33f4:	8c e0       	ldi	r24, 0x0C	; 12
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	a0 e0       	ldi	r26, 0x00	; 0
    33fa:	b0 e0       	ldi	r27, 0x00	; 0
    33fc:	89 83       	std	Y+1, r24	; 0x01
    33fe:	9a 83       	std	Y+2, r25	; 0x02
    3400:	ab 83       	std	Y+3, r26	; 0x03
    3402:	bc 83       	std	Y+4, r27	; 0x04
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	9e 83       	std	Y+6, r25	; 0x06
    340a:	8d 83       	std	Y+5, r24	; 0x05
    340c:	84 e0       	ldi	r24, 0x04	; 4
    340e:	90 e1       	ldi	r25, 0x10	; 16
    3410:	98 87       	std	Y+8, r25	; 0x08
    3412:	8f 83       	std	Y+7, r24	; 0x07
			.Params        = {},
		};


	// Send the command and get response
	ErrorCode = CameraControl_InitiateTransaction ( SIInterfaceInfo, &PIMABlock );
    3414:	c7 01       	movw	r24, r14
    3416:	fb d9       	rcall	.-3082   	; 0x280e <CameraControl_InitiateTransaction>
	if ( ErrorCode != PIPE_RWSTREAM_NoError ) return ErrorCode;
    3418:	88 23       	and	r24, r24
    341a:	09 f0       	breq	.+2      	; 0x341e <CameraControl_GetStorageIDs+0x8e>
    341c:	59 c0       	rjmp	.+178    	; 0x34d0 <CameraControl_GetStorageIDs+0x140>

	// Get the size (in bytes) of the device info structure
	ArrayLength = (PIMABlock.DataLength - PIMA_COMMAND_SIZE(0));
    341e:	09 81       	ldd	r16, Y+1	; 0x01
    3420:	1a 81       	ldd	r17, Y+2	; 0x02
    3422:	0c 50       	subi	r16, 0x0C	; 12
    3424:	10 40       	sbci	r17, 0x00	; 0
	printf_P(PSTR(ESC_FG_CYAN "	Got storage IDs of %d bytes.\r\n" ESC_FG_WHITE), ArrayLength);
    3426:	00 d0       	rcall	.+0      	; 0x3428 <CameraControl_GetStorageIDs+0x98>
    3428:	00 d0       	rcall	.+0      	; 0x342a <CameraControl_GetStorageIDs+0x9a>
    342a:	88 eb       	ldi	r24, 0xB8	; 184
    342c:	9c e0       	ldi	r25, 0x0C	; 12
    342e:	ed b7       	in	r30, 0x3d	; 61
    3430:	fe b7       	in	r31, 0x3e	; 62
    3432:	92 83       	std	Z+2, r25	; 0x02
    3434:	81 83       	std	Z+1, r24	; 0x01
    3436:	14 83       	std	Z+4, r17	; 0x04
    3438:	03 83       	std	Z+3, r16	; 0x03
    343a:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <printf_P>

	// Create a buffer large enough to hold the entire Storage IDs list
	uint8_t StorageIDs[ArrayLength];
    343e:	0f 90       	pop	r0
    3440:	0f 90       	pop	r0
    3442:	0f 90       	pop	r0
    3444:	0f 90       	pop	r0
    3446:	8d b7       	in	r24, 0x3d	; 61
    3448:	9e b7       	in	r25, 0x3e	; 62
    344a:	80 1b       	sub	r24, r16
    344c:	91 0b       	sbc	r25, r17
    344e:	0f b6       	in	r0, 0x3f	; 63
    3450:	f8 94       	cli
    3452:	9e bf       	out	0x3e, r25	; 62
    3454:	0f be       	out	0x3f, r0	; 63
    3456:	8d bf       	out	0x3d, r24	; 61
    3458:	cd b6       	in	r12, 0x3d	; 61
    345a:	de b6       	in	r13, 0x3e	; 62
    345c:	08 94       	sec
    345e:	c1 1c       	adc	r12, r1
    3460:	d1 1c       	adc	r13, r1

	// Read in the data block data (containing device info)
	SI_Host_ReadData(SIInterfaceInfo, StorageIDs, ArrayLength);
    3462:	c7 01       	movw	r24, r14
    3464:	b6 01       	movw	r22, r12
    3466:	a8 01       	movw	r20, r16
    3468:	0e 94 b1 11 	call	0x2362	; 0x2362 <SI_Host_ReadData>
    346c:	80 91 a6 00 	lds	r24, 0x00A6
    3470:	8e 77       	andi	r24, 0x7E	; 126
    3472:	80 93 a6 00 	sts	0x00A6, r24

	// Once all the data has been read, the pipe must be cleared before the response can be sent
	Pipe_ClearIN();

	// Create a pointer for walking through the info dataset 
	uint32_t* StorageInfoPos = (uint32_t*)((void*)(StorageIDs));
    3476:	f6 01       	movw	r30, r12

	g_iNumOfStorages = *StorageInfoPos++;
    3478:	80 81       	ld	r24, Z
    347a:	80 93 53 02 	sts	0x0253, r24
    347e:	86 01       	movw	r16, r12
    3480:	0c 5f       	subi	r16, 0xFC	; 252
    3482:	1f 4f       	sbci	r17, 0xFF	; 255
	iCount = (g_iNumOfStorages>MAX_NUM_STORAGES)?MAX_NUM_STORAGES:g_iNumOfStorages;
    3484:	80 91 53 02 	lds	r24, 0x0253
    3488:	85 30       	cpi	r24, 0x05	; 5
    348a:	18 f4       	brcc	.+6      	; 0x3492 <CameraControl_GetStorageIDs+0x102>
    348c:	60 91 53 02 	lds	r22, 0x0253
    3490:	01 c0       	rjmp	.+2      	; 0x3494 <CameraControl_GetStorageIDs+0x104>
    3492:	64 e0       	ldi	r22, 0x04	; 4
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	14 c0       	rjmp	.+40     	; 0x34c2 <CameraControl_GetStorageIDs+0x132>
	iIDNum = 0;

	while (iCount--)
	{
		g_aiStorageIDs[iIDNum++]=*StorageInfoPos++;
    349a:	f8 01       	movw	r30, r16
    349c:	81 91       	ld	r24, Z+
    349e:	91 91       	ld	r25, Z+
    34a0:	a1 91       	ld	r26, Z+
    34a2:	b1 91       	ld	r27, Z+
    34a4:	8f 01       	movw	r16, r30
    34a6:	a9 01       	movw	r20, r18
    34a8:	44 0f       	add	r20, r20
    34aa:	55 1f       	adc	r21, r21
    34ac:	44 0f       	add	r20, r20
    34ae:	55 1f       	adc	r21, r21
    34b0:	4e 58       	subi	r20, 0x8E	; 142
    34b2:	5c 4f       	sbci	r21, 0xFC	; 252
    34b4:	fa 01       	movw	r30, r20
    34b6:	80 83       	st	Z, r24
    34b8:	91 83       	std	Z+1, r25	; 0x01
    34ba:	a2 83       	std	Z+2, r26	; 0x02
    34bc:	b3 83       	std	Z+3, r27	; 0x03
    34be:	2f 5f       	subi	r18, 0xFF	; 255
    34c0:	3f 4f       	sbci	r19, 0xFF	; 255

	g_iNumOfStorages = *StorageInfoPos++;
	iCount = (g_iNumOfStorages>MAX_NUM_STORAGES)?MAX_NUM_STORAGES:g_iNumOfStorages;
	iIDNum = 0;

	while (iCount--)
    34c2:	61 50       	subi	r22, 0x01	; 1
    34c4:	50 f7       	brcc	.-44     	; 0x349a <CameraControl_GetStorageIDs+0x10a>
	{
		g_aiStorageIDs[iIDNum++]=*StorageInfoPos++;
	}

	// Receive the final response block from the device 
	return CameraControl_GetResponseAndCheck (SIInterfaceInfo, &PIMABlock);
    34c6:	c7 01       	movw	r24, r14
    34c8:	be 01       	movw	r22, r28
    34ca:	6f 5f       	subi	r22, 0xFF	; 255
    34cc:	7f 4f       	sbci	r23, 0xFF	; 255
    34ce:	6a d9       	rcall	.-3372   	; 0x27a4 <CameraControl_GetResponseAndCheck>
}
    34d0:	0f b6       	in	r0, 0x3f	; 63
    34d2:	f8 94       	cli
    34d4:	be be       	out	0x3e, r11	; 62
    34d6:	0f be       	out	0x3f, r0	; 63
    34d8:	ad be       	out	0x3d, r10	; 61
    34da:	68 96       	adiw	r28, 0x18	; 24
    34dc:	0f b6       	in	r0, 0x3f	; 63
    34de:	f8 94       	cli
    34e0:	de bf       	out	0x3e, r29	; 62
    34e2:	0f be       	out	0x3f, r0	; 63
    34e4:	cd bf       	out	0x3d, r28	; 61
    34e6:	cf 91       	pop	r28
    34e8:	df 91       	pop	r29
    34ea:	1f 91       	pop	r17
    34ec:	0f 91       	pop	r16
    34ee:	ff 90       	pop	r15
    34f0:	ef 90       	pop	r14
    34f2:	df 90       	pop	r13
    34f4:	cf 90       	pop	r12
    34f6:	bf 90       	pop	r11
    34f8:	af 90       	pop	r10
    34fa:	08 95       	ret

000034fc <CameraControl_GetStorageInfo>:
/*------------------------------------------------------------------------------
 * CameraControl_GetStorageInfo
 */
uint8_t CameraControl_GetStorageInfo ( USB_ClassInfo_SI_Host_t* SIInterfaceInfo, 
									   uint8_t iStorageIndex )
{
    34fc:	af 92       	push	r10
    34fe:	bf 92       	push	r11
    3500:	cf 92       	push	r12
    3502:	df 92       	push	r13
    3504:	ef 92       	push	r14
    3506:	ff 92       	push	r15
    3508:	0f 93       	push	r16
    350a:	1f 93       	push	r17
    350c:	df 93       	push	r29
    350e:	cf 93       	push	r28
    3510:	cd b7       	in	r28, 0x3d	; 61
    3512:	de b7       	in	r29, 0x3e	; 62
    3514:	6a 97       	sbiw	r28, 0x1a	; 26
    3516:	0f b6       	in	r0, 0x3f	; 63
    3518:	f8 94       	cli
    351a:	de bf       	out	0x3e, r29	; 62
    351c:	0f be       	out	0x3f, r0	; 63
    351e:	cd bf       	out	0x3d, r28	; 61
    3520:	6c 01       	movw	r12, r24
	}
	g_astStorageInfo[iStorageIndex].sVolumeLabel[iTemp2] = '\0';

	// Receive the final response block from the device 
	return CameraControl_GetResponseAndCheck (SIInterfaceInfo, &PIMABlock);
}
    3522:	ad b6       	in	r10, 0x3d	; 61
    3524:	be b6       	in	r11, 0x3e	; 62
	uint16_t StorageInfoSize;
	uint8_t ErrorCode;
	uint32_t iStorageID;
	uint8_t iTemp1, iTemp2;

	CHECK_CAMERA_CONNECTION;
    3526:	80 91 63 03 	lds	r24, 0x0363
    352a:	8b 30       	cpi	r24, 0x0B	; 11
    352c:	31 f4       	brne	.+12     	; 0x353a <CameraControl_GetStorageInfo+0x3e>
    352e:	d6 01       	movw	r26, r12
    3530:	16 96       	adiw	r26, 0x06	; 6
    3532:	8c 91       	ld	r24, X
    3534:	16 97       	sbiw	r26, 0x06	; 6
    3536:	88 23       	and	r24, r24
    3538:	61 f4       	brne	.+24     	; 0x3552 <CameraControl_GetStorageInfo+0x56>
    353a:	00 d0       	rcall	.+0      	; 0x353c <CameraControl_GetStorageInfo+0x40>
    353c:	80 ea       	ldi	r24, 0xA0	; 160
    353e:	9c e0       	ldi	r25, 0x0C	; 12
    3540:	ed b7       	in	r30, 0x3d	; 61
    3542:	fe b7       	in	r31, 0x3e	; 62
    3544:	92 83       	std	Z+2, r25	; 0x02
    3546:	81 83       	std	Z+1, r24	; 0x01
    3548:	c5 d7       	rcall	.+3978   	; 0x44d4 <printf_P>
    354a:	0f 90       	pop	r0
    354c:	0f 90       	pop	r0
    354e:	80 e0       	ldi	r24, 0x00	; 0
    3550:	74 c1       	rjmp	.+744    	; 0x383a <CameraControl_GetStorageInfo+0x33e>

	if ( iStorageIndex >= g_iNumOfStorages )
    3552:	80 91 53 02 	lds	r24, 0x0253
    3556:	68 17       	cp	r22, r24
    3558:	f8 f0       	brcs	.+62     	; 0x3598 <CameraControl_GetStorageInfo+0x9c>
	{
		// The index is higher thet the available storage IDs
		printf_P(PSTR("Error getting storage info - storage index %d is bigger then num of storages %d.\r\n"), 
    355a:	20 91 53 02 	lds	r18, 0x0253
    355e:	00 d0       	rcall	.+0      	; 0x3560 <CameraControl_GetStorageInfo+0x64>
    3560:	00 d0       	rcall	.+0      	; 0x3562 <CameraControl_GetStorageInfo+0x66>
    3562:	00 d0       	rcall	.+0      	; 0x3564 <CameraControl_GetStorageInfo+0x68>
    3564:	ed b7       	in	r30, 0x3d	; 61
    3566:	fe b7       	in	r31, 0x3e	; 62
    3568:	31 96       	adiw	r30, 0x01	; 1
    356a:	8d e4       	ldi	r24, 0x4D	; 77
    356c:	9c e0       	ldi	r25, 0x0C	; 12
    356e:	ad b7       	in	r26, 0x3d	; 61
    3570:	be b7       	in	r27, 0x3e	; 62
    3572:	12 96       	adiw	r26, 0x02	; 2
    3574:	9c 93       	st	X, r25
    3576:	8e 93       	st	-X, r24
    3578:	11 97       	sbiw	r26, 0x01	; 1
    357a:	62 83       	std	Z+2, r22	; 0x02
    357c:	13 82       	std	Z+3, r1	; 0x03
    357e:	24 83       	std	Z+4, r18	; 0x04
    3580:	15 82       	std	Z+5, r1	; 0x05
    3582:	a8 d7       	rcall	.+3920   	; 0x44d4 <printf_P>
    3584:	ed b7       	in	r30, 0x3d	; 61
    3586:	fe b7       	in	r31, 0x3e	; 62
    3588:	36 96       	adiw	r30, 0x06	; 6
    358a:	0f b6       	in	r0, 0x3f	; 63
    358c:	f8 94       	cli
    358e:	fe bf       	out	0x3e, r31	; 62
    3590:	0f be       	out	0x3f, r0	; 63
    3592:	ed bf       	out	0x3d, r30	; 61
							iStorageIndex, g_iNumOfStorages);
		return SI_ERROR_LOGICAL_CMD_FAILED;
    3594:	80 e8       	ldi	r24, 0x80	; 128
    3596:	51 c1       	rjmp	.+674    	; 0x383a <CameraControl_GetStorageInfo+0x33e>
	}

	iStorageID = g_aiStorageIDs[iStorageIndex];
    3598:	e6 2e       	mov	r14, r22
    359a:	ff 24       	eor	r15, r15
    359c:	f7 01       	movw	r30, r14
    359e:	ee 0f       	add	r30, r30
    35a0:	ff 1f       	adc	r31, r31
    35a2:	ee 0f       	add	r30, r30
    35a4:	ff 1f       	adc	r31, r31
    35a6:	ee 58       	subi	r30, 0x8E	; 142
    35a8:	fc 4f       	sbci	r31, 0xFC	; 252
    35aa:	80 81       	ld	r24, Z
    35ac:	91 81       	ldd	r25, Z+1	; 0x01
    35ae:	a2 81       	ldd	r26, Z+2	; 0x02
    35b0:	b3 81       	ldd	r27, Z+3	; 0x03

	// Create PIMA message block
	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    35b2:	be 01       	movw	r22, r28
    35b4:	6f 5f       	subi	r22, 0xFF	; 255
    35b6:	7f 4f       	sbci	r23, 0xFF	; 255
    35b8:	28 e1       	ldi	r18, 0x18	; 24
    35ba:	fb 01       	movw	r30, r22
    35bc:	11 92       	st	Z+, r1
    35be:	2a 95       	dec	r18
    35c0:	e9 f7       	brne	.-6      	; 0x35bc <CameraControl_GetStorageInfo+0xc0>
    35c2:	20 e1       	ldi	r18, 0x10	; 16
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	40 e0       	ldi	r20, 0x00	; 0
    35c8:	50 e0       	ldi	r21, 0x00	; 0
    35ca:	29 83       	std	Y+1, r18	; 0x01
    35cc:	3a 83       	std	Y+2, r19	; 0x02
    35ce:	4b 83       	std	Y+3, r20	; 0x03
    35d0:	5c 83       	std	Y+4, r21	; 0x04
    35d2:	21 e0       	ldi	r18, 0x01	; 1
    35d4:	30 e0       	ldi	r19, 0x00	; 0
    35d6:	3e 83       	std	Y+6, r19	; 0x06
    35d8:	2d 83       	std	Y+5, r18	; 0x05
    35da:	25 e0       	ldi	r18, 0x05	; 5
    35dc:	30 e1       	ldi	r19, 0x10	; 16
    35de:	38 87       	std	Y+8, r19	; 0x08
    35e0:	2f 83       	std	Y+7, r18	; 0x07
    35e2:	8d 87       	std	Y+13, r24	; 0x0d
    35e4:	9e 87       	std	Y+14, r25	; 0x0e
    35e6:	af 87       	std	Y+15, r26	; 0x0f
    35e8:	b8 8b       	std	Y+16, r27	; 0x10
			.Code          = CPU_TO_LE16(PTP_OC_GetStorageInfo),
			.Params        = {iStorageID},
		};

	// Send the command and get response
	ErrorCode = CameraControl_InitiateTransaction ( SIInterfaceInfo, &PIMABlock );
    35ea:	c6 01       	movw	r24, r12
    35ec:	10 d9       	rcall	.-3552   	; 0x280e <CameraControl_InitiateTransaction>
	if ( ErrorCode != PIPE_RWSTREAM_NoError ) return ErrorCode;
    35ee:	88 23       	and	r24, r24
    35f0:	09 f0       	breq	.+2      	; 0x35f4 <CameraControl_GetStorageInfo+0xf8>
    35f2:	23 c1       	rjmp	.+582    	; 0x383a <CameraControl_GetStorageInfo+0x33e>

	// Get the size (in bytes) of the device info structure
	StorageInfoSize = (PIMABlock.DataLength - PIMA_COMMAND_SIZE(0));
    35f4:	49 81       	ldd	r20, Y+1	; 0x01
    35f6:	5a 81       	ldd	r21, Y+2	; 0x02
    35f8:	4c 50       	subi	r20, 0x0C	; 12
    35fa:	50 40       	sbci	r21, 0x00	; 0
	printf_P(PSTR(ESC_FG_CYAN "	Got storage info of %d bytes.\r\n" ESC_FG_WHITE), StorageInfoSize);
    35fc:	00 d0       	rcall	.+0      	; 0x35fe <CameraControl_GetStorageInfo+0x102>
    35fe:	00 d0       	rcall	.+0      	; 0x3600 <CameraControl_GetStorageInfo+0x104>
    3600:	82 e2       	ldi	r24, 0x22	; 34
    3602:	9c e0       	ldi	r25, 0x0C	; 12
    3604:	ad b7       	in	r26, 0x3d	; 61
    3606:	be b7       	in	r27, 0x3e	; 62
    3608:	12 96       	adiw	r26, 0x02	; 2
    360a:	9c 93       	st	X, r25
    360c:	8e 93       	st	-X, r24
    360e:	11 97       	sbiw	r26, 0x01	; 1
    3610:	14 96       	adiw	r26, 0x04	; 4
    3612:	5c 93       	st	X, r21
    3614:	4e 93       	st	-X, r20
    3616:	13 97       	sbiw	r26, 0x03	; 3
    3618:	49 8f       	std	Y+25, r20	; 0x19
    361a:	5a 8f       	std	Y+26, r21	; 0x1a
    361c:	5b d7       	rcall	.+3766   	; 0x44d4 <printf_P>

	// Create a buffer large enough to hold the entire device info
	uint8_t StorageInfo[StorageInfoSize];
    361e:	0f 90       	pop	r0
    3620:	0f 90       	pop	r0
    3622:	0f 90       	pop	r0
    3624:	0f 90       	pop	r0
    3626:	49 8d       	ldd	r20, Y+25	; 0x19
    3628:	5a 8d       	ldd	r21, Y+26	; 0x1a
    362a:	ed b7       	in	r30, 0x3d	; 61
    362c:	fe b7       	in	r31, 0x3e	; 62
    362e:	e4 1b       	sub	r30, r20
    3630:	f5 0b       	sbc	r31, r21
    3632:	0f b6       	in	r0, 0x3f	; 63
    3634:	f8 94       	cli
    3636:	fe bf       	out	0x3e, r31	; 62
    3638:	0f be       	out	0x3f, r0	; 63
    363a:	ed bf       	out	0x3d, r30	; 61
    363c:	0d b7       	in	r16, 0x3d	; 61
    363e:	1e b7       	in	r17, 0x3e	; 62
    3640:	0f 5f       	subi	r16, 0xFF	; 255
    3642:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read in the data block data (containing device info)
	SI_Host_ReadData(SIInterfaceInfo, StorageInfo, StorageInfoSize);
    3644:	c6 01       	movw	r24, r12
    3646:	b8 01       	movw	r22, r16
    3648:	0e 94 b1 11 	call	0x2362	; 0x2362 <SI_Host_ReadData>
    364c:	80 91 a6 00 	lds	r24, 0x00A6
    3650:	8e 77       	andi	r24, 0x7E	; 126
    3652:	80 93 a6 00 	sts	0x00A6, r24
	Pipe_ClearIN();

	// Create a pointer for walking through the info dataset 
	uint8_t* DeviceInfoPos = StorageInfo;

	g_astStorageInfo[iStorageIndex].iStorageType 	= *((uint16_t*)(DeviceInfoPos)); DeviceInfoPos+=2;
    3656:	d8 01       	movw	r26, r16
    3658:	8d 91       	ld	r24, X+
    365a:	9c 91       	ld	r25, X
    365c:	11 97       	sbiw	r26, 0x01	; 1
    365e:	2a e3       	ldi	r18, 0x3A	; 58
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	e2 9e       	mul	r14, r18
    3664:	f0 01       	movw	r30, r0
    3666:	e3 9e       	mul	r14, r19
    3668:	f0 0d       	add	r31, r0
    366a:	f2 9e       	mul	r15, r18
    366c:	f0 0d       	add	r31, r0
    366e:	11 24       	eor	r1, r1
    3670:	ee 57       	subi	r30, 0x7E	; 126
    3672:	fc 4f       	sbci	r31, 0xFC	; 252
    3674:	91 83       	std	Z+1, r25	; 0x01
    3676:	80 83       	st	Z, r24
	g_astStorageInfo[iStorageIndex].iFSType 		= *((uint16_t*)(DeviceInfoPos)); DeviceInfoPos+=2;
    3678:	12 96       	adiw	r26, 0x02	; 2
    367a:	8d 91       	ld	r24, X+
    367c:	9c 91       	ld	r25, X
    367e:	13 97       	sbiw	r26, 0x03	; 3
    3680:	93 83       	std	Z+3, r25	; 0x03
    3682:	82 83       	std	Z+2, r24	; 0x02
	g_astStorageInfo[iStorageIndex].iAccessCap		= *((uint16_t*)(DeviceInfoPos)); DeviceInfoPos+=2;
    3684:	14 96       	adiw	r26, 0x04	; 4
    3686:	8d 91       	ld	r24, X+
    3688:	9c 91       	ld	r25, X
    368a:	15 97       	sbiw	r26, 0x05	; 5
    368c:	95 83       	std	Z+5, r25	; 0x05
    368e:	84 83       	std	Z+4, r24	; 0x04
	g_astStorageInfo[iStorageIndex].iMaxCapacity	= *((uint64_t*)(DeviceInfoPos)); DeviceInfoPos+=8;
    3690:	16 96       	adiw	r26, 0x06	; 6
    3692:	7c 91       	ld	r23, X
    3694:	16 97       	sbiw	r26, 0x06	; 6
    3696:	17 96       	adiw	r26, 0x07	; 7
    3698:	6c 91       	ld	r22, X
    369a:	17 97       	sbiw	r26, 0x07	; 7
    369c:	18 96       	adiw	r26, 0x08	; 8
    369e:	5c 91       	ld	r21, X
    36a0:	18 97       	sbiw	r26, 0x08	; 8
    36a2:	19 96       	adiw	r26, 0x09	; 9
    36a4:	4c 91       	ld	r20, X
    36a6:	19 97       	sbiw	r26, 0x09	; 9
    36a8:	1a 96       	adiw	r26, 0x0a	; 10
    36aa:	3c 91       	ld	r19, X
    36ac:	1a 97       	sbiw	r26, 0x0a	; 10
    36ae:	1b 96       	adiw	r26, 0x0b	; 11
    36b0:	2c 91       	ld	r18, X
    36b2:	1b 97       	sbiw	r26, 0x0b	; 11
    36b4:	1c 96       	adiw	r26, 0x0c	; 12
    36b6:	9c 91       	ld	r25, X
    36b8:	1c 97       	sbiw	r26, 0x0c	; 12
    36ba:	1d 96       	adiw	r26, 0x0d	; 13
    36bc:	8c 91       	ld	r24, X
    36be:	df 01       	movw	r26, r30
    36c0:	16 96       	adiw	r26, 0x06	; 6
    36c2:	76 83       	std	Z+6, r23	; 0x06
    36c4:	11 96       	adiw	r26, 0x01	; 1
    36c6:	6c 93       	st	X, r22
    36c8:	11 97       	sbiw	r26, 0x01	; 1
    36ca:	12 96       	adiw	r26, 0x02	; 2
    36cc:	5c 93       	st	X, r21
    36ce:	12 97       	sbiw	r26, 0x02	; 2
    36d0:	13 96       	adiw	r26, 0x03	; 3
    36d2:	4c 93       	st	X, r20
    36d4:	13 97       	sbiw	r26, 0x03	; 3
    36d6:	14 96       	adiw	r26, 0x04	; 4
    36d8:	3c 93       	st	X, r19
    36da:	14 97       	sbiw	r26, 0x04	; 4
    36dc:	15 96       	adiw	r26, 0x05	; 5
    36de:	2c 93       	st	X, r18
    36e0:	15 97       	sbiw	r26, 0x05	; 5
    36e2:	16 96       	adiw	r26, 0x06	; 6
    36e4:	9c 93       	st	X, r25
    36e6:	16 97       	sbiw	r26, 0x06	; 6
    36e8:	17 96       	adiw	r26, 0x07	; 7
    36ea:	8c 93       	st	X, r24
	g_astStorageInfo[iStorageIndex].iFreeSpaceBytes	= *((uint64_t*)(DeviceInfoPos)); DeviceInfoPos+=8;
    36ec:	d8 01       	movw	r26, r16
    36ee:	1e 96       	adiw	r26, 0x0e	; 14
    36f0:	7c 91       	ld	r23, X
    36f2:	1e 97       	sbiw	r26, 0x0e	; 14
    36f4:	1f 96       	adiw	r26, 0x0f	; 15
    36f6:	6c 91       	ld	r22, X
    36f8:	1f 97       	sbiw	r26, 0x0f	; 15
    36fa:	50 96       	adiw	r26, 0x10	; 16
    36fc:	5c 91       	ld	r21, X
    36fe:	50 97       	sbiw	r26, 0x10	; 16
    3700:	51 96       	adiw	r26, 0x11	; 17
    3702:	4c 91       	ld	r20, X
    3704:	51 97       	sbiw	r26, 0x11	; 17
    3706:	52 96       	adiw	r26, 0x12	; 18
    3708:	3c 91       	ld	r19, X
    370a:	52 97       	sbiw	r26, 0x12	; 18
    370c:	53 96       	adiw	r26, 0x13	; 19
    370e:	2c 91       	ld	r18, X
    3710:	53 97       	sbiw	r26, 0x13	; 19
    3712:	54 96       	adiw	r26, 0x14	; 20
    3714:	9c 91       	ld	r25, X
    3716:	54 97       	sbiw	r26, 0x14	; 20
    3718:	55 96       	adiw	r26, 0x15	; 21
    371a:	8c 91       	ld	r24, X
    371c:	df 01       	movw	r26, r30
    371e:	1e 96       	adiw	r26, 0x0e	; 14
    3720:	76 87       	std	Z+14, r23	; 0x0e
    3722:	11 96       	adiw	r26, 0x01	; 1
    3724:	6c 93       	st	X, r22
    3726:	11 97       	sbiw	r26, 0x01	; 1
    3728:	12 96       	adiw	r26, 0x02	; 2
    372a:	5c 93       	st	X, r21
    372c:	12 97       	sbiw	r26, 0x02	; 2
    372e:	13 96       	adiw	r26, 0x03	; 3
    3730:	4c 93       	st	X, r20
    3732:	13 97       	sbiw	r26, 0x03	; 3
    3734:	14 96       	adiw	r26, 0x04	; 4
    3736:	3c 93       	st	X, r19
    3738:	14 97       	sbiw	r26, 0x04	; 4
    373a:	15 96       	adiw	r26, 0x05	; 5
    373c:	2c 93       	st	X, r18
    373e:	15 97       	sbiw	r26, 0x05	; 5
    3740:	16 96       	adiw	r26, 0x06	; 6
    3742:	9c 93       	st	X, r25
    3744:	16 97       	sbiw	r26, 0x06	; 6
    3746:	17 96       	adiw	r26, 0x07	; 7
    3748:	8c 93       	st	X, r24
	g_astStorageInfo[iStorageIndex].iFreeSpaceImages= *((uint32_t*)(DeviceInfoPos)); DeviceInfoPos+=4;
    374a:	d8 01       	movw	r26, r16
    374c:	56 96       	adiw	r26, 0x16	; 22
    374e:	2d 91       	ld	r18, X+
    3750:	3d 91       	ld	r19, X+
    3752:	4d 91       	ld	r20, X+
    3754:	5c 91       	ld	r21, X
    3756:	59 97       	sbiw	r26, 0x19	; 25
    3758:	26 8b       	std	Z+22, r18	; 0x16
    375a:	37 8b       	std	Z+23, r19	; 0x17
    375c:	40 8f       	std	Z+24, r20	; 0x18
    375e:	51 8f       	std	Z+25, r21	; 0x19
	
	iTemp1 = *DeviceInfoPos++;	// get the length of the Storage Description field string
    3760:	a8 01       	movw	r20, r16
    3762:	45 5e       	subi	r20, 0xE5	; 229
    3764:	5f 4f       	sbci	r21, 0xFF	; 255
    3766:	5a 96       	adiw	r26, 0x1a	; 26
    3768:	0c 91       	ld	r16, X
    376a:	5a 97       	sbiw	r26, 0x1a	; 26
    376c:	00 31       	cpi	r16, 0x10	; 16
    376e:	08 f0       	brcs	.+2      	; 0x3772 <CameraControl_GetStorageInfo+0x276>
    3770:	0f e0       	ldi	r16, 0x0F	; 15
    3772:	fa 01       	movw	r30, r20
    3774:	10 2f       	mov	r17, r16
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	30 e0       	ldi	r19, 0x00	; 0
	if ( iTemp1 > (STORAGE_MAX_STRING_SIZE-1) ) iTemp1 = STORAGE_MAX_STRING_SIZE-1;
	iTemp2 = 0;	

	while (iTemp1--)
	{
		g_astStorageInfo[iStorageIndex].sDescription[iTemp2++] = *DeviceInfoPos;
    377a:	6a e3       	ldi	r22, 0x3A	; 58
    377c:	70 e0       	ldi	r23, 0x00	; 0
    377e:	e6 9e       	mul	r14, r22
    3780:	c0 01       	movw	r24, r0
    3782:	e7 9e       	mul	r14, r23
    3784:	90 0d       	add	r25, r0
    3786:	f6 9e       	mul	r15, r22
    3788:	90 0d       	add	r25, r0
    378a:	11 24       	eor	r1, r1
    378c:	8e 57       	subi	r24, 0x7E	; 126
    378e:	9c 4f       	sbci	r25, 0xFC	; 252
    3790:	0a c0       	rjmp	.+20     	; 0x37a6 <CameraControl_GetStorageInfo+0x2aa>
    3792:	60 81       	ld	r22, Z
    3794:	dc 01       	movw	r26, r24
    3796:	a2 0f       	add	r26, r18
    3798:	b3 1f       	adc	r27, r19
    379a:	5a 96       	adiw	r26, 0x1a	; 26
    379c:	6c 93       	st	X, r22
    379e:	5a 97       	sbiw	r26, 0x1a	; 26
		DeviceInfoPos += 2;
    37a0:	32 96       	adiw	r30, 0x02	; 2
    37a2:	2f 5f       	subi	r18, 0xFF	; 255
    37a4:	3f 4f       	sbci	r19, 0xFF	; 255
	
	iTemp1 = *DeviceInfoPos++;	// get the length of the Storage Description field string
	if ( iTemp1 > (STORAGE_MAX_STRING_SIZE-1) ) iTemp1 = STORAGE_MAX_STRING_SIZE-1;
	iTemp2 = 0;	

	while (iTemp1--)
    37a6:	11 50       	subi	r17, 0x01	; 1
    37a8:	a0 f7       	brcc	.-24     	; 0x3792 <CameraControl_GetStorageInfo+0x296>
}

/*------------------------------------------------------------------------------
 * CameraControl_GetStorageInfo
 */
uint8_t CameraControl_GetStorageInfo ( USB_ClassInfo_SI_Host_t* SIInterfaceInfo, 
    37aa:	80 2f       	mov	r24, r16
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	dc 01       	movw	r26, r24
    37b0:	aa 0f       	add	r26, r26
    37b2:	bb 1f       	adc	r27, r27
	
	iTemp1 = *DeviceInfoPos++;	// get the length of the Storage Description field string
	if ( iTemp1 > (STORAGE_MAX_STRING_SIZE-1) ) iTemp1 = STORAGE_MAX_STRING_SIZE-1;
	iTemp2 = 0;	

	while (iTemp1--)
    37b4:	a4 0f       	add	r26, r20
    37b6:	b5 1f       	adc	r27, r21
	{
		g_astStorageInfo[iStorageIndex].sDescription[iTemp2++] = *DeviceInfoPos;
		DeviceInfoPos += 2;
	}
	g_astStorageInfo[iStorageIndex].sDescription[iTemp2] = '\0';
    37b8:	2a e3       	ldi	r18, 0x3A	; 58
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	e2 9e       	mul	r14, r18
    37be:	f0 01       	movw	r30, r0
    37c0:	e3 9e       	mul	r14, r19
    37c2:	f0 0d       	add	r31, r0
    37c4:	f2 9e       	mul	r15, r18
    37c6:	f0 0d       	add	r31, r0
    37c8:	11 24       	eor	r1, r1
    37ca:	ee 57       	subi	r30, 0x7E	; 126
    37cc:	fc 4f       	sbci	r31, 0xFC	; 252
    37ce:	e8 0f       	add	r30, r24
    37d0:	f9 1f       	adc	r31, r25
    37d2:	12 8e       	std	Z+26, r1	; 0x1a

	iTemp1 = *DeviceInfoPos++;	// get the length of the Volume Label field string
    37d4:	6c 91       	ld	r22, X
    37d6:	60 31       	cpi	r22, 0x10	; 16
    37d8:	08 f0       	brcs	.+2      	; 0x37dc <CameraControl_GetStorageInfo+0x2e0>
    37da:	6f e0       	ldi	r22, 0x0F	; 15
    37dc:	76 2f       	mov	r23, r22
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
	if ( iTemp1 > (STORAGE_MAX_STRING_SIZE-1) ) iTemp1 = STORAGE_MAX_STRING_SIZE-1;
	iTemp2 = 0;	

	while (iTemp1--)
	{
		g_astStorageInfo[iStorageIndex].sVolumeLabel[iTemp2++] = *DeviceInfoPos;
    37e2:	4a e3       	ldi	r20, 0x3A	; 58
    37e4:	50 e0       	ldi	r21, 0x00	; 0
    37e6:	e4 9e       	mul	r14, r20
    37e8:	c0 01       	movw	r24, r0
    37ea:	e5 9e       	mul	r14, r21
    37ec:	90 0d       	add	r25, r0
    37ee:	f4 9e       	mul	r15, r20
    37f0:	90 0d       	add	r25, r0
    37f2:	11 24       	eor	r1, r1
    37f4:	8e 57       	subi	r24, 0x7E	; 126
    37f6:	9c 4f       	sbci	r25, 0xFC	; 252
    37f8:	0a c0       	rjmp	.+20     	; 0x380e <CameraControl_GetStorageInfo+0x312>
    37fa:	11 96       	adiw	r26, 0x01	; 1
    37fc:	4c 91       	ld	r20, X
    37fe:	11 97       	sbiw	r26, 0x01	; 1
    3800:	fc 01       	movw	r30, r24
    3802:	e2 0f       	add	r30, r18
    3804:	f3 1f       	adc	r31, r19
    3806:	42 a7       	std	Z+42, r20	; 0x2a
    3808:	2f 5f       	subi	r18, 0xFF	; 255
    380a:	3f 4f       	sbci	r19, 0xFF	; 255
    380c:	12 96       	adiw	r26, 0x02	; 2

	iTemp1 = *DeviceInfoPos++;	// get the length of the Volume Label field string
	if ( iTemp1 > (STORAGE_MAX_STRING_SIZE-1) ) iTemp1 = STORAGE_MAX_STRING_SIZE-1;
	iTemp2 = 0;	

	while (iTemp1--)
    380e:	71 50       	subi	r23, 0x01	; 1
    3810:	a0 f7       	brcc	.-24     	; 0x37fa <CameraControl_GetStorageInfo+0x2fe>
	{
		g_astStorageInfo[iStorageIndex].sVolumeLabel[iTemp2++] = *DeviceInfoPos;
		DeviceInfoPos += 2;
	}
	g_astStorageInfo[iStorageIndex].sVolumeLabel[iTemp2] = '\0';
    3812:	8a e3       	ldi	r24, 0x3A	; 58
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	e8 9e       	mul	r14, r24
    3818:	f0 01       	movw	r30, r0
    381a:	e9 9e       	mul	r14, r25
    381c:	f0 0d       	add	r31, r0
    381e:	f8 9e       	mul	r15, r24
    3820:	f0 0d       	add	r31, r0
    3822:	11 24       	eor	r1, r1
    3824:	ee 57       	subi	r30, 0x7E	; 126
    3826:	fc 4f       	sbci	r31, 0xFC	; 252
    3828:	e6 0f       	add	r30, r22
    382a:	f1 1d       	adc	r31, r1
    382c:	12 a6       	std	Z+42, r1	; 0x2a

	// Receive the final response block from the device 
	return CameraControl_GetResponseAndCheck (SIInterfaceInfo, &PIMABlock);
    382e:	c6 01       	movw	r24, r12
    3830:	be 01       	movw	r22, r28
    3832:	6f 5f       	subi	r22, 0xFF	; 255
    3834:	7f 4f       	sbci	r23, 0xFF	; 255
    3836:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <CameraControl_GetResponseAndCheck>
}
    383a:	0f b6       	in	r0, 0x3f	; 63
    383c:	f8 94       	cli
    383e:	be be       	out	0x3e, r11	; 62
    3840:	0f be       	out	0x3f, r0	; 63
    3842:	ad be       	out	0x3d, r10	; 61
    3844:	6a 96       	adiw	r28, 0x1a	; 26
    3846:	0f b6       	in	r0, 0x3f	; 63
    3848:	f8 94       	cli
    384a:	de bf       	out	0x3e, r29	; 62
    384c:	0f be       	out	0x3f, r0	; 63
    384e:	cd bf       	out	0x3d, r28	; 61
    3850:	cf 91       	pop	r28
    3852:	df 91       	pop	r29
    3854:	1f 91       	pop	r17
    3856:	0f 91       	pop	r16
    3858:	ff 90       	pop	r15
    385a:	ef 90       	pop	r14
    385c:	df 90       	pop	r13
    385e:	cf 90       	pop	r12
    3860:	bf 90       	pop	r11
    3862:	af 90       	pop	r10
    3864:	08 95       	ret

00003866 <CameraControl_StorageInfo_Printout>:

/*------------------------------------------------------------------------------
 * CameraControl_StorageInfo_Printout - shows all storage information
 */
uint8_t CameraControl_StorageInfo_Printout 	( USB_ClassInfo_SI_Host_t* SIInterfaceInfo )
{
    3866:	2f 92       	push	r2
    3868:	3f 92       	push	r3
    386a:	4f 92       	push	r4
    386c:	5f 92       	push	r5
    386e:	6f 92       	push	r6
    3870:	7f 92       	push	r7
    3872:	8f 92       	push	r8
    3874:	9f 92       	push	r9
    3876:	af 92       	push	r10
    3878:	bf 92       	push	r11
    387a:	cf 92       	push	r12
    387c:	df 92       	push	r13
    387e:	ef 92       	push	r14
    3880:	ff 92       	push	r15
    3882:	0f 93       	push	r16
    3884:	1f 93       	push	r17
    3886:	df 93       	push	r29
    3888:	cf 93       	push	r28
    388a:	00 d0       	rcall	.+0      	; 0x388c <CameraControl_StorageInfo_Printout+0x26>
    388c:	00 d0       	rcall	.+0      	; 0x388e <CameraControl_StorageInfo_Printout+0x28>
    388e:	cd b7       	in	r28, 0x3d	; 61
    3890:	de b7       	in	r29, 0x3e	; 62
    3892:	8c 01       	movw	r16, r24
	uint8_t ErrorCode = PIPE_RWSTREAM_NoError;
	uint8_t storageIdx = 0;	

	CHECK_CAMERA_CONNECTION;	
    3894:	80 91 63 03 	lds	r24, 0x0363
    3898:	8b 30       	cpi	r24, 0x0B	; 11
    389a:	31 f4       	brne	.+12     	; 0x38a8 <CameraControl_StorageInfo_Printout+0x42>
    389c:	d8 01       	movw	r26, r16
    389e:	16 96       	adiw	r26, 0x06	; 6
    38a0:	8c 91       	ld	r24, X
    38a2:	16 97       	sbiw	r26, 0x06	; 6
    38a4:	88 23       	and	r24, r24
    38a6:	61 f4       	brne	.+24     	; 0x38c0 <CameraControl_StorageInfo_Printout+0x5a>
    38a8:	00 d0       	rcall	.+0      	; 0x38aa <CameraControl_StorageInfo_Printout+0x44>
    38aa:	8a e0       	ldi	r24, 0x0A	; 10
    38ac:	9c e0       	ldi	r25, 0x0C	; 12
    38ae:	ed b7       	in	r30, 0x3d	; 61
    38b0:	fe b7       	in	r31, 0x3e	; 62
    38b2:	92 83       	std	Z+2, r25	; 0x02
    38b4:	81 83       	std	Z+1, r24	; 0x01
    38b6:	0e d6       	rcall	.+3100   	; 0x44d4 <printf_P>
    38b8:	0f 90       	pop	r0
    38ba:	0f 90       	pop	r0
    38bc:	aa 24       	eor	r10, r10
    38be:	0d c1       	rjmp	.+538    	; 0x3ada <CameraControl_StorageInfo_Printout+0x274>

	ErrorCode = CameraControl_GetStorageIDs ( SIInterfaceInfo );
    38c0:	c8 01       	movw	r24, r16
    38c2:	66 dd       	rcall	.-1332   	; 0x3390 <CameraControl_GetStorageIDs>
    38c4:	a8 2e       	mov	r10, r24
	if ( ErrorCode != PIPE_RWSTREAM_NoError ) return ErrorCode;
    38c6:	88 23       	and	r24, r24
    38c8:	09 f0       	breq	.+2      	; 0x38cc <CameraControl_StorageInfo_Printout+0x66>
    38ca:	07 c1       	rjmp	.+526    	; 0x3ada <CameraControl_StorageInfo_Printout+0x274>
    38cc:	bb 24       	eor	r11, r11

	for (	storageIdx=0; storageIdx < g_iNumOfStorages; storageIdx ++ )
	{
		printf_P(PSTR("Retrieving storage index %d (ID=0x%X)\r\n"), storageIdx, g_aiStorageIDs[storageIdx]);
    38ce:	42 ee       	ldi	r20, 0xE2	; 226
    38d0:	c4 2e       	mov	r12, r20
    38d2:	4b e0       	ldi	r20, 0x0B	; 11
    38d4:	d4 2e       	mov	r13, r20

		ErrorCode = CameraControl_GetStorageInfo ( SIInterfaceInfo, storageIdx );
		if (ErrorCode != PIPE_RWSTREAM_NoError)  return ErrorCode;

		printf_P(PSTR("	Storage type: 0x%X\r\n"), g_astStorageInfo[storageIdx].iStorageType );
    38d6:	3a e3       	ldi	r19, 0x3A	; 58
    38d8:	83 2e       	mov	r8, r19
    38da:	91 2c       	mov	r9, r1
    38dc:	2c ec       	ldi	r18, 0xCC	; 204
    38de:	62 2e       	mov	r6, r18
    38e0:	2b e0       	ldi	r18, 0x0B	; 11
    38e2:	72 2e       	mov	r7, r18
		printf_P(PSTR("	File-system type: 0x%X\r\n"), g_astStorageInfo[storageIdx].iFSType );
    38e4:	92 eb       	ldi	r25, 0xB2	; 178
    38e6:	49 2e       	mov	r4, r25
    38e8:	9b e0       	ldi	r25, 0x0B	; 11
    38ea:	59 2e       	mov	r5, r25
		printf_P(PSTR("	Access capability: 0x%X\r\n"), g_astStorageInfo[storageIdx].iAccessCap );
    38ec:	87 e9       	ldi	r24, 0x97	; 151
    38ee:	28 2e       	mov	r2, r24
    38f0:	8b e0       	ldi	r24, 0x0B	; 11
    38f2:	38 2e       	mov	r3, r24
    38f4:	1a 83       	std	Y+2, r17	; 0x02
    38f6:	09 83       	std	Y+1, r16	; 0x01
    38f8:	e9 c0       	rjmp	.+466    	; 0x3acc <CameraControl_StorageInfo_Printout+0x266>
	ErrorCode = CameraControl_GetStorageIDs ( SIInterfaceInfo );
	if ( ErrorCode != PIPE_RWSTREAM_NoError ) return ErrorCode;

	for (	storageIdx=0; storageIdx < g_iNumOfStorages; storageIdx ++ )
	{
		printf_P(PSTR("Retrieving storage index %d (ID=0x%X)\r\n"), storageIdx, g_aiStorageIDs[storageIdx]);
    38fa:	0b 2d       	mov	r16, r11
    38fc:	10 e0       	ldi	r17, 0x00	; 0
    38fe:	f8 01       	movw	r30, r16
    3900:	ee 0f       	add	r30, r30
    3902:	ff 1f       	adc	r31, r31
    3904:	ee 0f       	add	r30, r30
    3906:	ff 1f       	adc	r31, r31
    3908:	ee 58       	subi	r30, 0x8E	; 142
    390a:	fc 4f       	sbci	r31, 0xFC	; 252
    390c:	80 81       	ld	r24, Z
    390e:	91 81       	ldd	r25, Z+1	; 0x01
    3910:	a2 81       	ldd	r26, Z+2	; 0x02
    3912:	b3 81       	ldd	r27, Z+3	; 0x03
    3914:	2d b7       	in	r18, 0x3d	; 61
    3916:	3e b7       	in	r19, 0x3e	; 62
    3918:	28 50       	subi	r18, 0x08	; 8
    391a:	30 40       	sbci	r19, 0x00	; 0
    391c:	0f b6       	in	r0, 0x3f	; 63
    391e:	f8 94       	cli
    3920:	3e bf       	out	0x3e, r19	; 62
    3922:	0f be       	out	0x3f, r0	; 63
    3924:	2d bf       	out	0x3d, r18	; 61
    3926:	2f 5f       	subi	r18, 0xFF	; 255
    3928:	3f 4f       	sbci	r19, 0xFF	; 255
    392a:	ed b7       	in	r30, 0x3d	; 61
    392c:	fe b7       	in	r31, 0x3e	; 62
    392e:	d2 82       	std	Z+2, r13	; 0x02
    3930:	c1 82       	std	Z+1, r12	; 0x01
    3932:	f9 01       	movw	r30, r18
    3934:	13 83       	std	Z+3, r17	; 0x03
    3936:	02 83       	std	Z+2, r16	; 0x02
    3938:	84 83       	std	Z+4, r24	; 0x04
    393a:	95 83       	std	Z+5, r25	; 0x05
    393c:	a6 83       	std	Z+6, r26	; 0x06
    393e:	b7 83       	std	Z+7, r27	; 0x07
    3940:	c9 d5       	rcall	.+2962   	; 0x44d4 <printf_P>

		ErrorCode = CameraControl_GetStorageInfo ( SIInterfaceInfo, storageIdx );
    3942:	2d b7       	in	r18, 0x3d	; 61
    3944:	3e b7       	in	r19, 0x3e	; 62
    3946:	28 5f       	subi	r18, 0xF8	; 248
    3948:	3f 4f       	sbci	r19, 0xFF	; 255
    394a:	0f b6       	in	r0, 0x3f	; 63
    394c:	f8 94       	cli
    394e:	3e bf       	out	0x3e, r19	; 62
    3950:	0f be       	out	0x3f, r0	; 63
    3952:	2d bf       	out	0x3d, r18	; 61
    3954:	89 81       	ldd	r24, Y+1	; 0x01
    3956:	9a 81       	ldd	r25, Y+2	; 0x02
    3958:	6b 2d       	mov	r22, r11
    395a:	d0 dd       	rcall	.-1120   	; 0x34fc <CameraControl_GetStorageInfo>
		if (ErrorCode != PIPE_RWSTREAM_NoError)  return ErrorCode;
    395c:	88 23       	and	r24, r24
    395e:	09 f0       	breq	.+2      	; 0x3962 <CameraControl_StorageInfo_Printout+0xfc>
    3960:	bb c0       	rjmp	.+374    	; 0x3ad8 <CameraControl_StorageInfo_Printout+0x272>

		printf_P(PSTR("	Storage type: 0x%X\r\n"), g_astStorageInfo[storageIdx].iStorageType );
    3962:	08 9d       	mul	r16, r8
    3964:	70 01       	movw	r14, r0
    3966:	09 9d       	mul	r16, r9
    3968:	f0 0c       	add	r15, r0
    396a:	18 9d       	mul	r17, r8
    396c:	f0 0c       	add	r15, r0
    396e:	11 24       	eor	r1, r1
    3970:	c7 01       	movw	r24, r14
    3972:	8e 57       	subi	r24, 0x7E	; 126
    3974:	9c 4f       	sbci	r25, 0xFC	; 252
    3976:	9c 83       	std	Y+4, r25	; 0x04
    3978:	8b 83       	std	Y+3, r24	; 0x03
    397a:	dc 01       	movw	r26, r24
    397c:	8d 91       	ld	r24, X+
    397e:	9c 91       	ld	r25, X
    3980:	00 d0       	rcall	.+0      	; 0x3982 <CameraControl_StorageInfo_Printout+0x11c>
    3982:	00 d0       	rcall	.+0      	; 0x3984 <CameraControl_StorageInfo_Printout+0x11e>
    3984:	ed b7       	in	r30, 0x3d	; 61
    3986:	fe b7       	in	r31, 0x3e	; 62
    3988:	72 82       	std	Z+2, r7	; 0x02
    398a:	61 82       	std	Z+1, r6	; 0x01
    398c:	94 83       	std	Z+4, r25	; 0x04
    398e:	83 83       	std	Z+3, r24	; 0x03
    3990:	a1 d5       	rcall	.+2882   	; 0x44d4 <printf_P>
		printf_P(PSTR("	File-system type: 0x%X\r\n"), g_astStorageInfo[storageIdx].iFSType );
    3992:	ab 81       	ldd	r26, Y+3	; 0x03
    3994:	bc 81       	ldd	r27, Y+4	; 0x04
    3996:	12 96       	adiw	r26, 0x02	; 2
    3998:	8d 91       	ld	r24, X+
    399a:	9c 91       	ld	r25, X
    399c:	13 97       	sbiw	r26, 0x03	; 3
    399e:	ed b7       	in	r30, 0x3d	; 61
    39a0:	fe b7       	in	r31, 0x3e	; 62
    39a2:	52 82       	std	Z+2, r5	; 0x02
    39a4:	41 82       	std	Z+1, r4	; 0x01
    39a6:	94 83       	std	Z+4, r25	; 0x04
    39a8:	83 83       	std	Z+3, r24	; 0x03
    39aa:	94 d5       	rcall	.+2856   	; 0x44d4 <printf_P>
		printf_P(PSTR("	Access capability: 0x%X\r\n"), g_astStorageInfo[storageIdx].iAccessCap );
    39ac:	ab 81       	ldd	r26, Y+3	; 0x03
    39ae:	bc 81       	ldd	r27, Y+4	; 0x04
    39b0:	14 96       	adiw	r26, 0x04	; 4
    39b2:	8d 91       	ld	r24, X+
    39b4:	9c 91       	ld	r25, X
    39b6:	15 97       	sbiw	r26, 0x05	; 5
    39b8:	ed b7       	in	r30, 0x3d	; 61
    39ba:	fe b7       	in	r31, 0x3e	; 62
    39bc:	32 82       	std	Z+2, r3	; 0x02
    39be:	21 82       	std	Z+1, r2	; 0x01
    39c0:	94 83       	std	Z+4, r25	; 0x04
    39c2:	83 83       	std	Z+3, r24	; 0x03
    39c4:	87 d5       	rcall	.+2830   	; 0x44d4 <printf_P>
		printf_P(PSTR("	Max capacity: 0x%X\r\n"), g_astStorageInfo[storageIdx].iMaxCapacity );
    39c6:	eb 81       	ldd	r30, Y+3	; 0x03
    39c8:	fc 81       	ldd	r31, Y+4	; 0x04
    39ca:	36 96       	adiw	r30, 0x06	; 6
    39cc:	ab 81       	ldd	r26, Y+3	; 0x03
    39ce:	bc 81       	ldd	r27, Y+4	; 0x04
    39d0:	16 96       	adiw	r26, 0x06	; 6
    39d2:	6c 91       	ld	r22, X
    39d4:	51 81       	ldd	r21, Z+1	; 0x01
    39d6:	42 81       	ldd	r20, Z+2	; 0x02
    39d8:	33 81       	ldd	r19, Z+3	; 0x03
    39da:	24 81       	ldd	r18, Z+4	; 0x04
    39dc:	95 81       	ldd	r25, Z+5	; 0x05
    39de:	86 81       	ldd	r24, Z+6	; 0x06
    39e0:	77 81       	ldd	r23, Z+7	; 0x07
    39e2:	00 d0       	rcall	.+0      	; 0x39e4 <CameraControl_StorageInfo_Printout+0x17e>
    39e4:	00 d0       	rcall	.+0      	; 0x39e6 <CameraControl_StorageInfo_Printout+0x180>
    39e6:	00 d0       	rcall	.+0      	; 0x39e8 <CameraControl_StorageInfo_Printout+0x182>
    39e8:	ed b7       	in	r30, 0x3d	; 61
    39ea:	fe b7       	in	r31, 0x3e	; 62
    39ec:	31 96       	adiw	r30, 0x01	; 1
    39ee:	01 e8       	ldi	r16, 0x81	; 129
    39f0:	1b e0       	ldi	r17, 0x0B	; 11
    39f2:	ad b7       	in	r26, 0x3d	; 61
    39f4:	be b7       	in	r27, 0x3e	; 62
    39f6:	12 96       	adiw	r26, 0x02	; 2
    39f8:	1c 93       	st	X, r17
    39fa:	0e 93       	st	-X, r16
    39fc:	11 97       	sbiw	r26, 0x01	; 1
    39fe:	62 83       	std	Z+2, r22	; 0x02
    3a00:	53 83       	std	Z+3, r21	; 0x03
    3a02:	44 83       	std	Z+4, r20	; 0x04
    3a04:	35 83       	std	Z+5, r19	; 0x05
    3a06:	26 83       	std	Z+6, r18	; 0x06
    3a08:	97 83       	std	Z+7, r25	; 0x07
    3a0a:	80 87       	std	Z+8, r24	; 0x08
    3a0c:	71 87       	std	Z+9, r23	; 0x09
    3a0e:	62 d5       	rcall	.+2756   	; 0x44d4 <printf_P>
		printf_P(PSTR("	Free space: 0x%X\r\n"), g_astStorageInfo[storageIdx].iFreeSpaceBytes );
    3a10:	eb 81       	ldd	r30, Y+3	; 0x03
    3a12:	fc 81       	ldd	r31, Y+4	; 0x04
    3a14:	3e 96       	adiw	r30, 0x0e	; 14
    3a16:	ab 81       	ldd	r26, Y+3	; 0x03
    3a18:	bc 81       	ldd	r27, Y+4	; 0x04
    3a1a:	1e 96       	adiw	r26, 0x0e	; 14
    3a1c:	6c 91       	ld	r22, X
    3a1e:	51 81       	ldd	r21, Z+1	; 0x01
    3a20:	42 81       	ldd	r20, Z+2	; 0x02
    3a22:	33 81       	ldd	r19, Z+3	; 0x03
    3a24:	24 81       	ldd	r18, Z+4	; 0x04
    3a26:	95 81       	ldd	r25, Z+5	; 0x05
    3a28:	86 81       	ldd	r24, Z+6	; 0x06
    3a2a:	77 81       	ldd	r23, Z+7	; 0x07
    3a2c:	ed b7       	in	r30, 0x3d	; 61
    3a2e:	fe b7       	in	r31, 0x3e	; 62
    3a30:	31 96       	adiw	r30, 0x01	; 1
    3a32:	0d e6       	ldi	r16, 0x6D	; 109
    3a34:	1b e0       	ldi	r17, 0x0B	; 11
    3a36:	ad b7       	in	r26, 0x3d	; 61
    3a38:	be b7       	in	r27, 0x3e	; 62
    3a3a:	12 96       	adiw	r26, 0x02	; 2
    3a3c:	1c 93       	st	X, r17
    3a3e:	0e 93       	st	-X, r16
    3a40:	11 97       	sbiw	r26, 0x01	; 1
    3a42:	62 83       	std	Z+2, r22	; 0x02
    3a44:	53 83       	std	Z+3, r21	; 0x03
    3a46:	44 83       	std	Z+4, r20	; 0x04
    3a48:	35 83       	std	Z+5, r19	; 0x05
    3a4a:	26 83       	std	Z+6, r18	; 0x06
    3a4c:	97 83       	std	Z+7, r25	; 0x07
    3a4e:	80 87       	std	Z+8, r24	; 0x08
    3a50:	71 87       	std	Z+9, r23	; 0x09
    3a52:	40 d5       	rcall	.+2688   	; 0x44d4 <printf_P>
		printf_P(PSTR("	Free space for images: 0x%X\r\n"), g_astStorageInfo[storageIdx].iFreeSpaceImages );
    3a54:	eb 81       	ldd	r30, Y+3	; 0x03
    3a56:	fc 81       	ldd	r31, Y+4	; 0x04
    3a58:	86 89       	ldd	r24, Z+22	; 0x16
    3a5a:	97 89       	ldd	r25, Z+23	; 0x17
    3a5c:	a0 8d       	ldd	r26, Z+24	; 0x18
    3a5e:	b1 8d       	ldd	r27, Z+25	; 0x19
    3a60:	0f 90       	pop	r0
    3a62:	0f 90       	pop	r0
    3a64:	0f 90       	pop	r0
    3a66:	0f 90       	pop	r0
    3a68:	0e e4       	ldi	r16, 0x4E	; 78
    3a6a:	1b e0       	ldi	r17, 0x0B	; 11
    3a6c:	ed b7       	in	r30, 0x3d	; 61
    3a6e:	fe b7       	in	r31, 0x3e	; 62
    3a70:	12 83       	std	Z+2, r17	; 0x02
    3a72:	01 83       	std	Z+1, r16	; 0x01
    3a74:	83 83       	std	Z+3, r24	; 0x03
    3a76:	94 83       	std	Z+4, r25	; 0x04
    3a78:	a5 83       	std	Z+5, r26	; 0x05
    3a7a:	b6 83       	std	Z+6, r27	; 0x06
    3a7c:	2b d5       	rcall	.+2646   	; 0x44d4 <printf_P>
		printf_P(PSTR("	Storage description: '%s'\r\n"), g_astStorageInfo[storageIdx].sDescription );
    3a7e:	c7 01       	movw	r24, r14
    3a80:	84 56       	subi	r24, 0x64	; 100
    3a82:	9c 4f       	sbci	r25, 0xFC	; 252
    3a84:	0f 90       	pop	r0
    3a86:	0f 90       	pop	r0
    3a88:	e1 e3       	ldi	r30, 0x31	; 49
    3a8a:	fb e0       	ldi	r31, 0x0B	; 11
    3a8c:	ad b7       	in	r26, 0x3d	; 61
    3a8e:	be b7       	in	r27, 0x3e	; 62
    3a90:	12 96       	adiw	r26, 0x02	; 2
    3a92:	fc 93       	st	X, r31
    3a94:	ee 93       	st	-X, r30
    3a96:	11 97       	sbiw	r26, 0x01	; 1
    3a98:	14 96       	adiw	r26, 0x04	; 4
    3a9a:	9c 93       	st	X, r25
    3a9c:	8e 93       	st	-X, r24
    3a9e:	13 97       	sbiw	r26, 0x03	; 3
    3aa0:	19 d5       	rcall	.+2610   	; 0x44d4 <printf_P>
		printf_P(PSTR("	Volume label: '%s'\r\n"), g_astStorageInfo[storageIdx].sVolumeLabel );
    3aa2:	c7 01       	movw	r24, r14
    3aa4:	84 55       	subi	r24, 0x54	; 84
    3aa6:	9c 4f       	sbci	r25, 0xFC	; 252
    3aa8:	eb e1       	ldi	r30, 0x1B	; 27
    3aaa:	fb e0       	ldi	r31, 0x0B	; 11
    3aac:	ad b7       	in	r26, 0x3d	; 61
    3aae:	be b7       	in	r27, 0x3e	; 62
    3ab0:	12 96       	adiw	r26, 0x02	; 2
    3ab2:	fc 93       	st	X, r31
    3ab4:	ee 93       	st	-X, r30
    3ab6:	11 97       	sbiw	r26, 0x01	; 1
    3ab8:	14 96       	adiw	r26, 0x04	; 4
    3aba:	9c 93       	st	X, r25
    3abc:	8e 93       	st	-X, r24
    3abe:	13 97       	sbiw	r26, 0x03	; 3
    3ac0:	09 d5       	rcall	.+2578   	; 0x44d4 <printf_P>
	CHECK_CAMERA_CONNECTION;	

	ErrorCode = CameraControl_GetStorageIDs ( SIInterfaceInfo );
	if ( ErrorCode != PIPE_RWSTREAM_NoError ) return ErrorCode;

	for (	storageIdx=0; storageIdx < g_iNumOfStorages; storageIdx ++ )
    3ac2:	b3 94       	inc	r11
    3ac4:	0f 90       	pop	r0
    3ac6:	0f 90       	pop	r0
    3ac8:	0f 90       	pop	r0
    3aca:	0f 90       	pop	r0
    3acc:	80 91 53 02 	lds	r24, 0x0253
    3ad0:	b8 16       	cp	r11, r24
    3ad2:	08 f4       	brcc	.+2      	; 0x3ad6 <CameraControl_StorageInfo_Printout+0x270>
    3ad4:	12 cf       	rjmp	.-476    	; 0x38fa <CameraControl_StorageInfo_Printout+0x94>
    3ad6:	01 c0       	rjmp	.+2      	; 0x3ada <CameraControl_StorageInfo_Printout+0x274>
	{
		printf_P(PSTR("Retrieving storage index %d (ID=0x%X)\r\n"), storageIdx, g_aiStorageIDs[storageIdx]);

		ErrorCode = CameraControl_GetStorageInfo ( SIInterfaceInfo, storageIdx );
    3ad8:	a8 2e       	mov	r10, r24
		printf_P(PSTR("	Storage description: '%s'\r\n"), g_astStorageInfo[storageIdx].sDescription );
		printf_P(PSTR("	Volume label: '%s'\r\n"), g_astStorageInfo[storageIdx].sVolumeLabel );
	}

	return ErrorCode;
}
    3ada:	8a 2d       	mov	r24, r10
    3adc:	0f 90       	pop	r0
    3ade:	0f 90       	pop	r0
    3ae0:	0f 90       	pop	r0
    3ae2:	0f 90       	pop	r0
    3ae4:	cf 91       	pop	r28
    3ae6:	df 91       	pop	r29
    3ae8:	1f 91       	pop	r17
    3aea:	0f 91       	pop	r16
    3aec:	ff 90       	pop	r15
    3aee:	ef 90       	pop	r14
    3af0:	df 90       	pop	r13
    3af2:	cf 90       	pop	r12
    3af4:	bf 90       	pop	r11
    3af6:	af 90       	pop	r10
    3af8:	9f 90       	pop	r9
    3afa:	8f 90       	pop	r8
    3afc:	7f 90       	pop	r7
    3afe:	6f 90       	pop	r6
    3b00:	5f 90       	pop	r5
    3b02:	4f 90       	pop	r4
    3b04:	3f 90       	pop	r3
    3b06:	2f 90       	pop	r2
    3b08:	08 95       	ret

00003b0a <CameraControl_GetStorageID>:

/*------------------------------------------------------------------------------
 * CameraControl_GetStorageID - Search for storage ID from its type
 */
uint8_t CameraControl_GetStorageID 	( PTP_STORETYPE_EN enStorageType, uint32_t* iStorageID )
{
    3b0a:	1f 93       	push	r17
	uint8_t i;

	for (i=0; i<g_iNumOfStorages; i++)
    3b0c:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (g_astStorageInfo[i].iStorageType==enStorageType)
    3b0e:	2a e3       	ldi	r18, 0x3A	; 58
    3b10:	30 e0       	ldi	r19, 0x00	; 0
    3b12:	90 e0       	ldi	r25, 0x00	; 0
 */
uint8_t CameraControl_GetStorageID 	( PTP_STORETYPE_EN enStorageType, uint32_t* iStorageID )
{
	uint8_t i;

	for (i=0; i<g_iNumOfStorages; i++)
    3b14:	25 c0       	rjmp	.+74     	; 0x3b60 <CameraControl_GetStorageID+0x56>
	{
		if (g_astStorageInfo[i].iStorageType==enStorageType)
    3b16:	e1 2f       	mov	r30, r17
    3b18:	f0 e0       	ldi	r31, 0x00	; 0
    3b1a:	e2 9f       	mul	r30, r18
    3b1c:	d0 01       	movw	r26, r0
    3b1e:	e3 9f       	mul	r30, r19
    3b20:	b0 0d       	add	r27, r0
    3b22:	f2 9f       	mul	r31, r18
    3b24:	b0 0d       	add	r27, r0
    3b26:	11 24       	eor	r1, r1
    3b28:	ae 57       	subi	r26, 0x7E	; 126
    3b2a:	bc 4f       	sbci	r27, 0xFC	; 252
    3b2c:	4d 91       	ld	r20, X+
    3b2e:	5c 91       	ld	r21, X
    3b30:	11 97       	sbiw	r26, 0x01	; 1
    3b32:	48 17       	cp	r20, r24
    3b34:	59 07       	cpc	r21, r25
    3b36:	99 f4       	brne	.+38     	; 0x3b5e <CameraControl_GetStorageID+0x54>
		{
			if (iStorageID) *iStorageID=g_aiStorageIDs[i];
    3b38:	61 15       	cp	r22, r1
    3b3a:	71 05       	cpc	r23, r1
    3b3c:	b9 f0       	breq	.+46     	; 0x3b6c <CameraControl_GetStorageID+0x62>
    3b3e:	ee 0f       	add	r30, r30
    3b40:	ff 1f       	adc	r31, r31
    3b42:	ee 0f       	add	r30, r30
    3b44:	ff 1f       	adc	r31, r31
    3b46:	ee 58       	subi	r30, 0x8E	; 142
    3b48:	fc 4f       	sbci	r31, 0xFC	; 252
    3b4a:	80 81       	ld	r24, Z
    3b4c:	91 81       	ldd	r25, Z+1	; 0x01
    3b4e:	a2 81       	ldd	r26, Z+2	; 0x02
    3b50:	b3 81       	ldd	r27, Z+3	; 0x03
    3b52:	fb 01       	movw	r30, r22
    3b54:	80 83       	st	Z, r24
    3b56:	91 83       	std	Z+1, r25	; 0x01
    3b58:	a2 83       	std	Z+2, r26	; 0x02
    3b5a:	b3 83       	std	Z+3, r27	; 0x03
    3b5c:	07 c0       	rjmp	.+14     	; 0x3b6c <CameraControl_GetStorageID+0x62>
 */
uint8_t CameraControl_GetStorageID 	( PTP_STORETYPE_EN enStorageType, uint32_t* iStorageID )
{
	uint8_t i;

	for (i=0; i<g_iNumOfStorages; i++)
    3b5e:	1f 5f       	subi	r17, 0xFF	; 255
    3b60:	40 91 53 02 	lds	r20, 0x0253
    3b64:	14 17       	cp	r17, r20
    3b66:	b8 f2       	brcs	.-82     	; 0x3b16 <CameraControl_GetStorageID+0xc>
			if (iStorageID) *iStorageID=g_aiStorageIDs[i];
			return 0;
		}
	}

	return -1;
    3b68:	8f ef       	ldi	r24, 0xFF	; 255
    3b6a:	01 c0       	rjmp	.+2      	; 0x3b6e <CameraControl_GetStorageID+0x64>
	for (i=0; i<g_iNumOfStorages; i++)
	{
		if (g_astStorageInfo[i].iStorageType==enStorageType)
		{
			if (iStorageID) *iStorageID=g_aiStorageIDs[i];
			return 0;
    3b6c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return -1;
}
    3b6e:	1f 91       	pop	r17
    3b70:	08 95       	ret

00003b72 <CameraControl_DeviceOperation_Capture>:
 * CameraControl_DeviceOperation_Capture
 */
uint16_t CameraControl_DeviceOperation_Capture ( USB_ClassInfo_SI_Host_t* SIInterfaceInfo,
												 PTP_STORETYPE_EN enStorageType,
												 PTP_FMT_EN enFileFormat )
{
    3b72:	ef 92       	push	r14
    3b74:	ff 92       	push	r15
    3b76:	0f 93       	push	r16
    3b78:	1f 93       	push	r17
    3b7a:	df 93       	push	r29
    3b7c:	cf 93       	push	r28
    3b7e:	cd b7       	in	r28, 0x3d	; 61
    3b80:	de b7       	in	r29, 0x3e	; 62
    3b82:	6d 97       	sbiw	r28, 0x1d	; 29
    3b84:	0f b6       	in	r0, 0x3f	; 63
    3b86:	f8 94       	cli
    3b88:	de bf       	out	0x3e, r29	; 62
    3b8a:	0f be       	out	0x3f, r0	; 63
    3b8c:	cd bf       	out	0x3d, r28	; 61
    3b8e:	8c 01       	movw	r16, r24
    3b90:	7a 01       	movw	r14, r20
	uint8_t iError = 0;
	uint32_t iStorageID = 0;
    3b92:	19 82       	std	Y+1, r1	; 0x01
    3b94:	1a 82       	std	Y+2, r1	; 0x02
    3b96:	1b 82       	std	Y+3, r1	; 0x03
    3b98:	1c 82       	std	Y+4, r1	; 0x04
	
	CHECK_CAMERA_CONNECTION;
    3b9a:	80 91 63 03 	lds	r24, 0x0363
    3b9e:	8b 30       	cpi	r24, 0x0B	; 11
    3ba0:	21 f4       	brne	.+8      	; 0x3baa <CameraControl_DeviceOperation_Capture+0x38>
    3ba2:	f8 01       	movw	r30, r16
    3ba4:	86 81       	ldd	r24, Z+6	; 0x06
    3ba6:	88 23       	and	r24, r24
    3ba8:	59 f4       	brne	.+22     	; 0x3bc0 <CameraControl_DeviceOperation_Capture+0x4e>
    3baa:	00 d0       	rcall	.+0      	; 0x3bac <CameraControl_DeviceOperation_Capture+0x3a>
    3bac:	81 e7       	ldi	r24, 0x71	; 113
    3bae:	9d e0       	ldi	r25, 0x0D	; 13
    3bb0:	ed b7       	in	r30, 0x3d	; 61
    3bb2:	fe b7       	in	r31, 0x3e	; 62
    3bb4:	92 83       	std	Z+2, r25	; 0x02
    3bb6:	81 83       	std	Z+1, r24	; 0x01
    3bb8:	8d d4       	rcall	.+2330   	; 0x44d4 <printf_P>
    3bba:	0f 90       	pop	r0
    3bbc:	0f 90       	pop	r0
    3bbe:	48 c0       	rjmp	.+144    	; 0x3c50 <CameraControl_DeviceOperation_Capture+0xde>

	// Open a new session
	iError = CameraControl_OpenSession(SIInterfaceInfo);
    3bc0:	c8 01       	movw	r24, r16
    3bc2:	6d 8f       	std	Y+29, r22	; 0x1d
    3bc4:	0e 94 3e 14 	call	0x287c	; 0x287c <CameraControl_OpenSession>
	if ( iError != PIPE_RWSTREAM_NoError )
    3bc8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3bca:	88 23       	and	r24, r24
    3bcc:	09 f0       	breq	.+2      	; 0x3bd0 <CameraControl_DeviceOperation_Capture+0x5e>
    3bce:	3d c0       	rjmp	.+122    	; 0x3c4a <CameraControl_DeviceOperation_Capture+0xd8>
		iError = -1;
		goto ExitFunction;
	}

	// Search for the appropriate storage ID given the type
	if ( CameraControl_GetStorageID ( enStorageType, &iStorageID )!=0 )
    3bd0:	86 2f       	mov	r24, r22
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	be 01       	movw	r22, r28
    3bd6:	6f 5f       	subi	r22, 0xFF	; 255
    3bd8:	7f 4f       	sbci	r23, 0xFF	; 255
    3bda:	97 df       	rcall	.-210    	; 0x3b0a <CameraControl_GetStorageID>
    3bdc:	00 97       	sbiw	r24, 0x00	; 0
    3bde:	59 f0       	breq	.+22     	; 0x3bf6 <CameraControl_DeviceOperation_Capture+0x84>
	{
		printf_P(PSTR("\r\nStorage not found. Run get_storage_info..."));
    3be0:	00 d0       	rcall	.+0      	; 0x3be2 <CameraControl_DeviceOperation_Capture+0x70>
    3be2:	84 e4       	ldi	r24, 0x44	; 68
    3be4:	9d e0       	ldi	r25, 0x0D	; 13
    3be6:	ed b7       	in	r30, 0x3d	; 61
    3be8:	fe b7       	in	r31, 0x3e	; 62
    3bea:	92 83       	std	Z+2, r25	; 0x02
    3bec:	81 83       	std	Z+1, r24	; 0x01
    3bee:	72 d4       	rcall	.+2276   	; 0x44d4 <printf_P>
		iError = -2;
		goto ExitFunction;
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
    3bf4:	2a c0       	rjmp	.+84     	; 0x3c4a <CameraControl_DeviceOperation_Capture+0xd8>

	// Initiate capture operation
	//  OpCode 0x100E (PTP_OC_InitiateCapture)
	//  Param1 Storage ID
	//  Param2 Object Format
	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    3bf6:	89 81       	ldd	r24, Y+1	; 0x01
    3bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bfa:	ab 81       	ldd	r26, Y+3	; 0x03
    3bfc:	bc 81       	ldd	r27, Y+4	; 0x04
    3bfe:	be 01       	movw	r22, r28
    3c00:	6b 5f       	subi	r22, 0xFB	; 251
    3c02:	7f 4f       	sbci	r23, 0xFF	; 255
    3c04:	28 e1       	ldi	r18, 0x18	; 24
    3c06:	fb 01       	movw	r30, r22
    3c08:	11 92       	st	Z+, r1
    3c0a:	2a 95       	dec	r18
    3c0c:	e9 f7       	brne	.-6      	; 0x3c08 <CameraControl_DeviceOperation_Capture+0x96>
    3c0e:	24 e1       	ldi	r18, 0x14	; 20
    3c10:	30 e0       	ldi	r19, 0x00	; 0
    3c12:	40 e0       	ldi	r20, 0x00	; 0
    3c14:	50 e0       	ldi	r21, 0x00	; 0
    3c16:	2d 83       	std	Y+5, r18	; 0x05
    3c18:	3e 83       	std	Y+6, r19	; 0x06
    3c1a:	4f 83       	std	Y+7, r20	; 0x07
    3c1c:	58 87       	std	Y+8, r21	; 0x08
    3c1e:	21 e0       	ldi	r18, 0x01	; 1
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	3a 87       	std	Y+10, r19	; 0x0a
    3c24:	29 87       	std	Y+9, r18	; 0x09
    3c26:	2e e0       	ldi	r18, 0x0E	; 14
    3c28:	30 e1       	ldi	r19, 0x10	; 16
    3c2a:	3c 87       	std	Y+12, r19	; 0x0c
    3c2c:	2b 87       	std	Y+11, r18	; 0x0b
    3c2e:	89 8b       	std	Y+17, r24	; 0x11
    3c30:	9a 8b       	std	Y+18, r25	; 0x12
    3c32:	ab 8b       	std	Y+19, r26	; 0x13
    3c34:	bc 8b       	std	Y+20, r27	; 0x14
    3c36:	c7 01       	movw	r24, r14
    3c38:	a0 e0       	ldi	r26, 0x00	; 0
    3c3a:	b0 e0       	ldi	r27, 0x00	; 0
    3c3c:	8d 8b       	std	Y+21, r24	; 0x15
    3c3e:	9e 8b       	std	Y+22, r25	; 0x16
    3c40:	af 8b       	std	Y+23, r26	; 0x17
    3c42:	b8 8f       	std	Y+24, r27	; 0x18
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = CPU_TO_LE16(PTP_OC_InitiateCapture),
			.Params        = {iStorageID, enFileFormat},
		};
	
	iError = CameraControl_InitiateTransaction ( SIInterfaceInfo, &PIMABlock );
    3c44:	c8 01       	movw	r24, r16
    3c46:	0e 94 07 14 	call	0x280e	; 0x280e <CameraControl_InitiateTransaction>
	if ( iError != PIPE_RWSTREAM_NoError )	goto ExitFunction;

ExitFunction:
	// Close the session
	iError = CameraControl_CloseSession(SIInterfaceInfo);
    3c4a:	c8 01       	movw	r24, r16
    3c4c:	0e 94 98 14 	call	0x2930	; 0x2930 <CameraControl_CloseSession>
	if ( iError != PIPE_RWSTREAM_NoError )
	{
	}

	return 0;
}
    3c50:	80 e0       	ldi	r24, 0x00	; 0
    3c52:	90 e0       	ldi	r25, 0x00	; 0
    3c54:	6d 96       	adiw	r28, 0x1d	; 29
    3c56:	0f b6       	in	r0, 0x3f	; 63
    3c58:	f8 94       	cli
    3c5a:	de bf       	out	0x3e, r29	; 62
    3c5c:	0f be       	out	0x3f, r0	; 63
    3c5e:	cd bf       	out	0x3d, r28	; 61
    3c60:	cf 91       	pop	r28
    3c62:	df 91       	pop	r29
    3c64:	1f 91       	pop	r17
    3c66:	0f 91       	pop	r16
    3c68:	ff 90       	pop	r15
    3c6a:	ef 90       	pop	r14
    3c6c:	08 95       	ret

00003c6e <CameraControl_DeviceOperation_GetPropertyDesc>:
/*------------------------------------------------------------------------------
 * CameraControl_DeviceOperation_GetPropertyDesc
 */
uint16_t CameraControl_DeviceOperation_GetPropertyDesc ( USB_ClassInfo_SI_Host_t* SIInterfaceInfo,
												 		 PTP_DEVPROPERTY_EN enPropertyType )
{
    3c6e:	6f 92       	push	r6
    3c70:	7f 92       	push	r7
    3c72:	9f 92       	push	r9
    3c74:	af 92       	push	r10
    3c76:	bf 92       	push	r11
    3c78:	cf 92       	push	r12
    3c7a:	df 92       	push	r13
    3c7c:	ef 92       	push	r14
    3c7e:	ff 92       	push	r15
    3c80:	0f 93       	push	r16
    3c82:	1f 93       	push	r17
    3c84:	df 93       	push	r29
    3c86:	cf 93       	push	r28
    3c88:	cd b7       	in	r28, 0x3d	; 61
    3c8a:	de b7       	in	r29, 0x3e	; 62
    3c8c:	68 97       	sbiw	r28, 0x18	; 24
    3c8e:	0f b6       	in	r0, 0x3f	; 63
    3c90:	f8 94       	cli
    3c92:	de bf       	out	0x3e, r29	; 62
    3c94:	0f be       	out	0x3f, r0	; 63
    3c96:	cd bf       	out	0x3d, r28	; 61
    3c98:	8c 01       	movw	r16, r24
    3c9a:	7b 01       	movw	r14, r22
	if ( iError != PIPE_RWSTREAM_NoError )
	{
	}

	return 0;
}
    3c9c:	6d b6       	in	r6, 0x3d	; 61
    3c9e:	7e b6       	in	r7, 0x3e	; 62
{
	uint8_t iError = 0;
	uint8_t iTemp1 = 0;
	uint8_t iTemp2 = 0;

	CHECK_CAMERA_CONNECTION;
    3ca0:	80 91 63 03 	lds	r24, 0x0363
    3ca4:	8b 30       	cpi	r24, 0x0B	; 11
    3ca6:	31 f4       	brne	.+12     	; 0x3cb4 <CameraControl_DeviceOperation_GetPropertyDesc+0x46>
    3ca8:	d8 01       	movw	r26, r16
    3caa:	16 96       	adiw	r26, 0x06	; 6
    3cac:	8c 91       	ld	r24, X
    3cae:	16 97       	sbiw	r26, 0x06	; 6
    3cb0:	88 23       	and	r24, r24
    3cb2:	59 f4       	brne	.+22     	; 0x3cca <CameraControl_DeviceOperation_GetPropertyDesc+0x5c>
    3cb4:	00 d0       	rcall	.+0      	; 0x3cb6 <CameraControl_DeviceOperation_GetPropertyDesc+0x48>
    3cb6:	8c e2       	ldi	r24, 0x2C	; 44
    3cb8:	9d e0       	ldi	r25, 0x0D	; 13
    3cba:	ed b7       	in	r30, 0x3d	; 61
    3cbc:	fe b7       	in	r31, 0x3e	; 62
    3cbe:	92 83       	std	Z+2, r25	; 0x02
    3cc0:	81 83       	std	Z+1, r24	; 0x01
    3cc2:	08 d4       	rcall	.+2064   	; 0x44d4 <printf_P>
    3cc4:	0f 90       	pop	r0
    3cc6:	0f 90       	pop	r0
    3cc8:	a7 c0       	rjmp	.+334    	; 0x3e18 <CameraControl_DeviceOperation_GetPropertyDesc+0x1aa>

	// Open a new session
	iError = CameraControl_OpenSession(SIInterfaceInfo);
    3cca:	c8 01       	movw	r24, r16
    3ccc:	0e 94 3e 14 	call	0x287c	; 0x287c <CameraControl_OpenSession>
	if ( iError != PIPE_RWSTREAM_NoError )
    3cd0:	88 23       	and	r24, r24
    3cd2:	09 f0       	breq	.+2      	; 0x3cd6 <CameraControl_DeviceOperation_GetPropertyDesc+0x68>
    3cd4:	a4 c0       	rjmp	.+328    	; 0x3e1e <CameraControl_DeviceOperation_GetPropertyDesc+0x1b0>
		return iError;
	}

	// Initiate capture operation
	//  OpCode 0x1014 (PTP_OC_GetDevicePropDesc)
	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    3cd6:	be 01       	movw	r22, r28
    3cd8:	6f 5f       	subi	r22, 0xFF	; 255
    3cda:	7f 4f       	sbci	r23, 0xFF	; 255
    3cdc:	88 e1       	ldi	r24, 0x18	; 24
    3cde:	db 01       	movw	r26, r22
    3ce0:	1d 92       	st	X+, r1
    3ce2:	8a 95       	dec	r24
    3ce4:	e9 f7       	brne	.-6      	; 0x3ce0 <CameraControl_DeviceOperation_GetPropertyDesc+0x72>
    3ce6:	80 e1       	ldi	r24, 0x10	; 16
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	a0 e0       	ldi	r26, 0x00	; 0
    3cec:	b0 e0       	ldi	r27, 0x00	; 0
    3cee:	89 83       	std	Y+1, r24	; 0x01
    3cf0:	9a 83       	std	Y+2, r25	; 0x02
    3cf2:	ab 83       	std	Y+3, r26	; 0x03
    3cf4:	bc 83       	std	Y+4, r27	; 0x04
    3cf6:	81 e0       	ldi	r24, 0x01	; 1
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	9e 83       	std	Y+6, r25	; 0x06
    3cfc:	8d 83       	std	Y+5, r24	; 0x05
    3cfe:	84 e1       	ldi	r24, 0x14	; 20
    3d00:	90 e1       	ldi	r25, 0x10	; 16
    3d02:	98 87       	std	Y+8, r25	; 0x08
    3d04:	8f 83       	std	Y+7, r24	; 0x07
    3d06:	c7 01       	movw	r24, r14
    3d08:	a0 e0       	ldi	r26, 0x00	; 0
    3d0a:	b0 e0       	ldi	r27, 0x00	; 0
    3d0c:	8d 87       	std	Y+13, r24	; 0x0d
    3d0e:	9e 87       	std	Y+14, r25	; 0x0e
    3d10:	af 87       	std	Y+15, r26	; 0x0f
    3d12:	b8 8b       	std	Y+16, r27	; 0x10
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = CPU_TO_LE16(PTP_OC_GetDevicePropDesc),
			.Params        = {enPropertyType},
		};
	
	iError = CameraControl_InitiateTransaction ( SIInterfaceInfo, &PIMABlock );
    3d14:	c8 01       	movw	r24, r16
    3d16:	0e 94 07 14 	call	0x280e	; 0x280e <CameraControl_InitiateTransaction>
	if ( iError != PIPE_RWSTREAM_NoError )	return -1;
    3d1a:	88 23       	and	r24, r24
    3d1c:	09 f0       	breq	.+2      	; 0x3d20 <CameraControl_DeviceOperation_GetPropertyDesc+0xb2>
    3d1e:	82 c0       	rjmp	.+260    	; 0x3e24 <CameraControl_DeviceOperation_GetPropertyDesc+0x1b6>

	// Get the size (in bytes) of the dataset
	uint16_t DatasetSize = (PIMABlock.DataLength - PIMA_COMMAND_SIZE(0));
    3d20:	e9 80       	ldd	r14, Y+1	; 0x01
    3d22:	fa 80       	ldd	r15, Y+2	; 0x02
    3d24:	e4 ef       	ldi	r30, 0xF4	; 244
    3d26:	ff ef       	ldi	r31, 0xFF	; 255
    3d28:	ee 0e       	add	r14, r30
    3d2a:	ff 1e       	adc	r15, r31

	if (DatasetSize==0) return -1;
    3d2c:	e1 14       	cp	r14, r1
    3d2e:	f1 04       	cpc	r15, r1
    3d30:	09 f4       	brne	.+2      	; 0x3d34 <CameraControl_DeviceOperation_GetPropertyDesc+0xc6>
    3d32:	78 c0       	rjmp	.+240    	; 0x3e24 <CameraControl_DeviceOperation_GetPropertyDesc+0x1b6>

	printf_P(PSTR(ESC_FG_CYAN "	Got property info of %d bytes.\r\n" ESC_FG_WHITE), DatasetSize);	
    3d34:	00 d0       	rcall	.+0      	; 0x3d36 <CameraControl_DeviceOperation_GetPropertyDesc+0xc8>
    3d36:	00 d0       	rcall	.+0      	; 0x3d38 <CameraControl_DeviceOperation_GetPropertyDesc+0xca>
    3d38:	80 e0       	ldi	r24, 0x00	; 0
    3d3a:	9d e0       	ldi	r25, 0x0D	; 13
    3d3c:	ad b7       	in	r26, 0x3d	; 61
    3d3e:	be b7       	in	r27, 0x3e	; 62
    3d40:	12 96       	adiw	r26, 0x02	; 2
    3d42:	9c 93       	st	X, r25
    3d44:	8e 93       	st	-X, r24
    3d46:	11 97       	sbiw	r26, 0x01	; 1
    3d48:	14 96       	adiw	r26, 0x04	; 4
    3d4a:	fc 92       	st	X, r15
    3d4c:	ee 92       	st	-X, r14
    3d4e:	13 97       	sbiw	r26, 0x03	; 3
    3d50:	c1 d3       	rcall	.+1922   	; 0x44d4 <printf_P>

	// Create a buffer large enough to hold the entire device info
	uint8_t Dataset[DatasetSize];
    3d52:	0f 90       	pop	r0
    3d54:	0f 90       	pop	r0
    3d56:	0f 90       	pop	r0
    3d58:	0f 90       	pop	r0
    3d5a:	ed b7       	in	r30, 0x3d	; 61
    3d5c:	fe b7       	in	r31, 0x3e	; 62
    3d5e:	ee 19       	sub	r30, r14
    3d60:	ff 09       	sbc	r31, r15
    3d62:	0f b6       	in	r0, 0x3f	; 63
    3d64:	f8 94       	cli
    3d66:	fe bf       	out	0x3e, r31	; 62
    3d68:	0f be       	out	0x3f, r0	; 63
    3d6a:	ed bf       	out	0x3d, r30	; 61
    3d6c:	cd b6       	in	r12, 0x3d	; 61
    3d6e:	de b6       	in	r13, 0x3e	; 62
    3d70:	08 94       	sec
    3d72:	c1 1c       	adc	r12, r1
    3d74:	d1 1c       	adc	r13, r1

	// Read in the data block data
	SI_Host_ReadData(SIInterfaceInfo, Dataset, DatasetSize);
    3d76:	c8 01       	movw	r24, r16
    3d78:	b6 01       	movw	r22, r12
    3d7a:	a7 01       	movw	r20, r14
    3d7c:	0e 94 b1 11 	call	0x2362	; 0x2362 <SI_Host_ReadData>
    3d80:	80 91 a6 00 	lds	r24, 0x00A6
    3d84:	8e 77       	andi	r24, 0x7E	; 126
    3d86:	80 93 a6 00 	sts	0x00A6, r24

	// Once all the data has been read, the pipe must be cleared before the response can be sent
	Pipe_ClearIN();

	// Create a pointer for walking through the info dataset 
	uint8_t* DatasetPos = Dataset;
    3d8a:	9c 2c       	mov	r9, r12
		if ( !(iTemp2 % 16) ) 
		{
			putchar('\r'); putchar('\n');
		}

		printf_P ( PSTR("%02x "), *DatasetPos );
    3d8c:	8a ef       	ldi	r24, 0xFA	; 250
    3d8e:	a8 2e       	mov	r10, r24
    3d90:	8c e0       	ldi	r24, 0x0C	; 12
    3d92:	b8 2e       	mov	r11, r24
	// Create a pointer for walking through the info dataset 
	uint8_t* DatasetPos = Dataset;
	iTemp1 = DatasetSize;

	// Read out the description
	while (iTemp1--)
    3d94:	26 c0       	rjmp	.+76     	; 0x3de2 <CameraControl_DeviceOperation_GetPropertyDesc+0x174>
	{
		if ( !(iTemp2 % 16) ) 
    3d96:	8f 70       	andi	r24, 0x0F	; 15
    3d98:	71 f4       	brne	.+28     	; 0x3db6 <CameraControl_DeviceOperation_GetPropertyDesc+0x148>
		{
			putchar('\r'); putchar('\n');
    3d9a:	60 91 6c 04 	lds	r22, 0x046C
    3d9e:	70 91 6d 04 	lds	r23, 0x046D
    3da2:	8d e0       	ldi	r24, 0x0D	; 13
    3da4:	90 e0       	ldi	r25, 0x00	; 0
    3da6:	59 d3       	rcall	.+1714   	; 0x445a <fputc>
    3da8:	60 91 6c 04 	lds	r22, 0x046C
    3dac:	70 91 6d 04 	lds	r23, 0x046D
    3db0:	8a e0       	ldi	r24, 0x0A	; 10
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	52 d3       	rcall	.+1700   	; 0x445a <fputc>
		}

		printf_P ( PSTR("%02x "), *DatasetPos );
    3db6:	00 d0       	rcall	.+0      	; 0x3db8 <CameraControl_DeviceOperation_GetPropertyDesc+0x14a>
    3db8:	00 d0       	rcall	.+0      	; 0x3dba <CameraControl_DeviceOperation_GetPropertyDesc+0x14c>
    3dba:	ed b7       	in	r30, 0x3d	; 61
    3dbc:	fe b7       	in	r31, 0x3e	; 62
    3dbe:	31 96       	adiw	r30, 0x01	; 1
    3dc0:	ad b7       	in	r26, 0x3d	; 61
    3dc2:	be b7       	in	r27, 0x3e	; 62
    3dc4:	12 96       	adiw	r26, 0x02	; 2
    3dc6:	bc 92       	st	X, r11
    3dc8:	ae 92       	st	-X, r10
    3dca:	11 97       	sbiw	r26, 0x01	; 1
    3dcc:	d6 01       	movw	r26, r12
    3dce:	8d 91       	ld	r24, X+
    3dd0:	6d 01       	movw	r12, r26
    3dd2:	82 83       	std	Z+2, r24	; 0x02
    3dd4:	13 82       	std	Z+3, r1	; 0x03
    3dd6:	7e d3       	rcall	.+1788   	; 0x44d4 <printf_P>

		DatasetPos++;	
    3dd8:	ea 94       	dec	r14
    3dda:	0f 90       	pop	r0
    3ddc:	0f 90       	pop	r0
    3dde:	0f 90       	pop	r0
    3de0:	0f 90       	pop	r0
    3de2:	8c 2d       	mov	r24, r12
    3de4:	89 19       	sub	r24, r9
	// Create a pointer for walking through the info dataset 
	uint8_t* DatasetPos = Dataset;
	iTemp1 = DatasetSize;

	// Read out the description
	while (iTemp1--)
    3de6:	ee 20       	and	r14, r14
    3de8:	b1 f6       	brne	.-84     	; 0x3d96 <CameraControl_DeviceOperation_GetPropertyDesc+0x128>
		printf_P ( PSTR("%02x "), *DatasetPos );

		DatasetPos++;	
		iTemp2++; 
	}
	putchar('\r'); putchar('\n');
    3dea:	60 91 6c 04 	lds	r22, 0x046C
    3dee:	70 91 6d 04 	lds	r23, 0x046D
    3df2:	8d e0       	ldi	r24, 0x0D	; 13
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	31 d3       	rcall	.+1634   	; 0x445a <fputc>
    3df8:	60 91 6c 04 	lds	r22, 0x046C
    3dfc:	70 91 6d 04 	lds	r23, 0x046D
    3e00:	8a e0       	ldi	r24, 0x0A	; 10
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	2a d3       	rcall	.+1620   	; 0x445a <fputc>

	// Receive the final response block from the device 
	iError = CameraControl_GetResponseAndCheck (SIInterfaceInfo, &PIMABlock);
    3e06:	c8 01       	movw	r24, r16
    3e08:	be 01       	movw	r22, r28
    3e0a:	6f 5f       	subi	r22, 0xFF	; 255
    3e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e0e:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <CameraControl_GetResponseAndCheck>

	// Close the session
	iError = CameraControl_CloseSession(SIInterfaceInfo);
    3e12:	c8 01       	movw	r24, r16
    3e14:	0e 94 98 14 	call	0x2930	; 0x2930 <CameraControl_CloseSession>
	if ( iError != PIPE_RWSTREAM_NoError )
	{
	}

	return 0;
    3e18:	20 e0       	ldi	r18, 0x00	; 0
    3e1a:	30 e0       	ldi	r19, 0x00	; 0
    3e1c:	05 c0       	rjmp	.+10     	; 0x3e28 <CameraControl_DeviceOperation_GetPropertyDesc+0x1ba>
	// Open a new session
	iError = CameraControl_OpenSession(SIInterfaceInfo);
	if ( iError != PIPE_RWSTREAM_NoError )
	{
		iError = -1;
		return iError;
    3e1e:	2f ef       	ldi	r18, 0xFF	; 255
    3e20:	30 e0       	ldi	r19, 0x00	; 0
    3e22:	02 c0       	rjmp	.+4      	; 0x3e28 <CameraControl_DeviceOperation_GetPropertyDesc+0x1ba>
	if ( iError != PIPE_RWSTREAM_NoError )	return -1;

	// Get the size (in bytes) of the dataset
	uint16_t DatasetSize = (PIMABlock.DataLength - PIMA_COMMAND_SIZE(0));

	if (DatasetSize==0) return -1;
    3e24:	2f ef       	ldi	r18, 0xFF	; 255
    3e26:	3f ef       	ldi	r19, 0xFF	; 255
	if ( iError != PIPE_RWSTREAM_NoError )
	{
	}

	return 0;
}
    3e28:	c9 01       	movw	r24, r18
    3e2a:	0f b6       	in	r0, 0x3f	; 63
    3e2c:	f8 94       	cli
    3e2e:	7e be       	out	0x3e, r7	; 62
    3e30:	0f be       	out	0x3f, r0	; 63
    3e32:	6d be       	out	0x3d, r6	; 61
    3e34:	68 96       	adiw	r28, 0x18	; 24
    3e36:	0f b6       	in	r0, 0x3f	; 63
    3e38:	f8 94       	cli
    3e3a:	de bf       	out	0x3e, r29	; 62
    3e3c:	0f be       	out	0x3f, r0	; 63
    3e3e:	cd bf       	out	0x3d, r28	; 61
    3e40:	cf 91       	pop	r28
    3e42:	df 91       	pop	r29
    3e44:	1f 91       	pop	r17
    3e46:	0f 91       	pop	r16
    3e48:	ff 90       	pop	r15
    3e4a:	ef 90       	pop	r14
    3e4c:	df 90       	pop	r13
    3e4e:	cf 90       	pop	r12
    3e50:	bf 90       	pop	r11
    3e52:	af 90       	pop	r10
    3e54:	9f 90       	pop	r9
    3e56:	7f 90       	pop	r7
    3e58:	6f 90       	pop	r6
    3e5a:	08 95       	ret

00003e5c <CameraControl_DeviceEvents_PollEvents>:

/*------------------------------------------------------------------------------
 * CameraControl_DeviceEvents_PollEvents
 */
uint8_t CameraControl_DeviceEvents_PollEvents( USB_ClassInfo_SI_Host_t* SIInterfaceInfo )
{
    3e5c:	0f 93       	push	r16
    3e5e:	1f 93       	push	r17
    3e60:	df 93       	push	r29
    3e62:	cf 93       	push	r28
    3e64:	cd b7       	in	r28, 0x3d	; 61
    3e66:	de b7       	in	r29, 0x3e	; 62
    3e68:	68 97       	sbiw	r28, 0x18	; 24
    3e6a:	0f b6       	in	r0, 0x3f	; 63
    3e6c:	f8 94       	cli
    3e6e:	de bf       	out	0x3e, r29	; 62
    3e70:	0f be       	out	0x3f, r0	; 63
    3e72:	cd bf       	out	0x3d, r28	; 61
    3e74:	8c 01       	movw	r16, r24
	uint8_t iError = 0;
	PIMA_Container_t PIMABlock;

	if (CAMERA_CONTROL_NOT_CONNECTED) return 0;
    3e76:	80 91 63 03 	lds	r24, 0x0363
    3e7a:	8b 30       	cpi	r24, 0x0B	; 11
    3e7c:	09 f0       	breq	.+2      	; 0x3e80 <CameraControl_DeviceEvents_PollEvents+0x24>
    3e7e:	ed c0       	rjmp	.+474    	; 0x405a <CameraControl_DeviceEvents_PollEvents+0x1fe>
    3e80:	f8 01       	movw	r30, r16
    3e82:	86 81       	ldd	r24, Z+6	; 0x06
    3e84:	88 23       	and	r24, r24
    3e86:	09 f4       	brne	.+2      	; 0x3e8a <CameraControl_DeviceEvents_PollEvents+0x2e>
    3e88:	e8 c0       	rjmp	.+464    	; 0x405a <CameraControl_DeviceEvents_PollEvents+0x1fe>
	
	// Check if a message is waiting
	if ( !SI_Host_IsEventReceived ( SIInterfaceInfo ) )
    3e8a:	c8 01       	movw	r24, r16
    3e8c:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <SI_Host_IsEventReceived>
    3e90:	88 23       	and	r24, r24
    3e92:	09 f4       	brne	.+2      	; 0x3e96 <CameraControl_DeviceEvents_PollEvents+0x3a>
    3e94:	e2 c0       	rjmp	.+452    	; 0x405a <CameraControl_DeviceEvents_PollEvents+0x1fe>
	{
		return 0;
	}
	
	printf_P(PSTR("\r\nNew event:"));
    3e96:	00 d0       	rcall	.+0      	; 0x3e98 <CameraControl_DeviceEvents_PollEvents+0x3c>
    3e98:	8c e6       	ldi	r24, 0x6C	; 108
    3e9a:	9f e0       	ldi	r25, 0x0F	; 15
    3e9c:	ed b7       	in	r30, 0x3d	; 61
    3e9e:	fe b7       	in	r31, 0x3e	; 62
    3ea0:	92 83       	std	Z+2, r25	; 0x02
    3ea2:	81 83       	std	Z+1, r24	; 0x01
    3ea4:	17 d3       	rcall	.+1582   	; 0x44d4 <printf_P>
		
	// Get the event data
	iError =  SI_Host_ReceiveEventHeader(SIInterfaceInfo, &PIMABlock) ;
    3ea6:	0f 90       	pop	r0
    3ea8:	0f 90       	pop	r0
    3eaa:	c8 01       	movw	r24, r16
    3eac:	be 01       	movw	r22, r28
    3eae:	6f 5f       	subi	r22, 0xFF	; 255
    3eb0:	7f 4f       	sbci	r23, 0xFF	; 255
    3eb2:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <SI_Host_ReceiveEventHeader>
    3eb6:	08 2f       	mov	r16, r24
	if ( iError != PIPE_RWSTREAM_NoError )	goto ExitFunction;
    3eb8:	88 23       	and	r24, r24
    3eba:	09 f0       	breq	.+2      	; 0x3ebe <CameraControl_DeviceEvents_PollEvents+0x62>
    3ebc:	d1 c0       	rjmp	.+418    	; 0x4060 <CameraControl_DeviceEvents_PollEvents+0x204>
	//		uint16_t Code; /**< Command, event or response code of the container. */
	//		uint32_t TransactionID; /**< Unique container ID to link blocks together. */
	//		uint32_t Params[3]; /**< Block parameters to be issued along with the block code (command blocks only). */
	//  } ATTR_PACKED PIMA_Container_t;
	
	if ( PIMABlock.Type != PIMA_CONTAINER_EventBlock )
    3ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    3ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ec2:	84 30       	cpi	r24, 0x04	; 4
    3ec4:	91 05       	cpc	r25, r1
    3ec6:	09 f0       	breq	.+2      	; 0x3eca <CameraControl_DeviceEvents_PollEvents+0x6e>
    3ec8:	ca c0       	rjmp	.+404    	; 0x405e <CameraControl_DeviceEvents_PollEvents+0x202>
	
	// Print out the transaction ID and event message
	// printf_P(PSTR("\r\nNew event:"));
	
	// Get the response code
	switch ( PIMABlock.Code )
    3eca:	8f 81       	ldd	r24, Y+7	; 0x07
    3ecc:	98 85       	ldd	r25, Y+8	; 0x08
    3ece:	f0 e4       	ldi	r31, 0x40	; 64
    3ed0:	86 30       	cpi	r24, 0x06	; 6
    3ed2:	9f 07       	cpc	r25, r31
    3ed4:	09 f4       	brne	.+2      	; 0x3ed8 <CameraControl_DeviceEvents_PollEvents+0x7c>
    3ed6:	77 c0       	rjmp	.+238    	; 0x3fc6 <CameraControl_DeviceEvents_PollEvents+0x16a>
    3ed8:	20 e4       	ldi	r18, 0x40	; 64
    3eda:	87 30       	cpi	r24, 0x07	; 7
    3edc:	92 07       	cpc	r25, r18
    3ede:	f0 f4       	brcc	.+60     	; 0x3f1c <CameraControl_DeviceEvents_PollEvents+0xc0>
    3ee0:	e0 e4       	ldi	r30, 0x40	; 64
    3ee2:	82 30       	cpi	r24, 0x02	; 2
    3ee4:	9e 07       	cpc	r25, r30
    3ee6:	09 f4       	brne	.+2      	; 0x3eea <CameraControl_DeviceEvents_PollEvents+0x8e>
    3ee8:	4a c0       	rjmp	.+148    	; 0x3f7e <CameraControl_DeviceEvents_PollEvents+0x122>
    3eea:	f0 e4       	ldi	r31, 0x40	; 64
    3eec:	83 30       	cpi	r24, 0x03	; 3
    3eee:	9f 07       	cpc	r25, r31
    3ef0:	50 f4       	brcc	.+20     	; 0x3f06 <CameraControl_DeviceEvents_PollEvents+0xaa>
    3ef2:	20 e4       	ldi	r18, 0x40	; 64
    3ef4:	80 30       	cpi	r24, 0x00	; 0
    3ef6:	92 07       	cpc	r25, r18
    3ef8:	d1 f1       	breq	.+116    	; 0x3f6e <CameraControl_DeviceEvents_PollEvents+0x112>
    3efa:	e0 e4       	ldi	r30, 0x40	; 64
    3efc:	81 30       	cpi	r24, 0x01	; 1
    3efe:	9e 07       	cpc	r25, r30
    3f00:	09 f0       	breq	.+2      	; 0x3f04 <CameraControl_DeviceEvents_PollEvents+0xa8>
    3f02:	ae c0       	rjmp	.+348    	; 0x4060 <CameraControl_DeviceEvents_PollEvents+0x204>
    3f04:	38 c0       	rjmp	.+112    	; 0x3f76 <CameraControl_DeviceEvents_PollEvents+0x11a>
    3f06:	f0 e4       	ldi	r31, 0x40	; 64
    3f08:	84 30       	cpi	r24, 0x04	; 4
    3f0a:	9f 07       	cpc	r25, r31
    3f0c:	09 f4       	brne	.+2      	; 0x3f10 <CameraControl_DeviceEvents_PollEvents+0xb4>
    3f0e:	43 c0       	rjmp	.+134    	; 0x3f96 <CameraControl_DeviceEvents_PollEvents+0x13a>
    3f10:	20 e4       	ldi	r18, 0x40	; 64
    3f12:	85 30       	cpi	r24, 0x05	; 5
    3f14:	92 07       	cpc	r25, r18
    3f16:	08 f0       	brcs	.+2      	; 0x3f1a <CameraControl_DeviceEvents_PollEvents+0xbe>
    3f18:	50 c0       	rjmp	.+160    	; 0x3fba <CameraControl_DeviceEvents_PollEvents+0x15e>
    3f1a:	37 c0       	rjmp	.+110    	; 0x3f8a <CameraControl_DeviceEvents_PollEvents+0x12e>
    3f1c:	e0 e4       	ldi	r30, 0x40	; 64
    3f1e:	8c 30       	cpi	r24, 0x0C	; 12
    3f20:	9e 07       	cpc	r25, r30
    3f22:	09 f4       	brne	.+2      	; 0x3f26 <CameraControl_DeviceEvents_PollEvents+0xca>
    3f24:	6d c0       	rjmp	.+218    	; 0x4000 <CameraControl_DeviceEvents_PollEvents+0x1a4>
    3f26:	f0 e4       	ldi	r31, 0x40	; 64
    3f28:	8d 30       	cpi	r24, 0x0D	; 13
    3f2a:	9f 07       	cpc	r25, r31
    3f2c:	80 f4       	brcc	.+32     	; 0x3f4e <CameraControl_DeviceEvents_PollEvents+0xf2>
    3f2e:	20 e4       	ldi	r18, 0x40	; 64
    3f30:	88 30       	cpi	r24, 0x08	; 8
    3f32:	92 07       	cpc	r25, r18
    3f34:	09 f4       	brne	.+2      	; 0x3f38 <CameraControl_DeviceEvents_PollEvents+0xdc>
    3f36:	53 c0       	rjmp	.+166    	; 0x3fde <CameraControl_DeviceEvents_PollEvents+0x182>
    3f38:	e0 e4       	ldi	r30, 0x40	; 64
    3f3a:	88 30       	cpi	r24, 0x08	; 8
    3f3c:	9e 07       	cpc	r25, r30
    3f3e:	08 f4       	brcc	.+2      	; 0x3f42 <CameraControl_DeviceEvents_PollEvents+0xe6>
    3f40:	48 c0       	rjmp	.+144    	; 0x3fd2 <CameraControl_DeviceEvents_PollEvents+0x176>
    3f42:	f0 e4       	ldi	r31, 0x40	; 64
    3f44:	8a 30       	cpi	r24, 0x0A	; 10
    3f46:	9f 07       	cpc	r25, r31
    3f48:	09 f0       	breq	.+2      	; 0x3f4c <CameraControl_DeviceEvents_PollEvents+0xf0>
    3f4a:	8a c0       	rjmp	.+276    	; 0x4060 <CameraControl_DeviceEvents_PollEvents+0x204>
    3f4c:	53 c0       	rjmp	.+166    	; 0x3ff4 <CameraControl_DeviceEvents_PollEvents+0x198>
    3f4e:	21 ec       	ldi	r18, 0xC1	; 193
    3f50:	81 30       	cpi	r24, 0x01	; 1
    3f52:	92 07       	cpc	r25, r18
    3f54:	09 f4       	brne	.+2      	; 0x3f58 <CameraControl_DeviceEvents_PollEvents+0xfc>
    3f56:	60 c0       	rjmp	.+192    	; 0x4018 <CameraControl_DeviceEvents_PollEvents+0x1bc>
    3f58:	e1 ec       	ldi	r30, 0xC1	; 193
    3f5a:	82 30       	cpi	r24, 0x02	; 2
    3f5c:	9e 07       	cpc	r25, r30
    3f5e:	09 f4       	brne	.+2      	; 0x3f62 <CameraControl_DeviceEvents_PollEvents+0x106>
    3f60:	61 c0       	rjmp	.+194    	; 0x4024 <CameraControl_DeviceEvents_PollEvents+0x1c8>
    3f62:	f0 e4       	ldi	r31, 0x40	; 64
    3f64:	8d 30       	cpi	r24, 0x0D	; 13
    3f66:	9f 07       	cpc	r25, r31
    3f68:	09 f0       	breq	.+2      	; 0x3f6c <CameraControl_DeviceEvents_PollEvents+0x110>
    3f6a:	7a c0       	rjmp	.+244    	; 0x4060 <CameraControl_DeviceEvents_PollEvents+0x204>
    3f6c:	4f c0       	rjmp	.+158    	; 0x400c <CameraControl_DeviceEvents_PollEvents+0x1b0>
				{
					// 
					break;
				}
				
				printf_P(PSTR("EVENT: Undefined.\r\n"));
    3f6e:	00 d0       	rcall	.+0      	; 0x3f70 <CameraControl_DeviceEvents_PollEvents+0x114>
    3f70:	88 e5       	ldi	r24, 0x58	; 88
    3f72:	9f e0       	ldi	r25, 0x0F	; 15
    3f74:	37 c0       	rjmp	.+110    	; 0x3fe4 <CameraControl_DeviceEvents_PollEvents+0x188>
				{
					// 
					break;
				}
				
				printf_P(PSTR("EVENT: Cancel transaction.\r\n"));
    3f76:	00 d0       	rcall	.+0      	; 0x3f78 <CameraControl_DeviceEvents_PollEvents+0x11c>
    3f78:	8b e3       	ldi	r24, 0x3B	; 59
    3f7a:	9f e0       	ldi	r25, 0x0F	; 15
    3f7c:	33 c0       	rjmp	.+102    	; 0x3fe4 <CameraControl_DeviceEvents_PollEvents+0x188>
				{
					// 
					break;
				}
				
				printf_P(PSTR("EVENT: Object added ID: 0x%x.\r\n"), PIMABlock.Params[0]);
    3f7e:	00 d0       	rcall	.+0      	; 0x3f80 <CameraControl_DeviceEvents_PollEvents+0x124>
    3f80:	00 d0       	rcall	.+0      	; 0x3f82 <CameraControl_DeviceEvents_PollEvents+0x126>
    3f82:	00 d0       	rcall	.+0      	; 0x3f84 <CameraControl_DeviceEvents_PollEvents+0x128>
    3f84:	8b e1       	ldi	r24, 0x1B	; 27
    3f86:	9f e0       	ldi	r25, 0x0F	; 15
    3f88:	0b c0       	rjmp	.+22     	; 0x3fa0 <CameraControl_DeviceEvents_PollEvents+0x144>
				{
					// 
					break;
				}
				
				printf_P(PSTR("EVENT: Object removed ID: 0x%x.\r\n"), PIMABlock.Params[0]);
    3f8a:	00 d0       	rcall	.+0      	; 0x3f8c <CameraControl_DeviceEvents_PollEvents+0x130>
    3f8c:	00 d0       	rcall	.+0      	; 0x3f8e <CameraControl_DeviceEvents_PollEvents+0x132>
    3f8e:	00 d0       	rcall	.+0      	; 0x3f90 <CameraControl_DeviceEvents_PollEvents+0x134>
    3f90:	89 ef       	ldi	r24, 0xF9	; 249
    3f92:	9e e0       	ldi	r25, 0x0E	; 14
    3f94:	05 c0       	rjmp	.+10     	; 0x3fa0 <CameraControl_DeviceEvents_PollEvents+0x144>
				{
					// 
					break;
				}
				
				printf_P(PSTR("EVENT: Storage added ID: 0x%x.\r\n"), PIMABlock.Params[0]);
    3f96:	00 d0       	rcall	.+0      	; 0x3f98 <CameraControl_DeviceEvents_PollEvents+0x13c>
    3f98:	00 d0       	rcall	.+0      	; 0x3f9a <CameraControl_DeviceEvents_PollEvents+0x13e>
    3f9a:	00 d0       	rcall	.+0      	; 0x3f9c <CameraControl_DeviceEvents_PollEvents+0x140>
    3f9c:	88 ed       	ldi	r24, 0xD8	; 216
    3f9e:	9e e0       	ldi	r25, 0x0E	; 14
    3fa0:	ed b7       	in	r30, 0x3d	; 61
    3fa2:	fe b7       	in	r31, 0x3e	; 62
    3fa4:	92 83       	std	Z+2, r25	; 0x02
    3fa6:	81 83       	std	Z+1, r24	; 0x01
    3fa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3faa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fac:	af 85       	ldd	r26, Y+15	; 0x0f
    3fae:	b8 89       	ldd	r27, Y+16	; 0x10
    3fb0:	83 83       	std	Z+3, r24	; 0x03
    3fb2:	94 83       	std	Z+4, r25	; 0x04
    3fb4:	a5 83       	std	Z+5, r26	; 0x05
    3fb6:	b6 83       	std	Z+6, r27	; 0x06
    3fb8:	46 c0       	rjmp	.+140    	; 0x4046 <CameraControl_DeviceEvents_PollEvents+0x1ea>
				{
					// 
					break;
				}
				
				printf_P(PSTR("EVENT: Object removed ID: 0x%x.\r\n"), PIMABlock.Params[0]);
    3fba:	00 d0       	rcall	.+0      	; 0x3fbc <CameraControl_DeviceEvents_PollEvents+0x160>
    3fbc:	00 d0       	rcall	.+0      	; 0x3fbe <CameraControl_DeviceEvents_PollEvents+0x162>
    3fbe:	00 d0       	rcall	.+0      	; 0x3fc0 <CameraControl_DeviceEvents_PollEvents+0x164>
    3fc0:	86 eb       	ldi	r24, 0xB6	; 182
    3fc2:	9e e0       	ldi	r25, 0x0E	; 14
    3fc4:	ed cf       	rjmp	.-38     	; 0x3fa0 <CameraControl_DeviceEvents_PollEvents+0x144>
				{
					// 
					break;
				}
				
				printf_P(PSTR("EVENT: Property changed CODE: 0x%x.\r\n"), PIMABlock.Params[0]);
    3fc6:	00 d0       	rcall	.+0      	; 0x3fc8 <CameraControl_DeviceEvents_PollEvents+0x16c>
    3fc8:	00 d0       	rcall	.+0      	; 0x3fca <CameraControl_DeviceEvents_PollEvents+0x16e>
    3fca:	00 d0       	rcall	.+0      	; 0x3fcc <CameraControl_DeviceEvents_PollEvents+0x170>
    3fcc:	80 e9       	ldi	r24, 0x90	; 144
    3fce:	9e e0       	ldi	r25, 0x0E	; 14
    3fd0:	e7 cf       	rjmp	.-50     	; 0x3fa0 <CameraControl_DeviceEvents_PollEvents+0x144>
				{
					// 
					break;
				}
				
				printf_P(PSTR("EVENT: Object info changed ID: 0x%x.\r\n"), PIMABlock.Params[0]);
    3fd2:	00 d0       	rcall	.+0      	; 0x3fd4 <CameraControl_DeviceEvents_PollEvents+0x178>
    3fd4:	00 d0       	rcall	.+0      	; 0x3fd6 <CameraControl_DeviceEvents_PollEvents+0x17a>
    3fd6:	00 d0       	rcall	.+0      	; 0x3fd8 <CameraControl_DeviceEvents_PollEvents+0x17c>
    3fd8:	89 e6       	ldi	r24, 0x69	; 105
    3fda:	9e e0       	ldi	r25, 0x0E	; 14
    3fdc:	e1 cf       	rjmp	.-62     	; 0x3fa0 <CameraControl_DeviceEvents_PollEvents+0x144>
				{
					// 
					break;
				}
				
				printf_P(PSTR("EVENT: Dev info changed.\r\n"));
    3fde:	00 d0       	rcall	.+0      	; 0x3fe0 <CameraControl_DeviceEvents_PollEvents+0x184>
    3fe0:	8e e4       	ldi	r24, 0x4E	; 78
    3fe2:	9e e0       	ldi	r25, 0x0E	; 14
    3fe4:	ed b7       	in	r30, 0x3d	; 61
    3fe6:	fe b7       	in	r31, 0x3e	; 62
    3fe8:	92 83       	std	Z+2, r25	; 0x02
    3fea:	81 83       	std	Z+1, r24	; 0x01
    3fec:	73 d2       	rcall	.+1254   	; 0x44d4 <printf_P>
			}	
			//	get new info	
			break;
    3fee:	0f 90       	pop	r0
    3ff0:	0f 90       	pop	r0
    3ff2:	36 c0       	rjmp	.+108    	; 0x4060 <CameraControl_DeviceEvents_PollEvents+0x204>
				{
					// 
					break;
				}
				
				printf_P(PSTR("EVENT: Storage full ID: 0x%x.\r\n"), PIMABlock.Params[0]);
    3ff4:	00 d0       	rcall	.+0      	; 0x3ff6 <CameraControl_DeviceEvents_PollEvents+0x19a>
    3ff6:	00 d0       	rcall	.+0      	; 0x3ff8 <CameraControl_DeviceEvents_PollEvents+0x19c>
    3ff8:	00 d0       	rcall	.+0      	; 0x3ffa <CameraControl_DeviceEvents_PollEvents+0x19e>
    3ffa:	8e e2       	ldi	r24, 0x2E	; 46
    3ffc:	9e e0       	ldi	r25, 0x0E	; 14
    3ffe:	d0 cf       	rjmp	.-96     	; 0x3fa0 <CameraControl_DeviceEvents_PollEvents+0x144>
				{
					// 
					break;
				}
				
				printf_P(PSTR("EVENT: Storage info changed ID: 0x%x.\r\n"), PIMABlock.Params[0]);
    4000:	00 d0       	rcall	.+0      	; 0x4002 <CameraControl_DeviceEvents_PollEvents+0x1a6>
    4002:	00 d0       	rcall	.+0      	; 0x4004 <CameraControl_DeviceEvents_PollEvents+0x1a8>
    4004:	00 d0       	rcall	.+0      	; 0x4006 <CameraControl_DeviceEvents_PollEvents+0x1aa>
    4006:	86 e0       	ldi	r24, 0x06	; 6
    4008:	9e e0       	ldi	r25, 0x0E	; 14
    400a:	ca cf       	rjmp	.-108    	; 0x3fa0 <CameraControl_DeviceEvents_PollEvents+0x144>
				{
					// 
					break;
				}
				
				printf_P(PSTR("EVENT: Capture complete TransID: 0x%x.\r\n"), PIMABlock.Params[0]);
    400c:	00 d0       	rcall	.+0      	; 0x400e <CameraControl_DeviceEvents_PollEvents+0x1b2>
    400e:	00 d0       	rcall	.+0      	; 0x4010 <CameraControl_DeviceEvents_PollEvents+0x1b4>
    4010:	00 d0       	rcall	.+0      	; 0x4012 <CameraControl_DeviceEvents_PollEvents+0x1b6>
    4012:	8d ed       	ldi	r24, 0xDD	; 221
    4014:	9d e0       	ldi	r25, 0x0D	; 13
    4016:	0b c0       	rjmp	.+22     	; 0x402e <CameraControl_DeviceEvents_PollEvents+0x1d2>
				{
					// 
					break;
				}
				
				printf_P(PSTR("EVENT [NIKON]: Object ready ID: 0x%x.\r\n"), PIMABlock.Params[0]);
    4018:	00 d0       	rcall	.+0      	; 0x401a <CameraControl_DeviceEvents_PollEvents+0x1be>
    401a:	00 d0       	rcall	.+0      	; 0x401c <CameraControl_DeviceEvents_PollEvents+0x1c0>
    401c:	00 d0       	rcall	.+0      	; 0x401e <CameraControl_DeviceEvents_PollEvents+0x1c2>
    401e:	85 eb       	ldi	r24, 0xB5	; 181
    4020:	9d e0       	ldi	r25, 0x0D	; 13
    4022:	05 c0       	rjmp	.+10     	; 0x402e <CameraControl_DeviceEvents_PollEvents+0x1d2>
				{
					// 
					break;
				}
				
				printf_P(PSTR("EVENT [NIKON]: Capture overflow ID: 0x%x.\r\n"), PIMABlock.Params[0]);
    4024:	00 d0       	rcall	.+0      	; 0x4026 <CameraControl_DeviceEvents_PollEvents+0x1ca>
    4026:	00 d0       	rcall	.+0      	; 0x4028 <CameraControl_DeviceEvents_PollEvents+0x1cc>
    4028:	00 d0       	rcall	.+0      	; 0x402a <CameraControl_DeviceEvents_PollEvents+0x1ce>
    402a:	89 e8       	ldi	r24, 0x89	; 137
    402c:	9d e0       	ldi	r25, 0x0D	; 13
    402e:	ed b7       	in	r30, 0x3d	; 61
    4030:	fe b7       	in	r31, 0x3e	; 62
    4032:	92 83       	std	Z+2, r25	; 0x02
    4034:	81 83       	std	Z+1, r24	; 0x01
    4036:	2d 85       	ldd	r18, Y+13	; 0x0d
    4038:	3e 85       	ldd	r19, Y+14	; 0x0e
    403a:	4f 85       	ldd	r20, Y+15	; 0x0f
    403c:	58 89       	ldd	r21, Y+16	; 0x10
    403e:	23 83       	std	Z+3, r18	; 0x03
    4040:	34 83       	std	Z+4, r19	; 0x04
    4042:	45 83       	std	Z+5, r20	; 0x05
    4044:	56 83       	std	Z+6, r21	; 0x06
    4046:	46 d2       	rcall	.+1164   	; 0x44d4 <printf_P>
			}	
			break;
    4048:	8d b7       	in	r24, 0x3d	; 61
    404a:	9e b7       	in	r25, 0x3e	; 62
    404c:	06 96       	adiw	r24, 0x06	; 6
    404e:	0f b6       	in	r0, 0x3f	; 63
    4050:	f8 94       	cli
    4052:	9e bf       	out	0x3e, r25	; 62
    4054:	0f be       	out	0x3f, r0	; 63
    4056:	8d bf       	out	0x3d, r24	; 61
    4058:	03 c0       	rjmp	.+6      	; 0x4060 <CameraControl_DeviceEvents_PollEvents+0x204>
	if (CAMERA_CONTROL_NOT_CONNECTED) return 0;
	
	// Check if a message is waiting
	if ( !SI_Host_IsEventReceived ( SIInterfaceInfo ) )
	{
		return 0;
    405a:	00 e0       	ldi	r16, 0x00	; 0
    405c:	01 c0       	rjmp	.+2      	; 0x4060 <CameraControl_DeviceEvents_PollEvents+0x204>
	//		uint32_t Params[3]; /**< Block parameters to be issued along with the block code (command blocks only). */
	//  } ATTR_PACKED PIMA_Container_t;
	
	if ( PIMABlock.Type != PIMA_CONTAINER_EventBlock )
	{
		iError = -1;
    405e:	0f ef       	ldi	r16, 0xFF	; 255
	}


ExitFunction:
	return iError;
}
    4060:	80 2f       	mov	r24, r16
    4062:	68 96       	adiw	r28, 0x18	; 24
    4064:	0f b6       	in	r0, 0x3f	; 63
    4066:	f8 94       	cli
    4068:	de bf       	out	0x3e, r29	; 62
    406a:	0f be       	out	0x3f, r0	; 63
    406c:	cd bf       	out	0x3d, r28	; 61
    406e:	cf 91       	pop	r28
    4070:	df 91       	pop	r29
    4072:	1f 91       	pop	r17
    4074:	0f 91       	pop	r16
    4076:	08 95       	ret

00004078 <tm_cmd_prop_desc>:
/*!
	Get a properties description
*/
/**************************************************************************/
void tm_cmd_prop_desc		(uint8_t argc, char **argv)
{
    4078:	df 93       	push	r29
    407a:	cf 93       	push	r28
    407c:	00 d0       	rcall	.+0      	; 0x407e <tm_cmd_prop_desc+0x6>
    407e:	cd b7       	in	r28, 0x3d	; 61
    4080:	de b7       	in	r29, 0x3e	; 62
	uint16_t iPropValue;

	if ( argc < 2 )
    4082:	82 30       	cpi	r24, 0x02	; 2
    4084:	68 f4       	brcc	.+26     	; 0x40a0 <tm_cmd_prop_desc+0x28>
	{
		printf("Not enough params.");
    4086:	00 d0       	rcall	.+0      	; 0x4088 <tm_cmd_prop_desc+0x10>
    4088:	84 e2       	ldi	r24, 0x24	; 36
    408a:	91 e0       	ldi	r25, 0x01	; 1
    408c:	ad b7       	in	r26, 0x3d	; 61
    408e:	be b7       	in	r27, 0x3e	; 62
    4090:	12 96       	adiw	r26, 0x02	; 2
    4092:	9c 93       	st	X, r25
    4094:	8e 93       	st	-X, r24
    4096:	11 97       	sbiw	r26, 0x01	; 1
    4098:	0c d2       	rcall	.+1048   	; 0x44b2 <printf>
		return;
    409a:	0f 90       	pop	r0
    409c:	0f 90       	pop	r0
    409e:	27 c0       	rjmp	.+78     	; 0x40ee <tm_cmd_prop_desc+0x76>
	} 

	sscanf( argv[1], "%x", &iPropValue );
    40a0:	00 d0       	rcall	.+0      	; 0x40a2 <tm_cmd_prop_desc+0x2a>
    40a2:	00 d0       	rcall	.+0      	; 0x40a4 <tm_cmd_prop_desc+0x2c>
    40a4:	00 d0       	rcall	.+0      	; 0x40a6 <tm_cmd_prop_desc+0x2e>
    40a6:	ed b7       	in	r30, 0x3d	; 61
    40a8:	fe b7       	in	r31, 0x3e	; 62
    40aa:	31 96       	adiw	r30, 0x01	; 1
    40ac:	db 01       	movw	r26, r22
    40ae:	12 96       	adiw	r26, 0x02	; 2
    40b0:	8d 91       	ld	r24, X+
    40b2:	9c 91       	ld	r25, X
    40b4:	13 97       	sbiw	r26, 0x03	; 3
    40b6:	ad b7       	in	r26, 0x3d	; 61
    40b8:	be b7       	in	r27, 0x3e	; 62
    40ba:	12 96       	adiw	r26, 0x02	; 2
    40bc:	9c 93       	st	X, r25
    40be:	8e 93       	st	-X, r24
    40c0:	11 97       	sbiw	r26, 0x01	; 1
    40c2:	87 e3       	ldi	r24, 0x37	; 55
    40c4:	91 e0       	ldi	r25, 0x01	; 1
    40c6:	93 83       	std	Z+3, r25	; 0x03
    40c8:	82 83       	std	Z+2, r24	; 0x02
    40ca:	ce 01       	movw	r24, r28
    40cc:	01 96       	adiw	r24, 0x01	; 1
    40ce:	95 83       	std	Z+5, r25	; 0x05
    40d0:	84 83       	std	Z+4, r24	; 0x04
    40d2:	57 d2       	rcall	.+1198   	; 0x4582 <sscanf>

 	CameraControl_DeviceOperation_GetPropertyDesc ( &DigitalCamera_SI_Interface,
    40d4:	ed b7       	in	r30, 0x3d	; 61
    40d6:	fe b7       	in	r31, 0x3e	; 62
    40d8:	36 96       	adiw	r30, 0x06	; 6
    40da:	0f b6       	in	r0, 0x3f	; 63
    40dc:	f8 94       	cli
    40de:	fe bf       	out	0x3e, r31	; 62
    40e0:	0f be       	out	0x3f, r0	; 63
    40e2:	ed bf       	out	0x3d, r30	; 61
    40e4:	69 81       	ldd	r22, Y+1	; 0x01
    40e6:	7a 81       	ldd	r23, Y+2	; 0x02
    40e8:	80 e0       	ldi	r24, 0x00	; 0
    40ea:	91 e0       	ldi	r25, 0x01	; 1
    40ec:	c0 dd       	rcall	.-1152   	; 0x3c6e <CameraControl_DeviceOperation_GetPropertyDesc>
													iPropValue );
}
    40ee:	0f 90       	pop	r0
    40f0:	0f 90       	pop	r0
    40f2:	cf 91       	pop	r28
    40f4:	df 91       	pop	r29
    40f6:	08 95       	ret

000040f8 <tm_cmd_capture>:
	Capture a still image
*/
/**************************************************************************/
void tm_cmd_capture			(uint8_t argc, char **argv)
{
 	CameraControl_DeviceOperation_Capture ( &DigitalCamera_SI_Interface,
    40f8:	80 e0       	ldi	r24, 0x00	; 0
    40fa:	91 e0       	ldi	r25, 0x01	; 1
    40fc:	64 e0       	ldi	r22, 0x04	; 4
    40fe:	70 e0       	ldi	r23, 0x00	; 0
    4100:	41 e0       	ldi	r20, 0x01	; 1
    4102:	58 e3       	ldi	r21, 0x38	; 56
											 PTP_ST_RemovableRAM,
											 PTP_OFC_EXIF_JPEG );
}
    4104:	36 cd       	rjmp	.-1428   	; 0x3b72 <CameraControl_DeviceOperation_Capture>

00004106 <tm_cmd_get_storage_info>:
/*!
	Print-out the current attached device's storage info   
*/
/**************************************************************************/
void tm_cmd_get_storage_info(uint8_t argc, char **argv)
{
    4106:	cf 93       	push	r28
    4108:	df 93       	push	r29
	CameraControl_OpenSession( &DigitalCamera_SI_Interface );
    410a:	c0 e0       	ldi	r28, 0x00	; 0
    410c:	d1 e0       	ldi	r29, 0x01	; 1
    410e:	ce 01       	movw	r24, r28
    4110:	0e 94 3e 14 	call	0x287c	; 0x287c <CameraControl_OpenSession>
	CameraControl_StorageInfo_Printout 	( &DigitalCamera_SI_Interface );
    4114:	ce 01       	movw	r24, r28
    4116:	a7 db       	rcall	.-2226   	; 0x3866 <CameraControl_StorageInfo_Printout>
	CameraControl_CloseSession( &DigitalCamera_SI_Interface );
    4118:	ce 01       	movw	r24, r28
    411a:	0e 94 98 14 	call	0x2930	; 0x2930 <CameraControl_CloseSession>
}
    411e:	df 91       	pop	r29
    4120:	cf 91       	pop	r28
    4122:	08 95       	ret

00004124 <tm_cmd_get_dev_info>:
	Print-out the current attached device info
*/
/**************************************************************************/
void tm_cmd_get_dev_info	(uint8_t argc, char **argv)
{
	CameraControl_DeviceInfo_Printout ( &DigitalCamera_SI_Interface );
    4124:	80 e0       	ldi	r24, 0x00	; 0
    4126:	91 e0       	ldi	r25, 0x01	; 1
    4128:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <CameraControl_DeviceInfo_Printout>

0000412c <tm_cmd_status>:
	Print-out the system current status   
*/
/**************************************************************************/
void tm_cmd_status (uint8_t argc, char **argv)
{
	printf_P ( PSTR("No Status") );
    412c:	00 d0       	rcall	.+0      	; 0x412e <tm_cmd_status+0x2>
    412e:	89 e7       	ldi	r24, 0x79	; 121
    4130:	9f e0       	ldi	r25, 0x0F	; 15
    4132:	ed b7       	in	r30, 0x3d	; 61
    4134:	fe b7       	in	r31, 0x3e	; 62
    4136:	92 83       	std	Z+2, r25	; 0x02
    4138:	81 83       	std	Z+1, r24	; 0x01
    413a:	cc d1       	rcall	.+920    	; 0x44d4 <printf_P>
    413c:	0f 90       	pop	r0
    413e:	0f 90       	pop	r0
}
    4140:	08 95       	ret

00004142 <tm_cmd_idn>:
	Print out an identification information   
*/
/**************************************************************************/
void tm_cmd_idn	(uint8_t argc, char **argv)
{
	printf_P ( PSTR("STABILY VERSION:%03d.%d;"			// The project
    4142:	8d b7       	in	r24, 0x3d	; 61
    4144:	9e b7       	in	r25, 0x3e	; 62
    4146:	08 97       	sbiw	r24, 0x08	; 8
    4148:	0f b6       	in	r0, 0x3f	; 63
    414a:	f8 94       	cli
    414c:	9e bf       	out	0x3e, r25	; 62
    414e:	0f be       	out	0x3f, r0	; 63
    4150:	8d bf       	out	0x3d, r24	; 61
    4152:	ed b7       	in	r30, 0x3d	; 61
    4154:	fe b7       	in	r31, 0x3e	; 62
    4156:	31 96       	adiw	r30, 0x01	; 1
    4158:	83 e8       	ldi	r24, 0x83	; 131
    415a:	9f e0       	ldi	r25, 0x0F	; 15
    415c:	ad b7       	in	r26, 0x3d	; 61
    415e:	be b7       	in	r27, 0x3e	; 62
    4160:	12 96       	adiw	r26, 0x02	; 2
    4162:	9c 93       	st	X, r25
    4164:	8e 93       	st	-X, r24
    4166:	11 97       	sbiw	r26, 0x01	; 1
    4168:	81 e0       	ldi	r24, 0x01	; 1
    416a:	90 e0       	ldi	r25, 0x00	; 0
    416c:	93 83       	std	Z+3, r25	; 0x03
    416e:	82 83       	std	Z+2, r24	; 0x02
    4170:	15 82       	std	Z+5, r1	; 0x05
    4172:	14 82       	std	Z+4, r1	; 0x04
    4174:	80 e1       	ldi	r24, 0x10	; 16
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	97 83       	std	Z+7, r25	; 0x07
    417a:	86 83       	std	Z+6, r24	; 0x06
    417c:	ab d1       	rcall	.+854    	; 0x44d4 <printf_P>
    417e:	8d b7       	in	r24, 0x3d	; 61
    4180:	9e b7       	in	r25, 0x3e	; 62
    4182:	08 96       	adiw	r24, 0x08	; 8
    4184:	0f b6       	in	r0, 0x3f	; 63
    4186:	f8 94       	cli
    4188:	9e bf       	out	0x3e, r25	; 62
    418a:	0f be       	out	0x3f, r0	; 63
    418c:	8d bf       	out	0x3d, r24	; 61
					"CLOCK:%03d MHZ;"					// CPU clock speed MHz
					"\r\n"),
					STABILY_VER,
					STABILY_SUBVER,
					STABILY_CLOCK_SPEED );
}
    418e:	08 95       	ret

00004190 <tm_cmd_echo_on>:
	echo is on
*/
/**************************************************************************/
void tm_cmd_echo_on(uint8_t argc, char **argv)
{
	g_EchoOnOff = 1;
    4190:	81 e0       	ldi	r24, 0x01	; 1
    4192:	80 93 3c 01 	sts	0x013C, r24
	printf_P (PSTR("OK\r\n"));
    4196:	00 d0       	rcall	.+0      	; 0x4198 <tm_cmd_echo_on+0x8>
    4198:	8d ea       	ldi	r24, 0xAD	; 173
    419a:	9f e0       	ldi	r25, 0x0F	; 15
    419c:	ed b7       	in	r30, 0x3d	; 61
    419e:	fe b7       	in	r31, 0x3e	; 62
    41a0:	92 83       	std	Z+2, r25	; 0x02
    41a2:	81 83       	std	Z+1, r24	; 0x01
    41a4:	97 d1       	rcall	.+814    	; 0x44d4 <printf_P>
    41a6:	0f 90       	pop	r0
    41a8:	0f 90       	pop	r0
}
    41aa:	08 95       	ret

000041ac <tm_cmd_echo_off>:
	echo is off    
*/
/**************************************************************************/
void tm_cmd_echo_off(uint8_t argc, char **argv)
{
	g_EchoOnOff = 0;
    41ac:	10 92 3c 01 	sts	0x013C, r1
	printf_P (PSTR("OK\r\n"));
    41b0:	00 d0       	rcall	.+0      	; 0x41b2 <tm_cmd_echo_off+0x6>
    41b2:	82 eb       	ldi	r24, 0xB2	; 178
    41b4:	9f e0       	ldi	r25, 0x0F	; 15
    41b6:	ed b7       	in	r30, 0x3d	; 61
    41b8:	fe b7       	in	r31, 0x3e	; 62
    41ba:	92 83       	std	Z+2, r25	; 0x02
    41bc:	81 83       	std	Z+1, r24	; 0x01
    41be:	8a d1       	rcall	.+788    	; 0x44d4 <printf_P>
    41c0:	0f 90       	pop	r0
    41c2:	0f 90       	pop	r0
}
    41c4:	08 95       	ret

000041c6 <Stabily_Shell_Menu>:
	This is the command prompt shell line printer command    
*/
/**************************************************************************/
void Stabily_Shell_Menu( void )
{
	if ( !g_leftDataToGet && g_EchoOnOff==1)
    41c6:	80 91 54 02 	lds	r24, 0x0254
    41ca:	88 23       	and	r24, r24
    41cc:	a9 f4       	brne	.+42     	; 0x41f8 <Stabily_Shell_Menu+0x32>
    41ce:	80 91 3c 01 	lds	r24, 0x013C
    41d2:	81 30       	cpi	r24, 0x01	; 1
    41d4:	89 f4       	brne	.+34     	; 0x41f8 <Stabily_Shell_Menu+0x32>
	{
    	printf_P( PSTR("\r\n"));
    41d6:	00 d0       	rcall	.+0      	; 0x41d8 <Stabily_Shell_Menu+0x12>
    41d8:	84 ee       	ldi	r24, 0xE4	; 228
    41da:	9f e0       	ldi	r25, 0x0F	; 15
    41dc:	ed b7       	in	r30, 0x3d	; 61
    41de:	fe b7       	in	r31, 0x3e	; 62
    41e0:	92 83       	std	Z+2, r25	; 0x02
    41e2:	81 83       	std	Z+1, r24	; 0x01
    41e4:	77 d1       	rcall	.+750    	; 0x44d4 <printf_P>
    	printf_P( PSTR(COMMAND_PROMPT));
    41e6:	88 ed       	ldi	r24, 0xD8	; 216
    41e8:	9f e0       	ldi	r25, 0x0F	; 15
    41ea:	ed b7       	in	r30, 0x3d	; 61
    41ec:	fe b7       	in	r31, 0x3e	; 62
    41ee:	92 83       	std	Z+2, r25	; 0x02
    41f0:	81 83       	std	Z+1, r24	; 0x01
    41f2:	70 d1       	rcall	.+736    	; 0x44d4 <printf_P>
    41f4:	0f 90       	pop	r0
    41f6:	0f 90       	pop	r0
    41f8:	08 95       	ret

000041fa <Stabily_Shell_Parse>:
	to find a suitable command line in the cmd_table. Then invokes the
	appropriate function given in the cmd_table.    
*/
/**************************************************************************/
void Stabily_Shell_Parse(char *cmd)
{
    41fa:	cf 92       	push	r12
    41fc:	df 92       	push	r13
    41fe:	ef 92       	push	r14
    4200:	ff 92       	push	r15
    4202:	0f 93       	push	r16
    4204:	1f 93       	push	r17
    4206:	df 93       	push	r29
    4208:	cf 93       	push	r28
    420a:	cd b7       	in	r28, 0x3d	; 61
    420c:	de b7       	in	r29, 0x3e	; 62
    420e:	c0 55       	subi	r28, 0x50	; 80
    4210:	d0 40       	sbci	r29, 0x00	; 0
    4212:	0f b6       	in	r0, 0x3f	; 63
    4214:	f8 94       	cli
    4216:	de bf       	out	0x3e, r29	; 62
    4218:	0f be       	out	0x3f, r0	; 63
    421a:	cd bf       	out	0x3d, r28	; 61
    421c:	7c 01       	movw	r14, r24
    uint8_t argc, i = 0;
    char *argv[40];

    fflush(stdout);

    argv[i] = strtok(cmd, " ");
    421e:	6a e3       	ldi	r22, 0x3A	; 58
    4220:	71 e0       	ldi	r23, 0x01	; 1
    4222:	e1 d0       	rcall	.+450    	; 0x43e6 <strtok>
    4224:	9a 83       	std	Y+2, r25	; 0x02
    4226:	89 83       	std	Y+1, r24	; 0x01
    4228:	8e 01       	movw	r16, r28
    422a:	0d 5f       	subi	r16, 0xFD	; 253
    422c:	1f 4f       	sbci	r17, 0xFF	; 255
	appropriate function given in the cmd_table.    
*/
/**************************************************************************/
void Stabily_Shell_Parse(char *cmd)
{
    uint8_t argc, i = 0;
    422e:	dd 24       	eor	r13, r13
    fflush(stdout);

    argv[i] = strtok(cmd, " ");
    do
    {
        argv[++i] = strtok(NULL, " ");
    4230:	d3 94       	inc	r13
    4232:	80 e0       	ldi	r24, 0x00	; 0
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	6a e3       	ldi	r22, 0x3A	; 58
    4238:	71 e0       	ldi	r23, 0x01	; 1
    423a:	d5 d0       	rcall	.+426    	; 0x43e6 <strtok>
    423c:	d8 01       	movw	r26, r16
    423e:	8d 93       	st	X+, r24
    4240:	9d 93       	st	X+, r25
    4242:	8d 01       	movw	r16, r26
    } while ((i < 40) && (argv[i] != NULL));
    4244:	bd 2d       	mov	r27, r13
    4246:	b8 32       	cpi	r27, 0x28	; 40
    4248:	11 f4       	brne	.+4      	; 0x424e <Stabily_Shell_Parse+0x54>
	appropriate function given in the cmd_table.    
*/
/**************************************************************************/
void Stabily_Shell_Parse(char *cmd)
{
    uint8_t argc, i = 0;
    424a:	cc 24       	eor	r12, r12
    424c:	14 c0       	rjmp	.+40     	; 0x4276 <Stabily_Shell_Parse+0x7c>

    argv[i] = strtok(cmd, " ");
    do
    {
        argv[++i] = strtok(NULL, " ");
    } while ((i < 40) && (argv[i] != NULL));
    424e:	00 97       	sbiw	r24, 0x00	; 0
    4250:	79 f7       	brne	.-34     	; 0x4230 <Stabily_Shell_Parse+0x36>
    4252:	fb cf       	rjmp	.-10     	; 0x424a <Stabily_Shell_Parse+0x50>
    
    argc = i;
    for (i=0; cmd_tbl[i].cmd != NULL; i++)
    {
        if (!strcmp(argv[0], cmd_tbl[i].cmd))
    4254:	89 81       	ldd	r24, Y+1	; 0x01
    4256:	9a 81       	ldd	r25, Y+2	; 0x02
    4258:	c9 d0       	rcall	.+402    	; 0x43ec <strcmp>
    425a:	00 97       	sbiw	r24, 0x00	; 0
    425c:	59 f4       	brne	.+22     	; 0x4274 <Stabily_Shell_Parse+0x7a>
        {
            cmd_tbl[i].func(argc, argv);
    425e:	d8 01       	movw	r26, r16
    4260:	12 96       	adiw	r26, 0x02	; 2
    4262:	ed 91       	ld	r30, X+
    4264:	fc 91       	ld	r31, X
    4266:	13 97       	sbiw	r26, 0x03	; 3
    4268:	8d 2d       	mov	r24, r13
    426a:	be 01       	movw	r22, r28
    426c:	6f 5f       	subi	r22, 0xFF	; 255
    426e:	7f 4f       	sbci	r23, 0xFF	; 255
    4270:	09 95       	icall
    4272:	25 c0       	rjmp	.+74     	; 0x42be <Stabily_Shell_Parse+0xc4>
    {
        argv[++i] = strtok(NULL, " ");
    } while ((i < 40) && (argv[i] != NULL));
    
    argc = i;
    for (i=0; cmd_tbl[i].cmd != NULL; i++)
    4274:	c3 94       	inc	r12
    4276:	8c 2d       	mov	r24, r12
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	8c 01       	movw	r16, r24
    427c:	00 0f       	add	r16, r16
    427e:	11 1f       	adc	r17, r17
    4280:	08 0f       	add	r16, r24
    4282:	19 1f       	adc	r17, r25
    4284:	00 0f       	add	r16, r16
    4286:	11 1f       	adc	r17, r17
    4288:	0e 57       	subi	r16, 0x7E	; 126
    428a:	1e 4f       	sbci	r17, 0xFE	; 254
    428c:	f8 01       	movw	r30, r16
    428e:	60 81       	ld	r22, Z
    4290:	71 81       	ldd	r23, Z+1	; 0x01
    4292:	61 15       	cp	r22, r1
    4294:	71 05       	cpc	r23, r1
    4296:	f1 f6       	brne	.-68     	; 0x4254 <Stabily_Shell_Parse+0x5a>
            cmd_tbl[i].func(argc, argv);
            Stabily_Shell_Menu();
            return;
        }
    }
    printf_P( PSTR("%s: Command not recognized.\r\n"), cmd);
    4298:	00 d0       	rcall	.+0      	; 0x429a <Stabily_Shell_Parse+0xa0>
    429a:	00 d0       	rcall	.+0      	; 0x429c <Stabily_Shell_Parse+0xa2>
    429c:	8a eb       	ldi	r24, 0xBA	; 186
    429e:	9f e0       	ldi	r25, 0x0F	; 15
    42a0:	ad b7       	in	r26, 0x3d	; 61
    42a2:	be b7       	in	r27, 0x3e	; 62
    42a4:	12 96       	adiw	r26, 0x02	; 2
    42a6:	9c 93       	st	X, r25
    42a8:	8e 93       	st	-X, r24
    42aa:	11 97       	sbiw	r26, 0x01	; 1
    42ac:	14 96       	adiw	r26, 0x04	; 4
    42ae:	fc 92       	st	X, r15
    42b0:	ee 92       	st	-X, r14
    42b2:	13 97       	sbiw	r26, 0x03	; 3
    42b4:	0f d1       	rcall	.+542    	; 0x44d4 <printf_P>

    Stabily_Shell_Menu();
    42b6:	0f 90       	pop	r0
    42b8:	0f 90       	pop	r0
    42ba:	0f 90       	pop	r0
    42bc:	0f 90       	pop	r0
    42be:	83 df       	rcall	.-250    	; 0x41c6 <Stabily_Shell_Menu>
}
    42c0:	c0 5b       	subi	r28, 0xB0	; 176
    42c2:	df 4f       	sbci	r29, 0xFF	; 255
    42c4:	0f b6       	in	r0, 0x3f	; 63
    42c6:	f8 94       	cli
    42c8:	de bf       	out	0x3e, r29	; 62
    42ca:	0f be       	out	0x3f, r0	; 63
    42cc:	cd bf       	out	0x3d, r28	; 61
    42ce:	cf 91       	pop	r28
    42d0:	df 91       	pop	r29
    42d2:	1f 91       	pop	r17
    42d4:	0f 91       	pop	r16
    42d6:	ff 90       	pop	r15
    42d8:	ef 90       	pop	r14
    42da:	df 90       	pop	r13
    42dc:	cf 90       	pop	r12
    42de:	08 95       	ret

000042e0 <Stabily_ShellRX>:
		up arraw = 		0x00 -> 0x48
		down arrow = 	0x00 -> 0x50
*/
/**************************************************************************/
void Stabily_ShellRX( void )
{
    42e0:	ef 92       	push	r14
    42e2:	ff 92       	push	r15
    42e4:	0f 93       	push	r16
    42e6:	1f 93       	push	r17
    42e8:	cf 93       	push	r28
    42ea:	df 93       	push	r29
			if (g_EchoOnOff)
			{
		        printf_P( PSTR("\r\n") );
			}				
	               			
			strcpy ((char*)(last_msg), (char*)(msg));	 
    42ec:	c7 ed       	ldi	r28, 0xD7	; 215
    42ee:	d2 e0       	ldi	r29, 0x02	; 2

	        *msg_ptr = '\0';

			if (g_EchoOnOff)
			{
		        printf_P( PSTR("\r\n") );
    42f0:	07 eb       	ldi	r16, 0xB7	; 183
    42f2:	1f e0       	ldi	r17, 0x0F	; 15
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
				UDR1 = DataByte;
    42f4:	48 e0       	ldi	r20, 0x08	; 8
    42f6:	f4 2e       	mov	r15, r20
    42f8:	30 e2       	ldi	r19, 0x20	; 32
    42fa:	e3 2e       	mov	r14, r19
		down arrow = 	0x00 -> 0x50
*/
/**************************************************************************/
void Stabily_ShellRX( void )
{
	while (Serial_IsCharReceived( ))
    42fc:	69 c0       	rjmp	.+210    	; 0x43d0 <Stabily_ShellRX+0xf0>
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    42fe:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    4302:	87 ff       	sbrs	r24, 7
    4304:	03 c0       	rjmp	.+6      	; 0x430c <Stabily_ShellRX+0x2c>
				  return -1;
				
				return UDR1;
    4306:	80 91 ce 00 	lds	r24, 0x00CE
    430a:	02 c0       	rjmp	.+4      	; 0x4310 <Stabily_ShellRX+0x30>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    430c:	8f ef       	ldi	r24, 0xFF	; 255
    430e:	9f ef       	ldi	r25, 0xFF	; 255
	{
		char c = Serial_ReceiveByte ( );

	    switch (c)
    4310:	8d 30       	cpi	r24, 0x0D	; 13
    4312:	31 f0       	breq	.+12     	; 0x4320 <Stabily_ShellRX+0x40>
    4314:	8a 33       	cpi	r24, 0x3A	; 58
    4316:	21 f0       	breq	.+8      	; 0x4320 <Stabily_ShellRX+0x40>
    4318:	88 30       	cpi	r24, 0x08	; 8
    431a:	09 f0       	breq	.+2      	; 0x431e <Stabily_ShellRX+0x3e>
    431c:	46 c0       	rjmp	.+140    	; 0x43aa <Stabily_ShellRX+0xca>
    431e:	24 c0       	rjmp	.+72     	; 0x4368 <Stabily_ShellRX+0x88>
		case ':':
	    case '\r':
	        // terminate the msg and reset the msg ptr. then send
	        // it to the handler for processing.

	        *msg_ptr = '\0';
    4320:	e0 91 55 02 	lds	r30, 0x0255
    4324:	f0 91 56 02 	lds	r31, 0x0256
    4328:	10 82       	st	Z, r1

			if (g_EchoOnOff)
    432a:	80 91 3c 01 	lds	r24, 0x013C
    432e:	88 23       	and	r24, r24
    4330:	41 f0       	breq	.+16     	; 0x4342 <Stabily_ShellRX+0x62>
			{
		        printf_P( PSTR("\r\n") );
    4332:	00 d0       	rcall	.+0      	; 0x4334 <Stabily_ShellRX+0x54>
    4334:	ed b7       	in	r30, 0x3d	; 61
    4336:	fe b7       	in	r31, 0x3e	; 62
    4338:	12 83       	std	Z+2, r17	; 0x02
    433a:	01 83       	std	Z+1, r16	; 0x01
    433c:	cb d0       	rcall	.+406    	; 0x44d4 <printf_P>
    433e:	0f 90       	pop	r0
    4340:	0f 90       	pop	r0
			}				
	               			
			strcpy ((char*)(last_msg), (char*)(msg));	 
    4342:	87 e5       	ldi	r24, 0x57	; 87
    4344:	92 e0       	ldi	r25, 0x02	; 2
    4346:	67 ed       	ldi	r22, 0xD7	; 215
    4348:	72 e0       	ldi	r23, 0x02	; 2
    434a:	59 d0       	rcall	.+178    	; 0x43fe <strcpy>
			if ( msg[0] != '\0' )	Stabily_Shell_Parse((char *)msg);
    434c:	80 91 d7 02 	lds	r24, 0x02D7
    4350:	88 23       	and	r24, r24
    4352:	21 f0       	breq	.+8      	; 0x435c <Stabily_ShellRX+0x7c>
    4354:	87 ed       	ldi	r24, 0xD7	; 215
    4356:	92 e0       	ldi	r25, 0x02	; 2
    4358:	50 df       	rcall	.-352    	; 0x41fa <Stabily_Shell_Parse>
    435a:	01 c0       	rjmp	.+2      	; 0x435e <Stabily_ShellRX+0x7e>
			else Stabily_Shell_Menu();
    435c:	34 df       	rcall	.-408    	; 0x41c6 <Stabily_Shell_Menu>
	        msg_ptr = msg;
    435e:	d0 93 56 02 	sts	0x0256, r29
    4362:	c0 93 55 02 	sts	0x0255, r28
	        break;
    4366:	34 c0       	rjmp	.+104    	; 0x43d0 <Stabily_ShellRX+0xf0>
            
	    case '\b':
	        if (msg_ptr > msg)
    4368:	80 91 55 02 	lds	r24, 0x0255
    436c:	90 91 56 02 	lds	r25, 0x0256
    4370:	f2 e0       	ldi	r31, 0x02	; 2
    4372:	87 3d       	cpi	r24, 0xD7	; 215
    4374:	9f 07       	cpc	r25, r31
    4376:	61 f1       	breq	.+88     	; 0x43d0 <Stabily_ShellRX+0xf0>
    4378:	58 f1       	brcs	.+86     	; 0x43d0 <Stabily_ShellRX+0xf0>
	        {
	            msg_ptr--;
    437a:	01 97       	sbiw	r24, 0x01	; 1
    437c:	90 93 56 02 	sts	0x0256, r25
    4380:	80 93 55 02 	sts	0x0255, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    4384:	80 91 c8 00 	lds	r24, 0x00C8
    4388:	85 ff       	sbrs	r24, 5
    438a:	fc cf       	rjmp	.-8      	; 0x4384 <Stabily_ShellRX+0xa4>
				UDR1 = DataByte;
    438c:	f0 92 ce 00 	sts	0x00CE, r15
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    4390:	80 91 c8 00 	lds	r24, 0x00C8
    4394:	85 ff       	sbrs	r24, 5
    4396:	fc cf       	rjmp	.-8      	; 0x4390 <Stabily_ShellRX+0xb0>
				UDR1 = DataByte;
    4398:	e0 92 ce 00 	sts	0x00CE, r14
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    439c:	80 91 c8 00 	lds	r24, 0x00C8
    43a0:	85 ff       	sbrs	r24, 5
    43a2:	fc cf       	rjmp	.-8      	; 0x439c <Stabily_ShellRX+0xbc>
				UDR1 = DataByte;
    43a4:	f0 92 ce 00 	sts	0x00CE, r15
    43a8:	13 c0       	rjmp	.+38     	; 0x43d0 <Stabily_ShellRX+0xf0>
			}
	        break;
			
           
	    default:
			if (g_EchoOnOff)
    43aa:	90 91 3c 01 	lds	r25, 0x013C
    43ae:	99 23       	and	r25, r25
    43b0:	31 f0       	breq	.+12     	; 0x43be <Stabily_ShellRX+0xde>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    43b2:	90 91 c8 00 	lds	r25, 0x00C8
    43b6:	95 ff       	sbrs	r25, 5
    43b8:	fc cf       	rjmp	.-8      	; 0x43b2 <Stabily_ShellRX+0xd2>
				UDR1 = DataByte;
    43ba:	80 93 ce 00 	sts	0x00CE, r24
				Serial_SendByte ( c );

	        *msg_ptr++ = c;
    43be:	e0 91 55 02 	lds	r30, 0x0255
    43c2:	f0 91 56 02 	lds	r31, 0x0256
    43c6:	81 93       	st	Z+, r24
    43c8:	f0 93 56 02 	sts	0x0256, r31
    43cc:	e0 93 55 02 	sts	0x0255, r30
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    43d0:	80 91 c8 00 	lds	r24, 0x00C8
		down arrow = 	0x00 -> 0x50
*/
/**************************************************************************/
void Stabily_ShellRX( void )
{
	while (Serial_IsCharReceived( ))
    43d4:	87 fd       	sbrc	r24, 7
    43d6:	93 cf       	rjmp	.-218    	; 0x42fe <Stabily_ShellRX+0x1e>

	        *msg_ptr++ = c;
	        break;
	    }
	}
}
    43d8:	df 91       	pop	r29
    43da:	cf 91       	pop	r28
    43dc:	1f 91       	pop	r17
    43de:	0f 91       	pop	r16
    43e0:	ff 90       	pop	r15
    43e2:	ef 90       	pop	r14
    43e4:	08 95       	ret

000043e6 <strtok>:
    43e6:	47 e5       	ldi	r20, 0x57	; 87
    43e8:	53 e0       	ldi	r21, 0x03	; 3
    43ea:	10 c0       	rjmp	.+32     	; 0x440c <strtok_r>

000043ec <strcmp>:
    43ec:	fb 01       	movw	r30, r22
    43ee:	dc 01       	movw	r26, r24
    43f0:	8d 91       	ld	r24, X+
    43f2:	01 90       	ld	r0, Z+
    43f4:	80 19       	sub	r24, r0
    43f6:	01 10       	cpse	r0, r1
    43f8:	d9 f3       	breq	.-10     	; 0x43f0 <strcmp+0x4>
    43fa:	99 0b       	sbc	r25, r25
    43fc:	08 95       	ret

000043fe <strcpy>:
    43fe:	fb 01       	movw	r30, r22
    4400:	dc 01       	movw	r26, r24
    4402:	01 90       	ld	r0, Z+
    4404:	0d 92       	st	X+, r0
    4406:	00 20       	and	r0, r0
    4408:	e1 f7       	brne	.-8      	; 0x4402 <strcpy+0x4>
    440a:	08 95       	ret

0000440c <strtok_r>:
    440c:	fa 01       	movw	r30, r20
    440e:	a1 91       	ld	r26, Z+
    4410:	b0 81       	ld	r27, Z
    4412:	00 97       	sbiw	r24, 0x00	; 0
    4414:	19 f4       	brne	.+6      	; 0x441c <strtok_r+0x10>
    4416:	10 97       	sbiw	r26, 0x00	; 0
    4418:	e1 f0       	breq	.+56     	; 0x4452 <strtok_r+0x46>
    441a:	cd 01       	movw	r24, r26
    441c:	dc 01       	movw	r26, r24
    441e:	cd 01       	movw	r24, r26
    4420:	0d 90       	ld	r0, X+
    4422:	00 20       	and	r0, r0
    4424:	11 f4       	brne	.+4      	; 0x442a <strtok_r+0x1e>
    4426:	c0 01       	movw	r24, r0
    4428:	13 c0       	rjmp	.+38     	; 0x4450 <strtok_r+0x44>
    442a:	fb 01       	movw	r30, r22
    442c:	21 91       	ld	r18, Z+
    442e:	22 23       	and	r18, r18
    4430:	19 f0       	breq	.+6      	; 0x4438 <strtok_r+0x2c>
    4432:	20 15       	cp	r18, r0
    4434:	d9 f7       	brne	.-10     	; 0x442c <strtok_r+0x20>
    4436:	f3 cf       	rjmp	.-26     	; 0x441e <strtok_r+0x12>
    4438:	fb 01       	movw	r30, r22
    443a:	21 91       	ld	r18, Z+
    443c:	20 15       	cp	r18, r0
    443e:	19 f4       	brne	.+6      	; 0x4446 <strtok_r+0x3a>
    4440:	1e 92       	st	-X, r1
    4442:	11 96       	adiw	r26, 0x01	; 1
    4444:	06 c0       	rjmp	.+12     	; 0x4452 <strtok_r+0x46>
    4446:	22 23       	and	r18, r18
    4448:	c1 f7       	brne	.-16     	; 0x443a <strtok_r+0x2e>
    444a:	0d 90       	ld	r0, X+
    444c:	00 20       	and	r0, r0
    444e:	a1 f7       	brne	.-24     	; 0x4438 <strtok_r+0x2c>
    4450:	d0 01       	movw	r26, r0
    4452:	fa 01       	movw	r30, r20
    4454:	a1 93       	st	Z+, r26
    4456:	b0 83       	st	Z, r27
    4458:	08 95       	ret

0000445a <fputc>:
    445a:	0f 93       	push	r16
    445c:	1f 93       	push	r17
    445e:	cf 93       	push	r28
    4460:	df 93       	push	r29
    4462:	8c 01       	movw	r16, r24
    4464:	eb 01       	movw	r28, r22
    4466:	8b 81       	ldd	r24, Y+3	; 0x03
    4468:	81 ff       	sbrs	r24, 1
    446a:	1b c0       	rjmp	.+54     	; 0x44a2 <fputc+0x48>
    446c:	82 ff       	sbrs	r24, 2
    446e:	0d c0       	rjmp	.+26     	; 0x448a <fputc+0x30>
    4470:	2e 81       	ldd	r18, Y+6	; 0x06
    4472:	3f 81       	ldd	r19, Y+7	; 0x07
    4474:	8c 81       	ldd	r24, Y+4	; 0x04
    4476:	9d 81       	ldd	r25, Y+5	; 0x05
    4478:	28 17       	cp	r18, r24
    447a:	39 07       	cpc	r19, r25
    447c:	64 f4       	brge	.+24     	; 0x4496 <fputc+0x3c>
    447e:	e8 81       	ld	r30, Y
    4480:	f9 81       	ldd	r31, Y+1	; 0x01
    4482:	01 93       	st	Z+, r16
    4484:	f9 83       	std	Y+1, r31	; 0x01
    4486:	e8 83       	st	Y, r30
    4488:	06 c0       	rjmp	.+12     	; 0x4496 <fputc+0x3c>
    448a:	e8 85       	ldd	r30, Y+8	; 0x08
    448c:	f9 85       	ldd	r31, Y+9	; 0x09
    448e:	80 2f       	mov	r24, r16
    4490:	09 95       	icall
    4492:	00 97       	sbiw	r24, 0x00	; 0
    4494:	31 f4       	brne	.+12     	; 0x44a2 <fputc+0x48>
    4496:	8e 81       	ldd	r24, Y+6	; 0x06
    4498:	9f 81       	ldd	r25, Y+7	; 0x07
    449a:	01 96       	adiw	r24, 0x01	; 1
    449c:	9f 83       	std	Y+7, r25	; 0x07
    449e:	8e 83       	std	Y+6, r24	; 0x06
    44a0:	02 c0       	rjmp	.+4      	; 0x44a6 <fputc+0x4c>
    44a2:	0f ef       	ldi	r16, 0xFF	; 255
    44a4:	1f ef       	ldi	r17, 0xFF	; 255
    44a6:	c8 01       	movw	r24, r16
    44a8:	df 91       	pop	r29
    44aa:	cf 91       	pop	r28
    44ac:	1f 91       	pop	r17
    44ae:	0f 91       	pop	r16
    44b0:	08 95       	ret

000044b2 <printf>:
    44b2:	df 93       	push	r29
    44b4:	cf 93       	push	r28
    44b6:	cd b7       	in	r28, 0x3d	; 61
    44b8:	de b7       	in	r29, 0x3e	; 62
    44ba:	fe 01       	movw	r30, r28
    44bc:	35 96       	adiw	r30, 0x05	; 5
    44be:	61 91       	ld	r22, Z+
    44c0:	71 91       	ld	r23, Z+
    44c2:	80 91 6c 04 	lds	r24, 0x046C
    44c6:	90 91 6d 04 	lds	r25, 0x046D
    44ca:	af 01       	movw	r20, r30
    44cc:	7c d0       	rcall	.+248    	; 0x45c6 <vfprintf>
    44ce:	cf 91       	pop	r28
    44d0:	df 91       	pop	r29
    44d2:	08 95       	ret

000044d4 <printf_P>:
    44d4:	df 93       	push	r29
    44d6:	cf 93       	push	r28
    44d8:	cd b7       	in	r28, 0x3d	; 61
    44da:	de b7       	in	r29, 0x3e	; 62
    44dc:	fe 01       	movw	r30, r28
    44de:	35 96       	adiw	r30, 0x05	; 5
    44e0:	61 91       	ld	r22, Z+
    44e2:	71 91       	ld	r23, Z+
    44e4:	80 91 6c 04 	lds	r24, 0x046C
    44e8:	90 91 6d 04 	lds	r25, 0x046D
    44ec:	dc 01       	movw	r26, r24
    44ee:	13 96       	adiw	r26, 0x03	; 3
    44f0:	2c 91       	ld	r18, X
    44f2:	13 97       	sbiw	r26, 0x03	; 3
    44f4:	28 60       	ori	r18, 0x08	; 8
    44f6:	13 96       	adiw	r26, 0x03	; 3
    44f8:	2c 93       	st	X, r18
    44fa:	af 01       	movw	r20, r30
    44fc:	64 d0       	rcall	.+200    	; 0x45c6 <vfprintf>
    44fe:	e0 91 6c 04 	lds	r30, 0x046C
    4502:	f0 91 6d 04 	lds	r31, 0x046D
    4506:	23 81       	ldd	r18, Z+3	; 0x03
    4508:	27 7f       	andi	r18, 0xF7	; 247
    450a:	23 83       	std	Z+3, r18	; 0x03
    450c:	cf 91       	pop	r28
    450e:	df 91       	pop	r29
    4510:	08 95       	ret

00004512 <puts_P>:
    4512:	ef 92       	push	r14
    4514:	ff 92       	push	r15
    4516:	0f 93       	push	r16
    4518:	1f 93       	push	r17
    451a:	cf 93       	push	r28
    451c:	df 93       	push	r29
    451e:	8c 01       	movw	r16, r24
    4520:	e0 91 6c 04 	lds	r30, 0x046C
    4524:	f0 91 6d 04 	lds	r31, 0x046D
    4528:	83 81       	ldd	r24, Z+3	; 0x03
    452a:	81 ff       	sbrs	r24, 1
    452c:	20 c0       	rjmp	.+64     	; 0x456e <puts_P+0x5c>
    452e:	c0 e0       	ldi	r28, 0x00	; 0
    4530:	d0 e0       	ldi	r29, 0x00	; 0
    4532:	0c c0       	rjmp	.+24     	; 0x454c <puts_P+0x3a>
    4534:	db 01       	movw	r26, r22
    4536:	18 96       	adiw	r26, 0x08	; 8
    4538:	ed 91       	ld	r30, X+
    453a:	fc 91       	ld	r31, X
    453c:	19 97       	sbiw	r26, 0x09	; 9
    453e:	09 95       	icall
    4540:	00 97       	sbiw	r24, 0x00	; 0
    4542:	11 f0       	breq	.+4      	; 0x4548 <puts_P+0x36>
    4544:	cf ef       	ldi	r28, 0xFF	; 255
    4546:	df ef       	ldi	r29, 0xFF	; 255
    4548:	0f 5f       	subi	r16, 0xFF	; 255
    454a:	1f 4f       	sbci	r17, 0xFF	; 255
    454c:	f8 01       	movw	r30, r16
    454e:	84 91       	lpm	r24, Z+
    4550:	60 91 6c 04 	lds	r22, 0x046C
    4554:	70 91 6d 04 	lds	r23, 0x046D
    4558:	88 23       	and	r24, r24
    455a:	61 f7       	brne	.-40     	; 0x4534 <puts_P+0x22>
    455c:	db 01       	movw	r26, r22
    455e:	18 96       	adiw	r26, 0x08	; 8
    4560:	ed 91       	ld	r30, X+
    4562:	fc 91       	ld	r31, X
    4564:	19 97       	sbiw	r26, 0x09	; 9
    4566:	8a e0       	ldi	r24, 0x0A	; 10
    4568:	09 95       	icall
    456a:	00 97       	sbiw	r24, 0x00	; 0
    456c:	11 f0       	breq	.+4      	; 0x4572 <puts_P+0x60>
    456e:	cf ef       	ldi	r28, 0xFF	; 255
    4570:	df ef       	ldi	r29, 0xFF	; 255
    4572:	ce 01       	movw	r24, r28
    4574:	df 91       	pop	r29
    4576:	cf 91       	pop	r28
    4578:	1f 91       	pop	r17
    457a:	0f 91       	pop	r16
    457c:	ff 90       	pop	r15
    457e:	ef 90       	pop	r14
    4580:	08 95       	ret

00004582 <sscanf>:
    4582:	df 93       	push	r29
    4584:	cf 93       	push	r28
    4586:	cd b7       	in	r28, 0x3d	; 61
    4588:	de b7       	in	r29, 0x3e	; 62
    458a:	2e 97       	sbiw	r28, 0x0e	; 14
    458c:	0f b6       	in	r0, 0x3f	; 63
    458e:	f8 94       	cli
    4590:	de bf       	out	0x3e, r29	; 62
    4592:	0f be       	out	0x3f, r0	; 63
    4594:	cd bf       	out	0x3d, r28	; 61
    4596:	85 e0       	ldi	r24, 0x05	; 5
    4598:	8c 83       	std	Y+4, r24	; 0x04
    459a:	8b 89       	ldd	r24, Y+19	; 0x13
    459c:	9c 89       	ldd	r25, Y+20	; 0x14
    459e:	9a 83       	std	Y+2, r25	; 0x02
    45a0:	89 83       	std	Y+1, r24	; 0x01
    45a2:	9e 01       	movw	r18, r28
    45a4:	29 5e       	subi	r18, 0xE9	; 233
    45a6:	3f 4f       	sbci	r19, 0xFF	; 255
    45a8:	ce 01       	movw	r24, r28
    45aa:	01 96       	adiw	r24, 0x01	; 1
    45ac:	6d 89       	ldd	r22, Y+21	; 0x15
    45ae:	7e 89       	ldd	r23, Y+22	; 0x16
    45b0:	a9 01       	movw	r20, r18
    45b2:	b6 d3       	rcall	.+1900   	; 0x4d20 <vfscanf>
    45b4:	2e 96       	adiw	r28, 0x0e	; 14
    45b6:	0f b6       	in	r0, 0x3f	; 63
    45b8:	f8 94       	cli
    45ba:	de bf       	out	0x3e, r29	; 62
    45bc:	0f be       	out	0x3f, r0	; 63
    45be:	cd bf       	out	0x3d, r28	; 61
    45c0:	cf 91       	pop	r28
    45c2:	df 91       	pop	r29
    45c4:	08 95       	ret

000045c6 <vfprintf>:
    45c6:	2f 92       	push	r2
    45c8:	3f 92       	push	r3
    45ca:	4f 92       	push	r4
    45cc:	5f 92       	push	r5
    45ce:	6f 92       	push	r6
    45d0:	7f 92       	push	r7
    45d2:	8f 92       	push	r8
    45d4:	9f 92       	push	r9
    45d6:	af 92       	push	r10
    45d8:	bf 92       	push	r11
    45da:	cf 92       	push	r12
    45dc:	df 92       	push	r13
    45de:	ef 92       	push	r14
    45e0:	ff 92       	push	r15
    45e2:	0f 93       	push	r16
    45e4:	1f 93       	push	r17
    45e6:	df 93       	push	r29
    45e8:	cf 93       	push	r28
    45ea:	cd b7       	in	r28, 0x3d	; 61
    45ec:	de b7       	in	r29, 0x3e	; 62
    45ee:	2c 97       	sbiw	r28, 0x0c	; 12
    45f0:	0f b6       	in	r0, 0x3f	; 63
    45f2:	f8 94       	cli
    45f4:	de bf       	out	0x3e, r29	; 62
    45f6:	0f be       	out	0x3f, r0	; 63
    45f8:	cd bf       	out	0x3d, r28	; 61
    45fa:	6c 01       	movw	r12, r24
    45fc:	1b 01       	movw	r2, r22
    45fe:	8a 01       	movw	r16, r20
    4600:	fc 01       	movw	r30, r24
    4602:	17 82       	std	Z+7, r1	; 0x07
    4604:	16 82       	std	Z+6, r1	; 0x06
    4606:	83 81       	ldd	r24, Z+3	; 0x03
    4608:	81 ff       	sbrs	r24, 1
    460a:	c4 c1       	rjmp	.+904    	; 0x4994 <vfprintf+0x3ce>
    460c:	2e 01       	movw	r4, r28
    460e:	08 94       	sec
    4610:	41 1c       	adc	r4, r1
    4612:	51 1c       	adc	r5, r1
    4614:	f6 01       	movw	r30, r12
    4616:	93 81       	ldd	r25, Z+3	; 0x03
    4618:	f1 01       	movw	r30, r2
    461a:	93 fd       	sbrc	r25, 3
    461c:	85 91       	lpm	r24, Z+
    461e:	93 ff       	sbrs	r25, 3
    4620:	81 91       	ld	r24, Z+
    4622:	1f 01       	movw	r2, r30
    4624:	88 23       	and	r24, r24
    4626:	09 f4       	brne	.+2      	; 0x462a <vfprintf+0x64>
    4628:	b1 c1       	rjmp	.+866    	; 0x498c <vfprintf+0x3c6>
    462a:	85 32       	cpi	r24, 0x25	; 37
    462c:	39 f4       	brne	.+14     	; 0x463c <vfprintf+0x76>
    462e:	93 fd       	sbrc	r25, 3
    4630:	85 91       	lpm	r24, Z+
    4632:	93 ff       	sbrs	r25, 3
    4634:	81 91       	ld	r24, Z+
    4636:	1f 01       	movw	r2, r30
    4638:	85 32       	cpi	r24, 0x25	; 37
    463a:	21 f4       	brne	.+8      	; 0x4644 <vfprintf+0x7e>
    463c:	90 e0       	ldi	r25, 0x00	; 0
    463e:	b6 01       	movw	r22, r12
    4640:	0c df       	rcall	.-488    	; 0x445a <fputc>
    4642:	e8 cf       	rjmp	.-48     	; 0x4614 <vfprintf+0x4e>
    4644:	ee 24       	eor	r14, r14
    4646:	ff 24       	eor	r15, r15
    4648:	20 e0       	ldi	r18, 0x00	; 0
    464a:	20 32       	cpi	r18, 0x20	; 32
    464c:	b0 f4       	brcc	.+44     	; 0x467a <vfprintf+0xb4>
    464e:	8b 32       	cpi	r24, 0x2B	; 43
    4650:	69 f0       	breq	.+26     	; 0x466c <vfprintf+0xa6>
    4652:	8c 32       	cpi	r24, 0x2C	; 44
    4654:	28 f4       	brcc	.+10     	; 0x4660 <vfprintf+0x9a>
    4656:	80 32       	cpi	r24, 0x20	; 32
    4658:	51 f0       	breq	.+20     	; 0x466e <vfprintf+0xa8>
    465a:	83 32       	cpi	r24, 0x23	; 35
    465c:	71 f4       	brne	.+28     	; 0x467a <vfprintf+0xb4>
    465e:	0b c0       	rjmp	.+22     	; 0x4676 <vfprintf+0xb0>
    4660:	8d 32       	cpi	r24, 0x2D	; 45
    4662:	39 f0       	breq	.+14     	; 0x4672 <vfprintf+0xac>
    4664:	80 33       	cpi	r24, 0x30	; 48
    4666:	49 f4       	brne	.+18     	; 0x467a <vfprintf+0xb4>
    4668:	21 60       	ori	r18, 0x01	; 1
    466a:	2c c0       	rjmp	.+88     	; 0x46c4 <vfprintf+0xfe>
    466c:	22 60       	ori	r18, 0x02	; 2
    466e:	24 60       	ori	r18, 0x04	; 4
    4670:	29 c0       	rjmp	.+82     	; 0x46c4 <vfprintf+0xfe>
    4672:	28 60       	ori	r18, 0x08	; 8
    4674:	27 c0       	rjmp	.+78     	; 0x46c4 <vfprintf+0xfe>
    4676:	20 61       	ori	r18, 0x10	; 16
    4678:	25 c0       	rjmp	.+74     	; 0x46c4 <vfprintf+0xfe>
    467a:	27 fd       	sbrc	r18, 7
    467c:	2c c0       	rjmp	.+88     	; 0x46d6 <vfprintf+0x110>
    467e:	38 2f       	mov	r19, r24
    4680:	30 53       	subi	r19, 0x30	; 48
    4682:	3a 30       	cpi	r19, 0x0A	; 10
    4684:	98 f4       	brcc	.+38     	; 0x46ac <vfprintf+0xe6>
    4686:	26 ff       	sbrs	r18, 6
    4688:	08 c0       	rjmp	.+16     	; 0x469a <vfprintf+0xd4>
    468a:	8e 2d       	mov	r24, r14
    468c:	88 0f       	add	r24, r24
    468e:	e8 2e       	mov	r14, r24
    4690:	ee 0c       	add	r14, r14
    4692:	ee 0c       	add	r14, r14
    4694:	e8 0e       	add	r14, r24
    4696:	e3 0e       	add	r14, r19
    4698:	15 c0       	rjmp	.+42     	; 0x46c4 <vfprintf+0xfe>
    469a:	8f 2d       	mov	r24, r15
    469c:	88 0f       	add	r24, r24
    469e:	f8 2e       	mov	r15, r24
    46a0:	ff 0c       	add	r15, r15
    46a2:	ff 0c       	add	r15, r15
    46a4:	f8 0e       	add	r15, r24
    46a6:	f3 0e       	add	r15, r19
    46a8:	20 62       	ori	r18, 0x20	; 32
    46aa:	0c c0       	rjmp	.+24     	; 0x46c4 <vfprintf+0xfe>
    46ac:	8e 32       	cpi	r24, 0x2E	; 46
    46ae:	21 f4       	brne	.+8      	; 0x46b8 <vfprintf+0xf2>
    46b0:	26 fd       	sbrc	r18, 6
    46b2:	6c c1       	rjmp	.+728    	; 0x498c <vfprintf+0x3c6>
    46b4:	20 64       	ori	r18, 0x40	; 64
    46b6:	06 c0       	rjmp	.+12     	; 0x46c4 <vfprintf+0xfe>
    46b8:	8c 36       	cpi	r24, 0x6C	; 108
    46ba:	11 f4       	brne	.+4      	; 0x46c0 <vfprintf+0xfa>
    46bc:	20 68       	ori	r18, 0x80	; 128
    46be:	02 c0       	rjmp	.+4      	; 0x46c4 <vfprintf+0xfe>
    46c0:	88 36       	cpi	r24, 0x68	; 104
    46c2:	49 f4       	brne	.+18     	; 0x46d6 <vfprintf+0x110>
    46c4:	f1 01       	movw	r30, r2
    46c6:	93 fd       	sbrc	r25, 3
    46c8:	85 91       	lpm	r24, Z+
    46ca:	93 ff       	sbrs	r25, 3
    46cc:	81 91       	ld	r24, Z+
    46ce:	1f 01       	movw	r2, r30
    46d0:	88 23       	and	r24, r24
    46d2:	09 f0       	breq	.+2      	; 0x46d6 <vfprintf+0x110>
    46d4:	ba cf       	rjmp	.-140    	; 0x464a <vfprintf+0x84>
    46d6:	98 2f       	mov	r25, r24
    46d8:	95 54       	subi	r25, 0x45	; 69
    46da:	93 30       	cpi	r25, 0x03	; 3
    46dc:	18 f0       	brcs	.+6      	; 0x46e4 <vfprintf+0x11e>
    46de:	90 52       	subi	r25, 0x20	; 32
    46e0:	93 30       	cpi	r25, 0x03	; 3
    46e2:	28 f4       	brcc	.+10     	; 0x46ee <vfprintf+0x128>
    46e4:	0c 5f       	subi	r16, 0xFC	; 252
    46e6:	1f 4f       	sbci	r17, 0xFF	; 255
    46e8:	ff e3       	ldi	r31, 0x3F	; 63
    46ea:	f9 83       	std	Y+1, r31	; 0x01
    46ec:	0d c0       	rjmp	.+26     	; 0x4708 <vfprintf+0x142>
    46ee:	83 36       	cpi	r24, 0x63	; 99
    46f0:	31 f0       	breq	.+12     	; 0x46fe <vfprintf+0x138>
    46f2:	83 37       	cpi	r24, 0x73	; 115
    46f4:	71 f0       	breq	.+28     	; 0x4712 <vfprintf+0x14c>
    46f6:	83 35       	cpi	r24, 0x53	; 83
    46f8:	09 f0       	breq	.+2      	; 0x46fc <vfprintf+0x136>
    46fa:	5c c0       	rjmp	.+184    	; 0x47b4 <vfprintf+0x1ee>
    46fc:	21 c0       	rjmp	.+66     	; 0x4740 <vfprintf+0x17a>
    46fe:	f8 01       	movw	r30, r16
    4700:	80 81       	ld	r24, Z
    4702:	89 83       	std	Y+1, r24	; 0x01
    4704:	0e 5f       	subi	r16, 0xFE	; 254
    4706:	1f 4f       	sbci	r17, 0xFF	; 255
    4708:	42 01       	movw	r8, r4
    470a:	71 e0       	ldi	r23, 0x01	; 1
    470c:	a7 2e       	mov	r10, r23
    470e:	b1 2c       	mov	r11, r1
    4710:	15 c0       	rjmp	.+42     	; 0x473c <vfprintf+0x176>
    4712:	62 e0       	ldi	r22, 0x02	; 2
    4714:	66 2e       	mov	r6, r22
    4716:	71 2c       	mov	r7, r1
    4718:	60 0e       	add	r6, r16
    471a:	71 1e       	adc	r7, r17
    471c:	f8 01       	movw	r30, r16
    471e:	80 80       	ld	r8, Z
    4720:	91 80       	ldd	r9, Z+1	; 0x01
    4722:	26 ff       	sbrs	r18, 6
    4724:	03 c0       	rjmp	.+6      	; 0x472c <vfprintf+0x166>
    4726:	6e 2d       	mov	r22, r14
    4728:	70 e0       	ldi	r23, 0x00	; 0
    472a:	02 c0       	rjmp	.+4      	; 0x4730 <vfprintf+0x16a>
    472c:	6f ef       	ldi	r22, 0xFF	; 255
    472e:	7f ef       	ldi	r23, 0xFF	; 255
    4730:	c4 01       	movw	r24, r8
    4732:	2c 87       	std	Y+12, r18	; 0x0c
    4734:	2c d4       	rcall	.+2136   	; 0x4f8e <strnlen>
    4736:	5c 01       	movw	r10, r24
    4738:	83 01       	movw	r16, r6
    473a:	2c 85       	ldd	r18, Y+12	; 0x0c
    473c:	2f 77       	andi	r18, 0x7F	; 127
    473e:	16 c0       	rjmp	.+44     	; 0x476c <vfprintf+0x1a6>
    4740:	52 e0       	ldi	r21, 0x02	; 2
    4742:	65 2e       	mov	r6, r21
    4744:	71 2c       	mov	r7, r1
    4746:	60 0e       	add	r6, r16
    4748:	71 1e       	adc	r7, r17
    474a:	f8 01       	movw	r30, r16
    474c:	80 80       	ld	r8, Z
    474e:	91 80       	ldd	r9, Z+1	; 0x01
    4750:	26 ff       	sbrs	r18, 6
    4752:	03 c0       	rjmp	.+6      	; 0x475a <vfprintf+0x194>
    4754:	6e 2d       	mov	r22, r14
    4756:	70 e0       	ldi	r23, 0x00	; 0
    4758:	02 c0       	rjmp	.+4      	; 0x475e <vfprintf+0x198>
    475a:	6f ef       	ldi	r22, 0xFF	; 255
    475c:	7f ef       	ldi	r23, 0xFF	; 255
    475e:	c4 01       	movw	r24, r8
    4760:	2c 87       	std	Y+12, r18	; 0x0c
    4762:	0a d4       	rcall	.+2068   	; 0x4f78 <strnlen_P>
    4764:	5c 01       	movw	r10, r24
    4766:	2c 85       	ldd	r18, Y+12	; 0x0c
    4768:	20 68       	ori	r18, 0x80	; 128
    476a:	83 01       	movw	r16, r6
    476c:	23 fd       	sbrc	r18, 3
    476e:	1e c0       	rjmp	.+60     	; 0x47ac <vfprintf+0x1e6>
    4770:	07 c0       	rjmp	.+14     	; 0x4780 <vfprintf+0x1ba>
    4772:	80 e2       	ldi	r24, 0x20	; 32
    4774:	90 e0       	ldi	r25, 0x00	; 0
    4776:	b6 01       	movw	r22, r12
    4778:	2c 87       	std	Y+12, r18	; 0x0c
    477a:	6f de       	rcall	.-802    	; 0x445a <fputc>
    477c:	fa 94       	dec	r15
    477e:	2c 85       	ldd	r18, Y+12	; 0x0c
    4780:	8f 2d       	mov	r24, r15
    4782:	90 e0       	ldi	r25, 0x00	; 0
    4784:	a8 16       	cp	r10, r24
    4786:	b9 06       	cpc	r11, r25
    4788:	a0 f3       	brcs	.-24     	; 0x4772 <vfprintf+0x1ac>
    478a:	10 c0       	rjmp	.+32     	; 0x47ac <vfprintf+0x1e6>
    478c:	f4 01       	movw	r30, r8
    478e:	27 fd       	sbrc	r18, 7
    4790:	85 91       	lpm	r24, Z+
    4792:	27 ff       	sbrs	r18, 7
    4794:	81 91       	ld	r24, Z+
    4796:	4f 01       	movw	r8, r30
    4798:	90 e0       	ldi	r25, 0x00	; 0
    479a:	b6 01       	movw	r22, r12
    479c:	2c 87       	std	Y+12, r18	; 0x0c
    479e:	5d de       	rcall	.-838    	; 0x445a <fputc>
    47a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    47a2:	f1 10       	cpse	r15, r1
    47a4:	fa 94       	dec	r15
    47a6:	08 94       	sec
    47a8:	a1 08       	sbc	r10, r1
    47aa:	b1 08       	sbc	r11, r1
    47ac:	a1 14       	cp	r10, r1
    47ae:	b1 04       	cpc	r11, r1
    47b0:	69 f7       	brne	.-38     	; 0x478c <vfprintf+0x1c6>
    47b2:	e9 c0       	rjmp	.+466    	; 0x4986 <vfprintf+0x3c0>
    47b4:	84 36       	cpi	r24, 0x64	; 100
    47b6:	11 f0       	breq	.+4      	; 0x47bc <vfprintf+0x1f6>
    47b8:	89 36       	cpi	r24, 0x69	; 105
    47ba:	41 f5       	brne	.+80     	; 0x480c <vfprintf+0x246>
    47bc:	27 ff       	sbrs	r18, 7
    47be:	08 c0       	rjmp	.+16     	; 0x47d0 <vfprintf+0x20a>
    47c0:	f8 01       	movw	r30, r16
    47c2:	60 81       	ld	r22, Z
    47c4:	71 81       	ldd	r23, Z+1	; 0x01
    47c6:	82 81       	ldd	r24, Z+2	; 0x02
    47c8:	93 81       	ldd	r25, Z+3	; 0x03
    47ca:	0c 5f       	subi	r16, 0xFC	; 252
    47cc:	1f 4f       	sbci	r17, 0xFF	; 255
    47ce:	09 c0       	rjmp	.+18     	; 0x47e2 <vfprintf+0x21c>
    47d0:	f8 01       	movw	r30, r16
    47d2:	60 81       	ld	r22, Z
    47d4:	71 81       	ldd	r23, Z+1	; 0x01
    47d6:	88 27       	eor	r24, r24
    47d8:	77 fd       	sbrc	r23, 7
    47da:	80 95       	com	r24
    47dc:	98 2f       	mov	r25, r24
    47de:	0e 5f       	subi	r16, 0xFE	; 254
    47e0:	1f 4f       	sbci	r17, 0xFF	; 255
    47e2:	4f e6       	ldi	r20, 0x6F	; 111
    47e4:	b4 2e       	mov	r11, r20
    47e6:	b2 22       	and	r11, r18
    47e8:	97 ff       	sbrs	r25, 7
    47ea:	09 c0       	rjmp	.+18     	; 0x47fe <vfprintf+0x238>
    47ec:	90 95       	com	r25
    47ee:	80 95       	com	r24
    47f0:	70 95       	com	r23
    47f2:	61 95       	neg	r22
    47f4:	7f 4f       	sbci	r23, 0xFF	; 255
    47f6:	8f 4f       	sbci	r24, 0xFF	; 255
    47f8:	9f 4f       	sbci	r25, 0xFF	; 255
    47fa:	f0 e8       	ldi	r31, 0x80	; 128
    47fc:	bf 2a       	or	r11, r31
    47fe:	a2 01       	movw	r20, r4
    4800:	2a e0       	ldi	r18, 0x0A	; 10
    4802:	30 e0       	ldi	r19, 0x00	; 0
    4804:	2c d4       	rcall	.+2136   	; 0x505e <__ultoa_invert>
    4806:	78 2e       	mov	r7, r24
    4808:	74 18       	sub	r7, r4
    480a:	44 c0       	rjmp	.+136    	; 0x4894 <vfprintf+0x2ce>
    480c:	85 37       	cpi	r24, 0x75	; 117
    480e:	31 f4       	brne	.+12     	; 0x481c <vfprintf+0x256>
    4810:	3f ee       	ldi	r19, 0xEF	; 239
    4812:	b3 2e       	mov	r11, r19
    4814:	b2 22       	and	r11, r18
    4816:	2a e0       	ldi	r18, 0x0A	; 10
    4818:	30 e0       	ldi	r19, 0x00	; 0
    481a:	25 c0       	rjmp	.+74     	; 0x4866 <vfprintf+0x2a0>
    481c:	99 ef       	ldi	r25, 0xF9	; 249
    481e:	b9 2e       	mov	r11, r25
    4820:	b2 22       	and	r11, r18
    4822:	8f 36       	cpi	r24, 0x6F	; 111
    4824:	c1 f0       	breq	.+48     	; 0x4856 <vfprintf+0x290>
    4826:	80 37       	cpi	r24, 0x70	; 112
    4828:	20 f4       	brcc	.+8      	; 0x4832 <vfprintf+0x26c>
    482a:	88 35       	cpi	r24, 0x58	; 88
    482c:	09 f0       	breq	.+2      	; 0x4830 <vfprintf+0x26a>
    482e:	ae c0       	rjmp	.+348    	; 0x498c <vfprintf+0x3c6>
    4830:	0d c0       	rjmp	.+26     	; 0x484c <vfprintf+0x286>
    4832:	80 37       	cpi	r24, 0x70	; 112
    4834:	21 f0       	breq	.+8      	; 0x483e <vfprintf+0x278>
    4836:	88 37       	cpi	r24, 0x78	; 120
    4838:	09 f0       	breq	.+2      	; 0x483c <vfprintf+0x276>
    483a:	a8 c0       	rjmp	.+336    	; 0x498c <vfprintf+0x3c6>
    483c:	02 c0       	rjmp	.+4      	; 0x4842 <vfprintf+0x27c>
    483e:	20 e1       	ldi	r18, 0x10	; 16
    4840:	b2 2a       	or	r11, r18
    4842:	b4 fe       	sbrs	r11, 4
    4844:	0b c0       	rjmp	.+22     	; 0x485c <vfprintf+0x296>
    4846:	84 e0       	ldi	r24, 0x04	; 4
    4848:	b8 2a       	or	r11, r24
    484a:	08 c0       	rjmp	.+16     	; 0x485c <vfprintf+0x296>
    484c:	b4 fe       	sbrs	r11, 4
    484e:	09 c0       	rjmp	.+18     	; 0x4862 <vfprintf+0x29c>
    4850:	e6 e0       	ldi	r30, 0x06	; 6
    4852:	be 2a       	or	r11, r30
    4854:	06 c0       	rjmp	.+12     	; 0x4862 <vfprintf+0x29c>
    4856:	28 e0       	ldi	r18, 0x08	; 8
    4858:	30 e0       	ldi	r19, 0x00	; 0
    485a:	05 c0       	rjmp	.+10     	; 0x4866 <vfprintf+0x2a0>
    485c:	20 e1       	ldi	r18, 0x10	; 16
    485e:	30 e0       	ldi	r19, 0x00	; 0
    4860:	02 c0       	rjmp	.+4      	; 0x4866 <vfprintf+0x2a0>
    4862:	20 e1       	ldi	r18, 0x10	; 16
    4864:	32 e0       	ldi	r19, 0x02	; 2
    4866:	b7 fe       	sbrs	r11, 7
    4868:	08 c0       	rjmp	.+16     	; 0x487a <vfprintf+0x2b4>
    486a:	f8 01       	movw	r30, r16
    486c:	60 81       	ld	r22, Z
    486e:	71 81       	ldd	r23, Z+1	; 0x01
    4870:	82 81       	ldd	r24, Z+2	; 0x02
    4872:	93 81       	ldd	r25, Z+3	; 0x03
    4874:	0c 5f       	subi	r16, 0xFC	; 252
    4876:	1f 4f       	sbci	r17, 0xFF	; 255
    4878:	07 c0       	rjmp	.+14     	; 0x4888 <vfprintf+0x2c2>
    487a:	f8 01       	movw	r30, r16
    487c:	60 81       	ld	r22, Z
    487e:	71 81       	ldd	r23, Z+1	; 0x01
    4880:	80 e0       	ldi	r24, 0x00	; 0
    4882:	90 e0       	ldi	r25, 0x00	; 0
    4884:	0e 5f       	subi	r16, 0xFE	; 254
    4886:	1f 4f       	sbci	r17, 0xFF	; 255
    4888:	a2 01       	movw	r20, r4
    488a:	e9 d3       	rcall	.+2002   	; 0x505e <__ultoa_invert>
    488c:	78 2e       	mov	r7, r24
    488e:	74 18       	sub	r7, r4
    4890:	ff e7       	ldi	r31, 0x7F	; 127
    4892:	bf 22       	and	r11, r31
    4894:	b6 fe       	sbrs	r11, 6
    4896:	0b c0       	rjmp	.+22     	; 0x48ae <vfprintf+0x2e8>
    4898:	2e ef       	ldi	r18, 0xFE	; 254
    489a:	b2 22       	and	r11, r18
    489c:	7e 14       	cp	r7, r14
    489e:	38 f4       	brcc	.+14     	; 0x48ae <vfprintf+0x2e8>
    48a0:	b4 fe       	sbrs	r11, 4
    48a2:	07 c0       	rjmp	.+14     	; 0x48b2 <vfprintf+0x2ec>
    48a4:	b2 fc       	sbrc	r11, 2
    48a6:	05 c0       	rjmp	.+10     	; 0x48b2 <vfprintf+0x2ec>
    48a8:	8f ee       	ldi	r24, 0xEF	; 239
    48aa:	b8 22       	and	r11, r24
    48ac:	02 c0       	rjmp	.+4      	; 0x48b2 <vfprintf+0x2ec>
    48ae:	a7 2c       	mov	r10, r7
    48b0:	01 c0       	rjmp	.+2      	; 0x48b4 <vfprintf+0x2ee>
    48b2:	ae 2c       	mov	r10, r14
    48b4:	8b 2d       	mov	r24, r11
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	b4 fe       	sbrs	r11, 4
    48ba:	0d c0       	rjmp	.+26     	; 0x48d6 <vfprintf+0x310>
    48bc:	fe 01       	movw	r30, r28
    48be:	e7 0d       	add	r30, r7
    48c0:	f1 1d       	adc	r31, r1
    48c2:	20 81       	ld	r18, Z
    48c4:	20 33       	cpi	r18, 0x30	; 48
    48c6:	19 f4       	brne	.+6      	; 0x48ce <vfprintf+0x308>
    48c8:	e9 ee       	ldi	r30, 0xE9	; 233
    48ca:	be 22       	and	r11, r30
    48cc:	09 c0       	rjmp	.+18     	; 0x48e0 <vfprintf+0x31a>
    48ce:	a3 94       	inc	r10
    48d0:	b2 fe       	sbrs	r11, 2
    48d2:	06 c0       	rjmp	.+12     	; 0x48e0 <vfprintf+0x31a>
    48d4:	04 c0       	rjmp	.+8      	; 0x48de <vfprintf+0x318>
    48d6:	86 78       	andi	r24, 0x86	; 134
    48d8:	90 70       	andi	r25, 0x00	; 0
    48da:	00 97       	sbiw	r24, 0x00	; 0
    48dc:	09 f0       	breq	.+2      	; 0x48e0 <vfprintf+0x31a>
    48de:	a3 94       	inc	r10
    48e0:	8b 2c       	mov	r8, r11
    48e2:	99 24       	eor	r9, r9
    48e4:	b3 fc       	sbrc	r11, 3
    48e6:	13 c0       	rjmp	.+38     	; 0x490e <vfprintf+0x348>
    48e8:	b0 fe       	sbrs	r11, 0
    48ea:	0e c0       	rjmp	.+28     	; 0x4908 <vfprintf+0x342>
    48ec:	af 14       	cp	r10, r15
    48ee:	28 f4       	brcc	.+10     	; 0x48fa <vfprintf+0x334>
    48f0:	e7 2c       	mov	r14, r7
    48f2:	ef 0c       	add	r14, r15
    48f4:	ea 18       	sub	r14, r10
    48f6:	af 2c       	mov	r10, r15
    48f8:	07 c0       	rjmp	.+14     	; 0x4908 <vfprintf+0x342>
    48fa:	e7 2c       	mov	r14, r7
    48fc:	05 c0       	rjmp	.+10     	; 0x4908 <vfprintf+0x342>
    48fe:	80 e2       	ldi	r24, 0x20	; 32
    4900:	90 e0       	ldi	r25, 0x00	; 0
    4902:	b6 01       	movw	r22, r12
    4904:	aa dd       	rcall	.-1196   	; 0x445a <fputc>
    4906:	a3 94       	inc	r10
    4908:	af 14       	cp	r10, r15
    490a:	c8 f3       	brcs	.-14     	; 0x48fe <vfprintf+0x338>
    490c:	04 c0       	rjmp	.+8      	; 0x4916 <vfprintf+0x350>
    490e:	af 14       	cp	r10, r15
    4910:	10 f4       	brcc	.+4      	; 0x4916 <vfprintf+0x350>
    4912:	fa 18       	sub	r15, r10
    4914:	01 c0       	rjmp	.+2      	; 0x4918 <vfprintf+0x352>
    4916:	ff 24       	eor	r15, r15
    4918:	84 fe       	sbrs	r8, 4
    491a:	0e c0       	rjmp	.+28     	; 0x4938 <vfprintf+0x372>
    491c:	80 e3       	ldi	r24, 0x30	; 48
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	b6 01       	movw	r22, r12
    4922:	9b dd       	rcall	.-1226   	; 0x445a <fputc>
    4924:	82 fe       	sbrs	r8, 2
    4926:	1d c0       	rjmp	.+58     	; 0x4962 <vfprintf+0x39c>
    4928:	81 fe       	sbrs	r8, 1
    492a:	03 c0       	rjmp	.+6      	; 0x4932 <vfprintf+0x36c>
    492c:	88 e5       	ldi	r24, 0x58	; 88
    492e:	90 e0       	ldi	r25, 0x00	; 0
    4930:	10 c0       	rjmp	.+32     	; 0x4952 <vfprintf+0x38c>
    4932:	88 e7       	ldi	r24, 0x78	; 120
    4934:	90 e0       	ldi	r25, 0x00	; 0
    4936:	0d c0       	rjmp	.+26     	; 0x4952 <vfprintf+0x38c>
    4938:	c4 01       	movw	r24, r8
    493a:	86 78       	andi	r24, 0x86	; 134
    493c:	90 70       	andi	r25, 0x00	; 0
    493e:	00 97       	sbiw	r24, 0x00	; 0
    4940:	81 f0       	breq	.+32     	; 0x4962 <vfprintf+0x39c>
    4942:	81 fc       	sbrc	r8, 1
    4944:	02 c0       	rjmp	.+4      	; 0x494a <vfprintf+0x384>
    4946:	80 e2       	ldi	r24, 0x20	; 32
    4948:	01 c0       	rjmp	.+2      	; 0x494c <vfprintf+0x386>
    494a:	8b e2       	ldi	r24, 0x2B	; 43
    494c:	b7 fc       	sbrc	r11, 7
    494e:	8d e2       	ldi	r24, 0x2D	; 45
    4950:	90 e0       	ldi	r25, 0x00	; 0
    4952:	b6 01       	movw	r22, r12
    4954:	82 dd       	rcall	.-1276   	; 0x445a <fputc>
    4956:	05 c0       	rjmp	.+10     	; 0x4962 <vfprintf+0x39c>
    4958:	80 e3       	ldi	r24, 0x30	; 48
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	b6 01       	movw	r22, r12
    495e:	7d dd       	rcall	.-1286   	; 0x445a <fputc>
    4960:	ea 94       	dec	r14
    4962:	7e 14       	cp	r7, r14
    4964:	c8 f3       	brcs	.-14     	; 0x4958 <vfprintf+0x392>
    4966:	7a 94       	dec	r7
    4968:	f2 01       	movw	r30, r4
    496a:	e7 0d       	add	r30, r7
    496c:	f1 1d       	adc	r31, r1
    496e:	80 81       	ld	r24, Z
    4970:	90 e0       	ldi	r25, 0x00	; 0
    4972:	b6 01       	movw	r22, r12
    4974:	72 dd       	rcall	.-1308   	; 0x445a <fputc>
    4976:	77 20       	and	r7, r7
    4978:	b1 f7       	brne	.-20     	; 0x4966 <vfprintf+0x3a0>
    497a:	05 c0       	rjmp	.+10     	; 0x4986 <vfprintf+0x3c0>
    497c:	80 e2       	ldi	r24, 0x20	; 32
    497e:	90 e0       	ldi	r25, 0x00	; 0
    4980:	b6 01       	movw	r22, r12
    4982:	6b dd       	rcall	.-1322   	; 0x445a <fputc>
    4984:	fa 94       	dec	r15
    4986:	ff 20       	and	r15, r15
    4988:	c9 f7       	brne	.-14     	; 0x497c <vfprintf+0x3b6>
    498a:	44 ce       	rjmp	.-888    	; 0x4614 <vfprintf+0x4e>
    498c:	f6 01       	movw	r30, r12
    498e:	26 81       	ldd	r18, Z+6	; 0x06
    4990:	37 81       	ldd	r19, Z+7	; 0x07
    4992:	02 c0       	rjmp	.+4      	; 0x4998 <vfprintf+0x3d2>
    4994:	2f ef       	ldi	r18, 0xFF	; 255
    4996:	3f ef       	ldi	r19, 0xFF	; 255
    4998:	c9 01       	movw	r24, r18
    499a:	2c 96       	adiw	r28, 0x0c	; 12
    499c:	0f b6       	in	r0, 0x3f	; 63
    499e:	f8 94       	cli
    49a0:	de bf       	out	0x3e, r29	; 62
    49a2:	0f be       	out	0x3f, r0	; 63
    49a4:	cd bf       	out	0x3d, r28	; 61
    49a6:	cf 91       	pop	r28
    49a8:	df 91       	pop	r29
    49aa:	1f 91       	pop	r17
    49ac:	0f 91       	pop	r16
    49ae:	ff 90       	pop	r15
    49b0:	ef 90       	pop	r14
    49b2:	df 90       	pop	r13
    49b4:	cf 90       	pop	r12
    49b6:	bf 90       	pop	r11
    49b8:	af 90       	pop	r10
    49ba:	9f 90       	pop	r9
    49bc:	8f 90       	pop	r8
    49be:	7f 90       	pop	r7
    49c0:	6f 90       	pop	r6
    49c2:	5f 90       	pop	r5
    49c4:	4f 90       	pop	r4
    49c6:	3f 90       	pop	r3
    49c8:	2f 90       	pop	r2
    49ca:	08 95       	ret

000049cc <putval>:
    49cc:	20 fd       	sbrc	r18, 0
    49ce:	09 c0       	rjmp	.+18     	; 0x49e2 <putval+0x16>
    49d0:	fc 01       	movw	r30, r24
    49d2:	23 fd       	sbrc	r18, 3
    49d4:	05 c0       	rjmp	.+10     	; 0x49e0 <putval+0x14>
    49d6:	22 ff       	sbrs	r18, 2
    49d8:	02 c0       	rjmp	.+4      	; 0x49de <putval+0x12>
    49da:	73 83       	std	Z+3, r23	; 0x03
    49dc:	62 83       	std	Z+2, r22	; 0x02
    49de:	51 83       	std	Z+1, r21	; 0x01
    49e0:	40 83       	st	Z, r20
    49e2:	08 95       	ret

000049e4 <mulacc>:
    49e4:	ef 92       	push	r14
    49e6:	ff 92       	push	r15
    49e8:	0f 93       	push	r16
    49ea:	1f 93       	push	r17
    49ec:	44 fd       	sbrc	r20, 4
    49ee:	10 c0       	rjmp	.+32     	; 0x4a10 <mulacc+0x2c>
    49f0:	46 fd       	sbrc	r20, 6
    49f2:	10 c0       	rjmp	.+32     	; 0x4a14 <mulacc+0x30>
    49f4:	db 01       	movw	r26, r22
    49f6:	fc 01       	movw	r30, r24
    49f8:	aa 0f       	add	r26, r26
    49fa:	bb 1f       	adc	r27, r27
    49fc:	ee 1f       	adc	r30, r30
    49fe:	ff 1f       	adc	r31, r31
    4a00:	10 94       	com	r1
    4a02:	d1 f7       	brne	.-12     	; 0x49f8 <mulacc+0x14>
    4a04:	6a 0f       	add	r22, r26
    4a06:	7b 1f       	adc	r23, r27
    4a08:	8e 1f       	adc	r24, r30
    4a0a:	9f 1f       	adc	r25, r31
    4a0c:	31 e0       	ldi	r19, 0x01	; 1
    4a0e:	03 c0       	rjmp	.+6      	; 0x4a16 <mulacc+0x32>
    4a10:	33 e0       	ldi	r19, 0x03	; 3
    4a12:	01 c0       	rjmp	.+2      	; 0x4a16 <mulacc+0x32>
    4a14:	34 e0       	ldi	r19, 0x04	; 4
    4a16:	66 0f       	add	r22, r22
    4a18:	77 1f       	adc	r23, r23
    4a1a:	88 1f       	adc	r24, r24
    4a1c:	99 1f       	adc	r25, r25
    4a1e:	31 50       	subi	r19, 0x01	; 1
    4a20:	d1 f7       	brne	.-12     	; 0x4a16 <mulacc+0x32>
    4a22:	7b 01       	movw	r14, r22
    4a24:	8c 01       	movw	r16, r24
    4a26:	e2 0e       	add	r14, r18
    4a28:	f1 1c       	adc	r15, r1
    4a2a:	01 1d       	adc	r16, r1
    4a2c:	11 1d       	adc	r17, r1
    4a2e:	a8 01       	movw	r20, r16
    4a30:	97 01       	movw	r18, r14
    4a32:	b7 01       	movw	r22, r14
    4a34:	ca 01       	movw	r24, r20
    4a36:	1f 91       	pop	r17
    4a38:	0f 91       	pop	r16
    4a3a:	ff 90       	pop	r15
    4a3c:	ef 90       	pop	r14
    4a3e:	08 95       	ret

00004a40 <skip_spaces>:
    4a40:	ef 92       	push	r14
    4a42:	ff 92       	push	r15
    4a44:	0f 93       	push	r16
    4a46:	1f 93       	push	r17
    4a48:	cf 93       	push	r28
    4a4a:	df 93       	push	r29
    4a4c:	8c 01       	movw	r16, r24
    4a4e:	c8 01       	movw	r24, r16
    4a50:	a9 d2       	rcall	.+1362   	; 0x4fa4 <fgetc>
    4a52:	ec 01       	movw	r28, r24
    4a54:	97 fd       	sbrc	r25, 7
    4a56:	06 c0       	rjmp	.+12     	; 0x4a64 <skip_spaces+0x24>
    4a58:	7c d2       	rcall	.+1272   	; 0x4f52 <isspace>
    4a5a:	00 97       	sbiw	r24, 0x00	; 0
    4a5c:	c1 f7       	brne	.-16     	; 0x4a4e <skip_spaces+0xe>
    4a5e:	ce 01       	movw	r24, r28
    4a60:	b8 01       	movw	r22, r16
    4a62:	e2 d2       	rcall	.+1476   	; 0x5028 <ungetc>
    4a64:	ce 01       	movw	r24, r28
    4a66:	df 91       	pop	r29
    4a68:	cf 91       	pop	r28
    4a6a:	1f 91       	pop	r17
    4a6c:	0f 91       	pop	r16
    4a6e:	ff 90       	pop	r15
    4a70:	ef 90       	pop	r14
    4a72:	08 95       	ret

00004a74 <conv_int>:
    4a74:	8f 92       	push	r8
    4a76:	9f 92       	push	r9
    4a78:	af 92       	push	r10
    4a7a:	bf 92       	push	r11
    4a7c:	df 92       	push	r13
    4a7e:	ef 92       	push	r14
    4a80:	ff 92       	push	r15
    4a82:	0f 93       	push	r16
    4a84:	1f 93       	push	r17
    4a86:	df 93       	push	r29
    4a88:	cf 93       	push	r28
    4a8a:	0f 92       	push	r0
    4a8c:	cd b7       	in	r28, 0x3d	; 61
    4a8e:	de b7       	in	r29, 0x3e	; 62
    4a90:	4c 01       	movw	r8, r24
    4a92:	d6 2e       	mov	r13, r22
    4a94:	5a 01       	movw	r10, r20
    4a96:	12 2f       	mov	r17, r18
    4a98:	85 d2       	rcall	.+1290   	; 0x4fa4 <fgetc>
    4a9a:	8b 32       	cpi	r24, 0x2B	; 43
    4a9c:	19 f0       	breq	.+6      	; 0x4aa4 <conv_int+0x30>
    4a9e:	8d 32       	cpi	r24, 0x2D	; 45
    4aa0:	41 f4       	brne	.+16     	; 0x4ab2 <conv_int+0x3e>
    4aa2:	10 68       	ori	r17, 0x80	; 128
    4aa4:	da 94       	dec	r13
    4aa6:	09 f4       	brne	.+2      	; 0x4aaa <conv_int+0x36>
    4aa8:	65 c0       	rjmp	.+202    	; 0x4b74 <conv_int+0x100>
    4aaa:	c4 01       	movw	r24, r8
    4aac:	7b d2       	rcall	.+1270   	; 0x4fa4 <fgetc>
    4aae:	97 fd       	sbrc	r25, 7
    4ab0:	61 c0       	rjmp	.+194    	; 0x4b74 <conv_int+0x100>
    4ab2:	31 2f       	mov	r19, r17
    4ab4:	3d 7f       	andi	r19, 0xFD	; 253
    4ab6:	23 2f       	mov	r18, r19
    4ab8:	20 73       	andi	r18, 0x30	; 48
    4aba:	e1 f4       	brne	.+56     	; 0x4af4 <conv_int+0x80>
    4abc:	80 33       	cpi	r24, 0x30	; 48
    4abe:	d1 f4       	brne	.+52     	; 0x4af4 <conv_int+0x80>
    4ac0:	da 94       	dec	r13
    4ac2:	09 f4       	brne	.+2      	; 0x4ac6 <conv_int+0x52>
    4ac4:	43 c0       	rjmp	.+134    	; 0x4b4c <conv_int+0xd8>
    4ac6:	c4 01       	movw	r24, r8
    4ac8:	39 83       	std	Y+1, r19	; 0x01
    4aca:	6c d2       	rcall	.+1240   	; 0x4fa4 <fgetc>
    4acc:	39 81       	ldd	r19, Y+1	; 0x01
    4ace:	97 fd       	sbrc	r25, 7
    4ad0:	3d c0       	rjmp	.+122    	; 0x4b4c <conv_int+0xd8>
    4ad2:	32 60       	ori	r19, 0x02	; 2
    4ad4:	88 37       	cpi	r24, 0x78	; 120
    4ad6:	11 f0       	breq	.+4      	; 0x4adc <conv_int+0x68>
    4ad8:	88 35       	cpi	r24, 0x58	; 88
    4ada:	51 f4       	brne	.+20     	; 0x4af0 <conv_int+0x7c>
    4adc:	30 64       	ori	r19, 0x40	; 64
    4ade:	da 94       	dec	r13
    4ae0:	a9 f1       	breq	.+106    	; 0x4b4c <conv_int+0xd8>
    4ae2:	c4 01       	movw	r24, r8
    4ae4:	39 83       	std	Y+1, r19	; 0x01
    4ae6:	5e d2       	rcall	.+1212   	; 0x4fa4 <fgetc>
    4ae8:	39 81       	ldd	r19, Y+1	; 0x01
    4aea:	97 ff       	sbrs	r25, 7
    4aec:	03 c0       	rjmp	.+6      	; 0x4af4 <conv_int+0x80>
    4aee:	2e c0       	rjmp	.+92     	; 0x4b4c <conv_int+0xd8>
    4af0:	36 ff       	sbrs	r19, 6
    4af2:	30 61       	ori	r19, 0x10	; 16
    4af4:	ee 24       	eor	r14, r14
    4af6:	ff 24       	eor	r15, r15
    4af8:	87 01       	movw	r16, r14
    4afa:	28 2f       	mov	r18, r24
    4afc:	20 53       	subi	r18, 0x30	; 48
    4afe:	28 30       	cpi	r18, 0x08	; 8
    4b00:	88 f0       	brcs	.+34     	; 0x4b24 <conv_int+0xb0>
    4b02:	34 fd       	sbrc	r19, 4
    4b04:	09 c0       	rjmp	.+18     	; 0x4b18 <conv_int+0xa4>
    4b06:	2a 30       	cpi	r18, 0x0A	; 10
    4b08:	68 f0       	brcs	.+26     	; 0x4b24 <conv_int+0xb0>
    4b0a:	36 ff       	sbrs	r19, 6
    4b0c:	05 c0       	rjmp	.+10     	; 0x4b18 <conv_int+0xa4>
    4b0e:	2f 7d       	andi	r18, 0xDF	; 223
    4b10:	42 2f       	mov	r20, r18
    4b12:	41 51       	subi	r20, 0x11	; 17
    4b14:	46 30       	cpi	r20, 0x06	; 6
    4b16:	28 f0       	brcs	.+10     	; 0x4b22 <conv_int+0xae>
    4b18:	b4 01       	movw	r22, r8
    4b1a:	39 83       	std	Y+1, r19	; 0x01
    4b1c:	85 d2       	rcall	.+1290   	; 0x5028 <ungetc>
    4b1e:	39 81       	ldd	r19, Y+1	; 0x01
    4b20:	12 c0       	rjmp	.+36     	; 0x4b46 <conv_int+0xd2>
    4b22:	27 50       	subi	r18, 0x07	; 7
    4b24:	c8 01       	movw	r24, r16
    4b26:	b7 01       	movw	r22, r14
    4b28:	43 2f       	mov	r20, r19
    4b2a:	39 83       	std	Y+1, r19	; 0x01
    4b2c:	5b df       	rcall	.-330    	; 0x49e4 <mulacc>
    4b2e:	7b 01       	movw	r14, r22
    4b30:	8c 01       	movw	r16, r24
    4b32:	39 81       	ldd	r19, Y+1	; 0x01
    4b34:	32 60       	ori	r19, 0x02	; 2
    4b36:	da 94       	dec	r13
    4b38:	61 f0       	breq	.+24     	; 0x4b52 <conv_int+0xde>
    4b3a:	c4 01       	movw	r24, r8
    4b3c:	39 83       	std	Y+1, r19	; 0x01
    4b3e:	32 d2       	rcall	.+1124   	; 0x4fa4 <fgetc>
    4b40:	39 81       	ldd	r19, Y+1	; 0x01
    4b42:	97 ff       	sbrs	r25, 7
    4b44:	da cf       	rjmp	.-76     	; 0x4afa <conv_int+0x86>
    4b46:	31 fd       	sbrc	r19, 1
    4b48:	04 c0       	rjmp	.+8      	; 0x4b52 <conv_int+0xde>
    4b4a:	14 c0       	rjmp	.+40     	; 0x4b74 <conv_int+0x100>
    4b4c:	ee 24       	eor	r14, r14
    4b4e:	ff 24       	eor	r15, r15
    4b50:	87 01       	movw	r16, r14
    4b52:	37 ff       	sbrs	r19, 7
    4b54:	08 c0       	rjmp	.+16     	; 0x4b66 <conv_int+0xf2>
    4b56:	10 95       	com	r17
    4b58:	00 95       	com	r16
    4b5a:	f0 94       	com	r15
    4b5c:	e0 94       	com	r14
    4b5e:	e1 1c       	adc	r14, r1
    4b60:	f1 1c       	adc	r15, r1
    4b62:	01 1d       	adc	r16, r1
    4b64:	11 1d       	adc	r17, r1
    4b66:	c5 01       	movw	r24, r10
    4b68:	b8 01       	movw	r22, r16
    4b6a:	a7 01       	movw	r20, r14
    4b6c:	23 2f       	mov	r18, r19
    4b6e:	2e df       	rcall	.-420    	; 0x49cc <putval>
    4b70:	81 e0       	ldi	r24, 0x01	; 1
    4b72:	01 c0       	rjmp	.+2      	; 0x4b76 <conv_int+0x102>
    4b74:	80 e0       	ldi	r24, 0x00	; 0
    4b76:	0f 90       	pop	r0
    4b78:	cf 91       	pop	r28
    4b7a:	df 91       	pop	r29
    4b7c:	1f 91       	pop	r17
    4b7e:	0f 91       	pop	r16
    4b80:	ff 90       	pop	r15
    4b82:	ef 90       	pop	r14
    4b84:	df 90       	pop	r13
    4b86:	bf 90       	pop	r11
    4b88:	af 90       	pop	r10
    4b8a:	9f 90       	pop	r9
    4b8c:	8f 90       	pop	r8
    4b8e:	08 95       	ret

00004b90 <conv_brk>:
    4b90:	6f 92       	push	r6
    4b92:	7f 92       	push	r7
    4b94:	8f 92       	push	r8
    4b96:	9f 92       	push	r9
    4b98:	af 92       	push	r10
    4b9a:	bf 92       	push	r11
    4b9c:	cf 92       	push	r12
    4b9e:	df 92       	push	r13
    4ba0:	ef 92       	push	r14
    4ba2:	ff 92       	push	r15
    4ba4:	0f 93       	push	r16
    4ba6:	1f 93       	push	r17
    4ba8:	df 93       	push	r29
    4baa:	cf 93       	push	r28
    4bac:	cd b7       	in	r28, 0x3d	; 61
    4bae:	de b7       	in	r29, 0x3e	; 62
    4bb0:	a1 97       	sbiw	r28, 0x21	; 33
    4bb2:	0f b6       	in	r0, 0x3f	; 63
    4bb4:	f8 94       	cli
    4bb6:	de bf       	out	0x3e, r29	; 62
    4bb8:	0f be       	out	0x3f, r0	; 63
    4bba:	cd bf       	out	0x3d, r28	; 61
    4bbc:	6c 01       	movw	r12, r24
    4bbe:	8a 01       	movw	r16, r20
    4bc0:	79 01       	movw	r14, r18
    4bc2:	9e 01       	movw	r18, r28
    4bc4:	2f 5f       	subi	r18, 0xFF	; 255
    4bc6:	3f 4f       	sbci	r19, 0xFF	; 255
    4bc8:	80 e2       	ldi	r24, 0x20	; 32
    4bca:	f9 01       	movw	r30, r18
    4bcc:	11 92       	st	Z+, r1
    4bce:	8a 95       	dec	r24
    4bd0:	e9 f7       	brne	.-6      	; 0x4bcc <conv_brk+0x3c>
    4bd2:	f6 01       	movw	r30, r12
    4bd4:	83 80       	ldd	r8, Z+3	; 0x03
    4bd6:	80 e0       	ldi	r24, 0x00	; 0
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	bb 24       	eor	r11, r11
    4bdc:	99 24       	eor	r9, r9
    4bde:	70 e0       	ldi	r23, 0x00	; 0
    4be0:	a1 e0       	ldi	r26, 0x01	; 1
    4be2:	b0 e0       	ldi	r27, 0x00	; 0
    4be4:	f7 01       	movw	r30, r14
    4be6:	83 fc       	sbrc	r8, 3
    4be8:	a5 90       	lpm	r10, Z+
    4bea:	83 fe       	sbrs	r8, 3
    4bec:	a1 90       	ld	r10, Z+
    4bee:	7f 01       	movw	r14, r30
    4bf0:	aa 20       	and	r10, r10
    4bf2:	09 f4       	brne	.+2      	; 0x4bf6 <conv_brk+0x66>
    4bf4:	7d c0       	rjmp	.+250    	; 0x4cf0 <conv_brk+0x160>
    4bf6:	fa 2d       	mov	r31, r10
    4bf8:	fe 35       	cpi	r31, 0x5E	; 94
    4bfa:	11 f4       	brne	.+4      	; 0x4c00 <conv_brk+0x70>
    4bfc:	00 97       	sbiw	r24, 0x00	; 0
    4bfe:	51 f1       	breq	.+84     	; 0x4c54 <conv_brk+0xc4>
    4c00:	47 2f       	mov	r20, r23
    4c02:	50 e0       	ldi	r21, 0x00	; 0
    4c04:	48 17       	cp	r20, r24
    4c06:	59 07       	cpc	r21, r25
    4c08:	44 f4       	brge	.+16     	; 0x4c1a <conv_brk+0x8a>
    4c0a:	4a 2d       	mov	r20, r10
    4c0c:	4d 35       	cpi	r20, 0x5D	; 93
    4c0e:	51 f1       	breq	.+84     	; 0x4c64 <conv_brk+0xd4>
    4c10:	4d 32       	cpi	r20, 0x2D	; 45
    4c12:	19 f4       	brne	.+6      	; 0x4c1a <conv_brk+0x8a>
    4c14:	99 20       	and	r9, r9
    4c16:	01 f1       	breq	.+64     	; 0x4c58 <conv_brk+0xc8>
    4c18:	03 c0       	rjmp	.+6      	; 0x4c20 <conv_brk+0x90>
    4c1a:	99 20       	and	r9, r9
    4c1c:	09 f4       	brne	.+2      	; 0x4c20 <conv_brk+0x90>
    4c1e:	ba 2c       	mov	r11, r10
    4c20:	4a 2d       	mov	r20, r10
    4c22:	46 95       	lsr	r20
    4c24:	46 95       	lsr	r20
    4c26:	46 95       	lsr	r20
    4c28:	f9 01       	movw	r30, r18
    4c2a:	e4 0f       	add	r30, r20
    4c2c:	f1 1d       	adc	r31, r1
    4c2e:	4a 2d       	mov	r20, r10
    4c30:	47 70       	andi	r20, 0x07	; 7
    4c32:	3d 01       	movw	r6, r26
    4c34:	02 c0       	rjmp	.+4      	; 0x4c3a <conv_brk+0xaa>
    4c36:	66 0c       	add	r6, r6
    4c38:	77 1c       	adc	r7, r7
    4c3a:	4a 95       	dec	r20
    4c3c:	e2 f7       	brpl	.-8      	; 0x4c36 <conv_brk+0xa6>
    4c3e:	90 80       	ld	r9, Z
    4c40:	96 28       	or	r9, r6
    4c42:	90 82       	st	Z, r9
    4c44:	ab 14       	cp	r10, r11
    4c46:	59 f0       	breq	.+22     	; 0x4c5e <conv_brk+0xce>
    4c48:	ab 14       	cp	r10, r11
    4c4a:	10 f4       	brcc	.+4      	; 0x4c50 <conv_brk+0xc0>
    4c4c:	a3 94       	inc	r10
    4c4e:	e8 cf       	rjmp	.-48     	; 0x4c20 <conv_brk+0x90>
    4c50:	aa 94       	dec	r10
    4c52:	e6 cf       	rjmp	.-52     	; 0x4c20 <conv_brk+0x90>
    4c54:	71 e0       	ldi	r23, 0x01	; 1
    4c56:	04 c0       	rjmp	.+8      	; 0x4c60 <conv_brk+0xd0>
    4c58:	99 24       	eor	r9, r9
    4c5a:	93 94       	inc	r9
    4c5c:	01 c0       	rjmp	.+2      	; 0x4c60 <conv_brk+0xd0>
    4c5e:	99 24       	eor	r9, r9
    4c60:	01 96       	adiw	r24, 0x01	; 1
    4c62:	c0 cf       	rjmp	.-128    	; 0x4be4 <conv_brk+0x54>
    4c64:	99 20       	and	r9, r9
    4c66:	19 f0       	breq	.+6      	; 0x4c6e <conv_brk+0xde>
    4c68:	8e 81       	ldd	r24, Y+6	; 0x06
    4c6a:	80 62       	ori	r24, 0x20	; 32
    4c6c:	8e 83       	std	Y+6, r24	; 0x06
    4c6e:	77 23       	and	r23, r23
    4c70:	51 f0       	breq	.+20     	; 0x4c86 <conv_brk+0xf6>
    4c72:	ce 01       	movw	r24, r28
    4c74:	81 96       	adiw	r24, 0x21	; 33
    4c76:	fe 01       	movw	r30, r28
    4c78:	31 96       	adiw	r30, 0x01	; 1
    4c7a:	20 81       	ld	r18, Z
    4c7c:	20 95       	com	r18
    4c7e:	21 93       	st	Z+, r18
    4c80:	e8 17       	cp	r30, r24
    4c82:	f9 07       	cpc	r31, r25
    4c84:	d1 f7       	brne	.-12     	; 0x4c7a <conv_brk+0xea>
    4c86:	bb 24       	eor	r11, r11
    4c88:	b3 94       	inc	r11
    4c8a:	4e 01       	movw	r8, r28
    4c8c:	08 94       	sec
    4c8e:	81 1c       	adc	r8, r1
    4c90:	91 1c       	adc	r9, r1
    4c92:	01 c0       	rjmp	.+2      	; 0x4c96 <conv_brk+0x106>
    4c94:	bb 24       	eor	r11, r11
    4c96:	c6 01       	movw	r24, r12
    4c98:	69 a3       	std	Y+33, r22	; 0x21
    4c9a:	84 d1       	rcall	.+776    	; 0x4fa4 <fgetc>
    4c9c:	69 a1       	ldd	r22, Y+33	; 0x21
    4c9e:	97 fd       	sbrc	r25, 7
    4ca0:	1f c0       	rjmp	.+62     	; 0x4ce0 <conv_brk+0x150>
    4ca2:	28 2f       	mov	r18, r24
    4ca4:	26 95       	lsr	r18
    4ca6:	26 95       	lsr	r18
    4ca8:	26 95       	lsr	r18
    4caa:	f4 01       	movw	r30, r8
    4cac:	e2 0f       	add	r30, r18
    4cae:	f1 1d       	adc	r31, r1
    4cb0:	20 81       	ld	r18, Z
    4cb2:	30 e0       	ldi	r19, 0x00	; 0
    4cb4:	ac 01       	movw	r20, r24
    4cb6:	47 70       	andi	r20, 0x07	; 7
    4cb8:	50 70       	andi	r21, 0x00	; 0
    4cba:	02 c0       	rjmp	.+4      	; 0x4cc0 <conv_brk+0x130>
    4cbc:	35 95       	asr	r19
    4cbe:	27 95       	ror	r18
    4cc0:	4a 95       	dec	r20
    4cc2:	e2 f7       	brpl	.-8      	; 0x4cbc <conv_brk+0x12c>
    4cc4:	20 fd       	sbrc	r18, 0
    4cc6:	03 c0       	rjmp	.+6      	; 0x4cce <conv_brk+0x13e>
    4cc8:	b6 01       	movw	r22, r12
    4cca:	ae d1       	rcall	.+860    	; 0x5028 <ungetc>
    4ccc:	09 c0       	rjmp	.+18     	; 0x4ce0 <conv_brk+0x150>
    4cce:	01 15       	cp	r16, r1
    4cd0:	11 05       	cpc	r17, r1
    4cd2:	19 f0       	breq	.+6      	; 0x4cda <conv_brk+0x14a>
    4cd4:	f8 01       	movw	r30, r16
    4cd6:	81 93       	st	Z+, r24
    4cd8:	8f 01       	movw	r16, r30
    4cda:	61 50       	subi	r22, 0x01	; 1
    4cdc:	d9 f6       	brne	.-74     	; 0x4c94 <conv_brk+0x104>
    4cde:	02 c0       	rjmp	.+4      	; 0x4ce4 <conv_brk+0x154>
    4ce0:	bb 20       	and	r11, r11
    4ce2:	31 f4       	brne	.+12     	; 0x4cf0 <conv_brk+0x160>
    4ce4:	01 15       	cp	r16, r1
    4ce6:	11 05       	cpc	r17, r1
    4ce8:	29 f0       	breq	.+10     	; 0x4cf4 <conv_brk+0x164>
    4cea:	f8 01       	movw	r30, r16
    4cec:	10 82       	st	Z, r1
    4cee:	02 c0       	rjmp	.+4      	; 0x4cf4 <conv_brk+0x164>
    4cf0:	ee 24       	eor	r14, r14
    4cf2:	ff 24       	eor	r15, r15
    4cf4:	c7 01       	movw	r24, r14
    4cf6:	a1 96       	adiw	r28, 0x21	; 33
    4cf8:	0f b6       	in	r0, 0x3f	; 63
    4cfa:	f8 94       	cli
    4cfc:	de bf       	out	0x3e, r29	; 62
    4cfe:	0f be       	out	0x3f, r0	; 63
    4d00:	cd bf       	out	0x3d, r28	; 61
    4d02:	cf 91       	pop	r28
    4d04:	df 91       	pop	r29
    4d06:	1f 91       	pop	r17
    4d08:	0f 91       	pop	r16
    4d0a:	ff 90       	pop	r15
    4d0c:	ef 90       	pop	r14
    4d0e:	df 90       	pop	r13
    4d10:	cf 90       	pop	r12
    4d12:	bf 90       	pop	r11
    4d14:	af 90       	pop	r10
    4d16:	9f 90       	pop	r9
    4d18:	8f 90       	pop	r8
    4d1a:	7f 90       	pop	r7
    4d1c:	6f 90       	pop	r6
    4d1e:	08 95       	ret

00004d20 <vfscanf>:
    4d20:	4f 92       	push	r4
    4d22:	5f 92       	push	r5
    4d24:	6f 92       	push	r6
    4d26:	7f 92       	push	r7
    4d28:	9f 92       	push	r9
    4d2a:	af 92       	push	r10
    4d2c:	bf 92       	push	r11
    4d2e:	cf 92       	push	r12
    4d30:	df 92       	push	r13
    4d32:	ef 92       	push	r14
    4d34:	ff 92       	push	r15
    4d36:	0f 93       	push	r16
    4d38:	1f 93       	push	r17
    4d3a:	df 93       	push	r29
    4d3c:	cf 93       	push	r28
    4d3e:	0f 92       	push	r0
    4d40:	cd b7       	in	r28, 0x3d	; 61
    4d42:	de b7       	in	r29, 0x3e	; 62
    4d44:	7c 01       	movw	r14, r24
    4d46:	6b 01       	movw	r12, r22
    4d48:	3a 01       	movw	r6, r20
    4d4a:	fc 01       	movw	r30, r24
    4d4c:	17 82       	std	Z+7, r1	; 0x07
    4d4e:	16 82       	std	Z+6, r1	; 0x06
    4d50:	00 e0       	ldi	r16, 0x00	; 0
    4d52:	db c0       	rjmp	.+438    	; 0x4f0a <vfscanf+0x1ea>
    4d54:	81 2f       	mov	r24, r17
    4d56:	90 e0       	ldi	r25, 0x00	; 0
    4d58:	fc d0       	rcall	.+504    	; 0x4f52 <isspace>
    4d5a:	00 97       	sbiw	r24, 0x00	; 0
    4d5c:	19 f0       	breq	.+6      	; 0x4d64 <vfscanf+0x44>
    4d5e:	c7 01       	movw	r24, r14
    4d60:	6f de       	rcall	.-802    	; 0x4a40 <skip_spaces>
    4d62:	d3 c0       	rjmp	.+422    	; 0x4f0a <vfscanf+0x1ea>
    4d64:	15 32       	cpi	r17, 0x25	; 37
    4d66:	41 f4       	brne	.+16     	; 0x4d78 <vfscanf+0x58>
    4d68:	f6 01       	movw	r30, r12
    4d6a:	a3 fc       	sbrc	r10, 3
    4d6c:	35 91       	lpm	r19, Z+
    4d6e:	a3 fe       	sbrs	r10, 3
    4d70:	31 91       	ld	r19, Z+
    4d72:	6f 01       	movw	r12, r30
    4d74:	35 32       	cpi	r19, 0x25	; 37
    4d76:	51 f4       	brne	.+20     	; 0x4d8c <vfscanf+0x6c>
    4d78:	c7 01       	movw	r24, r14
    4d7a:	14 d1       	rcall	.+552    	; 0x4fa4 <fgetc>
    4d7c:	97 fd       	sbrc	r25, 7
    4d7e:	d1 c0       	rjmp	.+418    	; 0x4f22 <vfscanf+0x202>
    4d80:	18 17       	cp	r17, r24
    4d82:	09 f4       	brne	.+2      	; 0x4d86 <vfscanf+0x66>
    4d84:	c2 c0       	rjmp	.+388    	; 0x4f0a <vfscanf+0x1ea>
    4d86:	b7 01       	movw	r22, r14
    4d88:	4f d1       	rcall	.+670    	; 0x5028 <ungetc>
    4d8a:	cd c0       	rjmp	.+410    	; 0x4f26 <vfscanf+0x206>
    4d8c:	3a 32       	cpi	r19, 0x2A	; 42
    4d8e:	39 f4       	brne	.+14     	; 0x4d9e <vfscanf+0x7e>
    4d90:	a3 fc       	sbrc	r10, 3
    4d92:	35 91       	lpm	r19, Z+
    4d94:	a3 fe       	sbrs	r10, 3
    4d96:	31 91       	ld	r19, Z+
    4d98:	6f 01       	movw	r12, r30
    4d9a:	11 e0       	ldi	r17, 0x01	; 1
    4d9c:	01 c0       	rjmp	.+2      	; 0x4da0 <vfscanf+0x80>
    4d9e:	10 e0       	ldi	r17, 0x00	; 0
    4da0:	99 24       	eor	r9, r9
    4da2:	0e c0       	rjmp	.+28     	; 0x4dc0 <vfscanf+0xa0>
    4da4:	12 60       	ori	r17, 0x02	; 2
    4da6:	69 2d       	mov	r22, r9
    4da8:	70 e0       	ldi	r23, 0x00	; 0
    4daa:	80 e0       	ldi	r24, 0x00	; 0
    4dac:	90 e0       	ldi	r25, 0x00	; 0
    4dae:	40 e2       	ldi	r20, 0x20	; 32
    4db0:	19 de       	rcall	.-974    	; 0x49e4 <mulacc>
    4db2:	96 2e       	mov	r9, r22
    4db4:	f6 01       	movw	r30, r12
    4db6:	a3 fc       	sbrc	r10, 3
    4db8:	35 91       	lpm	r19, Z+
    4dba:	a3 fe       	sbrs	r10, 3
    4dbc:	31 91       	ld	r19, Z+
    4dbe:	6f 01       	movw	r12, r30
    4dc0:	23 2f       	mov	r18, r19
    4dc2:	20 53       	subi	r18, 0x30	; 48
    4dc4:	2a 30       	cpi	r18, 0x0A	; 10
    4dc6:	70 f3       	brcs	.-36     	; 0x4da4 <vfscanf+0x84>
    4dc8:	11 ff       	sbrs	r17, 1
    4dca:	03 c0       	rjmp	.+6      	; 0x4dd2 <vfscanf+0xb2>
    4dcc:	99 20       	and	r9, r9
    4dce:	19 f4       	brne	.+6      	; 0x4dd6 <vfscanf+0xb6>
    4dd0:	aa c0       	rjmp	.+340    	; 0x4f26 <vfscanf+0x206>
    4dd2:	99 24       	eor	r9, r9
    4dd4:	9a 94       	dec	r9
    4dd6:	38 36       	cpi	r19, 0x68	; 104
    4dd8:	19 f0       	breq	.+6      	; 0x4de0 <vfscanf+0xc0>
    4dda:	3c 36       	cpi	r19, 0x6C	; 108
    4ddc:	89 f4       	brne	.+34     	; 0x4e00 <vfscanf+0xe0>
    4dde:	09 c0       	rjmp	.+18     	; 0x4df2 <vfscanf+0xd2>
    4de0:	f6 01       	movw	r30, r12
    4de2:	a3 fc       	sbrc	r10, 3
    4de4:	35 91       	lpm	r19, Z+
    4de6:	a3 fe       	sbrs	r10, 3
    4de8:	31 91       	ld	r19, Z+
    4dea:	6f 01       	movw	r12, r30
    4dec:	38 36       	cpi	r19, 0x68	; 104
    4dee:	41 f4       	brne	.+16     	; 0x4e00 <vfscanf+0xe0>
    4df0:	18 60       	ori	r17, 0x08	; 8
    4df2:	14 60       	ori	r17, 0x04	; 4
    4df4:	f6 01       	movw	r30, r12
    4df6:	a3 fc       	sbrc	r10, 3
    4df8:	35 91       	lpm	r19, Z+
    4dfa:	a3 fe       	sbrs	r10, 3
    4dfc:	31 91       	ld	r19, Z+
    4dfe:	6f 01       	movw	r12, r30
    4e00:	33 23       	and	r19, r19
    4e02:	09 f4       	brne	.+2      	; 0x4e06 <vfscanf+0xe6>
    4e04:	90 c0       	rjmp	.+288    	; 0x4f26 <vfscanf+0x206>
    4e06:	87 ee       	ldi	r24, 0xE7	; 231
    4e08:	9f e0       	ldi	r25, 0x0F	; 15
    4e0a:	63 2f       	mov	r22, r19
    4e0c:	70 e0       	ldi	r23, 0x00	; 0
    4e0e:	39 83       	std	Y+1, r19	; 0x01
    4e10:	a8 d0       	rcall	.+336    	; 0x4f62 <strchr_P>
    4e12:	39 81       	ldd	r19, Y+1	; 0x01
    4e14:	00 97       	sbiw	r24, 0x00	; 0
    4e16:	09 f4       	brne	.+2      	; 0x4e1a <vfscanf+0xfa>
    4e18:	86 c0       	rjmp	.+268    	; 0x4f26 <vfscanf+0x206>
    4e1a:	81 2f       	mov	r24, r17
    4e1c:	10 fd       	sbrc	r17, 0
    4e1e:	08 c0       	rjmp	.+16     	; 0x4e30 <vfscanf+0x110>
    4e20:	f3 01       	movw	r30, r6
    4e22:	40 80       	ld	r4, Z
    4e24:	51 80       	ldd	r5, Z+1	; 0x01
    4e26:	42 e0       	ldi	r20, 0x02	; 2
    4e28:	50 e0       	ldi	r21, 0x00	; 0
    4e2a:	64 0e       	add	r6, r20
    4e2c:	75 1e       	adc	r7, r21
    4e2e:	02 c0       	rjmp	.+4      	; 0x4e34 <vfscanf+0x114>
    4e30:	44 24       	eor	r4, r4
    4e32:	55 24       	eor	r5, r5
    4e34:	3e 36       	cpi	r19, 0x6E	; 110
    4e36:	49 f4       	brne	.+18     	; 0x4e4a <vfscanf+0x12a>
    4e38:	f7 01       	movw	r30, r14
    4e3a:	46 81       	ldd	r20, Z+6	; 0x06
    4e3c:	57 81       	ldd	r21, Z+7	; 0x07
    4e3e:	60 e0       	ldi	r22, 0x00	; 0
    4e40:	70 e0       	ldi	r23, 0x00	; 0
    4e42:	c2 01       	movw	r24, r4
    4e44:	21 2f       	mov	r18, r17
    4e46:	c2 dd       	rcall	.-1148   	; 0x49cc <putval>
    4e48:	60 c0       	rjmp	.+192    	; 0x4f0a <vfscanf+0x1ea>
    4e4a:	33 36       	cpi	r19, 0x63	; 99
    4e4c:	89 f4       	brne	.+34     	; 0x4e70 <vfscanf+0x150>
    4e4e:	81 fd       	sbrc	r24, 1
    4e50:	02 c0       	rjmp	.+4      	; 0x4e56 <vfscanf+0x136>
    4e52:	99 24       	eor	r9, r9
    4e54:	93 94       	inc	r9
    4e56:	c7 01       	movw	r24, r14
    4e58:	a5 d0       	rcall	.+330    	; 0x4fa4 <fgetc>
    4e5a:	97 fd       	sbrc	r25, 7
    4e5c:	62 c0       	rjmp	.+196    	; 0x4f22 <vfscanf+0x202>
    4e5e:	41 14       	cp	r4, r1
    4e60:	51 04       	cpc	r5, r1
    4e62:	19 f0       	breq	.+6      	; 0x4e6a <vfscanf+0x14a>
    4e64:	f2 01       	movw	r30, r4
    4e66:	81 93       	st	Z+, r24
    4e68:	2f 01       	movw	r4, r30
    4e6a:	9a 94       	dec	r9
    4e6c:	a1 f7       	brne	.-24     	; 0x4e56 <vfscanf+0x136>
    4e6e:	4b c0       	rjmp	.+150    	; 0x4f06 <vfscanf+0x1e6>
    4e70:	3b 35       	cpi	r19, 0x5B	; 91
    4e72:	51 f4       	brne	.+20     	; 0x4e88 <vfscanf+0x168>
    4e74:	c7 01       	movw	r24, r14
    4e76:	69 2d       	mov	r22, r9
    4e78:	a2 01       	movw	r20, r4
    4e7a:	96 01       	movw	r18, r12
    4e7c:	89 de       	rcall	.-750    	; 0x4b90 <conv_brk>
    4e7e:	6c 01       	movw	r12, r24
    4e80:	00 97       	sbiw	r24, 0x00	; 0
    4e82:	09 f0       	breq	.+2      	; 0x4e86 <vfscanf+0x166>
    4e84:	40 c0       	rjmp	.+128    	; 0x4f06 <vfscanf+0x1e6>
    4e86:	3a c0       	rjmp	.+116    	; 0x4efc <vfscanf+0x1dc>
    4e88:	c7 01       	movw	r24, r14
    4e8a:	39 83       	std	Y+1, r19	; 0x01
    4e8c:	d9 dd       	rcall	.-1102   	; 0x4a40 <skip_spaces>
    4e8e:	39 81       	ldd	r19, Y+1	; 0x01
    4e90:	97 fd       	sbrc	r25, 7
    4e92:	47 c0       	rjmp	.+142    	; 0x4f22 <vfscanf+0x202>
    4e94:	3f 36       	cpi	r19, 0x6F	; 111
    4e96:	41 f1       	breq	.+80     	; 0x4ee8 <vfscanf+0x1c8>
    4e98:	30 37       	cpi	r19, 0x70	; 112
    4e9a:	28 f4       	brcc	.+10     	; 0x4ea6 <vfscanf+0x186>
    4e9c:	34 36       	cpi	r19, 0x64	; 100
    4e9e:	11 f1       	breq	.+68     	; 0x4ee4 <vfscanf+0x1c4>
    4ea0:	39 36       	cpi	r19, 0x69	; 105
    4ea2:	21 f5       	brne	.+72     	; 0x4eec <vfscanf+0x1cc>
    4ea4:	24 c0       	rjmp	.+72     	; 0x4eee <vfscanf+0x1ce>
    4ea6:	33 37       	cpi	r19, 0x73	; 115
    4ea8:	19 f0       	breq	.+6      	; 0x4eb0 <vfscanf+0x190>
    4eaa:	35 37       	cpi	r19, 0x75	; 117
    4eac:	f9 f4       	brne	.+62     	; 0x4eec <vfscanf+0x1cc>
    4eae:	1a c0       	rjmp	.+52     	; 0x4ee4 <vfscanf+0x1c4>
    4eb0:	c7 01       	movw	r24, r14
    4eb2:	78 d0       	rcall	.+240    	; 0x4fa4 <fgetc>
    4eb4:	5c 01       	movw	r10, r24
    4eb6:	97 fd       	sbrc	r25, 7
    4eb8:	0f c0       	rjmp	.+30     	; 0x4ed8 <vfscanf+0x1b8>
    4eba:	4b d0       	rcall	.+150    	; 0x4f52 <isspace>
    4ebc:	00 97       	sbiw	r24, 0x00	; 0
    4ebe:	21 f0       	breq	.+8      	; 0x4ec8 <vfscanf+0x1a8>
    4ec0:	c5 01       	movw	r24, r10
    4ec2:	b7 01       	movw	r22, r14
    4ec4:	b1 d0       	rcall	.+354    	; 0x5028 <ungetc>
    4ec6:	08 c0       	rjmp	.+16     	; 0x4ed8 <vfscanf+0x1b8>
    4ec8:	41 14       	cp	r4, r1
    4eca:	51 04       	cpc	r5, r1
    4ecc:	19 f0       	breq	.+6      	; 0x4ed4 <vfscanf+0x1b4>
    4ece:	f2 01       	movw	r30, r4
    4ed0:	a1 92       	st	Z+, r10
    4ed2:	2f 01       	movw	r4, r30
    4ed4:	9a 94       	dec	r9
    4ed6:	61 f7       	brne	.-40     	; 0x4eb0 <vfscanf+0x190>
    4ed8:	41 14       	cp	r4, r1
    4eda:	51 04       	cpc	r5, r1
    4edc:	a1 f0       	breq	.+40     	; 0x4f06 <vfscanf+0x1e6>
    4ede:	f2 01       	movw	r30, r4
    4ee0:	10 82       	st	Z, r1
    4ee2:	11 c0       	rjmp	.+34     	; 0x4f06 <vfscanf+0x1e6>
    4ee4:	10 62       	ori	r17, 0x20	; 32
    4ee6:	03 c0       	rjmp	.+6      	; 0x4eee <vfscanf+0x1ce>
    4ee8:	10 61       	ori	r17, 0x10	; 16
    4eea:	01 c0       	rjmp	.+2      	; 0x4eee <vfscanf+0x1ce>
    4eec:	10 64       	ori	r17, 0x40	; 64
    4eee:	c7 01       	movw	r24, r14
    4ef0:	69 2d       	mov	r22, r9
    4ef2:	a2 01       	movw	r20, r4
    4ef4:	21 2f       	mov	r18, r17
    4ef6:	be dd       	rcall	.-1156   	; 0x4a74 <conv_int>
    4ef8:	88 23       	and	r24, r24
    4efa:	29 f4       	brne	.+10     	; 0x4f06 <vfscanf+0x1e6>
    4efc:	f7 01       	movw	r30, r14
    4efe:	83 81       	ldd	r24, Z+3	; 0x03
    4f00:	80 73       	andi	r24, 0x30	; 48
    4f02:	79 f4       	brne	.+30     	; 0x4f22 <vfscanf+0x202>
    4f04:	10 c0       	rjmp	.+32     	; 0x4f26 <vfscanf+0x206>
    4f06:	10 ff       	sbrs	r17, 0
    4f08:	0f 5f       	subi	r16, 0xFF	; 255
    4f0a:	f7 01       	movw	r30, r14
    4f0c:	a3 80       	ldd	r10, Z+3	; 0x03
    4f0e:	f6 01       	movw	r30, r12
    4f10:	a3 fc       	sbrc	r10, 3
    4f12:	15 91       	lpm	r17, Z+
    4f14:	a3 fe       	sbrs	r10, 3
    4f16:	11 91       	ld	r17, Z+
    4f18:	6f 01       	movw	r12, r30
    4f1a:	11 23       	and	r17, r17
    4f1c:	09 f0       	breq	.+2      	; 0x4f20 <vfscanf+0x200>
    4f1e:	1a cf       	rjmp	.-460    	; 0x4d54 <vfscanf+0x34>
    4f20:	02 c0       	rjmp	.+4      	; 0x4f26 <vfscanf+0x206>
    4f22:	00 23       	and	r16, r16
    4f24:	11 f0       	breq	.+4      	; 0x4f2a <vfscanf+0x20a>
    4f26:	10 e0       	ldi	r17, 0x00	; 0
    4f28:	02 c0       	rjmp	.+4      	; 0x4f2e <vfscanf+0x20e>
    4f2a:	0f ef       	ldi	r16, 0xFF	; 255
    4f2c:	1f ef       	ldi	r17, 0xFF	; 255
    4f2e:	c8 01       	movw	r24, r16
    4f30:	0f 90       	pop	r0
    4f32:	cf 91       	pop	r28
    4f34:	df 91       	pop	r29
    4f36:	1f 91       	pop	r17
    4f38:	0f 91       	pop	r16
    4f3a:	ff 90       	pop	r15
    4f3c:	ef 90       	pop	r14
    4f3e:	df 90       	pop	r13
    4f40:	cf 90       	pop	r12
    4f42:	bf 90       	pop	r11
    4f44:	af 90       	pop	r10
    4f46:	9f 90       	pop	r9
    4f48:	7f 90       	pop	r7
    4f4a:	6f 90       	pop	r6
    4f4c:	5f 90       	pop	r5
    4f4e:	4f 90       	pop	r4
    4f50:	08 95       	ret

00004f52 <isspace>:
    4f52:	91 11       	cpse	r25, r1
    4f54:	e2 c0       	rjmp	.+452    	; 0x511a <__ctype_isfalse>
    4f56:	80 32       	cpi	r24, 0x20	; 32
    4f58:	19 f0       	breq	.+6      	; 0x4f60 <isspace+0xe>
    4f5a:	89 50       	subi	r24, 0x09	; 9
    4f5c:	85 50       	subi	r24, 0x05	; 5
    4f5e:	d0 f7       	brcc	.-12     	; 0x4f54 <isspace+0x2>
    4f60:	08 95       	ret

00004f62 <strchr_P>:
    4f62:	fc 01       	movw	r30, r24
    4f64:	05 90       	lpm	r0, Z+
    4f66:	06 16       	cp	r0, r22
    4f68:	21 f0       	breq	.+8      	; 0x4f72 <strchr_P+0x10>
    4f6a:	00 20       	and	r0, r0
    4f6c:	d9 f7       	brne	.-10     	; 0x4f64 <strchr_P+0x2>
    4f6e:	c0 01       	movw	r24, r0
    4f70:	08 95       	ret
    4f72:	31 97       	sbiw	r30, 0x01	; 1
    4f74:	cf 01       	movw	r24, r30
    4f76:	08 95       	ret

00004f78 <strnlen_P>:
    4f78:	fc 01       	movw	r30, r24
    4f7a:	05 90       	lpm	r0, Z+
    4f7c:	61 50       	subi	r22, 0x01	; 1
    4f7e:	70 40       	sbci	r23, 0x00	; 0
    4f80:	01 10       	cpse	r0, r1
    4f82:	d8 f7       	brcc	.-10     	; 0x4f7a <strnlen_P+0x2>
    4f84:	80 95       	com	r24
    4f86:	90 95       	com	r25
    4f88:	8e 0f       	add	r24, r30
    4f8a:	9f 1f       	adc	r25, r31
    4f8c:	08 95       	ret

00004f8e <strnlen>:
    4f8e:	fc 01       	movw	r30, r24
    4f90:	61 50       	subi	r22, 0x01	; 1
    4f92:	70 40       	sbci	r23, 0x00	; 0
    4f94:	01 90       	ld	r0, Z+
    4f96:	01 10       	cpse	r0, r1
    4f98:	d8 f7       	brcc	.-10     	; 0x4f90 <strnlen+0x2>
    4f9a:	80 95       	com	r24
    4f9c:	90 95       	com	r25
    4f9e:	8e 0f       	add	r24, r30
    4fa0:	9f 1f       	adc	r25, r31
    4fa2:	08 95       	ret

00004fa4 <fgetc>:
    4fa4:	cf 93       	push	r28
    4fa6:	df 93       	push	r29
    4fa8:	ec 01       	movw	r28, r24
    4faa:	3b 81       	ldd	r19, Y+3	; 0x03
    4fac:	30 ff       	sbrs	r19, 0
    4fae:	36 c0       	rjmp	.+108    	; 0x501c <fgetc+0x78>
    4fb0:	36 ff       	sbrs	r19, 6
    4fb2:	09 c0       	rjmp	.+18     	; 0x4fc6 <fgetc+0x22>
    4fb4:	3f 7b       	andi	r19, 0xBF	; 191
    4fb6:	3b 83       	std	Y+3, r19	; 0x03
    4fb8:	8e 81       	ldd	r24, Y+6	; 0x06
    4fba:	9f 81       	ldd	r25, Y+7	; 0x07
    4fbc:	01 96       	adiw	r24, 0x01	; 1
    4fbe:	9f 83       	std	Y+7, r25	; 0x07
    4fc0:	8e 83       	std	Y+6, r24	; 0x06
    4fc2:	2a 81       	ldd	r18, Y+2	; 0x02
    4fc4:	29 c0       	rjmp	.+82     	; 0x5018 <fgetc+0x74>
    4fc6:	32 ff       	sbrs	r19, 2
    4fc8:	0f c0       	rjmp	.+30     	; 0x4fe8 <fgetc+0x44>
    4fca:	e8 81       	ld	r30, Y
    4fcc:	f9 81       	ldd	r31, Y+1	; 0x01
    4fce:	80 81       	ld	r24, Z
    4fd0:	99 27       	eor	r25, r25
    4fd2:	87 fd       	sbrc	r24, 7
    4fd4:	90 95       	com	r25
    4fd6:	00 97       	sbiw	r24, 0x00	; 0
    4fd8:	19 f4       	brne	.+6      	; 0x4fe0 <fgetc+0x3c>
    4fda:	30 62       	ori	r19, 0x20	; 32
    4fdc:	3b 83       	std	Y+3, r19	; 0x03
    4fde:	1e c0       	rjmp	.+60     	; 0x501c <fgetc+0x78>
    4fe0:	31 96       	adiw	r30, 0x01	; 1
    4fe2:	f9 83       	std	Y+1, r31	; 0x01
    4fe4:	e8 83       	st	Y, r30
    4fe6:	11 c0       	rjmp	.+34     	; 0x500a <fgetc+0x66>
    4fe8:	ea 85       	ldd	r30, Y+10	; 0x0a
    4fea:	fb 85       	ldd	r31, Y+11	; 0x0b
    4fec:	ce 01       	movw	r24, r28
    4fee:	09 95       	icall
    4ff0:	97 ff       	sbrs	r25, 7
    4ff2:	0b c0       	rjmp	.+22     	; 0x500a <fgetc+0x66>
    4ff4:	2b 81       	ldd	r18, Y+3	; 0x03
    4ff6:	3f ef       	ldi	r19, 0xFF	; 255
    4ff8:	8f 3f       	cpi	r24, 0xFF	; 255
    4ffa:	93 07       	cpc	r25, r19
    4ffc:	11 f4       	brne	.+4      	; 0x5002 <fgetc+0x5e>
    4ffe:	80 e1       	ldi	r24, 0x10	; 16
    5000:	01 c0       	rjmp	.+2      	; 0x5004 <fgetc+0x60>
    5002:	80 e2       	ldi	r24, 0x20	; 32
    5004:	82 2b       	or	r24, r18
    5006:	8b 83       	std	Y+3, r24	; 0x03
    5008:	09 c0       	rjmp	.+18     	; 0x501c <fgetc+0x78>
    500a:	2e 81       	ldd	r18, Y+6	; 0x06
    500c:	3f 81       	ldd	r19, Y+7	; 0x07
    500e:	2f 5f       	subi	r18, 0xFF	; 255
    5010:	3f 4f       	sbci	r19, 0xFF	; 255
    5012:	3f 83       	std	Y+7, r19	; 0x07
    5014:	2e 83       	std	Y+6, r18	; 0x06
    5016:	28 2f       	mov	r18, r24
    5018:	30 e0       	ldi	r19, 0x00	; 0
    501a:	02 c0       	rjmp	.+4      	; 0x5020 <fgetc+0x7c>
    501c:	2f ef       	ldi	r18, 0xFF	; 255
    501e:	3f ef       	ldi	r19, 0xFF	; 255
    5020:	c9 01       	movw	r24, r18
    5022:	df 91       	pop	r29
    5024:	cf 91       	pop	r28
    5026:	08 95       	ret

00005028 <ungetc>:
    5028:	fb 01       	movw	r30, r22
    502a:	23 81       	ldd	r18, Z+3	; 0x03
    502c:	20 ff       	sbrs	r18, 0
    502e:	13 c0       	rjmp	.+38     	; 0x5056 <ungetc+0x2e>
    5030:	26 fd       	sbrc	r18, 6
    5032:	11 c0       	rjmp	.+34     	; 0x5056 <ungetc+0x2e>
    5034:	3f ef       	ldi	r19, 0xFF	; 255
    5036:	8f 3f       	cpi	r24, 0xFF	; 255
    5038:	93 07       	cpc	r25, r19
    503a:	69 f0       	breq	.+26     	; 0x5056 <ungetc+0x2e>
    503c:	82 83       	std	Z+2, r24	; 0x02
    503e:	20 64       	ori	r18, 0x40	; 64
    5040:	2f 7d       	andi	r18, 0xDF	; 223
    5042:	23 83       	std	Z+3, r18	; 0x03
    5044:	26 81       	ldd	r18, Z+6	; 0x06
    5046:	37 81       	ldd	r19, Z+7	; 0x07
    5048:	21 50       	subi	r18, 0x01	; 1
    504a:	30 40       	sbci	r19, 0x00	; 0
    504c:	37 83       	std	Z+7, r19	; 0x07
    504e:	26 83       	std	Z+6, r18	; 0x06
    5050:	28 2f       	mov	r18, r24
    5052:	30 e0       	ldi	r19, 0x00	; 0
    5054:	02 c0       	rjmp	.+4      	; 0x505a <ungetc+0x32>
    5056:	2f ef       	ldi	r18, 0xFF	; 255
    5058:	3f ef       	ldi	r19, 0xFF	; 255
    505a:	c9 01       	movw	r24, r18
    505c:	08 95       	ret

0000505e <__ultoa_invert>:
    505e:	fa 01       	movw	r30, r20
    5060:	aa 27       	eor	r26, r26
    5062:	28 30       	cpi	r18, 0x08	; 8
    5064:	51 f1       	breq	.+84     	; 0x50ba <__ultoa_invert+0x5c>
    5066:	20 31       	cpi	r18, 0x10	; 16
    5068:	81 f1       	breq	.+96     	; 0x50ca <__ultoa_invert+0x6c>
    506a:	e8 94       	clt
    506c:	6f 93       	push	r22
    506e:	6e 7f       	andi	r22, 0xFE	; 254
    5070:	6e 5f       	subi	r22, 0xFE	; 254
    5072:	7f 4f       	sbci	r23, 0xFF	; 255
    5074:	8f 4f       	sbci	r24, 0xFF	; 255
    5076:	9f 4f       	sbci	r25, 0xFF	; 255
    5078:	af 4f       	sbci	r26, 0xFF	; 255
    507a:	b1 e0       	ldi	r27, 0x01	; 1
    507c:	3e d0       	rcall	.+124    	; 0x50fa <__ultoa_invert+0x9c>
    507e:	b4 e0       	ldi	r27, 0x04	; 4
    5080:	3c d0       	rcall	.+120    	; 0x50fa <__ultoa_invert+0x9c>
    5082:	67 0f       	add	r22, r23
    5084:	78 1f       	adc	r23, r24
    5086:	89 1f       	adc	r24, r25
    5088:	9a 1f       	adc	r25, r26
    508a:	a1 1d       	adc	r26, r1
    508c:	68 0f       	add	r22, r24
    508e:	79 1f       	adc	r23, r25
    5090:	8a 1f       	adc	r24, r26
    5092:	91 1d       	adc	r25, r1
    5094:	a1 1d       	adc	r26, r1
    5096:	6a 0f       	add	r22, r26
    5098:	71 1d       	adc	r23, r1
    509a:	81 1d       	adc	r24, r1
    509c:	91 1d       	adc	r25, r1
    509e:	a1 1d       	adc	r26, r1
    50a0:	20 d0       	rcall	.+64     	; 0x50e2 <__ultoa_invert+0x84>
    50a2:	09 f4       	brne	.+2      	; 0x50a6 <__ultoa_invert+0x48>
    50a4:	68 94       	set
    50a6:	3f 91       	pop	r19
    50a8:	2a e0       	ldi	r18, 0x0A	; 10
    50aa:	26 9f       	mul	r18, r22
    50ac:	11 24       	eor	r1, r1
    50ae:	30 19       	sub	r19, r0
    50b0:	30 5d       	subi	r19, 0xD0	; 208
    50b2:	31 93       	st	Z+, r19
    50b4:	de f6       	brtc	.-74     	; 0x506c <__ultoa_invert+0xe>
    50b6:	cf 01       	movw	r24, r30
    50b8:	08 95       	ret
    50ba:	46 2f       	mov	r20, r22
    50bc:	47 70       	andi	r20, 0x07	; 7
    50be:	40 5d       	subi	r20, 0xD0	; 208
    50c0:	41 93       	st	Z+, r20
    50c2:	b3 e0       	ldi	r27, 0x03	; 3
    50c4:	0f d0       	rcall	.+30     	; 0x50e4 <__ultoa_invert+0x86>
    50c6:	c9 f7       	brne	.-14     	; 0x50ba <__ultoa_invert+0x5c>
    50c8:	f6 cf       	rjmp	.-20     	; 0x50b6 <__ultoa_invert+0x58>
    50ca:	46 2f       	mov	r20, r22
    50cc:	4f 70       	andi	r20, 0x0F	; 15
    50ce:	40 5d       	subi	r20, 0xD0	; 208
    50d0:	4a 33       	cpi	r20, 0x3A	; 58
    50d2:	18 f0       	brcs	.+6      	; 0x50da <__ultoa_invert+0x7c>
    50d4:	49 5d       	subi	r20, 0xD9	; 217
    50d6:	31 fd       	sbrc	r19, 1
    50d8:	40 52       	subi	r20, 0x20	; 32
    50da:	41 93       	st	Z+, r20
    50dc:	02 d0       	rcall	.+4      	; 0x50e2 <__ultoa_invert+0x84>
    50de:	a9 f7       	brne	.-22     	; 0x50ca <__ultoa_invert+0x6c>
    50e0:	ea cf       	rjmp	.-44     	; 0x50b6 <__ultoa_invert+0x58>
    50e2:	b4 e0       	ldi	r27, 0x04	; 4
    50e4:	a6 95       	lsr	r26
    50e6:	97 95       	ror	r25
    50e8:	87 95       	ror	r24
    50ea:	77 95       	ror	r23
    50ec:	67 95       	ror	r22
    50ee:	ba 95       	dec	r27
    50f0:	c9 f7       	brne	.-14     	; 0x50e4 <__ultoa_invert+0x86>
    50f2:	00 97       	sbiw	r24, 0x00	; 0
    50f4:	61 05       	cpc	r22, r1
    50f6:	71 05       	cpc	r23, r1
    50f8:	08 95       	ret
    50fa:	9b 01       	movw	r18, r22
    50fc:	ac 01       	movw	r20, r24
    50fe:	0a 2e       	mov	r0, r26
    5100:	06 94       	lsr	r0
    5102:	57 95       	ror	r21
    5104:	47 95       	ror	r20
    5106:	37 95       	ror	r19
    5108:	27 95       	ror	r18
    510a:	ba 95       	dec	r27
    510c:	c9 f7       	brne	.-14     	; 0x5100 <__ultoa_invert+0xa2>
    510e:	62 0f       	add	r22, r18
    5110:	73 1f       	adc	r23, r19
    5112:	84 1f       	adc	r24, r20
    5114:	95 1f       	adc	r25, r21
    5116:	a0 1d       	adc	r26, r0
    5118:	08 95       	ret

0000511a <__ctype_isfalse>:
    511a:	99 27       	eor	r25, r25
    511c:	88 27       	eor	r24, r24

0000511e <__ctype_istrue>:
    511e:	08 95       	ret

00005120 <_exit>:
    5120:	f8 94       	cli

00005122 <__stop_program>:
    5122:	ff cf       	rjmp	.-2      	; 0x5122 <__stop_program>
