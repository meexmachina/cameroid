
Stabily.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  000046a8  0000473c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000046a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000492  00800142  00800142  0000477e  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  00004780  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000342  00000000  00000000  00005710  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000a80  00000000  00000000  00005a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001acd  00000000  00000000  000064d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00011e3b  00000000  00000000  00007f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003e0e  00000000  00000000  00019dda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000104ee  00000000  00000000  0001dbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000010c0  00000000  00000000  0002e0d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00007bcc  00000000  00000000  0002f198  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000f209  00000000  00000000  00036d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00002364  00000000  00000000  00045f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001988  00000000  00000000  000482d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	  return ErrorCode;

	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
       0:	0c c4       	rjmp	.+2072   	; 0x81a <__ctors_end>
	{
		errorCode = CameraControl_DeviceInfo_GetInfo ( SIInterfaceInfo );
		if (PIPE_RWSTREAM_NoError != errorCode )
		{
			printf_P(PSTR("Error reading device info\r\n"));
			return errorCode;	
       2:	00 00       	nop
	{
	}

	return 0;*/
	return 0;
}
       4:	28 c4       	rjmp	.+2128   	; 0x856 <__bad_interrupt>
       6:	00 00       	nop
       8:	26 c4       	rjmp	.+2124   	; 0x856 <__bad_interrupt>
       a:	00 00       	nop
       c:	24 c4       	rjmp	.+2120   	; 0x856 <__bad_interrupt>
       e:	00 00       	nop
      10:	22 c4       	rjmp	.+2116   	; 0x856 <__bad_interrupt>
      12:	00 00       	nop
      14:	20 c4       	rjmp	.+2112   	; 0x856 <__bad_interrupt>
      16:	00 00       	nop
      18:	1e c4       	rjmp	.+2108   	; 0x856 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1c c4       	rjmp	.+2104   	; 0x856 <__bad_interrupt>
      1e:	00 00       	nop
      20:	1a c4       	rjmp	.+2100   	; 0x856 <__bad_interrupt>
      22:	00 00       	nop
      24:	18 c4       	rjmp	.+2096   	; 0x856 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__vector_10>
      2c:	14 c4       	rjmp	.+2088   	; 0x856 <__bad_interrupt>
      2e:	00 00       	nop
      30:	12 c4       	rjmp	.+2084   	; 0x856 <__bad_interrupt>
      32:	00 00       	nop
      34:	10 c4       	rjmp	.+2080   	; 0x856 <__bad_interrupt>
      36:	00 00       	nop
      38:	0e c4       	rjmp	.+2076   	; 0x856 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c c4       	rjmp	.+2072   	; 0x856 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0a c4       	rjmp	.+2068   	; 0x856 <__bad_interrupt>
      42:	00 00       	nop
      44:	08 c4       	rjmp	.+2064   	; 0x856 <__bad_interrupt>
      46:	00 00       	nop
      48:	06 c4       	rjmp	.+2060   	; 0x856 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	04 c4       	rjmp	.+2056   	; 0x856 <__bad_interrupt>
      4e:	00 00       	nop
      50:	02 c4       	rjmp	.+2052   	; 0x856 <__bad_interrupt>
      52:	00 00       	nop
      54:	00 c4       	rjmp	.+2048   	; 0x856 <__bad_interrupt>
      56:	00 00       	nop
      58:	fe c3       	rjmp	.+2044   	; 0x856 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fc c3       	rjmp	.+2040   	; 0x856 <__bad_interrupt>
      5e:	00 00       	nop
      60:	fa c3       	rjmp	.+2036   	; 0x856 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 06 20 	jmp	0x400c	; 0x400c <__vector_25>
      68:	0c 94 35 20 	jmp	0x406a	; 0x406a <__vector_26>
      6c:	f4 c3       	rjmp	.+2024   	; 0x856 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f2 c3       	rjmp	.+2020   	; 0x856 <__bad_interrupt>
      72:	00 00       	nop
      74:	f0 c3       	rjmp	.+2016   	; 0x856 <__bad_interrupt>
      76:	00 00       	nop
      78:	ee c3       	rjmp	.+2012   	; 0x856 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ec c3       	rjmp	.+2008   	; 0x856 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ea c3       	rjmp	.+2004   	; 0x856 <__bad_interrupt>
      82:	00 00       	nop
      84:	e8 c3       	rjmp	.+2000   	; 0x856 <__bad_interrupt>
      86:	00 00       	nop
      88:	e6 c3       	rjmp	.+1996   	; 0x856 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e4 c3       	rjmp	.+1992   	; 0x856 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e2 c3       	rjmp	.+1988   	; 0x856 <__bad_interrupt>
      92:	00 00       	nop
      94:	e0 c3       	rjmp	.+1984   	; 0x856 <__bad_interrupt>
      96:	00 00       	nop
      98:	e0 11       	cpse	r30, r0
      9a:	10 12       	cpse	r1, r16
      9c:	1c 12       	cpse	r1, r28
      9e:	f8 11       	cpse	r31, r8
      a0:	04 12       	cpse	r0, r20
      a2:	28 12       	cpse	r2, r24
      a4:	34 12       	cpse	r3, r20
      a6:	40 12       	cpse	r4, r16
      a8:	4c 12       	cpse	r4, r28
      aa:	58 12       	cpse	r5, r24
      ac:	64 12       	cpse	r6, r20
      ae:	70 12       	cpse	r7, r16
      b0:	7c 12       	cpse	r7, r28
      b2:	88 12       	cpse	r8, r24
      b4:	94 12       	cpse	r9, r20
      b6:	a0 12       	cpse	r10, r16
      b8:	ac 12       	cpse	r10, r28
      ba:	b8 12       	cpse	r11, r24
      bc:	c4 12       	cpse	r12, r20
      be:	d0 12       	cpse	r13, r16
      c0:	dc 12       	cpse	r13, r28
      c2:	e8 12       	cpse	r14, r24
      c4:	f4 12       	cpse	r15, r20
      c6:	00 13       	cpse	r16, r16
      c8:	0c 13       	cpse	r16, r28
      ca:	18 13       	cpse	r17, r24
      cc:	24 13       	cpse	r18, r20
      ce:	30 13       	cpse	r19, r16
      d0:	3c 13       	cpse	r19, r28
      d2:	48 13       	cpse	r20, r24
      d4:	54 13       	cpse	r21, r20
      d6:	ec 11       	cpse	r30, r12

000000d8 <__c.5045>:
      d8:	44 65 76 69 63 65 20 6e 6f 74 20 63 6f 6e 6e 65     Device not conne
      e8:	63 74 65 64 2e 0d 0a 00                             cted....

000000f0 <__c.5022>:
      f0:	44 65 76 69 63 65 20 6e 6f 74 20 63 6f 6e 6e 65     Device not conne
     100:	63 74 65 64 2e 0d 0a 00                             cted....

00000108 <__c.5014>:
     108:	44 65 76 69 63 65 20 6e 6f 74 20 63 6f 6e 6e 65     Device not conne
     118:	63 74 65 64 2e 0d 0a 00                             cted....

00000120 <__c.5008>:
     120:	44 65 76 69 63 65 20 6e 6f 74 20 63 6f 6e 6e 65     Device not conne
     130:	63 74 65 64 2e 0d 0a 00                             cted....

00000138 <__c.5001>:
     138:	44 65 76 69 63 65 20 6e 6f 74 20 63 6f 6e 6e 65     Device not conne
     148:	63 74 65 64 2e 0d 0a 00                             cted....

00000150 <__c.4986>:
     150:	55 6e 72 65 63 6f 67 6e 69 7a 65 64 20 65 72 72     Unrecognized err
     160:	6f 72 2e 0d 0a 00                                   or....

00000166 <__c.4983>:
     166:	45 72 72 6f 72 20 63 6f 64 65 20 66 6f 72 20 73     Error code for s
     176:	6f 6d 65 20 53 74 69 6c 6c 20 49 6d 61 67 65 20     ome Still Image 
     186:	48 6f 73 74 20 66 75 6e 63 74 69 6f 6e 73 2c 20     Host functions, 
     196:	69 6e 64 69 63 61 74 69 6e 67 20 61 20 6c 6f 67     indicating a log
     1a6:	69 63 61 6c 20 28 61 6e 64 20 6e 6f 74 20 68 61     ical (and not ha
     1b6:	72 64 77 61 72 65 29 20 65 72 72 6f 72 2e 0d 0a     rdware) error...
     1c6:	00                                                  .

000001c7 <__c.4980>:
     1c7:	49 6e 64 69 63 61 74 65 73 20 74 68 61 74 20 74     Indicates that t
     1d7:	68 65 20 70 69 70 65 20 62 61 6e 6b 20 62 65 63     he pipe bank bec
     1e7:	61 6d 65 20 66 75 6c 6c 2f 65 6d 70 74 79 20 62     ame full/empty b
     1f7:	65 66 6f 72 65 20 74 68 65 20 63 6f 6d 70 6c 65     efore the comple
     207:	74 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66 20 74     te contents of t
     217:	68 65 20 73 74 72 65 61 6d 20 63 6f 75 6c 64 20     he stream could 
     227:	62 65 20 74 72 61 6e 73 66 65 72 72 65 64 2e 0d     be transferred..
     237:	0a 00                                               ..

00000239 <__c.4977>:
     239:	54 68 65 20 64 65 76 69 63 65 20 66 61 69 6c 65     The device faile
     249:	64 20 74 6f 20 61 63 63 65 70 74 20 6f 72 20 73     d to accept or s
     259:	65 6e 64 20 74 68 65 20 6e 65 78 74 20 70 61 63     end the next pac
     269:	6b 65 74 20 77 69 74 68 69 6e 20 74 68 65 20 73     ket within the s
     279:	6f 66 74 77 61 72 65 20 74 69 6d 65 6f 75 74 20     oftware timeout 
     289:	70 65 72 69 6f 64 20 73 65 74 20 62 79 20 74 68     period set by th
     299:	65 20 55 53 42 5f 53 54 52 45 41 4d 5f 54 49 4d     e USB_STREAM_TIM
     2a9:	45 4f 55 54 5f 4d 53 20 6d 61 63 72 6f 2e 0d 0a     EOUT_MS macro...
     2b9:	00                                                  .

000002ba <__c.4974>:
     2ba:	44 65 76 69 63 65 20 77 61 73 20 64 69 73 63 6f     Device was disco
     2ca:	6e 6e 65 63 74 65 64 20 66 72 6f 6d 20 74 68 65     nnected from the
     2da:	20 68 6f 73 74 20 64 75 72 69 6e 67 20 74 68 65      host during the
     2ea:	20 74 72 61 6e 73 66 65 72 2e 0d 0a 00               transfer....

000002f7 <__c.4970>:
     2f7:	54 68 65 20 64 65 76 69 63 65 20 73 74 61 6c 6c     The device stall
     307:	65 64 20 74 68 65 20 70 69 70 65 20 64 75 72 69     ed the pipe duri
     317:	6e 67 20 74 68 65 20 74 72 61 6e 73 66 65 72 2e     ng the transfer.
     327:	0d 0a 00                                            ...

0000032a <__c.4967>:
     32a:	50 49 4d 41 20 45 72 72 6f 72 20 28 25 64 29 3a     PIMA Error (%d):
     33a:	20 00                                                .

0000033c <__c.4962>:
     33c:	1b 5b 33 31 6d 55 6e 64 65 66 69 6e 65 64 20 6f     .[31mUndefined o
     34c:	72 20 56 65 6e 64 6f 72 20 53 70 65 63 69 66 69     r Vendor Specifi
     35c:	63 0d 0a 1b 5b 33 37 6d 00                          c...[37m.

00000365 <__c.4959>:
     365:	1b 5b 33 31 6d 53 70 65 63 69 66 69 63 61 74 69     .[31mSpecificati
     375:	6f 6e 20 6f 66 20 44 65 73 74 69 6e 61 74 69 6f     on of Destinatio
     385:	6e 20 55 6e 73 75 70 70 6f 72 74 65 64 0d 0a 1b     n Unsupported...
     395:	5b 33 37 6d 00                                      [37m.

0000039a <__c.4956>:
     39a:	1b 5b 33 31 6d 54 72 61 6e 73 61 63 74 69 6f 6e     .[31mTransaction
     3aa:	20 43 61 6e 63 65 6c 6c 65 64 0d 0a 1b 5b 33 37      Cancelled...[37
     3ba:	6d 00                                               m.

000003bc <__c.4953>:
     3bc:	1b 5b 33 31 6d 53 65 73 73 69 6f 6e 20 41 6c 72     .[31mSession Alr
     3cc:	65 61 64 79 20 4f 70 65 6e 0d 0a 1b 5b 33 37 6d     eady Open...[37m
     3dc:	00                                                  .

000003dd <__c.4950>:
     3dd:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 50 61 72     .[31mInvalid Par
     3ed:	61 6d 65 74 65 72 0d 0a 1b 5b 33 37 6d 00           ameter...[37m.

000003fb <__c.4947>:
     3fb:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     40b:	69 63 65 50 72 6f 70 20 56 61 6c 75 65 0d 0a 1b     iceProp Value...
     41b:	5b 33 37 6d 00                                      [37m.

00000420 <__c.4944>:
     420:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 44 65 76     .[31mInvalid Dev
     430:	69 63 65 50 72 6f 70 20 46 6f 72 6d 61 74 0d 0a     iceProp Format..
     440:	1b 5b 33 37 6d 00                                   .[37m.

00000446 <__c.4941>:
     446:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 50 61 72     .[31mInvalid Par
     456:	65 6e 74 4f 62 6a 65 63 74 0d 0a 1b 5b 33 37 6d     entObject...[37m
     466:	00                                                  .

00000467 <__c.4938>:
     467:	1b 5b 33 31 6d 44 65 76 69 63 65 20 42 75 73 79     .[31mDevice Busy
     477:	0d 0a 1b 5b 33 37 6d 00                             ...[37m.

0000047f <__c.4935>:
     47f:	1b 5b 33 31 6d 43 61 70 74 75 72 65 20 41 6c 72     .[31mCapture Alr
     48f:	65 61 64 79 20 54 65 72 6d 69 6e 61 74 65 64 0d     eady Terminated.
     49f:	0a 1b 5b 33 37 6d 00                                ..[37m.

000004a6 <__c.4932>:
     4a6:	1b 5b 33 31 6d 55 6e 6b 6e 6f 77 6e 20 56 65 6e     .[31mUnknown Ven
     4b6:	64 6f 72 20 43 6f 64 65 0d 0a 1b 5b 33 37 6d 00     dor Code...[37m.

000004c6 <__c.4929>:
     4c6:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 43 6f 64     .[31mInvalid Cod
     4d6:	65 20 46 6f 72 6d 61 74 0d 0a 1b 5b 33 37 6d 00     e Format...[37m.

000004e6 <__c.4926>:
     4e6:	1b 5b 33 31 6d 4e 6f 20 56 61 6c 69 64 20 4f 62     .[31mNo Valid Ob
     4f6:	6a 65 63 74 49 6e 66 6f 0d 0a 1b 5b 33 37 6d 00     jectInfo...[37m.

00000506 <__c.4923>:
     506:	1b 5b 33 31 6d 53 70 65 63 69 66 69 63 61 74 69     .[31mSpecificati
     516:	6f 6e 20 42 79 20 46 6f 72 6d 61 74 20 55 6e 73     on By Format Uns
     526:	75 70 70 6f 72 74 65 64 0d 0a 1b 5b 33 37 6d 00     upported...[37m.

00000536 <__c.4920>:
     536:	1b 5b 33 31 6d 53 74 6f 72 65 20 4e 6f 74 20 41     .[31mStore Not A
     546:	76 61 69 6c 61 62 6c 65 0d 0a 1b 5b 33 37 6d 00     vailable...[37m.

00000556 <__c.4917>:
     556:	1b 5b 33 31 6d 50 61 72 74 69 61 6c 20 44 65 6c     .[31mPartial Del
     566:	65 74 69 6f 6e 0d 0a 1b 5b 33 37 6d 00              etion...[37m.

00000573 <__c.4914>:
     573:	1b 5b 33 31 6d 53 65 6c 66 54 65 73 74 20 46 61     .[31mSelfTest Fa
     583:	69 6c 65 64 0d 0a 1b 5b 33 37 6d 00                 iled...[37m.

0000058f <__c.4911>:
     58f:	1b 5b 33 31 6d 4e 6f 20 54 68 75 6d 62 6e 61 69     .[31mNo Thumbnai
     59f:	6c 20 50 72 65 73 65 6e 74 0d 0a 1b 5b 33 37 6d     l Present...[37m
     5af:	00                                                  .

000005b0 <__c.4908>:
     5b0:	1b 5b 33 31 6d 41 63 63 65 73 73 20 44 65 6e 69     .[31mAccess Deni
     5c0:	65 64 0d 0a 1b 5b 33 37 6d 00                       ed...[37m.

000005ca <__c.4905>:
     5ca:	1b 5b 33 31 6d 53 74 6f 72 65 20 52 65 61 64 2d     .[31mStore Read-
     5da:	4f 6e 6c 79 0d 0a 1b 5b 33 37 6d 00                 Only...[37m.

000005e6 <__c.4902>:
     5e6:	1b 5b 33 31 6d 4f 62 6a 65 63 74 20 57 72 69 74     .[31mObject Writ
     5f6:	65 50 72 6f 74 65 63 74 65 64 0d 0a 1b 5b 33 37     eProtected...[37
     606:	6d 00                                               m.

00000608 <__c.4899>:
     608:	1b 5b 33 31 6d 53 74 6f 72 65 20 46 75 6c 6c 0d     .[31mStore Full.
     618:	0a 1b 5b 33 37 6d 00                                ..[37m.

0000061f <__c.4896>:
     61f:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 4f 62 6a     .[31mInvalid Obj
     62f:	65 63 74 46 6f 72 6d 61 74 43 6f 64 65 0d 0a 1b     ectFormatCode...
     63f:	5b 33 37 6d 00                                      [37m.

00000644 <__c.4893>:
     644:	1b 5b 33 31 6d 44 65 76 69 63 65 50 72 6f 70 20     .[31mDeviceProp 
     654:	4e 6f 74 20 53 75 70 70 6f 72 74 65 64 0d 0a 1b     Not Supported...
     664:	5b 33 37 6d 00                                      [37m.

00000669 <__c.4890>:
     669:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 4f 62 6a     .[31mInvalid Obj
     679:	65 63 74 48 61 6e 64 6c 65 0d 0a 1b 5b 33 37 6d     ectHandle...[37m
     689:	00                                                  .

0000068a <__c.4887>:
     68a:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 53 74 6f     .[31mInvalid Sto
     69a:	72 61 67 65 49 44 0d 0a 1b 5b 33 37 6d 00           rageID...[37m.

000006a8 <__c.4884>:
     6a8:	1b 5b 33 31 6d 49 6e 63 6f 6d 70 6c 65 74 65 20     .[31mIncomplete 
     6b8:	54 72 61 6e 73 66 65 72 0d 0a 1b 5b 33 37 6d 00     Transfer...[37m.

000006c8 <__c.4881>:
     6c8:	1b 5b 33 31 6d 50 61 72 61 6d 65 74 65 72 20 4e     .[31mParameter N
     6d8:	6f 74 20 53 75 70 70 6f 72 74 65 64 0d 0a 1b 5b     ot Supported...[
     6e8:	33 37 6d 00                                         37m.

000006ec <__c.4878>:
     6ec:	1b 5b 33 31 6d 4f 70 65 72 61 74 69 6f 6e 20 4e     .[31mOperation N
     6fc:	6f 74 20 53 75 70 70 6f 72 74 65 64 0d 0a 1b 5b     ot Supported...[
     70c:	33 37 6d 00                                         37m.

00000710 <__c.4875>:
     710:	1b 5b 33 31 6d 49 6e 76 61 6c 69 64 20 54 72 61     .[31mInvalid Tra
     720:	6e 73 61 63 74 69 6f 6e 49 44 0d 0a 1b 5b 33 37     nsactionID...[37
     730:	6d 00                                               m.

00000732 <__c.4872>:
     732:	1b 5b 33 31 6d 53 65 73 73 69 6f 6e 20 4e 6f 74     .[31mSession Not
     742:	20 4f 70 65 6e 0d 0a 1b 5b 33 37 6d 00               Open...[37m.

0000074f <__c.4869>:
     74f:	1b 5b 33 31 6d 47 65 6e 65 72 61 6c 20 45 72 72     .[31mGeneral Err
     75f:	6f 72 0d 0a 1b 5b 33 37 6d 00                       or...[37m.

00000769 <__c.4865>:
     769:	1b 5b 33 36 6d 4f 4b 0d 0a 1b 5b 33 37 6d 00        .[36mOK...[37m.

00000778 <__c.4862>:
     778:	1b 5b 33 31 6d 09 09 5b 30 78 25 30 34 78 5d 20     .[31m..[0x%04x] 
     788:	1b 5b 33 37 6d 00                                   .[37m.

0000078e <__c.4860>:
     78e:	1b 5b 33 36 6d 09 09 5b 30 78 25 30 34 78 5d 20     .[36m..[0x%04x] 
     79e:	1b 5b 33 37 6d 00                                   .[37m.

000007a4 <__c.4906>:
     7a4:	44 65 76 69 63 65 20 6e 6f 74 20 63 6f 6e 6e 65     Device not conne
     7b4:	63 74 65 64 2e 0d 0a 00                             cted....

000007bc <__c.4893>:
     7bc:	44 65 76 69 63 65 20 6e 6f 74 20 63 6f 6e 6e 65     Device not conne
     7cc:	63 74 65 64 2e 0d 0a 00                             cted....

000007d4 <__c.4867>:
     7d4:	0d 0a 53 74 6f 72 61 67 65 20 6e 6f 74 20 66 6f     ..Storage not fo
     7e4:	75 6e 64 2e 20 52 75 6e 20 67 65 74 5f 73 74 6f     und. Run get_sto
     7f4:	72 61 67 65 5f 69 6e 66 6f 2e 2e 2e 00              rage_info....

00000801 <__c.4864>:
     801:	44 65 76 69 63 65 20 6e 6f 74 20 63 6f 6e 6e 65     Device not conne
     811:	63 74 65 64 2e 0d 0a 00 00                          cted.....

0000081a <__ctors_end>:
     81a:	11 24       	eor	r1, r1
     81c:	1f be       	out	0x3f, r1	; 63
     81e:	cf ef       	ldi	r28, 0xFF	; 255
     820:	d0 e2       	ldi	r29, 0x20	; 32
     822:	de bf       	out	0x3e, r29	; 62
     824:	cd bf       	out	0x3d, r28	; 61

00000826 <__do_copy_data>:
     826:	11 e0       	ldi	r17, 0x01	; 1
     828:	a0 e0       	ldi	r26, 0x00	; 0
     82a:	b1 e0       	ldi	r27, 0x01	; 1
     82c:	e8 ea       	ldi	r30, 0xA8	; 168
     82e:	f6 e4       	ldi	r31, 0x46	; 70
     830:	00 e0       	ldi	r16, 0x00	; 0
     832:	0b bf       	out	0x3b, r16	; 59
     834:	02 c0       	rjmp	.+4      	; 0x83a <__do_copy_data+0x14>
     836:	07 90       	elpm	r0, Z+
     838:	0d 92       	st	X+, r0
     83a:	a2 34       	cpi	r26, 0x42	; 66
     83c:	b1 07       	cpc	r27, r17
     83e:	d9 f7       	brne	.-10     	; 0x836 <__do_copy_data+0x10>

00000840 <__do_clear_bss>:
     840:	15 e0       	ldi	r17, 0x05	; 5
     842:	a2 e4       	ldi	r26, 0x42	; 66
     844:	b1 e0       	ldi	r27, 0x01	; 1
     846:	01 c0       	rjmp	.+2      	; 0x84a <.do_clear_bss_start>

00000848 <.do_clear_bss_loop>:
     848:	1d 92       	st	X+, r1

0000084a <.do_clear_bss_start>:
     84a:	a4 3d       	cpi	r26, 0xD4	; 212
     84c:	b1 07       	cpc	r27, r17
     84e:	e1 f7       	brne	.-8      	; 0x848 <.do_clear_bss_loop>
     850:	76 d0       	rcall	.+236    	; 0x93e <main>
     852:	0c 94 52 23 	jmp	0x46a4	; 0x46a4 <_exit>

00000856 <__bad_interrupt>:
     856:	d4 cb       	rjmp	.-2136   	; 0x0 <__vectors>

00000858 <Stabily_SetupHardware>:
 *  Configures the board hardware and chip peripherals for the demo's functionality.
 */
void Stabily_SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     858:	84 b7       	in	r24, 0x34	; 52
     85a:	87 7f       	andi	r24, 0xF7	; 247
     85c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     85e:	88 e1       	ldi	r24, 0x18	; 24
     860:	0f b6       	in	r0, 0x3f	; 63
     862:	f8 94       	cli
     864:	80 93 60 00 	sts	0x0060, r24
     868:	10 92 60 00 	sts	0x0060, r1
     86c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	80 e8       	ldi	r24, 0x80	; 128
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	f8 94       	cli
     876:	80 93 61 00 	sts	0x0061, r24
     87a:	90 93 61 00 	sts	0x0061, r25
     87e:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

	/* UART Initialization */
	uart_init(UART_BAUD_SELECT(115200,F_CPU));
     880:	88 e0       	ldi	r24, 0x08	; 8
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 62 20 	call	0x40c4	; 0x40c4 <uart_init>
	
	LEDs_Init();
	USB_Init();
     888:	30 d5       	rcall	.+2656   	; 0x12ea <USB_Init>
	
	g_iEventCurrentCount = 0;
     88a:	10 92 44 01 	sts	0x0144, r1
     88e:	10 92 45 01 	sts	0x0145, r1
     892:	10 92 46 01 	sts	0x0146, r1
     896:	10 92 47 01 	sts	0x0147, r1
}
     89a:	08 95       	ret

0000089c <Stabily_PropertyValueEvent>:
 * Check property value updating timing 
 */
void Stabily_PropertyValueEvent ( void )
{
	// Event timing counters
	g_iEventCurrentCount++;
     89c:	80 91 44 01 	lds	r24, 0x0144
     8a0:	90 91 45 01 	lds	r25, 0x0145
     8a4:	a0 91 46 01 	lds	r26, 0x0146
     8a8:	b0 91 47 01 	lds	r27, 0x0147
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	a1 1d       	adc	r26, r1
     8b0:	b1 1d       	adc	r27, r1
     8b2:	80 93 44 01 	sts	0x0144, r24
     8b6:	90 93 45 01 	sts	0x0145, r25
     8ba:	a0 93 46 01 	sts	0x0146, r26
     8be:	b0 93 47 01 	sts	0x0147, r27
	if (g_iEventCurrentCount==((uint32_t)(80000)))		// every xxx counts
     8c2:	80 91 44 01 	lds	r24, 0x0144
     8c6:	90 91 45 01 	lds	r25, 0x0145
     8ca:	a0 91 46 01 	lds	r26, 0x0146
     8ce:	b0 91 47 01 	lds	r27, 0x0147
     8d2:	80 38       	cpi	r24, 0x80	; 128
     8d4:	28 e3       	ldi	r18, 0x38	; 56
     8d6:	92 07       	cpc	r25, r18
     8d8:	21 e0       	ldi	r18, 0x01	; 1
     8da:	a2 07       	cpc	r26, r18
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	b2 07       	cpc	r27, r18
     8e0:	29 f0       	breq	.+10     	; 0x8ec <Stabily_PropertyValueEvent+0x50>
			TP_CheckPropertyEvents (  );
		}
	}
	else
	{
		g_iCurrentPropEventVector = 0;
     8e2:	10 92 19 02 	sts	0x0219, r1
     8e6:	10 92 18 02 	sts	0x0218, r1
     8ea:	08 95       	ret
{
	// Event timing counters
	g_iEventCurrentCount++;
	if (g_iEventCurrentCount==((uint32_t)(80000)))		// every xxx counts
	{
		TP_SendSyncWord ( );
     8ec:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <TP_SendSyncWord>
		g_iEventCurrentCount = 0;
     8f0:	10 92 44 01 	sts	0x0144, r1
     8f4:	10 92 45 01 	sts	0x0145, r1
     8f8:	10 92 46 01 	sts	0x0146, r1
     8fc:	10 92 47 01 	sts	0x0147, r1
		g_iSlowEventCount++;
     900:	80 91 43 01 	lds	r24, 0x0143
     904:	8f 5f       	subi	r24, 0xFF	; 255
     906:	80 93 43 01 	sts	0x0143, r24
		if (g_iSlowEventCount==3)
     90a:	80 91 43 01 	lds	r24, 0x0143
     90e:	83 30       	cpi	r24, 0x03	; 3
     910:	51 f0       	breq	.+20     	; 0x926 <Stabily_PropertyValueEvent+0x8a>
			g_iCurrentPropEventVector = g_iPropEventVector;
			TP_CheckPropertyEvents (  );				
		}
		else
		{
			g_iCurrentPropEventVector = g_iPropEventFastMode;
     912:	80 91 16 02 	lds	r24, 0x0216
     916:	90 91 17 02 	lds	r25, 0x0217
     91a:	90 93 19 02 	sts	0x0219, r25
     91e:	80 93 18 02 	sts	0x0218, r24
			// perform only the fast updates
			TP_CheckPropertyEvents (  );
     922:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <TP_CheckPropertyEvents>
		TP_SendSyncWord ( );
		g_iEventCurrentCount = 0;
		g_iSlowEventCount++;
		if (g_iSlowEventCount==3)
		{
			g_iSlowEventCount=0;
     926:	10 92 43 01 	sts	0x0143, r1
			// perform slow update which contains also the fast updates
			g_iCurrentPropEventVector = g_iPropEventVector;
     92a:	80 91 12 02 	lds	r24, 0x0212
     92e:	90 91 13 02 	lds	r25, 0x0213
     932:	90 93 19 02 	sts	0x0219, r25
     936:	80 93 18 02 	sts	0x0218, r24
			TP_CheckPropertyEvents (  );				
     93a:	0c 94 58 1b 	jmp	0x36b0	; 0x36b0 <TP_CheckPropertyEvents>

0000093e <main>:
 *  Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	Stabily_SetupHardware(  );
     93e:	8c df       	rcall	.-232    	; 0x858 <Stabily_SetupHardware>
	
	sei();
     940:	78 94       	sei

	for (;;)
	{	
		SI_Host_USBTask(&DigitalCamera_SI_Interface);
		USB_USBTask(  );	
     942:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <USB_USBTask>
		
		TP_SendEvent (  );
     946:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <TP_SendEvent>
		//Stabily_ShellRX ( );
		TP_GetIncomingCommand (  );		
     94a:	0e 94 47 18 	call	0x308e	; 0x308e <TP_GetIncomingCommand>
		CameraControl_DeviceEvents_PollEvents(&DigitalCamera_SI_Interface);
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	0e 94 99 17 	call	0x2f32	; 0x2f32 <CameraControl_DeviceEvents_PollEvents>
		TP_CollectEvents (  );
     956:	0e 94 19 1b 	call	0x3632	; 0x3632 <TP_CollectEvents>
		Stabily_PropertyValueEvent (  );
     95a:	a0 df       	rcall	.-192    	; 0x89c <Stabily_PropertyValueEvent>
     95c:	f2 cf       	rjmp	.-28     	; 0x942 <main+0x4>

0000095e <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     95e:	80 91 9e 00 	lds	r24, 0x009E
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	81 70       	andi	r24, 0x01	; 1
     966:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     968:	20 91 a0 00 	lds	r18, 0x00A0
     96c:	2d 7f       	andi	r18, 0xFD	; 253
     96e:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     972:	20 91 9e 00 	lds	r18, 0x009E
     976:	22 60       	ori	r18, 0x02	; 2
     978:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     97c:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     980:	21 fd       	sbrc	r18, 1
     982:	fc cf       	rjmp	.-8      	; 0x97c <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     984:	20 91 9e 00 	lds	r18, 0x009E
     988:	21 60       	ori	r18, 0x01	; 1
     98a:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();

	USB_Host_ConfigurationNumber = 0;
     98e:	10 92 5f 04 	sts	0x045F, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     992:	20 91 a0 00 	lds	r18, 0x00A0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	20 72       	andi	r18, 0x20	; 32
     99a:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     99c:	40 91 a0 00 	lds	r20, 0x00A0
     9a0:	4f 7d       	andi	r20, 0xDF	; 223
     9a2:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     9a6:	40 91 9f 00 	lds	r20, 0x009F
     9aa:	4f 7d       	andi	r20, 0xDF	; 223
     9ac:	40 93 9f 00 	sts	0x009F, r20
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     9b0:	40 91 9f 00 	lds	r20, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     9b4:	45 fd       	sbrc	r20, 5
     9b6:	75 c0       	rjmp	.+234    	; 0xaa2 <USB_Host_ResetDevice+0x144>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9b8:	ef e9       	ldi	r30, 0x9F	; 159
     9ba:	ff e0       	ldi	r31, 0x0F	; 15
     9bc:	31 97       	sbiw	r30, 0x01	; 1
     9be:	f1 f7       	brne	.-4      	; 0x9bc <USB_Host_ResetDevice+0x5e>
     9c0:	00 c0       	rjmp	.+0      	; 0x9c2 <USB_Host_ResetDevice+0x64>
     9c2:	00 00       	nop
     9c4:	40 91 9f 00 	lds	r20, 0x009F
     9c8:	45 fd       	sbrc	r20, 5
     9ca:	6b c0       	rjmp	.+214    	; 0xaa2 <USB_Host_ResetDevice+0x144>
     9cc:	ef e9       	ldi	r30, 0x9F	; 159
     9ce:	ff e0       	ldi	r31, 0x0F	; 15
     9d0:	31 97       	sbiw	r30, 0x01	; 1
     9d2:	f1 f7       	brne	.-4      	; 0x9d0 <USB_Host_ResetDevice+0x72>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <USB_Host_ResetDevice+0x78>
     9d6:	00 00       	nop
     9d8:	40 91 9f 00 	lds	r20, 0x009F
     9dc:	45 fd       	sbrc	r20, 5
     9de:	61 c0       	rjmp	.+194    	; 0xaa2 <USB_Host_ResetDevice+0x144>
     9e0:	ef e9       	ldi	r30, 0x9F	; 159
     9e2:	ff e0       	ldi	r31, 0x0F	; 15
     9e4:	31 97       	sbiw	r30, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <USB_Host_ResetDevice+0x86>
     9e8:	00 c0       	rjmp	.+0      	; 0x9ea <USB_Host_ResetDevice+0x8c>
     9ea:	00 00       	nop
     9ec:	40 91 9f 00 	lds	r20, 0x009F
     9f0:	45 fd       	sbrc	r20, 5
     9f2:	57 c0       	rjmp	.+174    	; 0xaa2 <USB_Host_ResetDevice+0x144>
     9f4:	ef e9       	ldi	r30, 0x9F	; 159
     9f6:	ff e0       	ldi	r31, 0x0F	; 15
     9f8:	31 97       	sbiw	r30, 0x01	; 1
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <USB_Host_ResetDevice+0x9a>
     9fc:	00 c0       	rjmp	.+0      	; 0x9fe <USB_Host_ResetDevice+0xa0>
     9fe:	00 00       	nop
     a00:	40 91 9f 00 	lds	r20, 0x009F
     a04:	45 fd       	sbrc	r20, 5
     a06:	4d c0       	rjmp	.+154    	; 0xaa2 <USB_Host_ResetDevice+0x144>
     a08:	ef e9       	ldi	r30, 0x9F	; 159
     a0a:	ff e0       	ldi	r31, 0x0F	; 15
     a0c:	31 97       	sbiw	r30, 0x01	; 1
     a0e:	f1 f7       	brne	.-4      	; 0xa0c <USB_Host_ResetDevice+0xae>
     a10:	00 c0       	rjmp	.+0      	; 0xa12 <USB_Host_ResetDevice+0xb4>
     a12:	00 00       	nop
     a14:	40 91 9f 00 	lds	r20, 0x009F
     a18:	45 fd       	sbrc	r20, 5
     a1a:	43 c0       	rjmp	.+134    	; 0xaa2 <USB_Host_ResetDevice+0x144>
     a1c:	ef e9       	ldi	r30, 0x9F	; 159
     a1e:	ff e0       	ldi	r31, 0x0F	; 15
     a20:	31 97       	sbiw	r30, 0x01	; 1
     a22:	f1 f7       	brne	.-4      	; 0xa20 <USB_Host_ResetDevice+0xc2>
     a24:	00 c0       	rjmp	.+0      	; 0xa26 <USB_Host_ResetDevice+0xc8>
     a26:	00 00       	nop
     a28:	40 91 9f 00 	lds	r20, 0x009F
     a2c:	45 fd       	sbrc	r20, 5
     a2e:	39 c0       	rjmp	.+114    	; 0xaa2 <USB_Host_ResetDevice+0x144>
     a30:	ef e9       	ldi	r30, 0x9F	; 159
     a32:	ff e0       	ldi	r31, 0x0F	; 15
     a34:	31 97       	sbiw	r30, 0x01	; 1
     a36:	f1 f7       	brne	.-4      	; 0xa34 <USB_Host_ResetDevice+0xd6>
     a38:	00 c0       	rjmp	.+0      	; 0xa3a <USB_Host_ResetDevice+0xdc>
     a3a:	00 00       	nop
     a3c:	40 91 9f 00 	lds	r20, 0x009F
     a40:	45 fd       	sbrc	r20, 5
     a42:	2f c0       	rjmp	.+94     	; 0xaa2 <USB_Host_ResetDevice+0x144>
     a44:	ef e9       	ldi	r30, 0x9F	; 159
     a46:	ff e0       	ldi	r31, 0x0F	; 15
     a48:	31 97       	sbiw	r30, 0x01	; 1
     a4a:	f1 f7       	brne	.-4      	; 0xa48 <USB_Host_ResetDevice+0xea>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <USB_Host_ResetDevice+0xf0>
     a4e:	00 00       	nop
     a50:	40 91 9f 00 	lds	r20, 0x009F
     a54:	45 fd       	sbrc	r20, 5
     a56:	25 c0       	rjmp	.+74     	; 0xaa2 <USB_Host_ResetDevice+0x144>
     a58:	ef e9       	ldi	r30, 0x9F	; 159
     a5a:	ff e0       	ldi	r31, 0x0F	; 15
     a5c:	31 97       	sbiw	r30, 0x01	; 1
     a5e:	f1 f7       	brne	.-4      	; 0xa5c <USB_Host_ResetDevice+0xfe>
     a60:	00 c0       	rjmp	.+0      	; 0xa62 <USB_Host_ResetDevice+0x104>
     a62:	00 00       	nop
     a64:	40 91 9f 00 	lds	r20, 0x009F
     a68:	45 fd       	sbrc	r20, 5
     a6a:	1b c0       	rjmp	.+54     	; 0xaa2 <USB_Host_ResetDevice+0x144>
     a6c:	ef e9       	ldi	r30, 0x9F	; 159
     a6e:	ff e0       	ldi	r31, 0x0F	; 15
     a70:	31 97       	sbiw	r30, 0x01	; 1
     a72:	f1 f7       	brne	.-4      	; 0xa70 <USB_Host_ResetDevice+0x112>
     a74:	00 c0       	rjmp	.+0      	; 0xa76 <USB_Host_ResetDevice+0x118>
     a76:	00 00       	nop
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     a78:	21 15       	cp	r18, r1
     a7a:	31 05       	cpc	r19, r1
     a7c:	29 f0       	breq	.+10     	; 0xa88 <USB_Host_ResetDevice+0x12a>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     a7e:	20 91 a0 00 	lds	r18, 0x00A0
     a82:	20 62       	ori	r18, 0x20	; 32
     a84:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     a88:	00 97       	sbiw	r24, 0x00	; 0
     a8a:	29 f4       	brne	.+10     	; 0xa96 <USB_Host_ResetDevice+0x138>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     a8c:	80 91 9e 00 	lds	r24, 0x009E
     a90:	8e 7f       	andi	r24, 0xFE	; 254
     a92:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     a96:	80 91 a0 00 	lds	r24, 0x00A0
     a9a:	82 60       	ori	r24, 0x02	; 2
     a9c:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     aa0:	08 95       	ret
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     aa2:	40 91 9f 00 	lds	r20, 0x009F
     aa6:	4f 7d       	andi	r20, 0xDF	; 223
     aa8:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     aac:	40 91 9f 00 	lds	r20, 0x009F
     ab0:	4d 7f       	andi	r20, 0xFD	; 253
     ab2:	40 93 9f 00 	sts	0x009F, r20
     ab6:	e0 cf       	rjmp	.-64     	; 0xa78 <USB_Host_ResetDevice+0x11a>

00000ab8 <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     ab8:	ef 92       	push	r14
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	df 93       	push	r29
     ac0:	cf 93       	push	r28
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	28 97       	sbiw	r28, 0x08	; 8
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	f8 94       	cli
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     ad2:	80 91 69 04 	lds	r24, 0x0469
     ad6:	85 30       	cpi	r24, 0x05	; 5
     ad8:	09 f4       	brne	.+2      	; 0xadc <USB_Host_ProcessNextHostState+0x24>
     ada:	32 c1       	rjmp	.+612    	; 0xd40 <USB_Host_ProcessNextHostState+0x288>
     adc:	86 30       	cpi	r24, 0x06	; 6
     ade:	20 f1       	brcs	.+72     	; 0xb28 <USB_Host_ProcessNextHostState+0x70>
     ae0:	87 30       	cpi	r24, 0x07	; 7
     ae2:	09 f4       	brne	.+2      	; 0xae6 <USB_Host_ProcessNextHostState+0x2e>
     ae4:	12 c1       	rjmp	.+548    	; 0xd0a <USB_Host_ProcessNextHostState+0x252>
     ae6:	87 30       	cpi	r24, 0x07	; 7
     ae8:	08 f0       	brcs	.+2      	; 0xaec <USB_Host_ProcessNextHostState+0x34>
     aea:	53 c0       	rjmp	.+166    	; 0xb92 <USB_Host_ProcessNextHostState+0xda>
			USB_Host_ResetDevice();

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	40 e0       	ldi	r20, 0x00	; 0
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	00 e4       	ldi	r16, 0x40	; 64
     af6:	10 e0       	ldi	r17, 0x00	; 0
     af8:	ee 24       	eor	r14, r14
     afa:	c5 d1       	rcall	.+906    	; 0xe86 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     afc:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     b00:	87 fd       	sbrc	r24, 7
     b02:	44 c1       	rjmp	.+648    	; 0xd8c <USB_Host_ProcessNextHostState+0x2d4>
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     b04:	60 e0       	ldi	r22, 0x00	; 0
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     b06:	84 e0       	ldi	r24, 0x04	; 4

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     b08:	90 91 69 04 	lds	r25, 0x0469
     b0c:	91 30       	cpi	r25, 0x01	; 1
     b0e:	09 f4       	brne	.+2      	; 0xb12 <USB_Host_ProcessNextHostState+0x5a>
     b10:	4d c0       	rjmp	.+154    	; 0xbac <USB_Host_ProcessNextHostState+0xf4>
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     b12:	0e 94 98 11 	call	0x2330	; 0x2330 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     b16:	80 91 dd 00 	lds	r24, 0x00DD
     b1a:	81 60       	ori	r24, 0x01	; 1
     b1c:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     b20:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     b24:	92 d3       	rcall	.+1828   	; 0x124a <USB_ResetInterface>
     b26:	42 c0       	rjmp	.+132    	; 0xbac <USB_Host_ProcessNextHostState+0xf4>
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     b28:	82 30       	cpi	r24, 0x02	; 2
     b2a:	09 f4       	brne	.+2      	; 0xb2e <USB_Host_ProcessNextHostState+0x76>
     b2c:	ff c0       	rjmp	.+510    	; 0xd2c <USB_Host_ProcessNextHostState+0x274>
     b2e:	83 30       	cpi	r24, 0x03	; 3
     b30:	08 f4       	brcc	.+2      	; 0xb34 <USB_Host_ProcessNextHostState+0x7c>
     b32:	48 c0       	rjmp	.+144    	; 0xbc4 <USB_Host_ProcessNextHostState+0x10c>
     b34:	83 30       	cpi	r24, 0x03	; 3
     b36:	09 f4       	brne	.+2      	; 0xb3a <USB_Host_ProcessNextHostState+0x82>
     b38:	99 c0       	rjmp	.+306    	; 0xc6c <USB_Host_ProcessNextHostState+0x1b4>
     b3a:	84 30       	cpi	r24, 0x04	; 4
     b3c:	b9 f5       	brne	.+110    	; 0xbac <USB_Host_ProcessNextHostState+0xf4>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     b3e:	80 91 9f 00 	lds	r24, 0x009F
				USB_HostState = HOST_STATE_Powered_WaitForConnect;
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     b42:	80 ff       	sbrs	r24, 0
     b44:	33 c0       	rjmp	.+102    	; 0xbac <USB_Host_ProcessNextHostState+0xf4>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     b46:	80 91 9f 00 	lds	r24, 0x009F
     b4a:	8e 7f       	andi	r24, 0xFE	; 254
     b4c:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     b50:	80 91 9f 00 	lds	r24, 0x009F
     b54:	8d 7f       	andi	r24, 0xFD	; 253
     b56:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     b5a:	80 91 df 00 	lds	r24, 0x00DF
     b5e:	8d 7f       	andi	r24, 0xFD	; 253
     b60:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     b64:	80 91 de 00 	lds	r24, 0x00DE
     b68:	82 60       	ori	r24, 0x02	; 2
     b6a:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     b6e:	80 91 9e 00 	lds	r24, 0x009E
     b72:	81 60       	ori	r24, 0x01	; 1
     b74:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     b78:	fb d1       	rcall	.+1014   	; 0xf70 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     b7a:	10 92 69 04 	sts	0x0469, r1
     b7e:	84 e6       	ldi	r24, 0x64	; 100
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	90 93 4a 01 	sts	0x014A, r25
     b86:	80 93 49 01 	sts	0x0149, r24
     b8a:	85 e0       	ldi	r24, 0x05	; 5
     b8c:	80 93 48 01 	sts	0x0148, r24
     b90:	0d c0       	rjmp	.+26     	; 0xbac <USB_Host_ProcessNextHostState+0xf4>
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     b92:	88 30       	cpi	r24, 0x08	; 8
     b94:	09 f4       	brne	.+2      	; 0xb98 <USB_Host_ProcessNextHostState+0xe0>
     b96:	91 c0       	rjmp	.+290    	; 0xcba <USB_Host_ProcessNextHostState+0x202>
     b98:	89 30       	cpi	r24, 0x09	; 9
     b9a:	41 f4       	brne	.+16     	; 0xbac <USB_Host_ProcessNextHostState+0xf4>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	80 93 a1 00 	sts	0x00A1, r24
			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
			break;
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     ba2:	8a e0       	ldi	r24, 0x0A	; 10
     ba4:	80 93 69 04 	sts	0x0469, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     ba8:	0e 94 64 11 	call	0x22c8	; 0x22c8 <EVENT_USB_Host_DeviceEnumerationComplete>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     bac:	28 96       	adiw	r28, 0x08	; 8
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	de bf       	out	0x3e, r29	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ef 90       	pop	r14
     bc2:	08 95       	ret
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     bc4:	88 23       	and	r24, r24
     bc6:	91 f7       	brne	.-28     	; 0xbac <USB_Host_ProcessNextHostState+0xf4>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     bc8:	20 91 49 01 	lds	r18, 0x0149
     bcc:	30 91 4a 01 	lds	r19, 0x014A
     bd0:	21 15       	cp	r18, r1
     bd2:	31 05       	cpc	r19, r1
     bd4:	59 f3       	breq	.-42     	; 0xbac <USB_Host_ProcessNextHostState+0xf4>
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     bd6:	e0 91 9e 00 	lds	r30, 0x009E
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	e1 70       	andi	r30, 0x01	; 1
     bde:	f0 70       	andi	r31, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     be0:	40 91 a0 00 	lds	r20, 0x00A0
     be4:	50 e0       	ldi	r21, 0x00	; 0
     be6:	40 72       	andi	r20, 0x20	; 32
     be8:	50 70       	andi	r21, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     bea:	80 91 a0 00 	lds	r24, 0x00A0
     bee:	8f 7d       	andi	r24, 0xDF	; 223
     bf0:	80 93 a0 00 	sts	0x00A0, r24
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     bf4:	80 91 9f 00 	lds	r24, 0x009F
     bf8:	8f 7d       	andi	r24, 0xDF	; 223
     bfa:	80 93 9f 00 	sts	0x009F, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     bfe:	80 91 9e 00 	lds	r24, 0x009E
     c02:	81 60       	ori	r24, 0x01	; 1
     c04:	80 93 9e 00 	sts	0x009E, r24
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     c08:	80 91 9f 00 	lds	r24, 0x009F

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     c0c:	85 ff       	sbrs	r24, 5
     c0e:	b5 c0       	rjmp	.+362    	; 0xd7a <USB_Host_ProcessNextHostState+0x2c2>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     c10:	80 91 9f 00 	lds	r24, 0x009F
     c14:	8f 7d       	andi	r24, 0xDF	; 223
     c16:	80 93 9f 00 	sts	0x009F, r24
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     c1a:	90 e0       	ldi	r25, 0x00	; 0
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     c1c:	80 91 69 04 	lds	r24, 0x0469
     c20:	81 30       	cpi	r24, 0x01	; 1
     c22:	09 f4       	brne	.+2      	; 0xc26 <USB_Host_ProcessNextHostState+0x16e>
     c24:	d6 c0       	rjmp	.+428    	; 0xdd2 <USB_Host_ProcessNextHostState+0x31a>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     c26:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     c2a:	84 fd       	sbrc	r24, 4
     c2c:	c9 c0       	rjmp	.+402    	; 0xdc0 <USB_Host_ProcessNextHostState+0x308>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     c2e:	80 91 a6 00 	lds	r24, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled())
     c32:	81 fd       	sbrc	r24, 1
     c34:	af c0       	rjmp	.+350    	; 0xd94 <USB_Host_ProcessNextHostState+0x2dc>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     c36:	99 23       	and	r25, r25
     c38:	39 f7       	brne	.-50     	; 0xc08 <USB_Host_ProcessNextHostState+0x150>
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
     c3a:	60 e0       	ldi	r22, 0x00	; 0

			break;
		}
	}

	if (BusSuspended)
     c3c:	30 97       	sbiw	r30, 0x00	; 0
     c3e:	29 f4       	brne	.+10     	; 0xc4a <USB_Host_ProcessNextHostState+0x192>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     c40:	80 91 9e 00 	lds	r24, 0x009E
     c44:	8e 7f       	andi	r24, 0xFE	; 254
     c46:	80 93 9e 00 	sts	0x009E, r24
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     c4a:	41 15       	cp	r20, r1
     c4c:	51 05       	cpc	r21, r1
     c4e:	29 f0       	breq	.+10     	; 0xc5a <USB_Host_ProcessNextHostState+0x1a2>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     c50:	80 91 a0 00 	lds	r24, 0x00A0
     c54:	80 62       	ori	r24, 0x20	; 32
     c56:	80 93 a0 00 	sts	0x00A0, r24
	switch (USB_HostState)
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     c5a:	66 23       	and	r22, r22
     c5c:	09 f4       	brne	.+2      	; 0xc60 <USB_Host_ProcessNextHostState+0x1a8>
     c5e:	a1 c0       	rjmp	.+322    	; 0xda2 <USB_Host_ProcessNextHostState+0x2ea>
				{
					USB_HostState = PostWaitState;
     c60:	80 91 48 01 	lds	r24, 0x0148
     c64:	80 93 69 04 	sts	0x0469, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     c68:	81 e0       	ldi	r24, 0x01	; 1
					break;
     c6a:	4e cf       	rjmp	.-356    	; 0xb08 <USB_Host_ProcessNextHostState+0x50>
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     c6c:	80 91 49 01 	lds	r24, 0x0149
     c70:	90 91 4a 01 	lds	r25, 0x014A
     c74:	9c 01       	movw	r18, r24
     c76:	21 50       	subi	r18, 0x01	; 1
     c78:	30 40       	sbci	r19, 0x00	; 0
     c7a:	30 93 4a 01 	sts	0x014A, r19
     c7e:	20 93 49 01 	sts	0x0149, r18
     c82:	00 97       	sbiw	r24, 0x00	; 0
     c84:	09 f0       	breq	.+2      	; 0xc88 <USB_Host_ProcessNextHostState+0x1d0>
     c86:	7b c0       	rjmp	.+246    	; 0xd7e <USB_Host_ProcessNextHostState+0x2c6>
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
     c88:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     c8a:	80 91 d8 00 	lds	r24, 0x00D8
     c8e:	80 61       	ori	r24, 0x10	; 16
     c90:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     c94:	80 91 dd 00 	lds	r24, 0x00DD
     c98:	8b 7f       	andi	r24, 0xFB	; 251
     c9a:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     c9e:	80 91 d7 00 	lds	r24, 0x00D7
     ca2:	80 61       	ori	r24, 0x10	; 16
     ca4:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     ca8:	80 91 dd 00 	lds	r24, 0x00DD
     cac:	82 60       	ori	r24, 0x02	; 2
     cae:	80 93 dd 00 	sts	0x00DD, r24
				#if defined(NO_AUTO_VBUS_MANAGEMENT)
				USB_Host_VBUS_Manual_Enable();
				USB_Host_VBUS_Manual_On();
				#endif

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     cb2:	84 e0       	ldi	r24, 0x04	; 4
     cb4:	80 93 69 04 	sts	0x0469, r24
			}

			break;
     cb8:	79 cf       	rjmp	.-270    	; 0xbac <USB_Host_ProcessNextHostState+0xf4>
			USB_Host_ResetDevice();

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     cba:	00 91 24 01 	lds	r16, 0x0124
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	10 e0       	ldi	r17, 0x00	; 0
     cc8:	ee 24       	eor	r14, r14
     cca:	dd d0       	rcall	.+442    	; 0xe86 <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     ccc:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     cd0:	87 ff       	sbrs	r24, 7
     cd2:	18 cf       	rjmp	.-464    	; 0xb04 <USB_Host_ProcessNextHostState+0x4c>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     cd4:	a1 e6       	ldi	r26, 0x61	; 97
     cd6:	b4 e0       	ldi	r27, 0x04	; 4
     cd8:	e4 e1       	ldi	r30, 0x14	; 20
     cda:	f1 e0       	ldi	r31, 0x01	; 1
     cdc:	88 e0       	ldi	r24, 0x08	; 8
     cde:	01 90       	ld	r0, Z+
     ce0:	0d 92       	st	X+, r0
     ce2:	81 50       	subi	r24, 0x01	; 1
     ce4:	e1 f7       	brne	.-8      	; 0xcde <USB_Host_ProcessNextHostState+0x226>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	69 d5       	rcall	.+2770   	; 0x17be <USB_Host_SendControlRequest>
     cec:	68 2f       	mov	r22, r24
     cee:	88 23       	and	r24, r24
     cf0:	d9 f4       	brne	.+54     	; 0xd28 <USB_Host_ProcessNextHostState+0x270>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     cf2:	10 92 69 04 	sts	0x0469, r1
     cf6:	84 e6       	ldi	r24, 0x64	; 100
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	90 93 4a 01 	sts	0x014A, r25
     cfe:	80 93 49 01 	sts	0x0149, r24
     d02:	89 e0       	ldi	r24, 0x09	; 9
     d04:	80 93 48 01 	sts	0x0148, r24
			break;
     d08:	51 cf       	rjmp	.-350    	; 0xbac <USB_Host_ProcessNextHostState+0xf4>
			}

			USB_HostState = HOST_STATE_Default;
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     d0a:	a1 e6       	ldi	r26, 0x61	; 97
     d0c:	b4 e0       	ldi	r27, 0x04	; 4
     d0e:	ec e1       	ldi	r30, 0x1C	; 28
     d10:	f1 e0       	ldi	r31, 0x01	; 1
     d12:	88 e0       	ldi	r24, 0x08	; 8
     d14:	01 90       	ld	r0, Z+
     d16:	0d 92       	st	X+, r0
     d18:	81 50       	subi	r24, 0x01	; 1
     d1a:	e1 f7       	brne	.-8      	; 0xd14 <USB_Host_ProcessNextHostState+0x25c>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     d1c:	ce 01       	movw	r24, r28
     d1e:	01 96       	adiw	r24, 0x01	; 1
     d20:	4e d5       	rcall	.+2716   	; 0x17be <USB_Host_SendControlRequest>
     d22:	68 2f       	mov	r22, r24
     d24:	88 23       	and	r24, r24
     d26:	c9 f0       	breq	.+50     	; 0xd5a <USB_Host_ProcessNextHostState+0x2a2>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     d28:	83 e0       	ldi	r24, 0x03	; 3
     d2a:	ee ce       	rjmp	.-548    	; 0xb08 <USB_Host_ProcessNextHostState+0x50>
				  USB_HostState = PostWaitState;
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     d2c:	88 ee       	ldi	r24, 0xE8	; 232
     d2e:	93 e0       	ldi	r25, 0x03	; 3
     d30:	90 93 4a 01 	sts	0x014A, r25
     d34:	80 93 49 01 	sts	0x0149, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	80 93 69 04 	sts	0x0469, r24
			break;
     d3e:	36 cf       	rjmp	.-404    	; 0xbac <USB_Host_ProcessNextHostState+0xf4>
				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     d40:	0e de       	rcall	.-996    	; 0x95e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     d42:	10 92 69 04 	sts	0x0469, r1
     d46:	88 ec       	ldi	r24, 0xC8	; 200
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	90 93 4a 01 	sts	0x014A, r25
     d4e:	80 93 49 01 	sts	0x0149, r24
     d52:	86 e0       	ldi	r24, 0x06	; 6
     d54:	80 93 48 01 	sts	0x0148, r24
			break;
     d58:	29 cf       	rjmp	.-430    	; 0xbac <USB_Host_ProcessNextHostState+0xf4>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     d5a:	88 85       	ldd	r24, Y+8	; 0x08
     d5c:	80 93 24 01 	sts	0x0124, r24

			USB_Host_ResetDevice();
     d60:	fe dd       	rcall	.-1028   	; 0x95e <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     d62:	10 92 69 04 	sts	0x0469, r1
     d66:	88 ec       	ldi	r24, 0xC8	; 200
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	90 93 4a 01 	sts	0x014A, r25
     d6e:	80 93 49 01 	sts	0x0149, r24
     d72:	88 e0       	ldi	r24, 0x08	; 8
     d74:	80 93 48 01 	sts	0x0148, r24
			break;
     d78:	19 cf       	rjmp	.-462    	; 0xbac <USB_Host_ProcessNextHostState+0xf4>

	USB_Host_ResumeBus();

	while (MS)
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	4f cf       	rjmp	.-354    	; 0xc1c <USB_Host_ProcessNextHostState+0x164>
     d7e:	8f e9       	ldi	r24, 0x9F	; 159
     d80:	9f e0       	ldi	r25, 0x0F	; 15
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <USB_Host_ProcessNextHostState+0x2ca>
     d86:	00 c0       	rjmp	.+0      	; 0xd88 <USB_Host_ProcessNextHostState+0x2d0>
     d88:	00 00       	nop
     d8a:	10 cf       	rjmp	.-480    	; 0xbac <USB_Host_ProcessNextHostState+0xf4>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     d8c:	87 e0       	ldi	r24, 0x07	; 7
     d8e:	80 93 69 04 	sts	0x0469, r24
			break;
     d92:	0c cf       	rjmp	.-488    	; 0xbac <USB_Host_ProcessNextHostState+0xf4>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     d94:	80 91 a6 00 	lds	r24, 0x00A6
     d98:	8d 7f       	andi	r24, 0xFD	; 253
     d9a:	80 93 a6 00 	sts	0x00A6, r24
		}

		if (Pipe_IsStalled())
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     d9e:	63 e0       	ldi	r22, 0x03	; 3
     da0:	4d cf       	rjmp	.-358    	; 0xc3c <USB_Host_ProcessNextHostState+0x184>
					USB_HostState = PostWaitState;
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
				}

				if (!(--WaitMSRemaining))
     da2:	21 50       	subi	r18, 0x01	; 1
     da4:	30 40       	sbci	r19, 0x00	; 0
     da6:	30 93 4a 01 	sts	0x014A, r19
     daa:	20 93 49 01 	sts	0x0149, r18
     dae:	21 15       	cp	r18, r1
     db0:	31 05       	cpc	r19, r1
     db2:	09 f0       	breq	.+2      	; 0xdb6 <USB_Host_ProcessNextHostState+0x2fe>
     db4:	fb ce       	rjmp	.-522    	; 0xbac <USB_Host_ProcessNextHostState+0xf4>
				  USB_HostState = PostWaitState;
     db6:	80 91 48 01 	lds	r24, 0x0148
     dba:	80 93 69 04 	sts	0x0469, r24
     dbe:	f6 ce       	rjmp	.-532    	; 0xbac <USB_Host_ProcessNextHostState+0xf4>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     dc0:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     dc4:	80 91 a6 00 	lds	r24, 0x00A6
     dc8:	8f 7e       	andi	r24, 0xEF	; 239
     dca:	80 93 a6 00 	sts	0x00A6, r24
		}

		if (Pipe_IsError())
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     dce:	62 e0       	ldi	r22, 0x02	; 2
     dd0:	35 cf       	rjmp	.-406    	; 0xc3c <USB_Host_ProcessNextHostState+0x184>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	33 cf       	rjmp	.-410    	; 0xc3c <USB_Host_ProcessNextHostState+0x184>

00000dd6 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     dd6:	40 91 9e 00 	lds	r20, 0x009E
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	41 70       	andi	r20, 0x01	; 1
     dde:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     de0:	20 91 a0 00 	lds	r18, 0x00A0
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	20 72       	andi	r18, 0x20	; 32
     de8:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     dea:	90 91 a0 00 	lds	r25, 0x00A0
     dee:	9f 7d       	andi	r25, 0xDF	; 223
     df0:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     df4:	90 91 9f 00 	lds	r25, 0x009F
     df8:	9f 7d       	andi	r25, 0xDF	; 223
     dfa:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     dfe:	90 91 9e 00 	lds	r25, 0x009E
     e02:	91 60       	ori	r25, 0x01	; 1
     e04:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     e08:	88 23       	and	r24, r24
     e0a:	19 f4       	brne	.+6      	; 0xe12 <USB_Host_WaitMS+0x3c>
     e0c:	3a c0       	rjmp	.+116    	; 0xe82 <USB_Host_WaitMS+0xac>
     e0e:	88 23       	and	r24, r24
     e10:	e1 f0       	breq	.+56     	; 0xe4a <USB_Host_WaitMS+0x74>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     e12:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     e16:	95 ff       	sbrs	r25, 5
     e18:	06 c0       	rjmp	.+12     	; 0xe26 <USB_Host_WaitMS+0x50>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     e1a:	90 91 9f 00 	lds	r25, 0x009F
     e1e:	9f 7d       	andi	r25, 0xDF	; 223
     e20:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     e24:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     e26:	90 91 69 04 	lds	r25, 0x0469
     e2a:	91 30       	cpi	r25, 0x01	; 1
     e2c:	f9 f0       	breq	.+62     	; 0xe6c <USB_Host_WaitMS+0x96>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     e2e:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError())
     e32:	94 fd       	sbrc	r25, 4
     e34:	1d c0       	rjmp	.+58     	; 0xe70 <USB_Host_WaitMS+0x9a>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     e36:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_PipeError;

			break;
		}

		if (Pipe_IsStalled())
     e3a:	91 ff       	sbrs	r25, 1
     e3c:	e8 cf       	rjmp	.-48     	; 0xe0e <USB_Host_WaitMS+0x38>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     e3e:	80 91 a6 00 	lds	r24, 0x00A6
     e42:	8d 7f       	andi	r24, 0xFD	; 253
     e44:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     e48:	83 e0       	ldi	r24, 0x03	; 3

			break;
		}
	}

	if (BusSuspended)
     e4a:	41 15       	cp	r20, r1
     e4c:	51 05       	cpc	r21, r1
     e4e:	29 f4       	brne	.+10     	; 0xe5a <USB_Host_WaitMS+0x84>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     e50:	90 91 9e 00 	lds	r25, 0x009E
     e54:	9e 7f       	andi	r25, 0xFE	; 254
     e56:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     e5a:	21 15       	cp	r18, r1
     e5c:	31 05       	cpc	r19, r1
     e5e:	29 f0       	breq	.+10     	; 0xe6a <USB_Host_WaitMS+0x94>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     e60:	90 91 a0 00 	lds	r25, 0x00A0
     e64:	90 62       	ori	r25, 0x20	; 32
     e66:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     e6a:	08 95       	ret
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	ed cf       	rjmp	.-38     	; 0xe4a <USB_Host_WaitMS+0x74>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     e70:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     e74:	80 91 a6 00 	lds	r24, 0x00A6
     e78:	8f 7e       	andi	r24, 0xEF	; 239
     e7a:	80 93 a6 00 	sts	0x00A6, r24
		}

		if (Pipe_IsError())
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     e7e:	82 e0       	ldi	r24, 0x02	; 2

			break;
     e80:	e4 cf       	rjmp	.-56     	; 0xe4a <USB_Host_WaitMS+0x74>
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	e2 cf       	rjmp	.-60     	; 0xe4a <USB_Host_WaitMS+0x74>

00000e86 <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     e86:	ef 92       	push	r14
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     e8c:	87 30       	cpi	r24, 0x07	; 7
     e8e:	08 f0       	brcs	.+2      	; 0xe92 <Pipe_ConfigurePipe+0xc>
     e90:	55 c0       	rjmp	.+170    	; 0xf3c <Pipe_ConfigurePipe+0xb6>

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     e92:	62 95       	swap	r22
     e94:	66 0f       	add	r22, r22
     e96:	66 0f       	add	r22, r22
     e98:	60 7c       	andi	r22, 0xC0	; 192
     e9a:	64 2b       	or	r22, r20
     e9c:	2f 70       	andi	r18, 0x0F	; 15
     e9e:	62 2b       	or	r22, r18
     ea0:	98 2f       	mov	r25, r24
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     ea2:	ee 2d       	mov	r30, r14
     ea4:	e2 60       	ori	r30, 0x02	; 2
     ea6:	2d c0       	rjmp	.+90     	; 0xf02 <Pipe_ConfigurePipe+0x7c>
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     ea8:	70 91 aa 00 	lds	r23, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     eac:	20 91 ab 00 	lds	r18, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     eb0:	50 91 ad 00 	lds	r21, 0x00AD
			UPIENXTemp  = UPIENX;
     eb4:	40 91 ae 00 	lds	r20, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     eb8:	21 ff       	sbrs	r18, 1
     eba:	20 c0       	rjmp	.+64     	; 0xefc <Pipe_ConfigurePipe+0x76>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ebc:	30 91 a9 00 	lds	r19, 0x00A9
     ec0:	3e 7f       	andi	r19, 0xFE	; 254
     ec2:	30 93 a9 00 	sts	0x00A9, r19
		  continue;

		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     ec6:	30 91 ab 00 	lds	r19, 0x00AB
     eca:	3d 7f       	andi	r19, 0xFD	; 253
     ecc:	30 93 ab 00 	sts	0x00AB, r19
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     ed0:	30 91 a9 00 	lds	r19, 0x00A9
     ed4:	31 60       	ori	r19, 0x01	; 1
     ed6:	30 93 a9 00 	sts	0x00A9, r19

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     eda:	70 93 aa 00 	sts	0x00AA, r23
		UPCFG1X = UPCFG1XTemp;
     ede:	20 93 ab 00 	sts	0x00AB, r18
		UPCFG2X = UPCFG2XTemp;
     ee2:	50 93 ad 00 	sts	0x00AD, r21
		UPIENX  = UPIENXTemp;
     ee6:	40 93 ae 00 	sts	0x00AE, r20

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     eea:	20 91 a9 00 	lds	r18, 0x00A9
     eee:	20 62       	ori	r18, 0x20	; 32
     ef0:	20 93 a9 00 	sts	0x00A9, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     ef4:	20 91 ac 00 	lds	r18, 0x00AC

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
     ef8:	27 ff       	sbrs	r18, 7
     efa:	27 c0       	rjmp	.+78     	; 0xf4a <Pipe_ConfigurePipe+0xc4>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     efc:	9f 5f       	subi	r25, 0xFF	; 255
     efe:	97 30       	cpi	r25, 0x07	; 7
     f00:	e8 f4       	brcc	.+58     	; 0xf3c <Pipe_ConfigurePipe+0xb6>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     f02:	90 93 a7 00 	sts	0x00A7, r25
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
     f06:	98 17       	cp	r25, r24
     f08:	79 f6       	brne	.-98     	; 0xea8 <Pipe_ConfigurePipe+0x22>
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     f0a:	09 30       	cpi	r16, 0x09	; 9
     f0c:	11 05       	cpc	r17, r1
     f0e:	10 f1       	brcs	.+68     	; 0xf54 <Pipe_ConfigurePipe+0xce>
     f10:	01 31       	cpi	r16, 0x11	; 17
     f12:	11 05       	cpc	r17, r1
     f14:	08 f1       	brcs	.+66     	; 0xf58 <Pipe_ConfigurePipe+0xd2>
     f16:	01 32       	cpi	r16, 0x21	; 33
     f18:	11 05       	cpc	r17, r1
     f1a:	10 f1       	brcs	.+68     	; 0xf60 <Pipe_ConfigurePipe+0xda>
     f1c:	01 34       	cpi	r16, 0x41	; 65
     f1e:	11 05       	cpc	r17, r1
     f20:	08 f1       	brcs	.+66     	; 0xf64 <Pipe_ConfigurePipe+0xde>
     f22:	01 38       	cpi	r16, 0x81	; 129
     f24:	11 05       	cpc	r17, r1
     f26:	00 f1       	brcs	.+64     	; 0xf68 <Pipe_ConfigurePipe+0xe2>
     f28:	21 e0       	ldi	r18, 0x01	; 1
     f2a:	01 30       	cpi	r16, 0x01	; 1
     f2c:	12 07       	cpc	r17, r18
     f2e:	f0 f0       	brcs	.+60     	; 0xf6c <Pipe_ConfigurePipe+0xe6>
     f30:	20 e5       	ldi	r18, 0x50	; 80
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     f32:	2e 2b       	or	r18, r30

		Pipe_SelectPipe(PNum);

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     f34:	76 2f       	mov	r23, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     f36:	40 e0       	ldi	r20, 0x00	; 0

		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     f38:	50 e0       	ldi	r21, 0x00	; 0
     f3a:	be cf       	rjmp	.-132    	; 0xeb8 <Pipe_ConfigurePipe+0x32>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     f3c:	80 93 a7 00 	sts	0x00A7, r24
		if (!(Pipe_IsConfigured()))
		  return false;
	}

	Pipe_SelectPipe(Number);
	return true;
     f40:	81 e0       	ldi	r24, 0x01	; 1
#endif
}
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	ef 90       	pop	r14
     f48:	08 95       	ret
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();

		if (!(Pipe_IsConfigured()))
		  return false;
     f4a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Pipe_SelectPipe(Number);
	return true;
#endif
}
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ef 90       	pop	r14
     f52:	08 95       	ret
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	ed cf       	rjmp	.-38     	; 0xf32 <Pipe_ConfigurePipe+0xac>
				{
					MaskVal++;
     f58:	21 e0       	ldi	r18, 0x01	; 1
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     f5a:	22 95       	swap	r18
     f5c:	20 7f       	andi	r18, 0xF0	; 240
     f5e:	e9 cf       	rjmp	.-46     	; 0xf32 <Pipe_ConfigurePipe+0xac>
				{
					MaskVal++;
     f60:	22 e0       	ldi	r18, 0x02	; 2
     f62:	fb cf       	rjmp	.-10     	; 0xf5a <Pipe_ConfigurePipe+0xd4>
     f64:	23 e0       	ldi	r18, 0x03	; 3
     f66:	f9 cf       	rjmp	.-14     	; 0xf5a <Pipe_ConfigurePipe+0xd4>
     f68:	24 e0       	ldi	r18, 0x04	; 4
     f6a:	f7 cf       	rjmp	.-18     	; 0xf5a <Pipe_ConfigurePipe+0xd4>
     f6c:	25 e0       	ldi	r18, 0x05	; 5
     f6e:	f5 cf       	rjmp	.-22     	; 0xf5a <Pipe_ConfigurePipe+0xd4>

00000f70 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
	UPINT = 0;
     f74:	10 92 f8 00 	sts	0x00F8, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     f78:	27 ea       	ldi	r18, 0xA7	; 167
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	d9 01       	movw	r26, r18
     f7e:	1c 92       	st	X, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     f80:	8e ea       	ldi	r24, 0xAE	; 174
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	fc 01       	movw	r30, r24
     f86:	10 82       	st	Z, r1
		UPINTX  = 0;
     f88:	c6 ea       	ldi	r28, 0xA6	; 166
     f8a:	d0 e0       	ldi	r29, 0x00	; 0
     f8c:	18 82       	st	Y, r1
		UPCFG1X = 0;
     f8e:	6b ea       	ldi	r22, 0xAB	; 171
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	db 01       	movw	r26, r22
     f94:	1c 92       	st	X, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     f96:	e9 ea       	ldi	r30, 0xA9	; 169
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	40 81       	ld	r20, Z
     f9c:	4e 7f       	andi	r20, 0xFE	; 254
     f9e:	40 83       	st	Z, r20
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     fa0:	41 e0       	ldi	r20, 0x01	; 1
     fa2:	d9 01       	movw	r26, r18
     fa4:	4c 93       	st	X, r20
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     fa6:	dc 01       	movw	r26, r24
     fa8:	1c 92       	st	X, r1
		UPINTX  = 0;
     faa:	18 82       	st	Y, r1
		UPCFG1X = 0;
     fac:	db 01       	movw	r26, r22
     fae:	1c 92       	st	X, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     fb0:	40 81       	ld	r20, Z
     fb2:	4e 7f       	andi	r20, 0xFE	; 254
     fb4:	40 83       	st	Z, r20
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     fb6:	42 e0       	ldi	r20, 0x02	; 2
     fb8:	d9 01       	movw	r26, r18
     fba:	4c 93       	st	X, r20
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     fbc:	dc 01       	movw	r26, r24
     fbe:	1c 92       	st	X, r1
		UPINTX  = 0;
     fc0:	18 82       	st	Y, r1
		UPCFG1X = 0;
     fc2:	db 01       	movw	r26, r22
     fc4:	1c 92       	st	X, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     fc6:	40 81       	ld	r20, Z
     fc8:	4e 7f       	andi	r20, 0xFE	; 254
     fca:	40 83       	st	Z, r20
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     fcc:	43 e0       	ldi	r20, 0x03	; 3
     fce:	d9 01       	movw	r26, r18
     fd0:	4c 93       	st	X, r20
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     fd2:	dc 01       	movw	r26, r24
     fd4:	1c 92       	st	X, r1
		UPINTX  = 0;
     fd6:	18 82       	st	Y, r1
		UPCFG1X = 0;
     fd8:	db 01       	movw	r26, r22
     fda:	1c 92       	st	X, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     fdc:	40 81       	ld	r20, Z
     fde:	4e 7f       	andi	r20, 0xFE	; 254
     fe0:	40 83       	st	Z, r20
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     fe2:	44 e0       	ldi	r20, 0x04	; 4
     fe4:	d9 01       	movw	r26, r18
     fe6:	4c 93       	st	X, r20
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     fe8:	dc 01       	movw	r26, r24
     fea:	1c 92       	st	X, r1
		UPINTX  = 0;
     fec:	18 82       	st	Y, r1
		UPCFG1X = 0;
     fee:	db 01       	movw	r26, r22
     ff0:	1c 92       	st	X, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     ff2:	40 81       	ld	r20, Z
     ff4:	4e 7f       	andi	r20, 0xFE	; 254
     ff6:	40 83       	st	Z, r20
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     ff8:	45 e0       	ldi	r20, 0x05	; 5
     ffa:	d9 01       	movw	r26, r18
     ffc:	4c 93       	st	X, r20
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     ffe:	dc 01       	movw	r26, r24
    1000:	1c 92       	st	X, r1
		UPINTX  = 0;
    1002:	18 82       	st	Y, r1
		UPCFG1X = 0;
    1004:	db 01       	movw	r26, r22
    1006:	1c 92       	st	X, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    1008:	40 81       	ld	r20, Z
    100a:	4e 7f       	andi	r20, 0xFE	; 254
    100c:	40 83       	st	Z, r20
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    100e:	46 e0       	ldi	r20, 0x06	; 6
    1010:	d9 01       	movw	r26, r18
    1012:	4c 93       	st	X, r20
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
    1014:	dc 01       	movw	r26, r24
    1016:	1c 92       	st	X, r1
		UPINTX  = 0;
    1018:	18 82       	st	Y, r1
		UPCFG1X = 0;
    101a:	db 01       	movw	r26, r22
    101c:	1c 92       	st	X, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
    101e:	80 81       	ld	r24, Z
    1020:	8e 7f       	andi	r24, 0xFE	; 254
    1022:	80 83       	st	Z, r24
		Pipe_DisablePipe();
	}
}
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

0000102a <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    102a:	20 91 a7 00 	lds	r18, 0x00A7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    102e:	10 92 a7 00 	sts	0x00A7, r1
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1032:	90 91 ac 00 	lds	r25, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    1036:	97 fd       	sbrc	r25, 7
    1038:	2f c0       	rjmp	.+94     	; 0x1098 <Pipe_IsEndpointBound+0x6e>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    103a:	91 e0       	ldi	r25, 0x01	; 1
    103c:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1040:	90 91 ac 00 	lds	r25, 0x00AC
    1044:	97 fd       	sbrc	r25, 7
    1046:	37 c0       	rjmp	.+110    	; 0x10b6 <Pipe_IsEndpointBound+0x8c>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1048:	92 e0       	ldi	r25, 0x02	; 2
    104a:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    104e:	90 91 ac 00 	lds	r25, 0x00AC
    1052:	97 fd       	sbrc	r25, 7
    1054:	44 c0       	rjmp	.+136    	; 0x10de <Pipe_IsEndpointBound+0xb4>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1056:	93 e0       	ldi	r25, 0x03	; 3
    1058:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    105c:	90 91 ac 00 	lds	r25, 0x00AC
    1060:	97 fd       	sbrc	r25, 7
    1062:	51 c0       	rjmp	.+162    	; 0x1106 <Pipe_IsEndpointBound+0xdc>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1064:	94 e0       	ldi	r25, 0x04	; 4
    1066:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    106a:	90 91 ac 00 	lds	r25, 0x00AC
    106e:	97 fd       	sbrc	r25, 7
    1070:	5e c0       	rjmp	.+188    	; 0x112e <Pipe_IsEndpointBound+0x104>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1072:	95 e0       	ldi	r25, 0x05	; 5
    1074:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1078:	90 91 ac 00 	lds	r25, 0x00AC
    107c:	97 fd       	sbrc	r25, 7
    107e:	6b c0       	rjmp	.+214    	; 0x1156 <Pipe_IsEndpointBound+0x12c>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1080:	96 e0       	ldi	r25, 0x06	; 6
    1082:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1086:	90 91 ac 00 	lds	r25, 0x00AC
    108a:	97 fd       	sbrc	r25, 7
    108c:	78 c0       	rjmp	.+240    	; 0x117e <Pipe_IsEndpointBound+0x154>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    108e:	2f 70       	andi	r18, 0x0F	; 15
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1090:	20 93 a7 00 	sts	0x00A7, r18
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	08 95       	ret
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1098:	90 91 aa 00 	lds	r25, 0x00AA
    109c:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    109e:	30 91 aa 00 	lds	r19, 0x00AA
    10a2:	30 73       	andi	r19, 0x30	; 48
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    10a4:	30 31       	cpi	r19, 0x10	; 16
    10a6:	09 f4       	brne	.+2      	; 0x10aa <Pipe_IsEndpointBound+0x80>
    10a8:	79 c0       	rjmp	.+242    	; 0x119c <Pipe_IsEndpointBound+0x172>
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	93 2b       	or	r25, r19
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    10ae:	89 17       	cp	r24, r25
    10b0:	21 f6       	brne	.-120    	; 0x103a <Pipe_IsEndpointBound+0x10>
		  return true;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	08 95       	ret
    10b6:	90 91 aa 00 	lds	r25, 0x00AA
    10ba:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    10bc:	30 91 aa 00 	lds	r19, 0x00AA
    10c0:	30 73       	andi	r19, 0x30	; 48
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    10c2:	30 31       	cpi	r19, 0x10	; 16
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <Pipe_IsEndpointBound+0x9e>
    10c6:	6c c0       	rjmp	.+216    	; 0x11a0 <Pipe_IsEndpointBound+0x176>
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	93 2b       	or	r25, r19
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    10cc:	89 17       	cp	r24, r25
    10ce:	89 f3       	breq	.-30     	; 0x10b2 <Pipe_IsEndpointBound+0x88>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    10d0:	92 e0       	ldi	r25, 0x02	; 2
    10d2:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    10d6:	90 91 ac 00 	lds	r25, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    10da:	97 ff       	sbrs	r25, 7
    10dc:	bc cf       	rjmp	.-136    	; 0x1056 <Pipe_IsEndpointBound+0x2c>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    10de:	90 91 aa 00 	lds	r25, 0x00AA
    10e2:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    10e4:	30 91 aa 00 	lds	r19, 0x00AA
    10e8:	30 73       	andi	r19, 0x30	; 48
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    10ea:	30 31       	cpi	r19, 0x10	; 16
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <Pipe_IsEndpointBound+0xc6>
    10ee:	5a c0       	rjmp	.+180    	; 0x11a4 <Pipe_IsEndpointBound+0x17a>
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	93 2b       	or	r25, r19
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    10f4:	89 17       	cp	r24, r25
    10f6:	e9 f2       	breq	.-70     	; 0x10b2 <Pipe_IsEndpointBound+0x88>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    10f8:	93 e0       	ldi	r25, 0x03	; 3
    10fa:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    10fe:	90 91 ac 00 	lds	r25, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    1102:	97 ff       	sbrs	r25, 7
    1104:	af cf       	rjmp	.-162    	; 0x1064 <Pipe_IsEndpointBound+0x3a>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1106:	90 91 aa 00 	lds	r25, 0x00AA
    110a:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    110c:	30 91 aa 00 	lds	r19, 0x00AA
    1110:	30 73       	andi	r19, 0x30	; 48
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1112:	30 31       	cpi	r19, 0x10	; 16
    1114:	09 f4       	brne	.+2      	; 0x1118 <Pipe_IsEndpointBound+0xee>
    1116:	48 c0       	rjmp	.+144    	; 0x11a8 <Pipe_IsEndpointBound+0x17e>
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	93 2b       	or	r25, r19
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    111c:	89 17       	cp	r24, r25
    111e:	49 f2       	breq	.-110    	; 0x10b2 <Pipe_IsEndpointBound+0x88>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1120:	94 e0       	ldi	r25, 0x04	; 4
    1122:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1126:	90 91 ac 00 	lds	r25, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    112a:	97 ff       	sbrs	r25, 7
    112c:	a2 cf       	rjmp	.-188    	; 0x1072 <Pipe_IsEndpointBound+0x48>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    112e:	90 91 aa 00 	lds	r25, 0x00AA
    1132:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1134:	30 91 aa 00 	lds	r19, 0x00AA
    1138:	30 73       	andi	r19, 0x30	; 48
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    113a:	30 31       	cpi	r19, 0x10	; 16
    113c:	b9 f1       	breq	.+110    	; 0x11ac <Pipe_IsEndpointBound+0x182>
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	93 2b       	or	r25, r19
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    1142:	89 17       	cp	r24, r25
    1144:	09 f4       	brne	.+2      	; 0x1148 <Pipe_IsEndpointBound+0x11e>
    1146:	b5 cf       	rjmp	.-150    	; 0x10b2 <Pipe_IsEndpointBound+0x88>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1148:	95 e0       	ldi	r25, 0x05	; 5
    114a:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    114e:	90 91 ac 00 	lds	r25, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    1152:	97 ff       	sbrs	r25, 7
    1154:	95 cf       	rjmp	.-214    	; 0x1080 <Pipe_IsEndpointBound+0x56>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1156:	90 91 aa 00 	lds	r25, 0x00AA
    115a:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    115c:	30 91 aa 00 	lds	r19, 0x00AA
    1160:	30 73       	andi	r19, 0x30	; 48
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1162:	30 31       	cpi	r19, 0x10	; 16
    1164:	29 f1       	breq	.+74     	; 0x11b0 <Pipe_IsEndpointBound+0x186>
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	93 2b       	or	r25, r19
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    116a:	89 17       	cp	r24, r25
    116c:	09 f4       	brne	.+2      	; 0x1170 <Pipe_IsEndpointBound+0x146>
    116e:	a1 cf       	rjmp	.-190    	; 0x10b2 <Pipe_IsEndpointBound+0x88>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1170:	96 e0       	ldi	r25, 0x06	; 6
    1172:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
    1176:	90 91 ac 00 	lds	r25, 0x00AC

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
    117a:	97 ff       	sbrs	r25, 7
    117c:	88 cf       	rjmp	.-240    	; 0x108e <Pipe_IsEndpointBound+0x64>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    117e:	90 91 aa 00 	lds	r25, 0x00AA
    1182:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    1184:	30 91 aa 00 	lds	r19, 0x00AA
    1188:	30 73       	andi	r19, 0x30	; 48
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    118a:	30 31       	cpi	r19, 0x10	; 16
    118c:	99 f0       	breq	.+38     	; 0x11b4 <Pipe_IsEndpointBound+0x18a>
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	93 2b       	or	r25, r19
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
    1192:	89 17       	cp	r24, r25
    1194:	09 f0       	breq	.+2      	; 0x1198 <Pipe_IsEndpointBound+0x16e>
    1196:	7b cf       	rjmp	.-266    	; 0x108e <Pipe_IsEndpointBound+0x64>
		  return true;
    1198:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
    119a:	08 95       	ret
    119c:	30 e8       	ldi	r19, 0x80	; 128
    119e:	86 cf       	rjmp	.-244    	; 0x10ac <Pipe_IsEndpointBound+0x82>
    11a0:	30 e8       	ldi	r19, 0x80	; 128
    11a2:	93 cf       	rjmp	.-218    	; 0x10ca <Pipe_IsEndpointBound+0xa0>
    11a4:	30 e8       	ldi	r19, 0x80	; 128
    11a6:	a5 cf       	rjmp	.-182    	; 0x10f2 <Pipe_IsEndpointBound+0xc8>
    11a8:	30 e8       	ldi	r19, 0x80	; 128
    11aa:	b7 cf       	rjmp	.-146    	; 0x111a <Pipe_IsEndpointBound+0xf0>
    11ac:	30 e8       	ldi	r19, 0x80	; 128
    11ae:	c8 cf       	rjmp	.-112    	; 0x1140 <Pipe_IsEndpointBound+0x116>
    11b0:	30 e8       	ldi	r19, 0x80	; 128
    11b2:	da cf       	rjmp	.-76     	; 0x1168 <Pipe_IsEndpointBound+0x13e>
    11b4:	30 e8       	ldi	r19, 0x80	; 128
    11b6:	ec cf       	rjmp	.-40     	; 0x1190 <Pipe_IsEndpointBound+0x166>

000011b8 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    11b8:	20 91 a2 00 	lds	r18, 0x00A2
    11bc:	30 91 a3 00 	lds	r19, 0x00A3
    11c0:	45 e6       	ldi	r20, 0x65	; 101
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    11c2:	80 91 aa 00 	lds	r24, 0x00AA
    11c6:	80 73       	andi	r24, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    11c8:	80 31       	cpi	r24, 0x10	; 16
    11ca:	d9 f0       	breq	.+54     	; 0x1202 <Pipe_WaitUntilReady+0x4a>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    11cc:	80 91 a6 00 	lds	r24, 0x00A6
			if (Pipe_IsINReceived())
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
    11d0:	82 fd       	sbrc	r24, 2
    11d2:	1b c0       	rjmp	.+54     	; 0x120a <Pipe_WaitUntilReady+0x52>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    11d4:	80 91 a6 00 	lds	r24, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
    11d8:	81 fd       	sbrc	r24, 1
    11da:	19 c0       	rjmp	.+50     	; 0x120e <Pipe_WaitUntilReady+0x56>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
    11dc:	80 91 69 04 	lds	r24, 0x0469
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	b9 f0       	breq	.+46     	; 0x1212 <Pipe_WaitUntilReady+0x5a>
    11e4:	80 91 a2 00 	lds	r24, 0x00A2
    11e8:	90 91 a3 00 	lds	r25, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	41 f3       	breq	.-48     	; 0x11c2 <Pipe_WaitUntilReady+0xa>
    11f2:	41 50       	subi	r20, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    11f4:	81 f0       	breq	.+32     	; 0x1216 <Pipe_WaitUntilReady+0x5e>
    11f6:	9c 01       	movw	r18, r24
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    11f8:	80 91 aa 00 	lds	r24, 0x00AA
    11fc:	80 73       	andi	r24, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
    11fe:	80 31       	cpi	r24, 0x10	; 16
    1200:	29 f7       	brne	.-54     	; 0x11cc <Pipe_WaitUntilReady+0x14>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    1202:	80 91 a6 00 	lds	r24, 0x00A6
		{
			if (Pipe_IsINReceived())
    1206:	80 ff       	sbrs	r24, 0
    1208:	e5 cf       	rjmp	.-54     	; 0x11d4 <Pipe_WaitUntilReady+0x1c>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
    1212:	82 e0       	ldi	r24, 0x02	; 2

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
    1214:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
    1216:	83 e0       	ldi	r24, 0x03	; 3
    1218:	08 95       	ret

0000121a <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    121a:	70 d0       	rcall	.+224    	; 0x12fc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    121c:	77 d0       	rcall	.+238    	; 0x130c <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    121e:	e0 ee       	ldi	r30, 0xE0	; 224
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	81 60       	ori	r24, 0x01	; 1
    1226:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1228:	e8 ed       	ldi	r30, 0xD8	; 216
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	8f 77       	andi	r24, 0x7F	; 127
    1230:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1232:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1234:	a7 ed       	ldi	r26, 0xD7	; 215
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	8c 91       	ld	r24, X
    123a:	8e 7f       	andi	r24, 0xFE	; 254
    123c:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    123e:	80 81       	ld	r24, Z
    1240:	8f 7e       	andi	r24, 0xEF	; 239
    1242:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1244:	10 92 60 04 	sts	0x0460, r1
}
    1248:	08 95       	ret

0000124a <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    124a:	58 d0       	rcall	.+176    	; 0x12fc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    124c:	5f d0       	rcall	.+190    	; 0x130c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    124e:	80 91 d8 00 	lds	r24, 0x00D8
    1252:	8f 77       	andi	r24, 0x7F	; 127
    1254:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
    1258:	80 91 d8 00 	lds	r24, 0x00D8
    125c:	80 68       	ori	r24, 0x80	; 128
    125e:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1262:	80 91 d8 00 	lds	r24, 0x00D8
    1266:	8f 7d       	andi	r24, 0xDF	; 223
    1268:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
    126c:	80 91 d7 00 	lds	r24, 0x00D7
    1270:	8f 77       	andi	r24, 0x7F	; 127
    1272:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1276:	84 e1       	ldi	r24, 0x14	; 20
    1278:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    127a:	86 e1       	ldi	r24, 0x16	; 22
    127c:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    127e:	09 b4       	in	r0, 0x29	; 41
    1280:	00 fe       	sbrs	r0, 0
    1282:	fd cf       	rjmp	.-6      	; 0x127e <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	80 93 69 04 	sts	0x0469, r24
	USB_Host_ConfigurationNumber = 0;
    128a:	10 92 5f 04 	sts	0x045F, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
    128e:	80 e4       	ldi	r24, 0x40	; 64
    1290:	80 93 24 01 	sts	0x0124, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
    1294:	80 91 d8 00 	lds	r24, 0x00D8
    1298:	80 64       	ori	r24, 0x40	; 64
    129a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    129e:	80 91 dd 00 	lds	r24, 0x00DD
    12a2:	81 60       	ori	r24, 0x01	; 1
    12a4:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
    12a8:	80 91 dd 00 	lds	r24, 0x00DD
    12ac:	84 60       	ori	r24, 0x04	; 4
    12ae:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
    12b2:	80 91 d7 00 	lds	r24, 0x00D7
    12b6:	8f 7e       	andi	r24, 0xEF	; 239
    12b8:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
    12bc:	6f 9a       	sbi	0x0d, 7	; 13
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  &= ~(1 << 7);
				#else
				PORTE  |=  (1 << 7);
    12be:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);
    12c0:	80 91 de 00 	lds	r24, 0x00DE
    12c4:	81 60       	ori	r24, 0x01	; 1
    12c6:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
    12ca:	80 91 de 00 	lds	r24, 0x00DE
    12ce:	84 60       	ori	r24, 0x04	; 4
    12d0:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    12d4:	80 91 e0 00 	lds	r24, 0x00E0
    12d8:	8e 7f       	andi	r24, 0xFE	; 254
    12da:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    12de:	80 91 d8 00 	lds	r24, 0x00D8
    12e2:	80 61       	ori	r24, 0x10	; 16
    12e4:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    12e8:	08 95       	ret

000012ea <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    12ea:	e7 ed       	ldi	r30, 0xD7	; 215
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	81 60       	ori	r24, 0x01	; 1
    12f2:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	80 93 60 04 	sts	0x0460, r24

	USB_ResetInterface();
}
    12fa:	a7 cf       	rjmp	.-178    	; 0x124a <USB_ResetInterface>

000012fc <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    12fc:	e8 ed       	ldi	r30, 0xD8	; 216
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	8c 7f       	andi	r24, 0xFC	; 252
    1304:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
    1306:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
    130a:	08 95       	ret

0000130c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    130c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
    1310:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
    1314:	08 95       	ret

00001316 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1316:	1f 92       	push	r1
    1318:	0f 92       	push	r0
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	0f 92       	push	r0
    131e:	0b b6       	in	r0, 0x3b	; 59
    1320:	0f 92       	push	r0
    1322:	11 24       	eor	r1, r1
    1324:	2f 93       	push	r18
    1326:	3f 93       	push	r19
    1328:	4f 93       	push	r20
    132a:	5f 93       	push	r21
    132c:	6f 93       	push	r22
    132e:	7f 93       	push	r23
    1330:	8f 93       	push	r24
    1332:	9f 93       	push	r25
    1334:	af 93       	push	r26
    1336:	bf 93       	push	r27
    1338:	ef 93       	push	r30
    133a:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
    133c:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
    1340:	85 ff       	sbrs	r24, 5
    1342:	04 c0       	rjmp	.+8      	; 0x134c <__vector_10+0x36>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
    1344:	80 91 a0 00 	lds	r24, 0x00A0
    1348:	85 fd       	sbrc	r24, 5
    134a:	52 c0       	rjmp	.+164    	; 0x13f0 <__vector_10+0xda>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
    134c:	80 91 9f 00 	lds	r24, 0x009F

		EVENT_USB_Host_StartOfFrame();
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
    1350:	81 ff       	sbrs	r24, 1
    1352:	04 c0       	rjmp	.+8      	; 0x135c <__vector_10+0x46>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
    1354:	80 91 a0 00 	lds	r24, 0x00A0
    1358:	81 fd       	sbrc	r24, 1
    135a:	51 c0       	rjmp	.+162    	; 0x13fe <__vector_10+0xe8>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
    135c:	80 91 df 00 	lds	r24, 0x00DF
		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
    1360:	81 ff       	sbrs	r24, 1
    1362:	04 c0       	rjmp	.+8      	; 0x136c <__vector_10+0x56>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
    1364:	80 91 de 00 	lds	r24, 0x00DE
    1368:	81 fd       	sbrc	r24, 1
    136a:	5b c0       	rjmp	.+182    	; 0x1422 <__vector_10+0x10c>
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
    136c:	80 91 df 00 	lds	r24, 0x00DF
		EVENT_USB_Host_DeviceUnattached();

		USB_HostState = HOST_STATE_Unattached;
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
    1370:	80 ff       	sbrs	r24, 0
    1372:	04 c0       	rjmp	.+8      	; 0x137c <__vector_10+0x66>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
    1374:	80 91 de 00 	lds	r24, 0x00DE
    1378:	80 fd       	sbrc	r24, 0
    137a:	26 c0       	rjmp	.+76     	; 0x13c8 <__vector_10+0xb2>
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
    137c:	80 91 df 00 	lds	r24, 0x00DF
		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
    1380:	82 ff       	sbrs	r24, 2
    1382:	04 c0       	rjmp	.+8      	; 0x138c <__vector_10+0x76>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
    1384:	80 91 de 00 	lds	r24, 0x00DE
    1388:	82 fd       	sbrc	r24, 2
    138a:	13 c0       	rjmp	.+38     	; 0x13b2 <__vector_10+0x9c>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    138c:	ff 91       	pop	r31
    138e:	ef 91       	pop	r30
    1390:	bf 91       	pop	r27
    1392:	af 91       	pop	r26
    1394:	9f 91       	pop	r25
    1396:	8f 91       	pop	r24
    1398:	7f 91       	pop	r23
    139a:	6f 91       	pop	r22
    139c:	5f 91       	pop	r21
    139e:	4f 91       	pop	r20
    13a0:	3f 91       	pop	r19
    13a2:	2f 91       	pop	r18
    13a4:	0f 90       	pop	r0
    13a6:	0b be       	out	0x3b, r0	; 59
    13a8:	0f 90       	pop	r0
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	0f 90       	pop	r0
    13ae:	1f 90       	pop	r1
    13b0:	18 95       	reti
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
    13b2:	80 91 df 00 	lds	r24, 0x00DF
    13b6:	8b 7f       	andi	r24, 0xFB	; 251
    13b8:	80 93 df 00 	sts	0x00DF, r24

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
    13bc:	82 e0       	ldi	r24, 0x02	; 2
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	b7 d7       	rcall	.+3950   	; 0x2330 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
    13c2:	78 d7       	rcall	.+3824   	; 0x22b4 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    13c4:	42 df       	rcall	.-380    	; 0x124a <USB_ResetInterface>
    13c6:	e2 cf       	rjmp	.-60     	; 0x138c <__vector_10+0x76>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
    13c8:	80 91 df 00 	lds	r24, 0x00DF
    13cc:	8e 7f       	andi	r24, 0xFE	; 254
    13ce:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);
    13d2:	80 91 de 00 	lds	r24, 0x00DE
    13d6:	8e 7f       	andi	r24, 0xFE	; 254
    13d8:	80 93 de 00 	sts	0x00DE, r24
	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
    13dc:	60 d7       	rcall	.+3776   	; 0x229e <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
    13de:	80 91 a0 00 	lds	r24, 0x00A0
    13e2:	82 60       	ori	r24, 0x02	; 2
    13e4:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
    13e8:	82 e0       	ldi	r24, 0x02	; 2
    13ea:	80 93 69 04 	sts	0x0469, r24
    13ee:	c6 cf       	rjmp	.-116    	; 0x137c <__vector_10+0x66>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
    13f0:	80 91 9f 00 	lds	r24, 0x009F
    13f4:	8f 7d       	andi	r24, 0xDF	; 223
    13f6:	80 93 9f 00 	sts	0x009F, r24
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
    13fa:	a1 d1       	rcall	.+834    	; 0x173e <USB_Event_Stub>
    13fc:	a7 cf       	rjmp	.-178    	; 0x134c <__vector_10+0x36>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
    13fe:	80 91 9f 00 	lds	r24, 0x009F
    1402:	8d 7f       	andi	r24, 0xFD	; 253
    1404:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
    1408:	80 91 9f 00 	lds	r24, 0x009F
    140c:	8e 7f       	andi	r24, 0xFE	; 254
    140e:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
    1412:	80 91 a0 00 	lds	r24, 0x00A0
    1416:	8d 7f       	andi	r24, 0xFD	; 253
    1418:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
    141c:	4b d7       	rcall	.+3734   	; 0x22b4 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
    141e:	15 df       	rcall	.-470    	; 0x124a <USB_ResetInterface>
    1420:	9d cf       	rjmp	.-198    	; 0x135c <__vector_10+0x46>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
    1422:	80 91 df 00 	lds	r24, 0x00DF
    1426:	8d 7f       	andi	r24, 0xFD	; 253
    1428:	80 93 df 00 	sts	0x00DF, r24
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				#if defined(INVERTED_VBUS_ENABLE_LINE)
				PORTE  |=  (1 << 7);
				#else
				PORTE  &= ~(1 << 7);
    142c:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
    142e:	80 91 dd 00 	lds	r24, 0x00DD
    1432:	81 60       	ori	r24, 0x01	; 1
    1434:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	77 d7       	rcall	.+3822   	; 0x232a <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
    143c:	3b d7       	rcall	.+3702   	; 0x22b4 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	80 93 69 04 	sts	0x0469, r24
    1444:	93 cf       	rjmp	.-218    	; 0x136c <__vector_10+0x56>

00001446 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1446:	af 92       	push	r10
    1448:	bf 92       	push	r11
    144a:	df 92       	push	r13
    144c:	ef 92       	push	r14
    144e:	ff 92       	push	r15
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	0f 92       	push	r0
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	08 2f       	mov	r16, r24
    1460:	5b 01       	movw	r10, r22
    1462:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1464:	80 91 aa 00 	lds	r24, 0x00AA
    1468:	8f 7c       	andi	r24, 0xCF	; 207
    146a:	80 62       	ori	r24, 0x20	; 32
    146c:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1470:	99 83       	std	Y+1, r25	; 0x01
    1472:	a2 de       	rcall	.-700    	; 0x11b8 <Pipe_WaitUntilReady>
    1474:	d8 2e       	mov	r13, r24
    1476:	99 81       	ldd	r25, Y+1	; 0x01
    1478:	88 23       	and	r24, r24
    147a:	51 f5       	brne	.+84     	; 0x14d0 <Pipe_Write_Stream_LE+0x8a>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    147c:	19 2f       	mov	r17, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    147e:	e1 14       	cp	r14, r1
    1480:	f1 04       	cpc	r15, r1
    1482:	39 f0       	breq	.+14     	; 0x1492 <Pipe_Write_Stream_LE+0x4c>
	{
		Length -= *BytesProcessed;
    1484:	f7 01       	movw	r30, r14
    1486:	20 81       	ld	r18, Z
    1488:	31 81       	ldd	r19, Z+1	; 0x01
    148a:	a2 1a       	sub	r10, r18
    148c:	b3 0a       	sbc	r11, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    148e:	02 0f       	add	r16, r18
    1490:	13 1f       	adc	r17, r19
	}

	while (Length)
    1492:	a1 14       	cp	r10, r1
    1494:	b1 04       	cpc	r11, r1
    1496:	e1 f0       	breq	.+56     	; 0x14d0 <Pipe_Write_Stream_LE+0x8a>
    1498:	e1 14       	cp	r14, r1
    149a:	f1 04       	cpc	r15, r1
    149c:	61 f0       	breq	.+24     	; 0x14b6 <Pipe_Write_Stream_LE+0x70>
    149e:	24 c0       	rjmp	.+72     	; 0x14e8 <Pipe_Write_Stream_LE+0xa2>
			if ((ErrorCode = Pipe_WaitUntilReady()))
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    14a0:	f8 01       	movw	r30, r16
    14a2:	81 91       	ld	r24, Z+
    14a4:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    14a6:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    14aa:	08 94       	sec
    14ac:	a1 08       	sbc	r10, r1
    14ae:	b1 08       	sbc	r11, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    14b0:	a1 14       	cp	r10, r1
    14b2:	b1 04       	cpc	r11, r1
    14b4:	69 f0       	breq	.+26     	; 0x14d0 <Pipe_Write_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    14b6:	80 91 a6 00 	lds	r24, 0x00A6
	{
		if (!(Pipe_IsReadWriteAllowed()))
    14ba:	85 fd       	sbrc	r24, 5
    14bc:	f1 cf       	rjmp	.-30     	; 0x14a0 <Pipe_Write_Stream_LE+0x5a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    14be:	80 91 a6 00 	lds	r24, 0x00A6
    14c2:	8b 77       	andi	r24, 0x7B	; 123
    14c4:	80 93 a6 00 	sts	0x00A6, r24
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    14c8:	77 de       	rcall	.-786    	; 0x11b8 <Pipe_WaitUntilReady>
    14ca:	88 23       	and	r24, r24
    14cc:	89 f3       	breq	.-30     	; 0x14b0 <Pipe_Write_Stream_LE+0x6a>
    14ce:	d8 2e       	mov	r13, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    14d0:	8d 2d       	mov	r24, r13
    14d2:	0f 90       	pop	r0
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	ff 90       	pop	r15
    14de:	ef 90       	pop	r14
    14e0:	df 90       	pop	r13
    14e2:	bf 90       	pop	r11
    14e4:	af 90       	pop	r10
    14e6:	08 95       	ret
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    14ec:	80 91 a6 00 	lds	r24, 0x00A6
	{
		if (!(Pipe_IsReadWriteAllowed()))
    14f0:	85 fd       	sbrc	r24, 5
    14f2:	0f c0       	rjmp	.+30     	; 0x1512 <Pipe_Write_Stream_LE+0xcc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    14f4:	80 91 a6 00 	lds	r24, 0x00A6
    14f8:	8b 77       	andi	r24, 0x7B	; 123
    14fa:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
			{
				*BytesProcessed += BytesInTransfer;
    14fe:	f7 01       	movw	r30, r14
    1500:	80 81       	ld	r24, Z
    1502:	91 81       	ldd	r25, Z+1	; 0x01
    1504:	82 0f       	add	r24, r18
    1506:	93 1f       	adc	r25, r19
    1508:	91 83       	std	Z+1, r25	; 0x01
    150a:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
    150c:	24 e0       	ldi	r18, 0x04	; 4
    150e:	d2 2e       	mov	r13, r18
    1510:	df cf       	rjmp	.-66     	; 0x14d0 <Pipe_Write_Stream_LE+0x8a>
			if ((ErrorCode = Pipe_WaitUntilReady()))
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1512:	f8 01       	movw	r30, r16
    1514:	81 91       	ld	r24, Z+
    1516:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1518:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
			BytesInTransfer++;
    151c:	2f 5f       	subi	r18, 0xFF	; 255
    151e:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1520:	a2 16       	cp	r10, r18
    1522:	b3 06       	cpc	r11, r19
    1524:	19 f7       	brne	.-58     	; 0x14ec <Pipe_Write_Stream_LE+0xa6>
    1526:	d4 cf       	rjmp	.-88     	; 0x14d0 <Pipe_Write_Stream_LE+0x8a>

00001528 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1528:	af 92       	push	r10
    152a:	bf 92       	push	r11
    152c:	df 92       	push	r13
    152e:	ef 92       	push	r14
    1530:	ff 92       	push	r15
    1532:	0f 93       	push	r16
    1534:	1f 93       	push	r17
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	0f 92       	push	r0
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	08 2f       	mov	r16, r24
    1542:	5b 01       	movw	r10, r22
    1544:	7a 01       	movw	r14, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1546:	80 91 aa 00 	lds	r24, 0x00AA
    154a:	8f 7c       	andi	r24, 0xCF	; 207
    154c:	80 61       	ori	r24, 0x10	; 16
    154e:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
    1552:	99 83       	std	Y+1, r25	; 0x01
    1554:	31 de       	rcall	.-926    	; 0x11b8 <Pipe_WaitUntilReady>
    1556:	d8 2e       	mov	r13, r24
    1558:	99 81       	ldd	r25, Y+1	; 0x01
    155a:	88 23       	and	r24, r24
    155c:	51 f5       	brne	.+84     	; 0x15b2 <Pipe_Read_Stream_LE+0x8a>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    155e:	19 2f       	mov	r17, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1560:	e1 14       	cp	r14, r1
    1562:	f1 04       	cpc	r15, r1
    1564:	39 f0       	breq	.+14     	; 0x1574 <Pipe_Read_Stream_LE+0x4c>
	{
		Length -= *BytesProcessed;
    1566:	f7 01       	movw	r30, r14
    1568:	20 81       	ld	r18, Z
    156a:	31 81       	ldd	r19, Z+1	; 0x01
    156c:	a2 1a       	sub	r10, r18
    156e:	b3 0a       	sbc	r11, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1570:	02 0f       	add	r16, r18
    1572:	13 1f       	adc	r17, r19
	}

	while (Length)
    1574:	a1 14       	cp	r10, r1
    1576:	b1 04       	cpc	r11, r1
    1578:	e1 f0       	breq	.+56     	; 0x15b2 <Pipe_Read_Stream_LE+0x8a>
    157a:	e1 14       	cp	r14, r1
    157c:	f1 04       	cpc	r15, r1
    157e:	61 f0       	breq	.+24     	; 0x1598 <Pipe_Read_Stream_LE+0x70>
    1580:	24 c0       	rjmp	.+72     	; 0x15ca <Pipe_Read_Stream_LE+0xa2>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1582:	80 91 af 00 	lds	r24, 0x00AF
			if ((ErrorCode = Pipe_WaitUntilReady()))
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1586:	f8 01       	movw	r30, r16
    1588:	81 93       	st	Z+, r24
    158a:	8f 01       	movw	r16, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    158c:	08 94       	sec
    158e:	a1 08       	sbc	r10, r1
    1590:	b1 08       	sbc	r11, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1592:	a1 14       	cp	r10, r1
    1594:	b1 04       	cpc	r11, r1
    1596:	69 f0       	breq	.+26     	; 0x15b2 <Pipe_Read_Stream_LE+0x8a>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    1598:	80 91 a6 00 	lds	r24, 0x00A6
	{
		if (!(Pipe_IsReadWriteAllowed()))
    159c:	85 fd       	sbrc	r24, 5
    159e:	f1 cf       	rjmp	.-30     	; 0x1582 <Pipe_Read_Stream_LE+0x5a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    15a0:	80 91 a6 00 	lds	r24, 0x00A6
    15a4:	8e 77       	andi	r24, 0x7E	; 126
    15a6:	80 93 a6 00 	sts	0x00A6, r24
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
    15aa:	06 de       	rcall	.-1012   	; 0x11b8 <Pipe_WaitUntilReady>
    15ac:	88 23       	and	r24, r24
    15ae:	89 f3       	breq	.-30     	; 0x1592 <Pipe_Read_Stream_LE+0x6a>
    15b0:	d8 2e       	mov	r13, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
    15b2:	8d 2d       	mov	r24, r13
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	ff 90       	pop	r15
    15c0:	ef 90       	pop	r14
    15c2:	df 90       	pop	r13
    15c4:	bf 90       	pop	r11
    15c6:	af 90       	pop	r10
    15c8:	08 95       	ret
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
    15ce:	80 91 a6 00 	lds	r24, 0x00A6
	{
		if (!(Pipe_IsReadWriteAllowed()))
    15d2:	85 fd       	sbrc	r24, 5
    15d4:	0f c0       	rjmp	.+30     	; 0x15f4 <Pipe_Read_Stream_LE+0xcc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    15d6:	80 91 a6 00 	lds	r24, 0x00A6
    15da:	8e 77       	andi	r24, 0x7E	; 126
    15dc:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
			{
				*BytesProcessed += BytesInTransfer;
    15e0:	f7 01       	movw	r30, r14
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	82 0f       	add	r24, r18
    15e8:	93 1f       	adc	r25, r19
    15ea:	91 83       	std	Z+1, r25	; 0x01
    15ec:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
    15ee:	44 e0       	ldi	r20, 0x04	; 4
    15f0:	d4 2e       	mov	r13, r20
    15f2:	df cf       	rjmp	.-66     	; 0x15b2 <Pipe_Read_Stream_LE+0x8a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    15f4:	80 91 af 00 	lds	r24, 0x00AF
			if ((ErrorCode = Pipe_WaitUntilReady()))
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    15f8:	f8 01       	movw	r30, r16
    15fa:	81 93       	st	Z+, r24
    15fc:	8f 01       	movw	r16, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
			BytesInTransfer++;
    15fe:	2f 5f       	subi	r18, 0xFF	; 255
    1600:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1602:	a2 16       	cp	r10, r18
    1604:	b3 06       	cpc	r11, r19
    1606:	19 f7       	brne	.-58     	; 0x15ce <Pipe_Read_Stream_LE+0xa6>
    1608:	d4 cf       	rjmp	.-88     	; 0x15b2 <Pipe_Read_Stream_LE+0x8a>

0000160a <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
    160a:	cf 92       	push	r12
    160c:	df 92       	push	r13
    160e:	ef 92       	push	r14
    1610:	ff 92       	push	r15
    1612:	0f 93       	push	r16
    1614:	1f 93       	push	r17
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	29 97       	sbiw	r28, 0x09	; 9
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	8b 01       	movw	r16, r22
    162c:	6a 01       	movw	r12, r20
    162e:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1630:	90 e8       	ldi	r25, 0x80	; 128
    1632:	90 93 61 04 	sts	0x0461, r25
    1636:	96 e0       	ldi	r25, 0x06	; 6
    1638:	90 93 62 04 	sts	0x0462, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	01 97       	sbiw	r24, 0x01	; 1
    1640:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    1642:	90 93 64 04 	sts	0x0464, r25
    1646:	80 93 63 04 	sts	0x0463, r24
    164a:	10 92 66 04 	sts	0x0466, r1
    164e:	10 92 65 04 	sts	0x0465, r1
    1652:	89 e0       	ldi	r24, 0x09	; 9
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	90 93 68 04 	sts	0x0468, r25
    165a:	80 93 67 04 	sts	0x0467, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    165e:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    1662:	ce 01       	movw	r24, r28
    1664:	01 96       	adiw	r24, 0x01	; 1
    1666:	ab d0       	rcall	.+342    	; 0x17be <USB_Host_SendControlRequest>
    1668:	88 23       	and	r24, r24
    166a:	49 f4       	brne	.+18     	; 0x167e <USB_Host_GetDeviceConfigDescriptor+0x74>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	9c 81       	ldd	r25, Y+4	; 0x04
    1670:	f8 01       	movw	r30, r16
    1672:	91 83       	std	Z+1, r25	; 0x01
    1674:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1676:	e8 16       	cp	r14, r24
    1678:	f9 06       	cpc	r15, r25
    167a:	80 f4       	brcc	.+32     	; 0x169c <USB_Host_GetDeviceConfigDescriptor+0x92>
	  return HOST_GETCONFIG_BuffOverflow;
    167c:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
    167e:	29 96       	adiw	r28, 0x09	; 9
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	1f 91       	pop	r17
    1690:	0f 91       	pop	r16
    1692:	ff 90       	pop	r15
    1694:	ef 90       	pop	r14
    1696:	df 90       	pop	r13
    1698:	cf 90       	pop	r12
    169a:	08 95       	ret
	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
    169c:	90 93 68 04 	sts	0x0468, r25
    16a0:	80 93 67 04 	sts	0x0467, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    16a4:	c6 01       	movw	r24, r12
    16a6:	8b d0       	rcall	.+278    	; 0x17be <USB_Host_SendControlRequest>
    16a8:	88 23       	and	r24, r24
    16aa:	49 f7       	brne	.-46     	; 0x167e <USB_Host_GetDeviceConfigDescriptor+0x74>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    16ac:	f6 01       	movw	r30, r12
    16ae:	91 81       	ldd	r25, Z+1	; 0x01
    16b0:	92 30       	cpi	r25, 0x02	; 2
    16b2:	29 f3       	breq	.-54     	; 0x167e <USB_Host_GetDeviceConfigDescriptor+0x74>
	  return HOST_GETCONFIG_InvalidData;
    16b4:	86 e0       	ldi	r24, 0x06	; 6
    16b6:	e3 cf       	rjmp	.-58     	; 0x167e <USB_Host_GetDeviceConfigDescriptor+0x74>

000016b8 <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
    16b8:	af 92       	push	r10
    16ba:	bf 92       	push	r11
    16bc:	cf 92       	push	r12
    16be:	df 92       	push	r13
    16c0:	ef 92       	push	r14
    16c2:	ff 92       	push	r15
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	8c 01       	movw	r16, r24
    16ce:	eb 01       	movw	r28, r22
    16d0:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
    16d2:	f8 01       	movw	r30, r16
    16d4:	e0 80       	ld	r14, Z
    16d6:	f1 80       	ldd	r15, Z+1	; 0x01
    16d8:	e1 14       	cp	r14, r1
    16da:	f1 04       	cpc	r15, r1
    16dc:	41 f1       	breq	.+80     	; 0x172e <USB_GetNextDescriptorComp+0x76>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
    16de:	e8 81       	ld	r30, Y
    16e0:	f9 81       	ldd	r31, Y+1	; 0x01
    16e2:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    16e4:	20 81       	ld	r18, Z
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	c7 01       	movw	r24, r14
    16ea:	2e 15       	cp	r18, r14
    16ec:	3f 05       	cpc	r19, r15
    16ee:	08 f4       	brcc	.+2      	; 0x16f2 <USB_GetNextDescriptorComp+0x3a>
    16f0:	c9 01       	movw	r24, r18

				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
    16f2:	e8 0f       	add	r30, r24
    16f4:	f9 1f       	adc	r31, r25
    16f6:	f9 83       	std	Y+1, r31	; 0x01
    16f8:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
    16fa:	f8 01       	movw	r30, r16
    16fc:	20 81       	ld	r18, Z
    16fe:	31 81       	ldd	r19, Z+1	; 0x01
    1700:	28 1b       	sub	r18, r24
    1702:	39 0b       	sbc	r19, r25
    1704:	31 83       	std	Z+1, r19	; 0x01
    1706:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    1708:	88 81       	ld	r24, Y
    170a:	99 81       	ldd	r25, Y+1	; 0x01
    170c:	f6 01       	movw	r30, r12
    170e:	09 95       	icall
    1710:	82 30       	cpi	r24, 0x02	; 2
    1712:	f9 f2       	breq	.-66     	; 0x16d2 <USB_GetNextDescriptorComp+0x1a>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	69 f0       	breq	.+26     	; 0x1732 <USB_GetNextDescriptorComp+0x7a>
			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	1f 91       	pop	r17
    171e:	0f 91       	pop	r16
    1720:	ff 90       	pop	r15
    1722:	ef 90       	pop	r14
    1724:	df 90       	pop	r13
    1726:	cf 90       	pop	r12
    1728:	bf 90       	pop	r11
    172a:	af 90       	pop	r10
    172c:	08 95       	ret

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
    172e:	82 e0       	ldi	r24, 0x02	; 2
    1730:	f3 cf       	rjmp	.-26     	; 0x1718 <USB_GetNextDescriptorComp+0x60>

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
			{
				*CurrConfigLoc = PrevDescLoc;
    1732:	a8 82       	st	Y, r10
    1734:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
    1736:	f8 01       	movw	r30, r16
    1738:	f1 82       	std	Z+1, r15	; 0x01
    173a:	e0 82       	st	Z, r14
    173c:	ed cf       	rjmp	.-38     	; 0x1718 <USB_GetNextDescriptorComp+0x60>

0000173e <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    173e:	08 95       	ret

00001740 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1740:	1f 93       	push	r17
    1742:	cf 93       	push	r28
    1744:	df 93       	push	r29
    1746:	18 2f       	mov	r17, r24

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    1748:	88 23       	and	r24, r24
    174a:	b9 f0       	breq	.+46     	; 0x177a <USB_Host_WaitForIOS+0x3a>
    174c:	82 30       	cpi	r24, 0x02	; 2
    174e:	21 f5       	brne	.+72     	; 0x1798 <USB_Host_WaitForIOS+0x58>

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1750:	c9 ee       	ldi	r28, 0xE9	; 233
    1752:	d3 e0       	ldi	r29, 0x03	; 3
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
    1754:	80 91 a6 00 	lds	r24, 0x00A6
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    1758:	82 fd       	sbrc	r24, 2
    175a:	0a c0       	rjmp	.+20     	; 0x1770 <USB_Host_WaitForIOS+0x30>
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	3b db       	rcall	.-2442   	; 0xdd6 <USB_Host_WaitMS>
    1760:	88 23       	and	r24, r24
    1762:	39 f4       	brne	.+14     	; 0x1772 <USB_Host_WaitForIOS+0x32>
    1764:	21 97       	sbiw	r28, 0x01	; 1
		  return ErrorCode;

		if (!(TimeoutCounter--))
    1766:	31 f1       	breq	.+76     	; 0x17b4 <USB_Host_WaitForIOS+0x74>
    1768:	80 91 a6 00 	lds	r24, 0x00A6
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
    176c:	82 ff       	sbrs	r24, 2
    176e:	f6 cf       	rjmp	.-20     	; 0x175c <USB_Host_WaitForIOS+0x1c>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1770:	80 e0       	ldi	r24, 0x00	; 0
}
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	1f 91       	pop	r17
    1778:	08 95       	ret

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    177a:	c9 ee       	ldi	r28, 0xE9	; 233
    177c:	d3 e0       	ldi	r29, 0x03	; 3
    177e:	06 c0       	rjmp	.+12     	; 0x178c <USB_Host_WaitForIOS+0x4c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	29 db       	rcall	.-2478   	; 0xdd6 <USB_Host_WaitMS>
    1784:	88 23       	and	r24, r24
    1786:	a9 f7       	brne	.-22     	; 0x1772 <USB_Host_WaitForIOS+0x32>
    1788:	21 97       	sbiw	r28, 0x01	; 1
		  return ErrorCode;

		if (!(TimeoutCounter--))
    178a:	a1 f0       	breq	.+40     	; 0x17b4 <USB_Host_WaitForIOS+0x74>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
    178c:	80 91 a6 00 	lds	r24, 0x00A6
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    1790:	83 ff       	sbrs	r24, 3
    1792:	f6 cf       	rjmp	.-20     	; 0x1780 <USB_Host_WaitForIOS+0x40>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	ed cf       	rjmp	.-38     	; 0x1772 <USB_Host_WaitForIOS+0x32>

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
    1798:	c9 ee       	ldi	r28, 0xE9	; 233
    179a:	d3 e0       	ldi	r29, 0x03	; 3
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
    179c:	11 30       	cpi	r17, 0x01	; 1
    179e:	21 f4       	brne	.+8      	; 0x17a8 <USB_Host_WaitForIOS+0x68>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    17a0:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
    17a4:	80 fd       	sbrc	r24, 0
    17a6:	e4 cf       	rjmp	.-56     	; 0x1770 <USB_Host_WaitForIOS+0x30>
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	15 db       	rcall	.-2518   	; 0xdd6 <USB_Host_WaitMS>
    17ac:	88 23       	and	r24, r24
    17ae:	09 f7       	brne	.-62     	; 0x1772 <USB_Host_WaitForIOS+0x32>
    17b0:	21 97       	sbiw	r28, 0x01	; 1
		  return ErrorCode;

		if (!(TimeoutCounter--))
    17b2:	a1 f7       	brne	.-24     	; 0x179c <USB_Host_WaitForIOS+0x5c>
		  return HOST_SENDCONTROL_SoftwareTimeOut;
    17b4:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	08 95       	ret

000017be <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
    17be:	ef 92       	push	r14
    17c0:	ff 92       	push	r15
    17c2:	0f 93       	push	r16
    17c4:	1f 93       	push	r17
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
    17cc:	e0 90 9e 00 	lds	r14, 0x009E
    17d0:	ff 24       	eor	r15, r15
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	e8 22       	and	r14, r24
    17d6:	ff 24       	eor	r15, r15
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
    17d8:	c0 91 67 04 	lds	r28, 0x0467
    17dc:	d0 91 68 04 	lds	r29, 0x0468
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
    17e0:	80 91 9e 00 	lds	r24, 0x009E
    17e4:	81 60       	ori	r24, 0x01	; 1
    17e6:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	f4 da       	rcall	.-2584   	; 0xdd6 <USB_Host_WaitMS>
    17ee:	88 23       	and	r24, r24
    17f0:	d1 f5       	brne	.+116    	; 0x1866 <USB_Host_SendControlRequest+0xa8>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    17f2:	80 91 aa 00 	lds	r24, 0x00AA
    17f6:	8f 7c       	andi	r24, 0xCF	; 207
    17f8:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
    17fc:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
    1800:	80 91 a6 00 	lds	r24, 0x00A6
    1804:	8f 7e       	andi	r24, 0xEF	; 239
    1806:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    180a:	80 91 a9 00 	lds	r24, 0x00A9
    180e:	8f 7b       	andi	r24, 0xBF	; 191
    1810:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));
    1814:	80 91 61 04 	lds	r24, 0x0461
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1818:	80 93 af 00 	sts	0x00AF, r24
    181c:	80 91 62 04 	lds	r24, 0x0462
    1820:	80 93 af 00 	sts	0x00AF, r24
    1824:	80 91 63 04 	lds	r24, 0x0463
    1828:	80 93 af 00 	sts	0x00AF, r24
    182c:	80 91 64 04 	lds	r24, 0x0464
    1830:	80 93 af 00 	sts	0x00AF, r24
    1834:	80 91 65 04 	lds	r24, 0x0465
    1838:	80 93 af 00 	sts	0x00AF, r24
    183c:	80 91 66 04 	lds	r24, 0x0466
    1840:	80 93 af 00 	sts	0x00AF, r24
    1844:	80 91 67 04 	lds	r24, 0x0467
    1848:	80 93 af 00 	sts	0x00AF, r24
    184c:	80 91 68 04 	lds	r24, 0x0468
    1850:	80 93 af 00 	sts	0x00AF, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    1854:	80 91 a6 00 	lds	r24, 0x00A6
    1858:	87 77       	andi	r24, 0x77	; 119
    185a:	80 93 a6 00 	sts	0x00A6, r24
	#endif

	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	6f df       	rcall	.-290    	; 0x1740 <USB_Host_WaitForIOS>
    1862:	88 23       	and	r24, r24
    1864:	c9 f0       	breq	.+50     	; 0x1898 <USB_Host_SendControlRequest+0xda>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1866:	90 91 a9 00 	lds	r25, 0x00A9
    186a:	90 64       	ori	r25, 0x40	; 64
    186c:	90 93 a9 00 	sts	0x00A9, r25
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    1870:	e1 14       	cp	r14, r1
    1872:	f1 04       	cpc	r15, r1
    1874:	29 f4       	brne	.+10     	; 0x1880 <USB_Host_SendControlRequest+0xc2>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1876:	90 91 9e 00 	lds	r25, 0x009E
    187a:	9e 7f       	andi	r25, 0xFE	; 254
    187c:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    1880:	91 e0       	ldi	r25, 0x01	; 1
    1882:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    1886:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	1f 91       	pop	r17
    1890:	0f 91       	pop	r16
    1892:	ff 90       	pop	r15
    1894:	ef 90       	pop	r14
    1896:	08 95       	ret

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1898:	80 91 a9 00 	lds	r24, 0x00A9
    189c:	80 64       	ori	r24, 0x40	; 64
    189e:	80 93 a9 00 	sts	0x00A9, r24
	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	98 da       	rcall	.-2768   	; 0xdd6 <USB_Host_WaitMS>
    18a6:	88 23       	and	r24, r24
    18a8:	f1 f6       	brne	.-68     	; 0x1866 <USB_Host_SendControlRequest+0xa8>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    18aa:	80 91 61 04 	lds	r24, 0x0461
    18ae:	87 fd       	sbrc	r24, 7
    18b0:	53 c0       	rjmp	.+166    	; 0x1958 <USB_Host_SendControlRequest+0x19a>
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    18b2:	01 15       	cp	r16, r1
    18b4:	11 05       	cpc	r17, r1
    18b6:	89 f1       	breq	.+98     	; 0x191a <USB_Host_SendControlRequest+0x15c>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    18b8:	80 91 aa 00 	lds	r24, 0x00AA
    18bc:	8f 7c       	andi	r24, 0xCF	; 207
    18be:	80 62       	ori	r24, 0x20	; 32
    18c0:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    18c4:	80 91 a9 00 	lds	r24, 0x00A9
    18c8:	8f 7b       	andi	r24, 0xBF	; 191
    18ca:	80 93 a9 00 	sts	0x00A9, r24
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    18ce:	20 97       	sbiw	r28, 0x00	; 0
    18d0:	d1 f0       	breq	.+52     	; 0x1906 <USB_Host_SendControlRequest+0x148>
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    18d2:	82 e0       	ldi	r24, 0x02	; 2
    18d4:	35 df       	rcall	.-406    	; 0x1740 <USB_Host_WaitForIOS>
    18d6:	88 23       	and	r24, r24
    18d8:	31 f6       	brne	.-116    	; 0x1866 <USB_Host_SendControlRequest+0xa8>
    18da:	f8 01       	movw	r30, r16
    18dc:	20 91 24 01 	lds	r18, 0x0124
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    18e4:	80 91 f6 00 	lds	r24, 0x00F6
    18e8:	90 91 f7 00 	lds	r25, 0x00F7
    18ec:	82 17       	cp	r24, r18
    18ee:	93 07       	cpc	r25, r19
    18f0:	50 f5       	brcc	.+84     	; 0x1946 <USB_Host_SendControlRequest+0x188>
				{
					Pipe_Write_8(*(DataStream++));
    18f2:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    18f4:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    18f8:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    18fa:	99 f7       	brne	.-26     	; 0x18e2 <USB_Host_SendControlRequest+0x124>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    18fc:	80 91 a6 00 	lds	r24, 0x00A6
    1900:	8b 77       	andi	r24, 0x7B	; 123
    1902:	80 93 a6 00 	sts	0x00A6, r24
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1906:	82 e0       	ldi	r24, 0x02	; 2
    1908:	1b df       	rcall	.-458    	; 0x1740 <USB_Host_WaitForIOS>
    190a:	88 23       	and	r24, r24
    190c:	09 f0       	breq	.+2      	; 0x1910 <USB_Host_SendControlRequest+0x152>
    190e:	ab cf       	rjmp	.-170    	; 0x1866 <USB_Host_SendControlRequest+0xa8>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1910:	80 91 a9 00 	lds	r24, 0x00A9
    1914:	80 64       	ori	r24, 0x40	; 64
    1916:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    191a:	80 91 aa 00 	lds	r24, 0x00AA
    191e:	8f 7c       	andi	r24, 0xCF	; 207
    1920:	80 61       	ori	r24, 0x10	; 16
    1922:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1926:	80 91 a9 00 	lds	r24, 0x00A9
    192a:	8f 7b       	andi	r24, 0xBF	; 191
    192c:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	06 df       	rcall	.-500    	; 0x1740 <USB_Host_WaitForIOS>
    1934:	88 23       	and	r24, r24
    1936:	09 f0       	breq	.+2      	; 0x193a <USB_Host_SendControlRequest+0x17c>
    1938:	96 cf       	rjmp	.-212    	; 0x1866 <USB_Host_SendControlRequest+0xa8>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    193a:	90 91 a6 00 	lds	r25, 0x00A6
    193e:	9e 77       	andi	r25, 0x7E	; 126
    1940:	90 93 a6 00 	sts	0x00A6, r25
    1944:	90 cf       	rjmp	.-224    	; 0x1866 <USB_Host_SendControlRequest+0xa8>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1946:	80 91 a6 00 	lds	r24, 0x00A6
    194a:	8b 77       	andi	r24, 0x7B	; 123
    194c:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1950:	20 97       	sbiw	r28, 0x00	; 0
    1952:	09 f0       	breq	.+2      	; 0x1956 <USB_Host_SendControlRequest+0x198>
    1954:	be cf       	rjmp	.-132    	; 0x18d2 <USB_Host_SendControlRequest+0x114>
    1956:	d7 cf       	rjmp	.-82     	; 0x1906 <USB_Host_SendControlRequest+0x148>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1958:	80 91 aa 00 	lds	r24, 0x00AA
    195c:	8f 7c       	andi	r24, 0xCF	; 207
    195e:	80 61       	ori	r24, 0x10	; 16
    1960:	80 93 aa 00 	sts	0x00AA, r24

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    1964:	01 15       	cp	r16, r1
    1966:	11 05       	cpc	r17, r1
    1968:	09 f4       	brne	.+2      	; 0x196c <USB_Host_SendControlRequest+0x1ae>
    196a:	41 c0       	rjmp	.+130    	; 0x19ee <USB_Host_SendControlRequest+0x230>
		{
			while (DataLen)
    196c:	20 97       	sbiw	r28, 0x00	; 0
    196e:	09 f4       	brne	.+2      	; 0x1972 <USB_Host_SendControlRequest+0x1b4>
    1970:	3e c0       	rjmp	.+124    	; 0x19ee <USB_Host_SendControlRequest+0x230>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1972:	80 91 a9 00 	lds	r24, 0x00A9
    1976:	8f 7b       	andi	r24, 0xBF	; 191
    1978:	80 93 a9 00 	sts	0x00A9, r24
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	e0 de       	rcall	.-576    	; 0x1740 <USB_Host_WaitForIOS>
    1980:	88 23       	and	r24, r24
    1982:	09 f0       	breq	.+2      	; 0x1986 <USB_Host_SendControlRequest+0x1c8>
    1984:	70 cf       	rjmp	.-288    	; 0x1866 <USB_Host_SendControlRequest+0xa8>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1986:	80 91 f6 00 	lds	r24, 0x00F6
    198a:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	11 f4       	brne	.+4      	; 0x1996 <USB_Host_SendControlRequest+0x1d8>
				  DataLen = 0;
    1992:	c0 e0       	ldi	r28, 0x00	; 0
    1994:	d0 e0       	ldi	r29, 0x00	; 0
    1996:	80 91 f6 00 	lds	r24, 0x00F6
    199a:	90 91 f7 00 	lds	r25, 0x00F7

				while (Pipe_BytesInPipe() && DataLen)
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	89 f0       	breq	.+34     	; 0x19c4 <USB_Host_SendControlRequest+0x206>
    19a2:	20 97       	sbiw	r28, 0x00	; 0
    19a4:	d1 f0       	breq	.+52     	; 0x19da <USB_Host_SendControlRequest+0x21c>
    19a6:	f8 01       	movw	r30, r16
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <USB_Host_SendControlRequest+0x1f0>
    19aa:	20 97       	sbiw	r28, 0x00	; 0
    19ac:	b1 f0       	breq	.+44     	; 0x19da <USB_Host_SendControlRequest+0x21c>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    19ae:	80 91 af 00 	lds	r24, 0x00AF
				{
					*(DataStream++) = Pipe_Read_8();
    19b2:	81 93       	st	Z+, r24
    19b4:	8f 01       	movw	r16, r30
					DataLen--;
    19b6:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    19b8:	80 91 f6 00 	lds	r24, 0x00F6
    19bc:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	99 f7       	brne	.-26     	; 0x19aa <USB_Host_SendControlRequest+0x1ec>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    19c4:	80 91 a9 00 	lds	r24, 0x00A9
    19c8:	80 64       	ori	r24, 0x40	; 64
    19ca:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    19ce:	80 91 a6 00 	lds	r24, 0x00A6
    19d2:	8e 77       	andi	r24, 0x7E	; 126
    19d4:	80 93 a6 00 	sts	0x00A6, r24
    19d8:	c9 cf       	rjmp	.-110    	; 0x196c <USB_Host_SendControlRequest+0x1ae>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    19da:	80 91 a9 00 	lds	r24, 0x00A9
    19de:	80 64       	ori	r24, 0x40	; 64
    19e0:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    19e4:	80 91 a6 00 	lds	r24, 0x00A6
    19e8:	8e 77       	andi	r24, 0x7E	; 126
    19ea:	80 93 a6 00 	sts	0x00A6, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    19ee:	80 91 aa 00 	lds	r24, 0x00AA
    19f2:	8f 7c       	andi	r24, 0xCF	; 207
    19f4:	80 62       	ori	r24, 0x20	; 32
    19f6:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    19fa:	80 91 a9 00 	lds	r24, 0x00A9
    19fe:	8f 7b       	andi	r24, 0xBF	; 191
    1a00:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a04:	82 e0       	ldi	r24, 0x02	; 2
    1a06:	9c de       	rcall	.-712    	; 0x1740 <USB_Host_WaitForIOS>
    1a08:	88 23       	and	r24, r24
    1a0a:	09 f0       	breq	.+2      	; 0x1a0e <USB_Host_SendControlRequest+0x250>
    1a0c:	2c cf       	rjmp	.-424    	; 0x1866 <USB_Host_SendControlRequest+0xa8>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1a0e:	80 91 a6 00 	lds	r24, 0x00A6
    1a12:	8b 77       	andi	r24, 0x7B	; 123
    1a14:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1a18:	82 e0       	ldi	r24, 0x02	; 2
    1a1a:	92 de       	rcall	.-732    	; 0x1740 <USB_Host_WaitForIOS>
    1a1c:	24 cf       	rjmp	.-440    	; 0x1866 <USB_Host_SendControlRequest+0xa8>

00001a1e <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    1a1e:	1f 93       	push	r17
    1a20:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    1a22:	10 92 61 04 	sts	0x0461, r1
    1a26:	89 e0       	ldi	r24, 0x09	; 9
    1a28:	80 93 62 04 	sts	0x0462, r24
    1a2c:	10 93 63 04 	sts	0x0463, r17
    1a30:	10 92 64 04 	sts	0x0464, r1
    1a34:	10 92 66 04 	sts	0x0466, r1
    1a38:	10 92 65 04 	sts	0x0465, r1
    1a3c:	10 92 68 04 	sts	0x0468, r1
    1a40:	10 92 67 04 	sts	0x0467, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1a44:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	b8 de       	rcall	.-656    	; 0x17be <USB_Host_SendControlRequest>
    1a4e:	88 23       	and	r24, r24
    1a50:	39 f4       	brne	.+14     	; 0x1a60 <USB_Host_SetDeviceConfiguration+0x42>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    1a52:	10 93 5f 04 	sts	0x045F, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1a56:	11 23       	and	r17, r17
    1a58:	29 f4       	brne	.+10     	; 0x1a64 <USB_Host_SetDeviceConfiguration+0x46>
    1a5a:	9a e0       	ldi	r25, 0x0A	; 10
    1a5c:	90 93 69 04 	sts	0x0469, r25
	}

	return ErrorCode;
}
    1a60:	1f 91       	pop	r17
    1a62:	08 95       	ret
	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    1a64:	9b e0       	ldi	r25, 0x0B	; 11
    1a66:	fa cf       	rjmp	.-12     	; 0x1a5c <USB_Host_SetDeviceConfiguration+0x3e>

00001a68 <USB_Host_ClearEndpointStall>:
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    1a68:	92 e0       	ldi	r25, 0x02	; 2
    1a6a:	90 93 61 04 	sts	0x0461, r25
    1a6e:	91 e0       	ldi	r25, 0x01	; 1
    1a70:	90 93 62 04 	sts	0x0462, r25
    1a74:	10 92 64 04 	sts	0x0464, r1
    1a78:	10 92 63 04 	sts	0x0463, r1
    1a7c:	80 93 65 04 	sts	0x0465, r24
    1a80:	10 92 66 04 	sts	0x0466, r1
    1a84:	10 92 68 04 	sts	0x0468, r1
    1a88:	10 92 67 04 	sts	0x0467, r1
    1a8c:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e0       	ldi	r25, 0x00	; 0
}
    1a94:	94 ce       	rjmp	.-728    	; 0x17be <USB_Host_SendControlRequest>

00001a96 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1a96:	1f 93       	push	r17
    1a98:	cf 93       	push	r28
    1a9a:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1a9c:	c7 ea       	ldi	r28, 0xA7	; 167
    1a9e:	d0 e0       	ldi	r29, 0x00	; 0
    1aa0:	18 81       	ld	r17, Y
    1aa2:	1f 70       	andi	r17, 0x0F	; 15
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1aa4:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    1aa6:	08 d8       	rcall	.-4080   	; 0xab8 <USB_Host_ProcessNextHostState>
    1aa8:	18 83       	st	Y, r17
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	1f 91       	pop	r17
    1ab0:	08 95       	ret

00001ab2 <DCOMP_SI_Host_NextSIInterface>:

	return SI_ENUMERROR_NoError;
}

uint8_t DCOMP_SI_Host_NextSIInterface(void* const CurrentDescriptor)
{
    1ab2:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1ab4:	81 81       	ldd	r24, Z+1	; 0x01
    1ab6:	84 30       	cpi	r24, 0x04	; 4
    1ab8:	11 f0       	breq	.+4      	; 0x1abe <DCOMP_SI_Host_NextSIInterface+0xc>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1aba:	82 e0       	ldi	r24, 0x02	; 2
    1abc:	08 95       	ret

	if (Header->Type == DTYPE_Interface)
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
    1abe:	85 81       	ldd	r24, Z+5	; 0x05
    1ac0:	86 30       	cpi	r24, 0x06	; 6
    1ac2:	d9 f7       	brne	.-10     	; 0x1aba <DCOMP_SI_Host_NextSIInterface+0x8>
    1ac4:	86 81       	ldd	r24, Z+6	; 0x06
    1ac6:	81 30       	cpi	r24, 0x01	; 1
    1ac8:	c1 f7       	brne	.-16     	; 0x1aba <DCOMP_SI_Host_NextSIInterface+0x8>
		    (Interface->SubClass == SI_CSCP_StillImageSubclass) &&
    1aca:	87 81       	ldd	r24, Z+7	; 0x07
    1acc:	81 30       	cpi	r24, 0x01	; 1
    1ace:	a9 f7       	brne	.-22     	; 0x1aba <DCOMP_SI_Host_NextSIInterface+0x8>
		    (Interface->Protocol == SI_CSCP_BulkOnlyProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1ad2:	08 95       	ret

00001ad4 <DCOMP_SI_Host_NextSIInterfaceEndpoint>:

uint8_t DCOMP_SI_Host_NextSIInterfaceEndpoint(void* const CurrentDescriptor)
{
    1ad4:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    1ad6:	81 81       	ldd	r24, Z+1	; 0x01
    1ad8:	85 30       	cpi	r24, 0x05	; 5
    1ada:	21 f0       	breq	.+8      	; 0x1ae4 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x10>
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    1adc:	84 30       	cpi	r24, 0x04	; 4
    1ade:	69 f0       	breq	.+26     	; 0x1afa <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x26>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1ae0:	82 e0       	ldi	r24, 0x02	; 2
    1ae2:	08 95       	ret

	if (Header->Type == DTYPE_Endpoint)
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    1ae4:	83 81       	ldd	r24, Z+3	; 0x03
    1ae6:	83 70       	andi	r24, 0x03	; 3

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    1ae8:	82 50       	subi	r24, 0x02	; 2
    1aea:	82 30       	cpi	r24, 0x02	; 2
    1aec:	c8 f7       	brcc	.-14     	; 0x1ae0 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0xc>
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
    1aee:	82 81       	ldd	r24, Z+2	; 0x02
    1af0:	9c da       	rcall	.-2760   	; 0x102a <Pipe_IsEndpointBound>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    1af2:	88 23       	and	r24, r24
    1af4:	a9 f7       	brne	.-22     	; 0x1ae0 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0xc>
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		{
			return DESCRIPTOR_SEARCH_Found;
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	08 95       	ret
		}
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1afc:	08 95       	ret

00001afe <SI_Host_ConfigurePipes>:
#include "StillImageClassHost.h"

uint8_t SI_Host_ConfigurePipes(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                               uint16_t ConfigDescriptorSize,
                               void* ConfigDescriptorData)
{
    1afe:	4f 92       	push	r4
    1b00:	5f 92       	push	r5
    1b02:	6f 92       	push	r6
    1b04:	7f 92       	push	r7
    1b06:	8f 92       	push	r8
    1b08:	9f 92       	push	r9
    1b0a:	af 92       	push	r10
    1b0c:	bf 92       	push	r11
    1b0e:	cf 92       	push	r12
    1b10:	df 92       	push	r13
    1b12:	ef 92       	push	r14
    1b14:	ff 92       	push	r15
    1b16:	0f 93       	push	r16
    1b18:	1f 93       	push	r17
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	00 d0       	rcall	.+0      	; 0x1b20 <SI_Host_ConfigurePipes+0x22>
    1b20:	00 d0       	rcall	.+0      	; 0x1b22 <SI_Host_ConfigurePipes+0x24>
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	6c 01       	movw	r12, r24
    1b28:	7a 83       	std	Y+2, r23	; 0x02
    1b2a:	69 83       	std	Y+1, r22	; 0x01
    1b2c:	5c 83       	std	Y+4, r21	; 0x04
    1b2e:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint     = NULL;
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;
	USB_Descriptor_Interface_t* StillImageInterface = NULL;

	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));
    1b30:	06 96       	adiw	r24, 0x06	; 6
    1b32:	fc 01       	movw	r30, r24
    1b34:	8d e0       	ldi	r24, 0x0D	; 13
    1b36:	df 01       	movw	r26, r30
    1b38:	1d 92       	st	X+, r1
    1b3a:	8a 95       	dec	r24
    1b3c:	e9 f7       	brne	.-6      	; 0x1b38 <SI_Host_ConfigurePipes+0x3a>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1b3e:	eb 81       	ldd	r30, Y+3	; 0x03
    1b40:	fc 81       	ldd	r31, Y+4	; 0x04
    1b42:	81 81       	ldd	r24, Z+1	; 0x01
    1b44:	82 30       	cpi	r24, 0x02	; 2
    1b46:	b1 f0       	breq	.+44     	; 0x1b74 <SI_Host_ConfigurePipes+0x76>
	  return SI_ENUMERROR_InvalidConfigDescriptor;
    1b48:	81 e0       	ldi	r24, 0x01	; 1

	SIInterfaceInfo->State.InterfaceNumber = StillImageInterface->InterfaceNumber;
	SIInterfaceInfo->State.IsActive = true;

	return SI_ENUMERROR_NoError;
}
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	cf 91       	pop	r28
    1b54:	df 91       	pop	r29
    1b56:	1f 91       	pop	r17
    1b58:	0f 91       	pop	r16
    1b5a:	ff 90       	pop	r15
    1b5c:	ef 90       	pop	r14
    1b5e:	df 90       	pop	r13
    1b60:	cf 90       	pop	r12
    1b62:	bf 90       	pop	r11
    1b64:	af 90       	pop	r10
    1b66:	9f 90       	pop	r9
    1b68:	8f 90       	pop	r8
    1b6a:	7f 90       	pop	r7
    1b6c:	6f 90       	pop	r6
    1b6e:	5f 90       	pop	r5
    1b70:	4f 90       	pop	r4
    1b72:	08 95       	ret
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;
	USB_Descriptor_Interface_t* StillImageInterface = NULL;

	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1b74:	88 24       	eor	r8, r8
    1b76:	99 24       	eor	r9, r9
    1b78:	66 24       	eor	r6, r6
    1b7a:	77 24       	eor	r7, r7
    1b7c:	aa 24       	eor	r10, r10
    1b7e:	bb 24       	eor	r11, r11
    1b80:	44 24       	eor	r4, r4
    1b82:	55 24       	eor	r5, r5
    1b84:	f3 e0       	ldi	r31, 0x03	; 3
    1b86:	ef 2e       	mov	r14, r31
    1b88:	f1 2c       	mov	r15, r1
    1b8a:	ec 0e       	add	r14, r28
    1b8c:	fd 1e       	adc	r15, r29
    1b8e:	8e 01       	movw	r16, r28
    1b90:	0f 5f       	subi	r16, 0xFF	; 255
    1b92:	1f 4f       	sbci	r17, 0xFF	; 255
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
	{
		if (!(StillImageInterface) ||
    1b94:	81 14       	cp	r8, r1
    1b96:	91 04       	cpc	r9, r1
    1b98:	39 f0       	breq	.+14     	; 0x1ba8 <SI_Host_ConfigurePipes+0xaa>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1b9a:	c8 01       	movw	r24, r16
    1b9c:	b7 01       	movw	r22, r14
    1b9e:	4a e6       	ldi	r20, 0x6A	; 106
    1ba0:	5d e0       	ldi	r21, 0x0D	; 13
    1ba2:	8a dd       	rcall	.-1260   	; 0x16b8 <USB_GetNextDescriptorComp>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
	{
		if (!(StillImageInterface) ||
    1ba4:	88 23       	and	r24, r24
    1ba6:	d1 f0       	breq	.+52     	; 0x1bdc <SI_Host_ConfigurePipes+0xde>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_SI_Host_NextSIInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1ba8:	c8 01       	movw	r24, r16
    1baa:	b7 01       	movw	r22, r14
    1bac:	49 e5       	ldi	r20, 0x59	; 89
    1bae:	5d e0       	ldi	r21, 0x0D	; 13
    1bb0:	83 dd       	rcall	.-1274   	; 0x16b8 <USB_GetNextDescriptorComp>
    1bb2:	88 23       	and	r24, r24
    1bb4:	09 f0       	breq	.+2      	; 0x1bb8 <SI_Host_ConfigurePipes+0xba>
    1bb6:	8e c0       	rjmp	.+284    	; 0x1cd4 <SI_Host_ConfigurePipes+0x1d6>
			                              DCOMP_SI_Host_NextSIInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return SI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			StillImageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1bb8:	8b 80       	ldd	r8, Y+3	; 0x03
    1bba:	9c 80       	ldd	r9, Y+4	; 0x04

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
			EventsEndpoint  = NULL;
    1bbc:	66 24       	eor	r6, r6
    1bbe:	77 24       	eor	r7, r7
			}

			StillImageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    1bc0:	aa 24       	eor	r10, r10
    1bc2:	bb 24       	eor	r11, r11
			                              DCOMP_SI_Host_NextSIInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return SI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			StillImageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1bc4:	44 24       	eor	r4, r4
    1bc6:	55 24       	eor	r5, r5
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
	{
		if (!(StillImageInterface) ||
    1bc8:	81 14       	cp	r8, r1
    1bca:	91 04       	cpc	r9, r1
    1bcc:	69 f3       	breq	.-38     	; 0x1ba8 <SI_Host_ConfigurePipes+0xaa>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1bce:	c8 01       	movw	r24, r16
    1bd0:	b7 01       	movw	r22, r14
    1bd2:	4a e6       	ldi	r20, 0x6A	; 106
    1bd4:	5d e0       	ldi	r21, 0x0D	; 13
    1bd6:	70 dd       	rcall	.-1312   	; 0x16b8 <USB_GetNextDescriptorComp>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
	{
		if (!(StillImageInterface) ||
    1bd8:	88 23       	and	r24, r24
    1bda:	31 f7       	brne	.-52     	; 0x1ba8 <SI_Host_ConfigurePipes+0xaa>
			EventsEndpoint  = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1bdc:	eb 81       	ldd	r30, Y+3	; 0x03
    1bde:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    1be0:	82 81       	ldd	r24, Z+2	; 0x02
    1be2:	87 fd       	sbrc	r24, 7
    1be4:	79 c0       	rjmp	.+242    	; 0x1cd8 <SI_Host_ConfigurePipes+0x1da>
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
    1be6:	5f 01       	movw	r10, r30
	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
    1be8:	41 14       	cp	r4, r1
    1bea:	51 04       	cpc	r5, r1
    1bec:	99 f2       	breq	.-90     	; 0x1b94 <SI_Host_ConfigurePipes+0x96>
    1bee:	a1 14       	cp	r10, r1
    1bf0:	b1 04       	cpc	r11, r1
    1bf2:	81 f2       	breq	.-96     	; 0x1b94 <SI_Host_ConfigurePipes+0x96>
    1bf4:	61 14       	cp	r6, r1
    1bf6:	71 04       	cpc	r7, r1
    1bf8:	69 f2       	breq	.-102    	; 0x1b94 <SI_Host_ConfigurePipes+0x96>
		uint8_t  Token;
		uint8_t  EndpointAddress;
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
    1bfa:	f6 01       	movw	r30, r12
    1bfc:	80 81       	ld	r24, Z
    1bfe:	81 30       	cpi	r24, 0x01	; 1
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <SI_Host_ConfigurePipes+0x106>
    1c02:	72 c0       	rjmp	.+228    	; 0x1ce8 <SI_Host_ConfigurePipes+0x1ea>
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
    1c04:	d6 01       	movw	r26, r12
    1c06:	12 96       	adiw	r26, 0x02	; 2
    1c08:	9c 91       	ld	r25, X
    1c0a:	12 97       	sbiw	r26, 0x02	; 2
    1c0c:	91 30       	cpi	r25, 0x01	; 1
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <SI_Host_ConfigurePipes+0x114>
    1c10:	43 c1       	rjmp	.+646    	; 0x1e98 <SI_Host_ConfigurePipes+0x39a>
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
    1c12:	14 96       	adiw	r26, 0x04	; 4
    1c14:	9c 91       	ld	r25, X
    1c16:	14 97       	sbiw	r26, 0x04	; 4
    1c18:	91 30       	cpi	r25, 0x01	; 1
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <SI_Host_ConfigurePipes+0x120>
    1c1c:	9e c1       	rjmp	.+828    	; 0x1f5a <SI_Host_ConfigurePipes+0x45c>
		uint8_t  Token;
		uint8_t  EndpointAddress;
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
    1c1e:	82 30       	cpi	r24, 0x02	; 2
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <SI_Host_ConfigurePipes+0x126>
    1c22:	80 c0       	rjmp	.+256    	; 0x1d24 <SI_Host_ConfigurePipes+0x226>
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
    1c24:	d6 01       	movw	r26, r12
    1c26:	12 96       	adiw	r26, 0x02	; 2
    1c28:	9c 91       	ld	r25, X
    1c2a:	12 97       	sbiw	r26, 0x02	; 2
    1c2c:	92 30       	cpi	r25, 0x02	; 2
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <SI_Host_ConfigurePipes+0x134>
    1c30:	43 c1       	rjmp	.+646    	; 0x1eb8 <SI_Host_ConfigurePipes+0x3ba>
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
    1c32:	14 96       	adiw	r26, 0x04	; 4
    1c34:	9c 91       	ld	r25, X
    1c36:	14 97       	sbiw	r26, 0x04	; 4
    1c38:	92 30       	cpi	r25, 0x02	; 2
    1c3a:	09 f4       	brne	.+2      	; 0x1c3e <SI_Host_ConfigurePipes+0x140>
    1c3c:	9d c1       	rjmp	.+826    	; 0x1f78 <SI_Host_ConfigurePipes+0x47a>
		uint8_t  Token;
		uint8_t  EndpointAddress;
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
    1c3e:	83 30       	cpi	r24, 0x03	; 3
    1c40:	09 f4       	brne	.+2      	; 0x1c44 <SI_Host_ConfigurePipes+0x146>
    1c42:	90 c0       	rjmp	.+288    	; 0x1d64 <SI_Host_ConfigurePipes+0x266>
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
    1c44:	d6 01       	movw	r26, r12
    1c46:	12 96       	adiw	r26, 0x02	; 2
    1c48:	9c 91       	ld	r25, X
    1c4a:	12 97       	sbiw	r26, 0x02	; 2
    1c4c:	93 30       	cpi	r25, 0x03	; 3
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <SI_Host_ConfigurePipes+0x154>
    1c50:	43 c1       	rjmp	.+646    	; 0x1ed8 <SI_Host_ConfigurePipes+0x3da>
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
    1c52:	14 96       	adiw	r26, 0x04	; 4
    1c54:	9c 91       	ld	r25, X
    1c56:	14 97       	sbiw	r26, 0x04	; 4
    1c58:	93 30       	cpi	r25, 0x03	; 3
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <SI_Host_ConfigurePipes+0x160>
    1c5c:	9c c1       	rjmp	.+824    	; 0x1f96 <SI_Host_ConfigurePipes+0x498>
		uint8_t  Token;
		uint8_t  EndpointAddress;
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
    1c5e:	84 30       	cpi	r24, 0x04	; 4
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <SI_Host_ConfigurePipes+0x166>
    1c62:	a0 c0       	rjmp	.+320    	; 0x1da4 <SI_Host_ConfigurePipes+0x2a6>
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
    1c64:	d6 01       	movw	r26, r12
    1c66:	12 96       	adiw	r26, 0x02	; 2
    1c68:	9c 91       	ld	r25, X
    1c6a:	12 97       	sbiw	r26, 0x02	; 2
    1c6c:	94 30       	cpi	r25, 0x04	; 4
    1c6e:	09 f4       	brne	.+2      	; 0x1c72 <SI_Host_ConfigurePipes+0x174>
    1c70:	43 c1       	rjmp	.+646    	; 0x1ef8 <SI_Host_ConfigurePipes+0x3fa>
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
    1c72:	14 96       	adiw	r26, 0x04	; 4
    1c74:	9c 91       	ld	r25, X
    1c76:	14 97       	sbiw	r26, 0x04	; 4
    1c78:	94 30       	cpi	r25, 0x04	; 4
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <SI_Host_ConfigurePipes+0x180>
    1c7c:	9b c1       	rjmp	.+822    	; 0x1fb4 <SI_Host_ConfigurePipes+0x4b6>
		uint8_t  Token;
		uint8_t  EndpointAddress;
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
    1c7e:	85 30       	cpi	r24, 0x05	; 5
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <SI_Host_ConfigurePipes+0x186>
    1c82:	ba c0       	rjmp	.+372    	; 0x1df8 <SI_Host_ConfigurePipes+0x2fa>
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
    1c84:	d6 01       	movw	r26, r12
    1c86:	12 96       	adiw	r26, 0x02	; 2
    1c88:	9c 91       	ld	r25, X
    1c8a:	12 97       	sbiw	r26, 0x02	; 2
    1c8c:	95 30       	cpi	r25, 0x05	; 5
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <SI_Host_ConfigurePipes+0x194>
    1c90:	43 c1       	rjmp	.+646    	; 0x1f18 <SI_Host_ConfigurePipes+0x41a>
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
    1c92:	14 96       	adiw	r26, 0x04	; 4
    1c94:	9c 91       	ld	r25, X
    1c96:	14 97       	sbiw	r26, 0x04	; 4
    1c98:	95 30       	cpi	r25, 0x05	; 5
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <SI_Host_ConfigurePipes+0x1a0>
    1c9c:	9a c1       	rjmp	.+820    	; 0x1fd2 <SI_Host_ConfigurePipes+0x4d4>
		uint8_t  Token;
		uint8_t  EndpointAddress;
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
    1c9e:	86 30       	cpi	r24, 0x06	; 6
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <SI_Host_ConfigurePipes+0x1a6>
    1ca2:	ce c0       	rjmp	.+412    	; 0x1e40 <SI_Host_ConfigurePipes+0x342>
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
    1ca4:	d6 01       	movw	r26, r12
    1ca6:	12 96       	adiw	r26, 0x02	; 2
    1ca8:	8c 91       	ld	r24, X
    1caa:	12 97       	sbiw	r26, 0x02	; 2
    1cac:	86 30       	cpi	r24, 0x06	; 6
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <SI_Host_ConfigurePipes+0x1b4>
    1cb0:	45 c1       	rjmp	.+650    	; 0x1f3c <SI_Host_ConfigurePipes+0x43e>
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
    1cb2:	d6 01       	movw	r26, r12
    1cb4:	14 96       	adiw	r26, 0x04	; 4
    1cb6:	8c 91       	ld	r24, X
    1cb8:	14 97       	sbiw	r26, 0x04	; 4
    1cba:	86 30       	cpi	r24, 0x06	; 6
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <SI_Host_ConfigurePipes+0x1c2>
    1cbe:	98 c1       	rjmp	.+816    	; 0x1ff0 <SI_Host_ConfigurePipes+0x4f2>

		if (InterruptPeriod)
		  Pipe_SetInterruptPeriod(InterruptPeriod);
	}

	SIInterfaceInfo->State.InterfaceNumber = StillImageInterface->InterfaceNumber;
    1cc0:	d4 01       	movw	r26, r8
    1cc2:	12 96       	adiw	r26, 0x02	; 2
    1cc4:	8c 91       	ld	r24, X
    1cc6:	12 97       	sbiw	r26, 0x02	; 2
    1cc8:	f6 01       	movw	r30, r12
    1cca:	87 83       	std	Z+7, r24	; 0x07
	SIInterfaceInfo->State.IsActive = true;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	86 83       	std	Z+6, r24	; 0x06

	return SI_ENUMERROR_NoError;
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	3b cf       	rjmp	.-394    	; 0x1b4a <SI_Host_ConfigurePipes+0x4c>
		                              DCOMP_SI_Host_NextSIInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_SI_Host_NextSIInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return SI_ENUMERROR_NoCompatibleInterfaceFound;
    1cd4:	82 e0       	ldi	r24, 0x02	; 2
    1cd6:	39 cf       	rjmp	.-398    	; 0x1b4a <SI_Host_ConfigurePipes+0x4c>

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
    1cd8:	83 81       	ldd	r24, Z+3	; 0x03
    1cda:	83 70       	andi	r24, 0x03	; 3
    1cdc:	83 30       	cpi	r24, 0x03	; 3
    1cde:	11 f0       	breq	.+4      	; 0x1ce4 <SI_Host_ConfigurePipes+0x1e6>
			  EventsEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
    1ce0:	2f 01       	movw	r4, r30
    1ce2:	82 cf       	rjmp	.-252    	; 0x1be8 <SI_Host_ConfigurePipes+0xea>
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  EventsEndpoint = EndpointData;
    1ce4:	3f 01       	movw	r6, r30
    1ce6:	80 cf       	rjmp	.-256    	; 0x1be8 <SI_Host_ConfigurePipes+0xea>
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
		{
			Size            = DataINEndpoint->EndpointSize;
    1ce8:	d2 01       	movw	r26, r4
    1cea:	14 96       	adiw	r26, 0x04	; 4
    1cec:	0d 91       	ld	r16, X+
    1cee:	1c 91       	ld	r17, X
    1cf0:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    1cf2:	12 96       	adiw	r26, 0x02	; 2
    1cf4:	2c 91       	ld	r18, X
    1cf6:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
    1cf8:	f6 01       	movw	r30, r12
    1cfa:	81 81       	ldd	r24, Z+1	; 0x01
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1cfc:	11 87       	std	Z+9, r17	; 0x09
    1cfe:	00 87       	std	Z+8, r16	; 0x08
			Size            = DataINEndpoint->EndpointSize;
			EndpointAddress = DataINEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
			InterruptPeriod = 0;
    1d00:	ff 24       	eor	r15, r15

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
		{
			Size            = DataINEndpoint->EndpointSize;
			EndpointAddress = DataINEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
    1d02:	40 e1       	ldi	r20, 0x10	; 16
			Type            = EP_TYPE_BULK;
    1d04:	62 e0       	ldi	r22, 0x02	; 2
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1d06:	88 23       	and	r24, r24
    1d08:	59 f1       	breq	.+86     	; 0x1d60 <SI_Host_ConfigurePipes+0x262>
    1d0a:	e4 e0       	ldi	r30, 0x04	; 4
    1d0c:	ee 2e       	mov	r14, r30
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	ba d8       	rcall	.-3724   	; 0xe86 <Pipe_ConfigurePipe>
    1d12:	88 23       	and	r24, r24
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <SI_Host_ConfigurePipes+0x21a>
    1d16:	10 c1       	rjmp	.+544    	; 0x1f38 <SI_Host_ConfigurePipes+0x43a>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return SI_ENUMERROR_PipeConfigurationFailed;
		}

		if (InterruptPeriod)
    1d18:	ff 20       	and	r15, r15
    1d1a:	09 f0       	breq	.+2      	; 0x1d1e <SI_Host_ConfigurePipes+0x220>
    1d1c:	61 c0       	rjmp	.+194    	; 0x1de0 <SI_Host_ConfigurePipes+0x2e2>
    1d1e:	d6 01       	movw	r26, r12
    1d20:	8c 91       	ld	r24, X
    1d22:	7d cf       	rjmp	.-262    	; 0x1c1e <SI_Host_ConfigurePipes+0x120>
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
		{
			Size            = DataINEndpoint->EndpointSize;
    1d24:	d2 01       	movw	r26, r4
    1d26:	14 96       	adiw	r26, 0x04	; 4
    1d28:	0d 91       	ld	r16, X+
    1d2a:	1c 91       	ld	r17, X
    1d2c:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    1d2e:	12 96       	adiw	r26, 0x02	; 2
    1d30:	2c 91       	ld	r18, X
    1d32:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
    1d34:	f6 01       	movw	r30, r12
    1d36:	81 81       	ldd	r24, Z+1	; 0x01
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1d38:	11 87       	std	Z+9, r17	; 0x09
    1d3a:	00 87       	std	Z+8, r16	; 0x08
			Size            = DataINEndpoint->EndpointSize;
			EndpointAddress = DataINEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
			InterruptPeriod = 0;
    1d3c:	ff 24       	eor	r15, r15

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
		{
			Size            = DataINEndpoint->EndpointSize;
			EndpointAddress = DataINEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
    1d3e:	40 e1       	ldi	r20, 0x10	; 16
			Type            = EP_TYPE_BULK;
    1d40:	62 e0       	ldi	r22, 0x02	; 2
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1d42:	88 23       	and	r24, r24
    1d44:	69 f1       	breq	.+90     	; 0x1da0 <SI_Host_ConfigurePipes+0x2a2>
    1d46:	74 e0       	ldi	r23, 0x04	; 4
    1d48:	e7 2e       	mov	r14, r23
    1d4a:	82 e0       	ldi	r24, 0x02	; 2
    1d4c:	9c d8       	rcall	.-3784   	; 0xe86 <Pipe_ConfigurePipe>
    1d4e:	88 23       	and	r24, r24
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <SI_Host_ConfigurePipes+0x256>
    1d52:	f2 c0       	rjmp	.+484    	; 0x1f38 <SI_Host_ConfigurePipes+0x43a>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return SI_ENUMERROR_PipeConfigurationFailed;
		}

		if (InterruptPeriod)
    1d54:	ff 20       	and	r15, r15
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <SI_Host_ConfigurePipes+0x25c>
    1d58:	4a c0       	rjmp	.+148    	; 0x1dee <SI_Host_ConfigurePipes+0x2f0>
    1d5a:	d6 01       	movw	r26, r12
    1d5c:	8c 91       	ld	r24, X
    1d5e:	6f cf       	rjmp	.-290    	; 0x1c3e <SI_Host_ConfigurePipes+0x140>
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1d60:	ee 24       	eor	r14, r14
    1d62:	d5 cf       	rjmp	.-86     	; 0x1d0e <SI_Host_ConfigurePipes+0x210>
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
		{
			Size            = DataINEndpoint->EndpointSize;
    1d64:	d2 01       	movw	r26, r4
    1d66:	14 96       	adiw	r26, 0x04	; 4
    1d68:	0d 91       	ld	r16, X+
    1d6a:	1c 91       	ld	r17, X
    1d6c:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    1d6e:	12 96       	adiw	r26, 0x02	; 2
    1d70:	2c 91       	ld	r18, X
    1d72:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
    1d74:	f6 01       	movw	r30, r12
    1d76:	81 81       	ldd	r24, Z+1	; 0x01
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1d78:	11 87       	std	Z+9, r17	; 0x09
    1d7a:	00 87       	std	Z+8, r16	; 0x08
			Size            = DataINEndpoint->EndpointSize;
			EndpointAddress = DataINEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
			InterruptPeriod = 0;
    1d7c:	ff 24       	eor	r15, r15

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
		{
			Size            = DataINEndpoint->EndpointSize;
			EndpointAddress = DataINEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
    1d7e:	40 e1       	ldi	r20, 0x10	; 16
			Type            = EP_TYPE_BULK;
    1d80:	62 e0       	ldi	r22, 0x02	; 2
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1d82:	88 23       	and	r24, r24
    1d84:	91 f1       	breq	.+100    	; 0x1dea <SI_Host_ConfigurePipes+0x2ec>
    1d86:	54 e0       	ldi	r21, 0x04	; 4
    1d88:	e5 2e       	mov	r14, r21
    1d8a:	83 e0       	ldi	r24, 0x03	; 3
    1d8c:	7c d8       	rcall	.-3848   	; 0xe86 <Pipe_ConfigurePipe>
    1d8e:	88 23       	and	r24, r24
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <SI_Host_ConfigurePipes+0x296>
    1d92:	d2 c0       	rjmp	.+420    	; 0x1f38 <SI_Host_ConfigurePipes+0x43a>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return SI_ENUMERROR_PipeConfigurationFailed;
		}

		if (InterruptPeriod)
    1d94:	ff 20       	and	r15, r15
    1d96:	09 f0       	breq	.+2      	; 0x1d9a <SI_Host_ConfigurePipes+0x29c>
    1d98:	4e c0       	rjmp	.+156    	; 0x1e36 <SI_Host_ConfigurePipes+0x338>
    1d9a:	d6 01       	movw	r26, r12
    1d9c:	8c 91       	ld	r24, X
    1d9e:	5f cf       	rjmp	.-322    	; 0x1c5e <SI_Host_ConfigurePipes+0x160>
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1da0:	ee 24       	eor	r14, r14
    1da2:	d3 cf       	rjmp	.-90     	; 0x1d4a <SI_Host_ConfigurePipes+0x24c>
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
		{
			Size            = DataINEndpoint->EndpointSize;
    1da4:	d2 01       	movw	r26, r4
    1da6:	14 96       	adiw	r26, 0x04	; 4
    1da8:	0d 91       	ld	r16, X+
    1daa:	1c 91       	ld	r17, X
    1dac:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    1dae:	12 96       	adiw	r26, 0x02	; 2
    1db0:	2c 91       	ld	r18, X
    1db2:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
    1db4:	f6 01       	movw	r30, r12
    1db6:	81 81       	ldd	r24, Z+1	; 0x01
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1db8:	11 87       	std	Z+9, r17	; 0x09
    1dba:	00 87       	std	Z+8, r16	; 0x08
			Size            = DataINEndpoint->EndpointSize;
			EndpointAddress = DataINEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
			InterruptPeriod = 0;
    1dbc:	ff 24       	eor	r15, r15

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
		{
			Size            = DataINEndpoint->EndpointSize;
			EndpointAddress = DataINEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
    1dbe:	40 e1       	ldi	r20, 0x10	; 16
			Type            = EP_TYPE_BULK;
    1dc0:	62 e0       	ldi	r22, 0x02	; 2
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1dc2:	88 23       	and	r24, r24
    1dc4:	b1 f1       	breq	.+108    	; 0x1e32 <SI_Host_ConfigurePipes+0x334>
    1dc6:	34 e0       	ldi	r19, 0x04	; 4
    1dc8:	e3 2e       	mov	r14, r19
    1dca:	84 e0       	ldi	r24, 0x04	; 4
    1dcc:	5c d8       	rcall	.-3912   	; 0xe86 <Pipe_ConfigurePipe>
    1dce:	88 23       	and	r24, r24
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <SI_Host_ConfigurePipes+0x2d6>
    1dd2:	b2 c0       	rjmp	.+356    	; 0x1f38 <SI_Host_ConfigurePipes+0x43a>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return SI_ENUMERROR_PipeConfigurationFailed;
		}

		if (InterruptPeriod)
    1dd4:	ff 20       	and	r15, r15
    1dd6:	09 f0       	breq	.+2      	; 0x1dda <SI_Host_ConfigurePipes+0x2dc>
    1dd8:	53 c0       	rjmp	.+166    	; 0x1e80 <SI_Host_ConfigurePipes+0x382>
    1dda:	d6 01       	movw	r26, r12
    1ddc:	8c 91       	ld	r24, X
    1dde:	4f cf       	rjmp	.-354    	; 0x1c7e <SI_Host_ConfigurePipes+0x180>
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    1de0:	f0 92 ad 00 	sts	0x00AD, r15
    1de4:	f6 01       	movw	r30, r12
    1de6:	80 81       	ld	r24, Z
    1de8:	1a cf       	rjmp	.-460    	; 0x1c1e <SI_Host_ConfigurePipes+0x120>
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1dea:	ee 24       	eor	r14, r14
    1dec:	ce cf       	rjmp	.-100    	; 0x1d8a <SI_Host_ConfigurePipes+0x28c>
    1dee:	f0 92 ad 00 	sts	0x00AD, r15
    1df2:	f6 01       	movw	r30, r12
    1df4:	80 81       	ld	r24, Z
    1df6:	23 cf       	rjmp	.-442    	; 0x1c3e <SI_Host_ConfigurePipes+0x140>
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
		{
			Size            = DataINEndpoint->EndpointSize;
    1df8:	d2 01       	movw	r26, r4
    1dfa:	14 96       	adiw	r26, 0x04	; 4
    1dfc:	0d 91       	ld	r16, X+
    1dfe:	1c 91       	ld	r17, X
    1e00:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    1e02:	12 96       	adiw	r26, 0x02	; 2
    1e04:	2c 91       	ld	r18, X
    1e06:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
    1e08:	f6 01       	movw	r30, r12
    1e0a:	81 81       	ldd	r24, Z+1	; 0x01
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1e0c:	11 87       	std	Z+9, r17	; 0x09
    1e0e:	00 87       	std	Z+8, r16	; 0x08
			Size            = DataINEndpoint->EndpointSize;
			EndpointAddress = DataINEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
			InterruptPeriod = 0;
    1e10:	ff 24       	eor	r15, r15

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
		{
			Size            = DataINEndpoint->EndpointSize;
			EndpointAddress = DataINEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
    1e12:	40 e1       	ldi	r20, 0x10	; 16
			Type            = EP_TYPE_BULK;
    1e14:	62 e0       	ldi	r22, 0x02	; 2
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1e16:	88 23       	and	r24, r24
    1e18:	89 f1       	breq	.+98     	; 0x1e7c <SI_Host_ConfigurePipes+0x37e>
    1e1a:	94 e0       	ldi	r25, 0x04	; 4
    1e1c:	e9 2e       	mov	r14, r25
    1e1e:	85 e0       	ldi	r24, 0x05	; 5
    1e20:	32 d8       	rcall	.-3996   	; 0xe86 <Pipe_ConfigurePipe>
    1e22:	88 23       	and	r24, r24
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <SI_Host_ConfigurePipes+0x32a>
    1e26:	88 c0       	rjmp	.+272    	; 0x1f38 <SI_Host_ConfigurePipes+0x43a>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return SI_ENUMERROR_PipeConfigurationFailed;
		}

		if (InterruptPeriod)
    1e28:	ff 20       	and	r15, r15
    1e2a:	89 f5       	brne	.+98     	; 0x1e8e <SI_Host_ConfigurePipes+0x390>
    1e2c:	d6 01       	movw	r26, r12
    1e2e:	8c 91       	ld	r24, X
    1e30:	36 cf       	rjmp	.-404    	; 0x1c9e <SI_Host_ConfigurePipes+0x1a0>
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1e32:	ee 24       	eor	r14, r14
    1e34:	ca cf       	rjmp	.-108    	; 0x1dca <SI_Host_ConfigurePipes+0x2cc>
    1e36:	f0 92 ad 00 	sts	0x00AD, r15
    1e3a:	f6 01       	movw	r30, r12
    1e3c:	80 81       	ld	r24, Z
    1e3e:	0f cf       	rjmp	.-482    	; 0x1c5e <SI_Host_ConfigurePipes+0x160>
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
		{
			Size            = DataINEndpoint->EndpointSize;
    1e40:	d2 01       	movw	r26, r4
    1e42:	14 96       	adiw	r26, 0x04	; 4
    1e44:	0d 91       	ld	r16, X+
    1e46:	1c 91       	ld	r17, X
    1e48:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    1e4a:	12 96       	adiw	r26, 0x02	; 2
    1e4c:	2c 91       	ld	r18, X
    1e4e:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
    1e50:	f6 01       	movw	r30, r12
    1e52:	81 81       	ldd	r24, Z+1	; 0x01
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1e54:	11 87       	std	Z+9, r17	; 0x09
    1e56:	00 87       	std	Z+8, r16	; 0x08
			Size            = DataINEndpoint->EndpointSize;
			EndpointAddress = DataINEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
			InterruptPeriod = 0;
    1e58:	ff 24       	eor	r15, r15

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
		{
			Size            = DataINEndpoint->EndpointSize;
			EndpointAddress = DataINEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
    1e5a:	40 e1       	ldi	r20, 0x10	; 16
			Type            = EP_TYPE_BULK;
    1e5c:	62 e0       	ldi	r22, 0x02	; 2
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1e5e:	88 23       	and	r24, r24
    1e60:	a1 f0       	breq	.+40     	; 0x1e8a <SI_Host_ConfigurePipes+0x38c>
    1e62:	84 e0       	ldi	r24, 0x04	; 4
    1e64:	e8 2e       	mov	r14, r24
    1e66:	86 e0       	ldi	r24, 0x06	; 6
    1e68:	0e d8       	rcall	.-4068   	; 0xe86 <Pipe_ConfigurePipe>
    1e6a:	88 23       	and	r24, r24
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <SI_Host_ConfigurePipes+0x372>
    1e6e:	64 c0       	rjmp	.+200    	; 0x1f38 <SI_Host_ConfigurePipes+0x43a>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return SI_ENUMERROR_PipeConfigurationFailed;
		}

		if (InterruptPeriod)
    1e70:	ff 20       	and	r15, r15
    1e72:	09 f4       	brne	.+2      	; 0x1e76 <SI_Host_ConfigurePipes+0x378>
    1e74:	25 cf       	rjmp	.-438    	; 0x1cc0 <SI_Host_ConfigurePipes+0x1c2>
    1e76:	f0 92 ad 00 	sts	0x00AD, r15
    1e7a:	22 cf       	rjmp	.-444    	; 0x1cc0 <SI_Host_ConfigurePipes+0x1c2>
		else
		{
			continue;
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    1e7c:	ee 24       	eor	r14, r14
    1e7e:	cf cf       	rjmp	.-98     	; 0x1e1e <SI_Host_ConfigurePipes+0x320>
    1e80:	f0 92 ad 00 	sts	0x00AD, r15
    1e84:	f6 01       	movw	r30, r12
    1e86:	80 81       	ld	r24, Z
    1e88:	fa ce       	rjmp	.-524    	; 0x1c7e <SI_Host_ConfigurePipes+0x180>
    1e8a:	ee 24       	eor	r14, r14
    1e8c:	ec cf       	rjmp	.-40     	; 0x1e66 <SI_Host_ConfigurePipes+0x368>
    1e8e:	f0 92 ad 00 	sts	0x00AD, r15
    1e92:	f6 01       	movw	r30, r12
    1e94:	80 81       	ld	r24, Z
    1e96:	03 cf       	rjmp	.-506    	; 0x1c9e <SI_Host_ConfigurePipes+0x1a0>

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
		{
			Size            = DataOUTEndpoint->EndpointSize;
    1e98:	d5 01       	movw	r26, r10
    1e9a:	14 96       	adiw	r26, 0x04	; 4
    1e9c:	0d 91       	ld	r16, X+
    1e9e:	1c 91       	ld	r17, X
    1ea0:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1ea2:	12 96       	adiw	r26, 0x02	; 2
    1ea4:	2c 91       	ld	r18, X
    1ea6:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
    1ea8:	f6 01       	movw	r30, r12
    1eaa:	83 81       	ldd	r24, Z+3	; 0x03
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    1eac:	13 87       	std	Z+11, r17	; 0x0b
    1eae:	02 87       	std	Z+10, r16	; 0x0a
			Size            = DataOUTEndpoint->EndpointSize;
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = 0;
    1eb0:	ff 24       	eor	r15, r15
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
		{
			Size            = DataOUTEndpoint->EndpointSize;
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_OUT;
    1eb2:	40 e2       	ldi	r20, 0x20	; 32
			Type            = EP_TYPE_BULK;
    1eb4:	62 e0       	ldi	r22, 0x02	; 2
    1eb6:	27 cf       	rjmp	.-434    	; 0x1d06 <SI_Host_ConfigurePipes+0x208>

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
		{
			Size            = DataOUTEndpoint->EndpointSize;
    1eb8:	d5 01       	movw	r26, r10
    1eba:	14 96       	adiw	r26, 0x04	; 4
    1ebc:	0d 91       	ld	r16, X+
    1ebe:	1c 91       	ld	r17, X
    1ec0:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1ec2:	12 96       	adiw	r26, 0x02	; 2
    1ec4:	2c 91       	ld	r18, X
    1ec6:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
    1ec8:	f6 01       	movw	r30, r12
    1eca:	83 81       	ldd	r24, Z+3	; 0x03
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    1ecc:	13 87       	std	Z+11, r17	; 0x0b
    1ece:	02 87       	std	Z+10, r16	; 0x0a
			Size            = DataOUTEndpoint->EndpointSize;
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = 0;
    1ed0:	ff 24       	eor	r15, r15
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
		{
			Size            = DataOUTEndpoint->EndpointSize;
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_OUT;
    1ed2:	40 e2       	ldi	r20, 0x20	; 32
			Type            = EP_TYPE_BULK;
    1ed4:	62 e0       	ldi	r22, 0x02	; 2
    1ed6:	35 cf       	rjmp	.-406    	; 0x1d42 <SI_Host_ConfigurePipes+0x244>

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
		{
			Size            = DataOUTEndpoint->EndpointSize;
    1ed8:	d5 01       	movw	r26, r10
    1eda:	14 96       	adiw	r26, 0x04	; 4
    1edc:	0d 91       	ld	r16, X+
    1ede:	1c 91       	ld	r17, X
    1ee0:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1ee2:	12 96       	adiw	r26, 0x02	; 2
    1ee4:	2c 91       	ld	r18, X
    1ee6:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
    1ee8:	f6 01       	movw	r30, r12
    1eea:	83 81       	ldd	r24, Z+3	; 0x03
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    1eec:	13 87       	std	Z+11, r17	; 0x0b
    1eee:	02 87       	std	Z+10, r16	; 0x0a
			Size            = DataOUTEndpoint->EndpointSize;
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = 0;
    1ef0:	ff 24       	eor	r15, r15
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
		{
			Size            = DataOUTEndpoint->EndpointSize;
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_OUT;
    1ef2:	40 e2       	ldi	r20, 0x20	; 32
			Type            = EP_TYPE_BULK;
    1ef4:	62 e0       	ldi	r22, 0x02	; 2
    1ef6:	45 cf       	rjmp	.-374    	; 0x1d82 <SI_Host_ConfigurePipes+0x284>

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
		{
			Size            = DataOUTEndpoint->EndpointSize;
    1ef8:	d5 01       	movw	r26, r10
    1efa:	14 96       	adiw	r26, 0x04	; 4
    1efc:	0d 91       	ld	r16, X+
    1efe:	1c 91       	ld	r17, X
    1f00:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1f02:	12 96       	adiw	r26, 0x02	; 2
    1f04:	2c 91       	ld	r18, X
    1f06:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
    1f08:	f6 01       	movw	r30, r12
    1f0a:	83 81       	ldd	r24, Z+3	; 0x03
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    1f0c:	13 87       	std	Z+11, r17	; 0x0b
    1f0e:	02 87       	std	Z+10, r16	; 0x0a
			Size            = DataOUTEndpoint->EndpointSize;
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = 0;
    1f10:	ff 24       	eor	r15, r15
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
		{
			Size            = DataOUTEndpoint->EndpointSize;
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_OUT;
    1f12:	40 e2       	ldi	r20, 0x20	; 32
			Type            = EP_TYPE_BULK;
    1f14:	62 e0       	ldi	r22, 0x02	; 2
    1f16:	55 cf       	rjmp	.-342    	; 0x1dc2 <SI_Host_ConfigurePipes+0x2c4>

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
		{
			Size            = DataOUTEndpoint->EndpointSize;
    1f18:	d5 01       	movw	r26, r10
    1f1a:	14 96       	adiw	r26, 0x04	; 4
    1f1c:	0d 91       	ld	r16, X+
    1f1e:	1c 91       	ld	r17, X
    1f20:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1f22:	12 96       	adiw	r26, 0x02	; 2
    1f24:	2c 91       	ld	r18, X
    1f26:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
    1f28:	f6 01       	movw	r30, r12
    1f2a:	83 81       	ldd	r24, Z+3	; 0x03
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    1f2c:	13 87       	std	Z+11, r17	; 0x0b
    1f2e:	02 87       	std	Z+10, r16	; 0x0a
			Size            = DataOUTEndpoint->EndpointSize;
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = 0;
    1f30:	ff 24       	eor	r15, r15
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
		{
			Size            = DataOUTEndpoint->EndpointSize;
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_OUT;
    1f32:	40 e2       	ldi	r20, 0x20	; 32
			Type            = EP_TYPE_BULK;
    1f34:	62 e0       	ldi	r22, 0x02	; 2
    1f36:	6f cf       	rjmp	.-290    	; 0x1e16 <SI_Host_ConfigurePipes+0x318>
		}

		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return SI_ENUMERROR_PipeConfigurationFailed;
    1f38:	83 e0       	ldi	r24, 0x03	; 3
    1f3a:	07 ce       	rjmp	.-1010   	; 0x1b4a <SI_Host_ConfigurePipes+0x4c>

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
		{
			Size            = DataOUTEndpoint->EndpointSize;
    1f3c:	f5 01       	movw	r30, r10
    1f3e:	04 81       	ldd	r16, Z+4	; 0x04
    1f40:	15 81       	ldd	r17, Z+5	; 0x05
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    1f42:	22 81       	ldd	r18, Z+2	; 0x02
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
    1f44:	13 96       	adiw	r26, 0x03	; 3
    1f46:	8c 91       	ld	r24, X
    1f48:	13 97       	sbiw	r26, 0x03	; 3
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    1f4a:	1b 96       	adiw	r26, 0x0b	; 11
    1f4c:	1c 93       	st	X, r17
    1f4e:	0e 93       	st	-X, r16
    1f50:	1a 97       	sbiw	r26, 0x0a	; 10
			Size            = DataOUTEndpoint->EndpointSize;
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = 0;
    1f52:	ff 24       	eor	r15, r15
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
		{
			Size            = DataOUTEndpoint->EndpointSize;
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_OUT;
    1f54:	40 e2       	ldi	r20, 0x20	; 32
			Type            = EP_TYPE_BULK;
    1f56:	62 e0       	ldi	r22, 0x02	; 2
    1f58:	82 cf       	rjmp	.-252    	; 0x1e5e <SI_Host_ConfigurePipes+0x360>

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
		{
			Size            = EventsEndpoint->EndpointSize;
    1f5a:	f3 01       	movw	r30, r6
    1f5c:	04 81       	ldd	r16, Z+4	; 0x04
    1f5e:	15 81       	ldd	r17, Z+5	; 0x05
			EndpointAddress = EventsEndpoint->EndpointAddress;
    1f60:	22 81       	ldd	r18, Z+2	; 0x02
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = SIInterfaceInfo->Config.EventsPipeDoubleBank;
    1f62:	15 96       	adiw	r26, 0x05	; 5
    1f64:	8c 91       	ld	r24, X
    1f66:	15 97       	sbiw	r26, 0x05	; 5
			InterruptPeriod = EventsEndpoint->PollingIntervalMS;
    1f68:	f6 80       	ldd	r15, Z+6	; 0x06

			SIInterfaceInfo->State.EventsPipeSize = EventsEndpoint->EndpointSize;
    1f6a:	1d 96       	adiw	r26, 0x0d	; 13
    1f6c:	1c 93       	st	X, r17
    1f6e:	0e 93       	st	-X, r16
    1f70:	1c 97       	sbiw	r26, 0x0c	; 12
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
		{
			Size            = EventsEndpoint->EndpointSize;
			EndpointAddress = EventsEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
    1f72:	40 e1       	ldi	r20, 0x10	; 16
			Type            = EP_TYPE_INTERRUPT;
    1f74:	63 e0       	ldi	r22, 0x03	; 3
    1f76:	c7 ce       	rjmp	.-626    	; 0x1d06 <SI_Host_ConfigurePipes+0x208>

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
		{
			Size            = EventsEndpoint->EndpointSize;
    1f78:	f3 01       	movw	r30, r6
    1f7a:	04 81       	ldd	r16, Z+4	; 0x04
    1f7c:	15 81       	ldd	r17, Z+5	; 0x05
			EndpointAddress = EventsEndpoint->EndpointAddress;
    1f7e:	22 81       	ldd	r18, Z+2	; 0x02
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = SIInterfaceInfo->Config.EventsPipeDoubleBank;
    1f80:	15 96       	adiw	r26, 0x05	; 5
    1f82:	8c 91       	ld	r24, X
    1f84:	15 97       	sbiw	r26, 0x05	; 5
			InterruptPeriod = EventsEndpoint->PollingIntervalMS;
    1f86:	f6 80       	ldd	r15, Z+6	; 0x06

			SIInterfaceInfo->State.EventsPipeSize = EventsEndpoint->EndpointSize;
    1f88:	1d 96       	adiw	r26, 0x0d	; 13
    1f8a:	1c 93       	st	X, r17
    1f8c:	0e 93       	st	-X, r16
    1f8e:	1c 97       	sbiw	r26, 0x0c	; 12
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
		{
			Size            = EventsEndpoint->EndpointSize;
			EndpointAddress = EventsEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
    1f90:	40 e1       	ldi	r20, 0x10	; 16
			Type            = EP_TYPE_INTERRUPT;
    1f92:	63 e0       	ldi	r22, 0x03	; 3
    1f94:	d6 ce       	rjmp	.-596    	; 0x1d42 <SI_Host_ConfigurePipes+0x244>

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
		{
			Size            = EventsEndpoint->EndpointSize;
    1f96:	f3 01       	movw	r30, r6
    1f98:	04 81       	ldd	r16, Z+4	; 0x04
    1f9a:	15 81       	ldd	r17, Z+5	; 0x05
			EndpointAddress = EventsEndpoint->EndpointAddress;
    1f9c:	22 81       	ldd	r18, Z+2	; 0x02
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = SIInterfaceInfo->Config.EventsPipeDoubleBank;
    1f9e:	15 96       	adiw	r26, 0x05	; 5
    1fa0:	8c 91       	ld	r24, X
    1fa2:	15 97       	sbiw	r26, 0x05	; 5
			InterruptPeriod = EventsEndpoint->PollingIntervalMS;
    1fa4:	f6 80       	ldd	r15, Z+6	; 0x06

			SIInterfaceInfo->State.EventsPipeSize = EventsEndpoint->EndpointSize;
    1fa6:	1d 96       	adiw	r26, 0x0d	; 13
    1fa8:	1c 93       	st	X, r17
    1faa:	0e 93       	st	-X, r16
    1fac:	1c 97       	sbiw	r26, 0x0c	; 12
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
		{
			Size            = EventsEndpoint->EndpointSize;
			EndpointAddress = EventsEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
    1fae:	40 e1       	ldi	r20, 0x10	; 16
			Type            = EP_TYPE_INTERRUPT;
    1fb0:	63 e0       	ldi	r22, 0x03	; 3
    1fb2:	e7 ce       	rjmp	.-562    	; 0x1d82 <SI_Host_ConfigurePipes+0x284>

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
		{
			Size            = EventsEndpoint->EndpointSize;
    1fb4:	f3 01       	movw	r30, r6
    1fb6:	04 81       	ldd	r16, Z+4	; 0x04
    1fb8:	15 81       	ldd	r17, Z+5	; 0x05
			EndpointAddress = EventsEndpoint->EndpointAddress;
    1fba:	22 81       	ldd	r18, Z+2	; 0x02
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = SIInterfaceInfo->Config.EventsPipeDoubleBank;
    1fbc:	15 96       	adiw	r26, 0x05	; 5
    1fbe:	8c 91       	ld	r24, X
    1fc0:	15 97       	sbiw	r26, 0x05	; 5
			InterruptPeriod = EventsEndpoint->PollingIntervalMS;
    1fc2:	f6 80       	ldd	r15, Z+6	; 0x06

			SIInterfaceInfo->State.EventsPipeSize = EventsEndpoint->EndpointSize;
    1fc4:	1d 96       	adiw	r26, 0x0d	; 13
    1fc6:	1c 93       	st	X, r17
    1fc8:	0e 93       	st	-X, r16
    1fca:	1c 97       	sbiw	r26, 0x0c	; 12
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
		{
			Size            = EventsEndpoint->EndpointSize;
			EndpointAddress = EventsEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
    1fcc:	40 e1       	ldi	r20, 0x10	; 16
			Type            = EP_TYPE_INTERRUPT;
    1fce:	63 e0       	ldi	r22, 0x03	; 3
    1fd0:	f8 ce       	rjmp	.-528    	; 0x1dc2 <SI_Host_ConfigurePipes+0x2c4>

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
		{
			Size            = EventsEndpoint->EndpointSize;
    1fd2:	f3 01       	movw	r30, r6
    1fd4:	04 81       	ldd	r16, Z+4	; 0x04
    1fd6:	15 81       	ldd	r17, Z+5	; 0x05
			EndpointAddress = EventsEndpoint->EndpointAddress;
    1fd8:	22 81       	ldd	r18, Z+2	; 0x02
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = SIInterfaceInfo->Config.EventsPipeDoubleBank;
    1fda:	15 96       	adiw	r26, 0x05	; 5
    1fdc:	8c 91       	ld	r24, X
    1fde:	15 97       	sbiw	r26, 0x05	; 5
			InterruptPeriod = EventsEndpoint->PollingIntervalMS;
    1fe0:	f6 80       	ldd	r15, Z+6	; 0x06

			SIInterfaceInfo->State.EventsPipeSize = EventsEndpoint->EndpointSize;
    1fe2:	1d 96       	adiw	r26, 0x0d	; 13
    1fe4:	1c 93       	st	X, r17
    1fe6:	0e 93       	st	-X, r16
    1fe8:	1c 97       	sbiw	r26, 0x0c	; 12
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
		{
			Size            = EventsEndpoint->EndpointSize;
			EndpointAddress = EventsEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
    1fea:	40 e1       	ldi	r20, 0x10	; 16
			Type            = EP_TYPE_INTERRUPT;
    1fec:	63 e0       	ldi	r22, 0x03	; 3
    1fee:	13 cf       	rjmp	.-474    	; 0x1e16 <SI_Host_ConfigurePipes+0x318>

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
		{
			Size            = EventsEndpoint->EndpointSize;
    1ff0:	f3 01       	movw	r30, r6
    1ff2:	04 81       	ldd	r16, Z+4	; 0x04
    1ff4:	15 81       	ldd	r17, Z+5	; 0x05
			EndpointAddress = EventsEndpoint->EndpointAddress;
    1ff6:	22 81       	ldd	r18, Z+2	; 0x02
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = SIInterfaceInfo->Config.EventsPipeDoubleBank;
    1ff8:	15 96       	adiw	r26, 0x05	; 5
    1ffa:	8c 91       	ld	r24, X
    1ffc:	15 97       	sbiw	r26, 0x05	; 5
			InterruptPeriod = EventsEndpoint->PollingIntervalMS;
    1ffe:	f6 80       	ldd	r15, Z+6	; 0x06

			SIInterfaceInfo->State.EventsPipeSize = EventsEndpoint->EndpointSize;
    2000:	1d 96       	adiw	r26, 0x0d	; 13
    2002:	1c 93       	st	X, r17
    2004:	0e 93       	st	-X, r16
    2006:	1c 97       	sbiw	r26, 0x0c	; 12
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
		{
			Size            = EventsEndpoint->EndpointSize;
			EndpointAddress = EventsEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
    2008:	40 e1       	ldi	r20, 0x10	; 16
			Type            = EP_TYPE_INTERRUPT;
    200a:	63 e0       	ldi	r22, 0x03	; 3
    200c:	28 cf       	rjmp	.-432    	; 0x1e5e <SI_Host_ConfigurePipes+0x360>

0000200e <SI_Host_SendBlockHeader>:
	return DESCRIPTOR_SEARCH_NotFound;
}

uint8_t SI_Host_SendBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                PIMA_Container_t* const PIMAHeader)
{
    200e:	1f 93       	push	r17
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	fc 01       	movw	r30, r24
    2016:	eb 01       	movw	r28, r22
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    2018:	80 91 69 04 	lds	r24, 0x0469
    201c:	8b 30       	cpi	r24, 0x0B	; 11
    201e:	31 f0       	breq	.+12     	; 0x202c <SI_Host_SendBlockHeader+0x1e>
	  return PIPE_RWSTREAM_DeviceDisconnected;
    2020:	12 e0       	ldi	r17, 0x02	; 2

	Pipe_ClearOUT();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    2022:	81 2f       	mov	r24, r17
    2024:	df 91       	pop	r29
    2026:	cf 91       	pop	r28
    2028:	1f 91       	pop	r17
    202a:	08 95       	ret
uint8_t SI_Host_SendBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                PIMA_Container_t* const PIMAHeader)
{
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    202c:	86 81       	ldd	r24, Z+6	; 0x06
    202e:	88 23       	and	r24, r24
    2030:	b9 f3       	breq	.-18     	; 0x2020 <SI_Host_SendBlockHeader+0x12>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	if (SIInterfaceInfo->State.IsSessionOpen)
    2032:	86 85       	ldd	r24, Z+14	; 0x0e
    2034:	88 23       	and	r24, r24
    2036:	81 f0       	breq	.+32     	; 0x2058 <SI_Host_SendBlockHeader+0x4a>
	  PIMAHeader->TransactionID = cpu_to_le32(SIInterfaceInfo->State.TransactionID++);
    2038:	27 85       	ldd	r18, Z+15	; 0x0f
    203a:	30 89       	ldd	r19, Z+16	; 0x10
    203c:	41 89       	ldd	r20, Z+17	; 0x11
    203e:	52 89       	ldd	r21, Z+18	; 0x12
    2040:	28 87       	std	Y+8, r18	; 0x08
    2042:	39 87       	std	Y+9, r19	; 0x09
    2044:	4a 87       	std	Y+10, r20	; 0x0a
    2046:	5b 87       	std	Y+11, r21	; 0x0b
    2048:	2f 5f       	subi	r18, 0xFF	; 255
    204a:	3f 4f       	sbci	r19, 0xFF	; 255
    204c:	4f 4f       	sbci	r20, 0xFF	; 255
    204e:	5f 4f       	sbci	r21, 0xFF	; 255
    2050:	27 87       	std	Z+15, r18	; 0x0f
    2052:	30 8b       	std	Z+16, r19	; 0x10
    2054:	41 8b       	std	Z+17, r20	; 0x11
    2056:	52 8b       	std	Z+18, r21	; 0x12

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataOUTPipeNumber);
    2058:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    205a:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    205e:	80 91 a9 00 	lds	r24, 0x00A9
    2062:	8f 7b       	andi	r24, 0xBF	; 191
    2064:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(PIMAHeader, PIMA_COMMAND_SIZE(0), NULL)) != PIPE_RWSTREAM_NoError)
    2068:	ce 01       	movw	r24, r28
    206a:	6c e0       	ldi	r22, 0x0C	; 12
    206c:	70 e0       	ldi	r23, 0x00	; 0
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	50 e0       	ldi	r21, 0x00	; 0
    2072:	e9 d9       	rcall	.-3118   	; 0x1446 <Pipe_Write_Stream_LE>
    2074:	18 2f       	mov	r17, r24
    2076:	88 23       	and	r24, r24
    2078:	a1 f6       	brne	.-88     	; 0x2022 <SI_Host_SendBlockHeader+0x14>
	  return ErrorCode;

	uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));
    207a:	68 81       	ld	r22, Y
    207c:	6c 50       	subi	r22, 0x0C	; 12

	if (ParamBytes)
    207e:	79 f4       	brne	.+30     	; 0x209e <SI_Host_SendBlockHeader+0x90>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    2080:	80 91 a6 00 	lds	r24, 0x00A6
    2084:	8b 77       	andi	r24, 0x7B	; 123
    2086:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    208a:	80 91 a9 00 	lds	r24, 0x00A9
    208e:	80 64       	ori	r24, 0x40	; 64
    2090:	80 93 a9 00 	sts	0x00A9, r24

	Pipe_ClearOUT();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    2094:	81 2f       	mov	r24, r17
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	1f 91       	pop	r17
    209c:	08 95       	ret

	uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));

	if (ParamBytes)
	{
		if ((ErrorCode = Pipe_Write_Stream_LE(&PIMAHeader->Params, ParamBytes, NULL)) != PIPE_RWSTREAM_NoError)
    209e:	ce 01       	movw	r24, r28
    20a0:	0c 96       	adiw	r24, 0x0c	; 12
    20a2:	70 e0       	ldi	r23, 0x00	; 0
    20a4:	40 e0       	ldi	r20, 0x00	; 0
    20a6:	50 e0       	ldi	r21, 0x00	; 0
    20a8:	ce d9       	rcall	.-3172   	; 0x1446 <Pipe_Write_Stream_LE>
    20aa:	88 23       	and	r24, r24
    20ac:	49 f3       	breq	.-46     	; 0x2080 <SI_Host_SendBlockHeader+0x72>
    20ae:	18 2f       	mov	r17, r24
    20b0:	b8 cf       	rjmp	.-144    	; 0x2022 <SI_Host_SendBlockHeader+0x14>

000020b2 <SI_Host_ReceiveBlockHeader>:
	return PIPE_RWSTREAM_NoError;
}

uint8_t SI_Host_ReceiveBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                   PIMA_Container_t* const PIMAHeader)
{
    20b2:	cf 93       	push	r28
    20b4:	df 93       	push	r29
    20b6:	fc 01       	movw	r30, r24
    20b8:	eb 01       	movw	r28, r22
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    20ba:	40 91 a2 00 	lds	r20, 0x00A2
    20be:	50 91 a3 00 	lds	r21, 0x00A3
	uint16_t TimeoutMSRem        = SI_COMMAND_DATA_TIMEOUT_MS;
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    20c2:	80 91 69 04 	lds	r24, 0x0469
    20c6:	8b 30       	cpi	r24, 0x0B	; 11
    20c8:	21 f0       	breq	.+8      	; 0x20d2 <SI_Host_ReceiveBlockHeader+0x20>
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
			return PIPE_RWSTREAM_PipeStalled;
		}

		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
    20ca:	82 e0       	ldi	r24, 0x02	; 2
	}

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    20cc:	df 91       	pop	r29
    20ce:	cf 91       	pop	r28
    20d0:	08 95       	ret
                                   PIMA_Container_t* const PIMAHeader)
{
	uint16_t TimeoutMSRem        = SI_COMMAND_DATA_TIMEOUT_MS;
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    20d2:	86 81       	ldd	r24, Z+6	; 0x06
    20d4:	88 23       	and	r24, r24
    20d6:	c9 f3       	breq	.-14     	; 0x20ca <SI_Host_ReceiveBlockHeader+0x18>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
    20d8:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    20da:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    20de:	80 91 a9 00 	lds	r24, 0x00A9
    20e2:	8f 7b       	andi	r24, 0xBF	; 191
    20e4:	80 93 a9 00 	sts	0x00A9, r24
}

uint8_t SI_Host_ReceiveBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                   PIMA_Container_t* const PIMAHeader)
{
	uint16_t TimeoutMSRem        = SI_COMMAND_DATA_TIMEOUT_MS;
    20e8:	20 e1       	ldi	r18, 0x10	; 16
    20ea:	37 e2       	ldi	r19, 0x27	; 39
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    20ec:	80 91 a6 00 	lds	r24, 0x00A6
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
	Pipe_Unfreeze();

	while (!(Pipe_IsINReceived()))
    20f0:	80 fd       	sbrc	r24, 0
    20f2:	44 c0       	rjmp	.+136    	; 0x217c <__stack+0x7d>
    20f4:	80 91 a2 00 	lds	r24, 0x00A2
    20f8:	90 91 a3 00 	lds	r25, 0x00A3
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    20fc:	48 17       	cp	r20, r24
    20fe:	59 07       	cpc	r21, r25
    2100:	39 f0       	breq	.+14     	; 0x2110 <__stack+0x11>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    2102:	21 15       	cp	r18, r1
    2104:	31 05       	cpc	r19, r1
    2106:	09 f4       	brne	.+2      	; 0x210a <__stack+0xb>
    2108:	4b c0       	rjmp	.+150    	; 0x21a0 <__stack+0xa1>
    210a:	21 50       	subi	r18, 0x01	; 1
    210c:	30 40       	sbci	r19, 0x00	; 0
    210e:	ac 01       	movw	r20, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    2110:	80 91 a9 00 	lds	r24, 0x00A9
    2114:	80 64       	ori	r24, 0x40	; 64
    2116:	80 93 a9 00 	sts	0x00A9, r24
			  return PIPE_RWSTREAM_Timeout;
		}

		Pipe_Freeze();
		Pipe_SelectPipe(SIInterfaceInfo->Config.DataOUTPipeNumber);
    211a:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    211c:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    2120:	80 91 a9 00 	lds	r24, 0x00A9
    2124:	8f 7b       	andi	r24, 0xBF	; 191
    2126:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    212a:	80 91 a6 00 	lds	r24, 0x00A6
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    212e:	81 fd       	sbrc	r24, 1
    2130:	16 c0       	rjmp	.+44     	; 0x215e <__stack+0x5f>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    2132:	80 91 a9 00 	lds	r24, 0x00A9
    2136:	80 64       	ori	r24, 0x40	; 64
    2138:	80 93 a9 00 	sts	0x00A9, r24
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
			return PIPE_RWSTREAM_PipeStalled;
		}

		Pipe_Freeze();
		Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
    213c:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    213e:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    2142:	80 91 a9 00 	lds	r24, 0x00A9
    2146:	8f 7b       	andi	r24, 0xBF	; 191
    2148:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    214c:	80 91 a6 00 	lds	r24, 0x00A6
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    2150:	81 fd       	sbrc	r24, 1
    2152:	05 c0       	rjmp	.+10     	; 0x215e <__stack+0x5f>
		{
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
			return PIPE_RWSTREAM_PipeStalled;
		}

		if (USB_HostState == HOST_STATE_Unattached)
    2154:	80 91 69 04 	lds	r24, 0x0469
    2158:	81 30       	cpi	r24, 0x01	; 1
    215a:	41 f6       	brne	.-112    	; 0x20ec <SI_Host_ReceiveBlockHeader+0x3a>
    215c:	b6 cf       	rjmp	.-148    	; 0x20ca <SI_Host_ReceiveBlockHeader+0x18>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    215e:	80 91 aa 00 	lds	r24, 0x00AA
    2162:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    2164:	90 91 aa 00 	lds	r25, 0x00AA
    2168:	90 73       	andi	r25, 0x30	; 48
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    216a:	90 31       	cpi	r25, 0x10	; 16
    216c:	29 f0       	breq	.+10     	; 0x2178 <__stack+0x79>
    216e:	90 e0       	ldi	r25, 0x00	; 0
		Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
		{
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
    2170:	89 2b       	or	r24, r25
    2172:	7a dc       	rcall	.-1804   	; 0x1a68 <USB_Host_ClearEndpointStall>
			return PIPE_RWSTREAM_PipeStalled;
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	aa cf       	rjmp	.-172    	; 0x20cc <SI_Host_ReceiveBlockHeader+0x1a>
    2178:	90 e8       	ldi	r25, 0x80	; 128
    217a:	fa cf       	rjmp	.-12     	; 0x2170 <__stack+0x71>

		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
	}

	Pipe_Read_Stream_LE(PIMAHeader, PIMA_COMMAND_SIZE(0), NULL);
    217c:	ce 01       	movw	r24, r28
    217e:	6c e0       	ldi	r22, 0x0C	; 12
    2180:	70 e0       	ldi	r23, 0x00	; 0
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	50 e0       	ldi	r21, 0x00	; 0
    2186:	d0 d9       	rcall	.-3168   	; 0x1528 <Pipe_Read_Stream_LE>

	if (PIMAHeader->Type == CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock))
    2188:	8c 81       	ldd	r24, Y+4	; 0x04
    218a:	9d 81       	ldd	r25, Y+5	; 0x05
    218c:	83 30       	cpi	r24, 0x03	; 3
    218e:	91 05       	cpc	r25, r1
    2190:	49 f0       	breq	.+18     	; 0x21a4 <__stack+0xa5>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    2192:	80 91 a9 00 	lds	r24, 0x00A9
    2196:	80 64       	ori	r24, 0x40	; 64
    2198:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_ClearIN();
	}

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	96 cf       	rjmp	.-212    	; 0x20cc <SI_Host_ReceiveBlockHeader+0x1a>
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_RWSTREAM_Timeout;
    21a0:	83 e0       	ldi	r24, 0x03	; 3
    21a2:	94 cf       	rjmp	.-216    	; 0x20cc <SI_Host_ReceiveBlockHeader+0x1a>

	Pipe_Read_Stream_LE(PIMAHeader, PIMA_COMMAND_SIZE(0), NULL);

	if (PIMAHeader->Type == CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock))
	{
		uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));
    21a4:	68 81       	ld	r22, Y
    21a6:	6c 50       	subi	r22, 0x0C	; 12

		if (ParamBytes)
    21a8:	31 f4       	brne	.+12     	; 0x21b6 <__stack+0xb7>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    21aa:	80 91 a6 00 	lds	r24, 0x00A6
    21ae:	8e 77       	andi	r24, 0x7E	; 126
    21b0:	80 93 a6 00 	sts	0x00A6, r24
    21b4:	ee cf       	rjmp	.-36     	; 0x2192 <__stack+0x93>
		  Pipe_Read_Stream_LE(&PIMAHeader->Params, ParamBytes, NULL);
    21b6:	ce 01       	movw	r24, r28
    21b8:	0c 96       	adiw	r24, 0x0c	; 12
    21ba:	70 e0       	ldi	r23, 0x00	; 0
    21bc:	40 e0       	ldi	r20, 0x00	; 0
    21be:	50 e0       	ldi	r21, 0x00	; 0
    21c0:	b3 d9       	rcall	.-3226   	; 0x1528 <Pipe_Read_Stream_LE>
    21c2:	f3 cf       	rjmp	.-26     	; 0x21aa <__stack+0xab>

000021c4 <SI_Host_ReadData>:
                         void* Buffer,
                         const uint16_t Bytes)
{
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    21c4:	20 91 69 04 	lds	r18, 0x0469
    21c8:	2b 30       	cpi	r18, 0x0B	; 11
    21ca:	11 f0       	breq	.+4      	; 0x21d0 <SI_Host_ReadData+0xc>
	  return PIPE_RWSTREAM_DeviceDisconnected;
    21cc:	82 e0       	ldi	r24, 0x02	; 2
    21ce:	08 95       	ret
                         void* Buffer,
                         const uint16_t Bytes)
{
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    21d0:	fc 01       	movw	r30, r24
    21d2:	26 81       	ldd	r18, Z+6	; 0x06
    21d4:	22 23       	and	r18, r18
    21d6:	11 f4       	brne	.+4      	; 0x21dc <SI_Host_ReadData+0x18>
	  return PIPE_RWSTREAM_DeviceDisconnected;
    21d8:	82 e0       	ldi	r24, 0x02	; 2
	ErrorCode = Pipe_Read_Stream_LE(Buffer, Bytes, NULL);

	Pipe_Freeze();

	return ErrorCode;
}
    21da:	08 95       	ret
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
    21dc:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    21de:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    21e2:	80 91 a9 00 	lds	r24, 0x00A9
    21e6:	8f 7b       	andi	r24, 0xBF	; 191
    21e8:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	ErrorCode = Pipe_Read_Stream_LE(Buffer, Bytes, NULL);
    21ec:	cb 01       	movw	r24, r22
    21ee:	ba 01       	movw	r22, r20
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	50 e0       	ldi	r21, 0x00	; 0
    21f4:	99 d9       	rcall	.-3278   	; 0x1528 <Pipe_Read_Stream_LE>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    21f6:	90 91 a9 00 	lds	r25, 0x00A9
    21fa:	90 64       	ori	r25, 0x40	; 64
    21fc:	90 93 a9 00 	sts	0x00A9, r25

	Pipe_Freeze();

	return ErrorCode;
    2200:	08 95       	ret

00002202 <SI_Host_IsEventReceived>:

bool SI_Host_IsEventReceived(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
	bool IsEventReceived = false;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    2202:	20 91 69 04 	lds	r18, 0x0469
    2206:	2b 30       	cpi	r18, 0x0B	; 11
    2208:	11 f0       	breq	.+4      	; 0x220e <SI_Host_IsEventReceived+0xc>
	  return false;
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	08 95       	ret

bool SI_Host_IsEventReceived(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
	bool IsEventReceived = false;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    220e:	fc 01       	movw	r30, r24
    2210:	26 81       	ldd	r18, Z+6	; 0x06
    2212:	22 23       	and	r18, r18
    2214:	e9 f0       	breq	.+58     	; 0x2250 <SI_Host_IsEventReceived+0x4e>
	  return false;

	Pipe_SelectPipe(SIInterfaceInfo->Config.EventsPipeNumber);
    2216:	84 81       	ldd	r24, Z+4	; 0x04
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    2218:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    221c:	80 91 a9 00 	lds	r24, 0x00A9
    2220:	8f 7b       	andi	r24, 0xBF	; 191
    2222:	80 93 a9 00 	sts	0x00A9, r24
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    2226:	20 91 f6 00 	lds	r18, 0x00F6
    222a:	30 91 f7 00 	lds	r19, 0x00F7
	Pipe_Freeze();

	return ErrorCode;
}

bool SI_Host_IsEventReceived(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	21 15       	cp	r18, r1
    2232:	31 05       	cpc	r19, r1
    2234:	31 f0       	breq	.+12     	; 0x2242 <SI_Host_IsEventReceived+0x40>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    2236:	90 91 a9 00 	lds	r25, 0x00A9
    223a:	90 64       	ori	r25, 0x40	; 64
    223c:	90 93 a9 00 	sts	0x00A9, r25
	if (Pipe_BytesInPipe())
	  IsEventReceived = true;

	Pipe_Freeze();

	return IsEventReceived;
    2240:	08 95       	ret
	Pipe_Freeze();

	return ErrorCode;
}

bool SI_Host_IsEventReceived(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	90 91 a9 00 	lds	r25, 0x00A9
    2248:	90 64       	ori	r25, 0x40	; 64
    224a:	90 93 a9 00 	sts	0x00A9, r25
	if (Pipe_BytesInPipe())
	  IsEventReceived = true;

	Pipe_Freeze();

	return IsEventReceived;
    224e:	08 95       	ret
bool SI_Host_IsEventReceived(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
	bool IsEventReceived = false;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return false;
    2250:	80 e0       	ldi	r24, 0x00	; 0
	  IsEventReceived = true;

	Pipe_Freeze();

	return IsEventReceived;
}
    2252:	08 95       	ret

00002254 <SI_Host_ReceiveEventHeader>:
uint8_t SI_Host_ReceiveEventHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                   PIMA_Container_t* const PIMAHeader)
{
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    2254:	20 91 69 04 	lds	r18, 0x0469
    2258:	2b 30       	cpi	r18, 0x0B	; 11
    225a:	11 f0       	breq	.+4      	; 0x2260 <SI_Host_ReceiveEventHeader+0xc>
	  return PIPE_RWSTREAM_DeviceDisconnected;
    225c:	82 e0       	ldi	r24, 0x02	; 2
    225e:	08 95       	ret
uint8_t SI_Host_ReceiveEventHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                   PIMA_Container_t* const PIMAHeader)
{
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    2260:	fc 01       	movw	r30, r24
    2262:	26 81       	ldd	r18, Z+6	; 0x06
    2264:	22 23       	and	r18, r18
    2266:	11 f4       	brne	.+4      	; 0x226c <SI_Host_ReceiveEventHeader+0x18>
	  return PIPE_RWSTREAM_DeviceDisconnected;
    2268:	82 e0       	ldi	r24, 0x02	; 2

	Pipe_ClearIN();
	Pipe_Freeze();

	return ErrorCode;
}
    226a:	08 95       	ret
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.EventsPipeNumber);
    226c:	84 81       	ldd	r24, Z+4	; 0x04
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    226e:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    2272:	80 91 a9 00 	lds	r24, 0x00A9
    2276:	8f 7b       	andi	r24, 0xBF	; 191
    2278:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	ErrorCode = Pipe_Read_Stream_LE(PIMAHeader, sizeof(PIMA_Container_t), NULL);
    227c:	cb 01       	movw	r24, r22
    227e:	68 e1       	ldi	r22, 0x18	; 24
    2280:	70 e0       	ldi	r23, 0x00	; 0
    2282:	40 e0       	ldi	r20, 0x00	; 0
    2284:	50 e0       	ldi	r21, 0x00	; 0
    2286:	50 d9       	rcall	.-3424   	; 0x1528 <Pipe_Read_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    2288:	90 91 a6 00 	lds	r25, 0x00A6
    228c:	9e 77       	andi	r25, 0x7E	; 126
    228e:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    2292:	90 91 a9 00 	lds	r25, 0x00A9
    2296:	90 64       	ori	r25, 0x40	; 64
    2298:	90 93 a9 00 	sts	0x00A9, r25

	Pipe_ClearIN();
	Pipe_Freeze();

	return ErrorCode;
    229c:	08 95       	ret

0000229e <EVENT_USB_Host_DeviceAttached>:
 *  Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	g_bCameraConnected = 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	80 93 42 01 	sts	0x0142, r24
	g_iDataIsValid = 0;
    22a4:	10 92 6d 01 	sts	0x016D, r1
	
	g_USBEventBitmap |= TP_USB_EVENT_DEVICE_ATTACHED;
    22a8:	80 91 4b 01 	lds	r24, 0x014B
    22ac:	81 60       	ori	r24, 0x01	; 1
    22ae:	80 93 4b 01 	sts	0x014B, r24
}
    22b2:	08 95       	ret

000022b4 <EVENT_USB_Host_DeviceUnattached>:
 *  Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	g_bCameraConnected = 0;
    22b4:	10 92 42 01 	sts	0x0142, r1
	g_iDataIsValid = 0;
    22b8:	10 92 6d 01 	sts	0x016D, r1
	
	g_USBEventBitmap |= TP_USB_EVENT_DEVICE_DETTACHED;
    22bc:	80 91 4b 01 	lds	r24, 0x014B
    22c0:	82 60       	ori	r24, 0x02	; 2
    22c2:	80 93 4b 01 	sts	0x014B, r24
}
    22c6:	08 95       	ret

000022c8 <EVENT_USB_Host_DeviceEnumerationComplete>:
/*********************************************************************************************************************
 *  Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	c2 50       	subi	r28, 0x02	; 2
    22d6:	d2 40       	sbci	r29, 0x02	; 2
    22d8:	0f b6       	in	r0, 0x3f	; 63
    22da:	f8 94       	cli
    22dc:	de bf       	out	0x3e, r29	; 62
    22de:	0f be       	out	0x3f, r0	; 63
    22e0:	cd bf       	out	0x3d, r28	; 61
	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
    22e2:	8e 01       	movw	r16, r28
    22e4:	0d 5f       	subi	r16, 0xFD	; 253
    22e6:	1f 4f       	sbci	r17, 0xFF	; 255
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	be 01       	movw	r22, r28
    22ec:	6f 5f       	subi	r22, 0xFF	; 255
    22ee:	7f 4f       	sbci	r23, 0xFF	; 255
    22f0:	a8 01       	movw	r20, r16
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	32 e0       	ldi	r19, 0x02	; 2
    22f6:	89 d9       	rcall	.-3310   	; 0x160a <USB_Host_GetDeviceConfigDescriptor>
    22f8:	88 23       	and	r24, r24
    22fa:	61 f0       	breq	.+24     	; 0x2314 <EVENT_USB_Host_DeviceEnumerationComplete+0x4c>
		//if (!g_bQuiteMode) puts_P(PSTR("Error Setting Device Configuration.\r\n"));
		return;
	}

	//if (!g_bQuiteMode) puts_P(PSTR("Camera Device Enumerated.\r\n"));
}
    22fc:	ce 5f       	subi	r28, 0xFE	; 254
    22fe:	dd 4f       	sbci	r29, 0xFD	; 253
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	cd bf       	out	0x3d, r28	; 61
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	1f 91       	pop	r17
    2310:	0f 91       	pop	r16
    2312:	08 95       	ret
	{
		//if (!g_bQuiteMode) puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
		return;
	}

	if (SI_Host_ConfigurePipes(&DigitalCamera_SI_Interface,
    2314:	69 81       	ldd	r22, Y+1	; 0x01
    2316:	7a 81       	ldd	r23, Y+2	; 0x02
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	91 e0       	ldi	r25, 0x01	; 1
    231c:	a8 01       	movw	r20, r16
    231e:	ef db       	rcall	.-2082   	; 0x1afe <SI_Host_ConfigurePipes>
    2320:	88 23       	and	r24, r24
    2322:	61 f7       	brne	.-40     	; 0x22fc <EVENT_USB_Host_DeviceEnumerationComplete+0x34>
	{
		//if (!g_bQuiteMode) puts_P(PSTR("Attached Device Not a Valid Still Image Class Device.\r\n"));
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	7b db       	rcall	.-2314   	; 0x1a1e <USB_Host_SetDeviceConfiguration>
    2328:	e9 cf       	rjmp	.-46     	; 0x22fc <EVENT_USB_Host_DeviceEnumerationComplete+0x34>

0000232a <EVENT_USB_Host_HostError>:

/*********************************************************************************************************************
 *  Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
	USB_Disable();
    232a:	0e 94 0d 09 	call	0x121a	; 0x121a <USB_Disable>
    232e:	ff cf       	rjmp	.-2      	; 0x232e <EVENT_USB_Host_HostError+0x4>

00002330 <EVENT_USB_Host_DeviceEnumerationFailed>:
	//if (!g_bQuiteMode) printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
	//                       " -- Error Code %d\r\n"
	//                       " -- Sub Error Code %d\r\n"
	//                       " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

}
    2330:	08 95       	ret

00002332 <CameraControl_PTPErrorDescription>:

/*------------------------------------------------------------------------------
 * CameraControl_PTPErrorDescription
 */
void CameraControl_PTPErrorDescription ( uint16_t errNum )
{
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	ec 01       	movw	r28, r24
	if (g_bQuiteMode) return;
    2338:	80 91 13 01 	lds	r24, 0x0113
    233c:	88 23       	and	r24, r24
    233e:	21 f5       	brne	.+72     	; 0x2388 <CameraControl_PTPErrorDescription+0x56>

	if (errNum==0x2001)
    2340:	80 e2       	ldi	r24, 0x20	; 32
    2342:	c1 30       	cpi	r28, 0x01	; 1
    2344:	d8 07       	cpc	r29, r24
    2346:	61 f1       	breq	.+88     	; 0x23a0 <CameraControl_PTPErrorDescription+0x6e>
		printf_P(PSTR(ESC_FG_CYAN "		[0x%04x] " ESC_FG_WHITE), errNum); 
	else
		printf_P(PSTR(ESC_FG_RED "		[0x%04x] " ESC_FG_WHITE), errNum); 
    2348:	00 d0       	rcall	.+0      	; 0x234a <CameraControl_PTPErrorDescription+0x18>
    234a:	00 d0       	rcall	.+0      	; 0x234c <CameraControl_PTPErrorDescription+0x1a>
    234c:	88 e7       	ldi	r24, 0x78	; 120
    234e:	97 e0       	ldi	r25, 0x07	; 7
    2350:	ed b7       	in	r30, 0x3d	; 61
    2352:	fe b7       	in	r31, 0x3e	; 62
    2354:	92 83       	std	Z+2, r25	; 0x02
    2356:	81 83       	std	Z+1, r24	; 0x01
    2358:	d4 83       	std	Z+4, r29	; 0x04
    235a:	c3 83       	std	Z+3, r28	; 0x03
    235c:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>

	switch (errNum)
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	c1 50       	subi	r28, 0x01	; 1
    236a:	d0 42       	sbci	r29, 0x20	; 32
    236c:	c0 32       	cpi	r28, 0x20	; 32
    236e:	d1 05       	cpc	r29, r1
    2370:	70 f0       	brcs	.+28     	; 0x238e <CameraControl_PTPErrorDescription+0x5c>
		case 0x201C: printf_P(PSTR(ESC_FG_RED "Invalid DeviceProp Value\r\n" ESC_FG_WHITE)); break; 
		case 0x201D: printf_P(PSTR(ESC_FG_RED "Invalid Parameter\r\n" ESC_FG_WHITE)); break;
		case 0x201E: printf_P(PSTR(ESC_FG_RED "Session Already Open\r\n" ESC_FG_WHITE)); break;
		case 0x201F: printf_P(PSTR(ESC_FG_RED "Transaction Cancelled\r\n" ESC_FG_WHITE)); break;
		case 0x2020: printf_P(PSTR(ESC_FG_RED "Specification of Destination Unsupported\r\n" ESC_FG_WHITE)); break;
		default: 	 printf_P(PSTR(ESC_FG_RED "Undefined or Vendor Specific\r\n" ESC_FG_WHITE)); break;
    2372:	00 d0       	rcall	.+0      	; 0x2374 <CameraControl_PTPErrorDescription+0x42>
    2374:	8c e3       	ldi	r24, 0x3C	; 60
    2376:	93 e0       	ldi	r25, 0x03	; 3
    2378:	ed b7       	in	r30, 0x3d	; 61
    237a:	fe b7       	in	r31, 0x3e	; 62
    237c:	92 83       	std	Z+2, r25	; 0x02
    237e:	81 83       	std	Z+1, r24	; 0x01
    2380:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
	}
}
    2388:	df 91       	pop	r29
    238a:	cf 91       	pop	r28
    238c:	08 95       	ret
	if (errNum==0x2001)
		printf_P(PSTR(ESC_FG_CYAN "		[0x%04x] " ESC_FG_WHITE), errNum); 
	else
		printf_P(PSTR(ESC_FG_RED "		[0x%04x] " ESC_FG_WHITE), errNum); 

	switch (errNum)
    238e:	c4 5b       	subi	r28, 0xB4	; 180
    2390:	df 4f       	sbci	r29, 0xFF	; 255
    2392:	fe 01       	movw	r30, r28
    2394:	ee 0f       	add	r30, r30
    2396:	ff 1f       	adc	r31, r31
    2398:	05 90       	lpm	r0, Z+
    239a:	f4 91       	lpm	r31, Z+
    239c:	e0 2d       	mov	r30, r0
    239e:	09 94       	ijmp
void CameraControl_PTPErrorDescription ( uint16_t errNum )
{
	if (g_bQuiteMode) return;

	if (errNum==0x2001)
		printf_P(PSTR(ESC_FG_CYAN "		[0x%04x] " ESC_FG_WHITE), errNum); 
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <CameraControl_PTPErrorDescription+0x70>
    23a2:	00 d0       	rcall	.+0      	; 0x23a4 <CameraControl_PTPErrorDescription+0x72>
    23a4:	8e e8       	ldi	r24, 0x8E	; 142
    23a6:	97 e0       	ldi	r25, 0x07	; 7
    23a8:	ed b7       	in	r30, 0x3d	; 61
    23aa:	fe b7       	in	r31, 0x3e	; 62
    23ac:	92 83       	std	Z+2, r25	; 0x02
    23ae:	81 83       	std	Z+1, r24	; 0x01
    23b0:	d4 83       	std	Z+4, r29	; 0x04
    23b2:	c3 83       	std	Z+3, r28	; 0x03
    23b4:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    23b8:	0f 90       	pop	r0
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
	else
		printf_P(PSTR(ESC_FG_RED "		[0x%04x] " ESC_FG_WHITE), errNum); 

	switch (errNum)
	{
		case 0x2001: printf_P(PSTR(ESC_FG_CYAN "OK\r\n" ESC_FG_WHITE)); break;
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <CameraControl_PTPErrorDescription+0x90>
    23c2:	89 e6       	ldi	r24, 0x69	; 105
    23c4:	97 e0       	ldi	r25, 0x07	; 7
    23c6:	ed b7       	in	r30, 0x3d	; 61
    23c8:	fe b7       	in	r31, 0x3e	; 62
    23ca:	92 83       	std	Z+2, r25	; 0x02
    23cc:	81 83       	std	Z+1, r24	; 0x01
    23ce:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    23d2:	0f 90       	pop	r0
    23d4:	0f 90       	pop	r0
    23d6:	d8 cf       	rjmp	.-80     	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x201B: printf_P(PSTR(ESC_FG_RED "Invalid DeviceProp Format\r\n" ESC_FG_WHITE)); break; 
		case 0x201C: printf_P(PSTR(ESC_FG_RED "Invalid DeviceProp Value\r\n" ESC_FG_WHITE)); break; 
		case 0x201D: printf_P(PSTR(ESC_FG_RED "Invalid Parameter\r\n" ESC_FG_WHITE)); break;
		case 0x201E: printf_P(PSTR(ESC_FG_RED "Session Already Open\r\n" ESC_FG_WHITE)); break;
		case 0x201F: printf_P(PSTR(ESC_FG_RED "Transaction Cancelled\r\n" ESC_FG_WHITE)); break;
		case 0x2020: printf_P(PSTR(ESC_FG_RED "Specification of Destination Unsupported\r\n" ESC_FG_WHITE)); break;
    23d8:	00 d0       	rcall	.+0      	; 0x23da <CameraControl_PTPErrorDescription+0xa8>
    23da:	85 e6       	ldi	r24, 0x65	; 101
    23dc:	93 e0       	ldi	r25, 0x03	; 3
    23de:	ed b7       	in	r30, 0x3d	; 61
    23e0:	fe b7       	in	r31, 0x3e	; 62
    23e2:	92 83       	std	Z+2, r25	; 0x02
    23e4:	81 83       	std	Z+1, r24	; 0x01
    23e6:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	cc cf       	rjmp	.-104    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
	switch (errNum)
	{
		case 0x2001: printf_P(PSTR(ESC_FG_CYAN "OK\r\n" ESC_FG_WHITE)); break;
		case 0x2002: printf_P(PSTR(ESC_FG_RED "General Error\r\n" ESC_FG_WHITE)); break; 
		case 0x2003: printf_P(PSTR(ESC_FG_RED "Session Not Open\r\n" ESC_FG_WHITE)); break; 
		case 0x2004: printf_P(PSTR(ESC_FG_RED "Invalid TransactionID\r\n" ESC_FG_WHITE)); break; 
    23f0:	00 d0       	rcall	.+0      	; 0x23f2 <CameraControl_PTPErrorDescription+0xc0>
    23f2:	80 e1       	ldi	r24, 0x10	; 16
    23f4:	97 e0       	ldi	r25, 0x07	; 7
    23f6:	ed b7       	in	r30, 0x3d	; 61
    23f8:	fe b7       	in	r31, 0x3e	; 62
    23fa:	92 83       	std	Z+2, r25	; 0x02
    23fc:	81 83       	std	Z+1, r24	; 0x01
    23fe:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	c0 cf       	rjmp	.-128    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x2005: printf_P(PSTR(ESC_FG_RED "Operation Not Supported\r\n" ESC_FG_WHITE)); break; 
    2408:	00 d0       	rcall	.+0      	; 0x240a <CameraControl_PTPErrorDescription+0xd8>
    240a:	8c ee       	ldi	r24, 0xEC	; 236
    240c:	96 e0       	ldi	r25, 0x06	; 6
    240e:	ed b7       	in	r30, 0x3d	; 61
    2410:	fe b7       	in	r31, 0x3e	; 62
    2412:	92 83       	std	Z+2, r25	; 0x02
    2414:	81 83       	std	Z+1, r24	; 0x01
    2416:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    241a:	0f 90       	pop	r0
    241c:	0f 90       	pop	r0
    241e:	b4 cf       	rjmp	.-152    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		printf_P(PSTR(ESC_FG_RED "		[0x%04x] " ESC_FG_WHITE), errNum); 

	switch (errNum)
	{
		case 0x2001: printf_P(PSTR(ESC_FG_CYAN "OK\r\n" ESC_FG_WHITE)); break;
		case 0x2002: printf_P(PSTR(ESC_FG_RED "General Error\r\n" ESC_FG_WHITE)); break; 
    2420:	00 d0       	rcall	.+0      	; 0x2422 <CameraControl_PTPErrorDescription+0xf0>
    2422:	8f e4       	ldi	r24, 0x4F	; 79
    2424:	97 e0       	ldi	r25, 0x07	; 7
    2426:	ed b7       	in	r30, 0x3d	; 61
    2428:	fe b7       	in	r31, 0x3e	; 62
    242a:	92 83       	std	Z+2, r25	; 0x02
    242c:	81 83       	std	Z+1, r24	; 0x01
    242e:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	a8 cf       	rjmp	.-176    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x2003: printf_P(PSTR(ESC_FG_RED "Session Not Open\r\n" ESC_FG_WHITE)); break; 
    2438:	00 d0       	rcall	.+0      	; 0x243a <CameraControl_PTPErrorDescription+0x108>
    243a:	82 e3       	ldi	r24, 0x32	; 50
    243c:	97 e0       	ldi	r25, 0x07	; 7
    243e:	ed b7       	in	r30, 0x3d	; 61
    2440:	fe b7       	in	r31, 0x3e	; 62
    2442:	92 83       	std	Z+2, r25	; 0x02
    2444:	81 83       	std	Z+1, r24	; 0x01
    2446:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    244a:	0f 90       	pop	r0
    244c:	0f 90       	pop	r0
    244e:	9c cf       	rjmp	.-200    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x2004: printf_P(PSTR(ESC_FG_RED "Invalid TransactionID\r\n" ESC_FG_WHITE)); break; 
		case 0x2005: printf_P(PSTR(ESC_FG_RED "Operation Not Supported\r\n" ESC_FG_WHITE)); break; 
		case 0x2006: printf_P(PSTR(ESC_FG_RED "Parameter Not Supported\r\n" ESC_FG_WHITE)); break;
    2450:	00 d0       	rcall	.+0      	; 0x2452 <CameraControl_PTPErrorDescription+0x120>
    2452:	88 ec       	ldi	r24, 0xC8	; 200
    2454:	96 e0       	ldi	r25, 0x06	; 6
    2456:	ed b7       	in	r30, 0x3d	; 61
    2458:	fe b7       	in	r31, 0x3e	; 62
    245a:	92 83       	std	Z+2, r25	; 0x02
    245c:	81 83       	std	Z+1, r24	; 0x01
    245e:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    2462:	0f 90       	pop	r0
    2464:	0f 90       	pop	r0
    2466:	90 cf       	rjmp	.-224    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x2007: printf_P(PSTR(ESC_FG_RED "Incomplete Transfer\r\n" ESC_FG_WHITE)); break; 
    2468:	00 d0       	rcall	.+0      	; 0x246a <CameraControl_PTPErrorDescription+0x138>
    246a:	88 ea       	ldi	r24, 0xA8	; 168
    246c:	96 e0       	ldi	r25, 0x06	; 6
    246e:	ed b7       	in	r30, 0x3d	; 61
    2470:	fe b7       	in	r31, 0x3e	; 62
    2472:	92 83       	std	Z+2, r25	; 0x02
    2474:	81 83       	std	Z+1, r24	; 0x01
    2476:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	84 cf       	rjmp	.-248    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x2008: printf_P(PSTR(ESC_FG_RED "Invalid StorageID\r\n" ESC_FG_WHITE)); break;
    2480:	00 d0       	rcall	.+0      	; 0x2482 <CameraControl_PTPErrorDescription+0x150>
    2482:	8a e8       	ldi	r24, 0x8A	; 138
    2484:	96 e0       	ldi	r25, 0x06	; 6
    2486:	ed b7       	in	r30, 0x3d	; 61
    2488:	fe b7       	in	r31, 0x3e	; 62
    248a:	92 83       	std	Z+2, r25	; 0x02
    248c:	81 83       	std	Z+1, r24	; 0x01
    248e:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	78 cf       	rjmp	.-272    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x2009: printf_P(PSTR(ESC_FG_RED "Invalid ObjectHandle\r\n" ESC_FG_WHITE)); break; 
    2498:	00 d0       	rcall	.+0      	; 0x249a <CameraControl_PTPErrorDescription+0x168>
    249a:	89 e6       	ldi	r24, 0x69	; 105
    249c:	96 e0       	ldi	r25, 0x06	; 6
    249e:	ed b7       	in	r30, 0x3d	; 61
    24a0:	fe b7       	in	r31, 0x3e	; 62
    24a2:	92 83       	std	Z+2, r25	; 0x02
    24a4:	81 83       	std	Z+1, r24	; 0x01
    24a6:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	6c cf       	rjmp	.-296    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x200A: printf_P(PSTR(ESC_FG_RED "DeviceProp Not Supported\r\n" ESC_FG_WHITE)); break; 
    24b0:	00 d0       	rcall	.+0      	; 0x24b2 <CameraControl_PTPErrorDescription+0x180>
    24b2:	84 e4       	ldi	r24, 0x44	; 68
    24b4:	96 e0       	ldi	r25, 0x06	; 6
    24b6:	ed b7       	in	r30, 0x3d	; 61
    24b8:	fe b7       	in	r31, 0x3e	; 62
    24ba:	92 83       	std	Z+2, r25	; 0x02
    24bc:	81 83       	std	Z+1, r24	; 0x01
    24be:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	60 cf       	rjmp	.-320    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x200B: printf_P(PSTR(ESC_FG_RED "Invalid ObjectFormatCode\r\n" ESC_FG_WHITE)); break;
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <CameraControl_PTPErrorDescription+0x198>
    24ca:	8f e1       	ldi	r24, 0x1F	; 31
    24cc:	96 e0       	ldi	r25, 0x06	; 6
    24ce:	ed b7       	in	r30, 0x3d	; 61
    24d0:	fe b7       	in	r31, 0x3e	; 62
    24d2:	92 83       	std	Z+2, r25	; 0x02
    24d4:	81 83       	std	Z+1, r24	; 0x01
    24d6:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	54 cf       	rjmp	.-344    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x200C: printf_P(PSTR(ESC_FG_RED "Store Full\r\n" ESC_FG_WHITE)); break;
    24e0:	00 d0       	rcall	.+0      	; 0x24e2 <CameraControl_PTPErrorDescription+0x1b0>
    24e2:	88 e0       	ldi	r24, 0x08	; 8
    24e4:	96 e0       	ldi	r25, 0x06	; 6
    24e6:	ed b7       	in	r30, 0x3d	; 61
    24e8:	fe b7       	in	r31, 0x3e	; 62
    24ea:	92 83       	std	Z+2, r25	; 0x02
    24ec:	81 83       	std	Z+1, r24	; 0x01
    24ee:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    24f2:	0f 90       	pop	r0
    24f4:	0f 90       	pop	r0
    24f6:	48 cf       	rjmp	.-368    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x200D: printf_P(PSTR(ESC_FG_RED "Object WriteProtected\r\n" ESC_FG_WHITE)); break; 
    24f8:	00 d0       	rcall	.+0      	; 0x24fa <CameraControl_PTPErrorDescription+0x1c8>
    24fa:	86 ee       	ldi	r24, 0xE6	; 230
    24fc:	95 e0       	ldi	r25, 0x05	; 5
    24fe:	ed b7       	in	r30, 0x3d	; 61
    2500:	fe b7       	in	r31, 0x3e	; 62
    2502:	92 83       	std	Z+2, r25	; 0x02
    2504:	81 83       	std	Z+1, r24	; 0x01
    2506:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	3c cf       	rjmp	.-392    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x200E: printf_P(PSTR(ESC_FG_RED "Store Read-Only\r\n" ESC_FG_WHITE)); break;
    2510:	00 d0       	rcall	.+0      	; 0x2512 <CameraControl_PTPErrorDescription+0x1e0>
    2512:	8a ec       	ldi	r24, 0xCA	; 202
    2514:	95 e0       	ldi	r25, 0x05	; 5
    2516:	ed b7       	in	r30, 0x3d	; 61
    2518:	fe b7       	in	r31, 0x3e	; 62
    251a:	92 83       	std	Z+2, r25	; 0x02
    251c:	81 83       	std	Z+1, r24	; 0x01
    251e:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	30 cf       	rjmp	.-416    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x200F: printf_P(PSTR(ESC_FG_RED "Access Denied\r\n" ESC_FG_WHITE)); break;
    2528:	00 d0       	rcall	.+0      	; 0x252a <CameraControl_PTPErrorDescription+0x1f8>
    252a:	80 eb       	ldi	r24, 0xB0	; 176
    252c:	95 e0       	ldi	r25, 0x05	; 5
    252e:	ed b7       	in	r30, 0x3d	; 61
    2530:	fe b7       	in	r31, 0x3e	; 62
    2532:	92 83       	std	Z+2, r25	; 0x02
    2534:	81 83       	std	Z+1, r24	; 0x01
    2536:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	24 cf       	rjmp	.-440    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x2010: printf_P(PSTR(ESC_FG_RED "No Thumbnail Present\r\n" ESC_FG_WHITE)); break;
    2540:	00 d0       	rcall	.+0      	; 0x2542 <CameraControl_PTPErrorDescription+0x210>
    2542:	8f e8       	ldi	r24, 0x8F	; 143
    2544:	95 e0       	ldi	r25, 0x05	; 5
    2546:	ed b7       	in	r30, 0x3d	; 61
    2548:	fe b7       	in	r31, 0x3e	; 62
    254a:	92 83       	std	Z+2, r25	; 0x02
    254c:	81 83       	std	Z+1, r24	; 0x01
    254e:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    2552:	0f 90       	pop	r0
    2554:	0f 90       	pop	r0
    2556:	18 cf       	rjmp	.-464    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x2011: printf_P(PSTR(ESC_FG_RED "SelfTest Failed\r\n" ESC_FG_WHITE)); break;
    2558:	00 d0       	rcall	.+0      	; 0x255a <CameraControl_PTPErrorDescription+0x228>
    255a:	83 e7       	ldi	r24, 0x73	; 115
    255c:	95 e0       	ldi	r25, 0x05	; 5
    255e:	ed b7       	in	r30, 0x3d	; 61
    2560:	fe b7       	in	r31, 0x3e	; 62
    2562:	92 83       	std	Z+2, r25	; 0x02
    2564:	81 83       	std	Z+1, r24	; 0x01
    2566:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    256a:	0f 90       	pop	r0
    256c:	0f 90       	pop	r0
    256e:	0c cf       	rjmp	.-488    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x2012: printf_P(PSTR(ESC_FG_RED "Partial Deletion\r\n" ESC_FG_WHITE)); break;
    2570:	00 d0       	rcall	.+0      	; 0x2572 <CameraControl_PTPErrorDescription+0x240>
    2572:	86 e5       	ldi	r24, 0x56	; 86
    2574:	95 e0       	ldi	r25, 0x05	; 5
    2576:	ed b7       	in	r30, 0x3d	; 61
    2578:	fe b7       	in	r31, 0x3e	; 62
    257a:	92 83       	std	Z+2, r25	; 0x02
    257c:	81 83       	std	Z+1, r24	; 0x01
    257e:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	00 cf       	rjmp	.-512    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x2013: printf_P(PSTR(ESC_FG_RED "Store Not Available\r\n" ESC_FG_WHITE)); break;
    2588:	00 d0       	rcall	.+0      	; 0x258a <CameraControl_PTPErrorDescription+0x258>
    258a:	86 e3       	ldi	r24, 0x36	; 54
    258c:	95 e0       	ldi	r25, 0x05	; 5
    258e:	ed b7       	in	r30, 0x3d	; 61
    2590:	fe b7       	in	r31, 0x3e	; 62
    2592:	92 83       	std	Z+2, r25	; 0x02
    2594:	81 83       	std	Z+1, r24	; 0x01
    2596:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	f4 ce       	rjmp	.-536    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x2014: printf_P(PSTR(ESC_FG_RED "Specification By Format Unsupported\r\n" ESC_FG_WHITE)); break; 
    25a0:	00 d0       	rcall	.+0      	; 0x25a2 <CameraControl_PTPErrorDescription+0x270>
    25a2:	86 e0       	ldi	r24, 0x06	; 6
    25a4:	95 e0       	ldi	r25, 0x05	; 5
    25a6:	ed b7       	in	r30, 0x3d	; 61
    25a8:	fe b7       	in	r31, 0x3e	; 62
    25aa:	92 83       	std	Z+2, r25	; 0x02
    25ac:	81 83       	std	Z+1, r24	; 0x01
    25ae:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	e8 ce       	rjmp	.-560    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x2015: printf_P(PSTR(ESC_FG_RED "No Valid ObjectInfo\r\n" ESC_FG_WHITE)); break;
    25b8:	00 d0       	rcall	.+0      	; 0x25ba <CameraControl_PTPErrorDescription+0x288>
    25ba:	86 ee       	ldi	r24, 0xE6	; 230
    25bc:	94 e0       	ldi	r25, 0x04	; 4
    25be:	ed b7       	in	r30, 0x3d	; 61
    25c0:	fe b7       	in	r31, 0x3e	; 62
    25c2:	92 83       	std	Z+2, r25	; 0x02
    25c4:	81 83       	std	Z+1, r24	; 0x01
    25c6:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	dc ce       	rjmp	.-584    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x2016: printf_P(PSTR(ESC_FG_RED "Invalid Code Format\r\n" ESC_FG_WHITE)); break; 
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <CameraControl_PTPErrorDescription+0x2a0>
    25d2:	86 ec       	ldi	r24, 0xC6	; 198
    25d4:	94 e0       	ldi	r25, 0x04	; 4
    25d6:	ed b7       	in	r30, 0x3d	; 61
    25d8:	fe b7       	in	r31, 0x3e	; 62
    25da:	92 83       	std	Z+2, r25	; 0x02
    25dc:	81 83       	std	Z+1, r24	; 0x01
    25de:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	d0 ce       	rjmp	.-608    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x2017: printf_P(PSTR(ESC_FG_RED "Unknown Vendor Code\r\n" ESC_FG_WHITE)); break; 
    25e8:	00 d0       	rcall	.+0      	; 0x25ea <CameraControl_PTPErrorDescription+0x2b8>
    25ea:	86 ea       	ldi	r24, 0xA6	; 166
    25ec:	94 e0       	ldi	r25, 0x04	; 4
    25ee:	ed b7       	in	r30, 0x3d	; 61
    25f0:	fe b7       	in	r31, 0x3e	; 62
    25f2:	92 83       	std	Z+2, r25	; 0x02
    25f4:	81 83       	std	Z+1, r24	; 0x01
    25f6:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	c4 ce       	rjmp	.-632    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x2018: printf_P(PSTR(ESC_FG_RED "Capture Already Terminated\r\n" ESC_FG_WHITE)); break;
    2600:	00 d0       	rcall	.+0      	; 0x2602 <CameraControl_PTPErrorDescription+0x2d0>
    2602:	8f e7       	ldi	r24, 0x7F	; 127
    2604:	94 e0       	ldi	r25, 0x04	; 4
    2606:	ed b7       	in	r30, 0x3d	; 61
    2608:	fe b7       	in	r31, 0x3e	; 62
    260a:	92 83       	std	Z+2, r25	; 0x02
    260c:	81 83       	std	Z+1, r24	; 0x01
    260e:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	b8 ce       	rjmp	.-656    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x2019: printf_P(PSTR(ESC_FG_RED "Device Busy\r\n" ESC_FG_WHITE)); break; 
    2618:	00 d0       	rcall	.+0      	; 0x261a <CameraControl_PTPErrorDescription+0x2e8>
    261a:	87 e6       	ldi	r24, 0x67	; 103
    261c:	94 e0       	ldi	r25, 0x04	; 4
    261e:	ed b7       	in	r30, 0x3d	; 61
    2620:	fe b7       	in	r31, 0x3e	; 62
    2622:	92 83       	std	Z+2, r25	; 0x02
    2624:	81 83       	std	Z+1, r24	; 0x01
    2626:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	ac ce       	rjmp	.-680    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x201A: printf_P(PSTR(ESC_FG_RED "Invalid ParentObject\r\n" ESC_FG_WHITE)); break; 
    2630:	00 d0       	rcall	.+0      	; 0x2632 <CameraControl_PTPErrorDescription+0x300>
    2632:	86 e4       	ldi	r24, 0x46	; 70
    2634:	94 e0       	ldi	r25, 0x04	; 4
    2636:	ed b7       	in	r30, 0x3d	; 61
    2638:	fe b7       	in	r31, 0x3e	; 62
    263a:	92 83       	std	Z+2, r25	; 0x02
    263c:	81 83       	std	Z+1, r24	; 0x01
    263e:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	a0 ce       	rjmp	.-704    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x201B: printf_P(PSTR(ESC_FG_RED "Invalid DeviceProp Format\r\n" ESC_FG_WHITE)); break; 
    2648:	00 d0       	rcall	.+0      	; 0x264a <CameraControl_PTPErrorDescription+0x318>
    264a:	80 e2       	ldi	r24, 0x20	; 32
    264c:	94 e0       	ldi	r25, 0x04	; 4
    264e:	ed b7       	in	r30, 0x3d	; 61
    2650:	fe b7       	in	r31, 0x3e	; 62
    2652:	92 83       	std	Z+2, r25	; 0x02
    2654:	81 83       	std	Z+1, r24	; 0x01
    2656:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	94 ce       	rjmp	.-728    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x201C: printf_P(PSTR(ESC_FG_RED "Invalid DeviceProp Value\r\n" ESC_FG_WHITE)); break; 
    2660:	00 d0       	rcall	.+0      	; 0x2662 <CameraControl_PTPErrorDescription+0x330>
    2662:	8b ef       	ldi	r24, 0xFB	; 251
    2664:	93 e0       	ldi	r25, 0x03	; 3
    2666:	ed b7       	in	r30, 0x3d	; 61
    2668:	fe b7       	in	r31, 0x3e	; 62
    266a:	92 83       	std	Z+2, r25	; 0x02
    266c:	81 83       	std	Z+1, r24	; 0x01
    266e:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	88 ce       	rjmp	.-752    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x201D: printf_P(PSTR(ESC_FG_RED "Invalid Parameter\r\n" ESC_FG_WHITE)); break;
    2678:	00 d0       	rcall	.+0      	; 0x267a <CameraControl_PTPErrorDescription+0x348>
    267a:	8d ed       	ldi	r24, 0xDD	; 221
    267c:	93 e0       	ldi	r25, 0x03	; 3
    267e:	ed b7       	in	r30, 0x3d	; 61
    2680:	fe b7       	in	r31, 0x3e	; 62
    2682:	92 83       	std	Z+2, r25	; 0x02
    2684:	81 83       	std	Z+1, r24	; 0x01
    2686:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    268a:	0f 90       	pop	r0
    268c:	0f 90       	pop	r0
    268e:	7c ce       	rjmp	.-776    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x201E: printf_P(PSTR(ESC_FG_RED "Session Already Open\r\n" ESC_FG_WHITE)); break;
    2690:	00 d0       	rcall	.+0      	; 0x2692 <CameraControl_PTPErrorDescription+0x360>
    2692:	8c eb       	ldi	r24, 0xBC	; 188
    2694:	93 e0       	ldi	r25, 0x03	; 3
    2696:	ed b7       	in	r30, 0x3d	; 61
    2698:	fe b7       	in	r31, 0x3e	; 62
    269a:	92 83       	std	Z+2, r25	; 0x02
    269c:	81 83       	std	Z+1, r24	; 0x01
    269e:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	70 ce       	rjmp	.-800    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>
		case 0x201F: printf_P(PSTR(ESC_FG_RED "Transaction Cancelled\r\n" ESC_FG_WHITE)); break;
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <CameraControl_PTPErrorDescription+0x378>
    26aa:	8a e9       	ldi	r24, 0x9A	; 154
    26ac:	93 e0       	ldi	r25, 0x03	; 3
    26ae:	ed b7       	in	r30, 0x3d	; 61
    26b0:	fe b7       	in	r31, 0x3e	; 62
    26b2:	92 83       	std	Z+2, r25	; 0x02
    26b4:	81 83       	std	Z+1, r24	; 0x01
    26b6:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	64 ce       	rjmp	.-824    	; 0x2388 <CameraControl_PTPErrorDescription+0x56>

000026c0 <CameraControl_DescribePIPE_RWSTREAMError>:

/*------------------------------------------------------------------------------
 * CameraControl_DescribePIPE_RWSTREAMError
 */
void CameraControl_DescribePIPE_RWSTREAMError ( uint8_t uiStatus )
{
    26c0:	1f 93       	push	r17
    26c2:	18 2f       	mov	r17, r24
	if (g_bQuiteMode) return;
    26c4:	80 91 13 01 	lds	r24, 0x0113
    26c8:	88 23       	and	r24, r24
    26ca:	11 f0       	breq	.+4      	; 0x26d0 <CameraControl_DescribePIPE_RWSTREAMError+0x10>
			break;
		default:
			printf_P(PSTR("Unrecognized error.\r\n"));
	}

}
    26cc:	1f 91       	pop	r17
    26ce:	08 95       	ret
 */
void CameraControl_DescribePIPE_RWSTREAMError ( uint8_t uiStatus )
{
	if (g_bQuiteMode) return;

	printf_P(PSTR("PIMA Error (%d): "), uiStatus);
    26d0:	00 d0       	rcall	.+0      	; 0x26d2 <CameraControl_DescribePIPE_RWSTREAMError+0x12>
    26d2:	00 d0       	rcall	.+0      	; 0x26d4 <CameraControl_DescribePIPE_RWSTREAMError+0x14>
    26d4:	ed b7       	in	r30, 0x3d	; 61
    26d6:	fe b7       	in	r31, 0x3e	; 62
    26d8:	31 96       	adiw	r30, 0x01	; 1
    26da:	2a e2       	ldi	r18, 0x2A	; 42
    26dc:	33 e0       	ldi	r19, 0x03	; 3
    26de:	ad b7       	in	r26, 0x3d	; 61
    26e0:	be b7       	in	r27, 0x3e	; 62
    26e2:	12 96       	adiw	r26, 0x02	; 2
    26e4:	3c 93       	st	X, r19
    26e6:	2e 93       	st	-X, r18
    26e8:	11 97       	sbiw	r26, 0x01	; 1
    26ea:	12 83       	std	Z+2, r17	; 0x02
    26ec:	13 82       	std	Z+3, r1	; 0x03
    26ee:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>

	switch (uiStatus)
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	13 30       	cpi	r17, 0x03	; 3
    26fc:	99 f1       	breq	.+102    	; 0x2764 <CameraControl_DescribePIPE_RWSTREAMError+0xa4>
    26fe:	14 30       	cpi	r17, 0x04	; 4
    2700:	98 f4       	brcc	.+38     	; 0x2728 <CameraControl_DescribePIPE_RWSTREAMError+0x68>
    2702:	11 30       	cpi	r17, 0x01	; 1
    2704:	09 f4       	brne	.+2      	; 0x2708 <CameraControl_DescribePIPE_RWSTREAMError+0x48>
    2706:	48 c0       	rjmp	.+144    	; 0x2798 <CameraControl_DescribePIPE_RWSTREAMError+0xd8>
    2708:	12 30       	cpi	r17, 0x02	; 2
    270a:	c1 f1       	breq	.+112    	; 0x277c <CameraControl_DescribePIPE_RWSTREAMError+0xbc>
			break;
		case SI_ERROR_LOGICAL_CMD_FAILED:
			printf_P(PSTR("Error code for some Still Image Host functions, indicating a logical (and not hardware) error.\r\n"));
			break;
		default:
			printf_P(PSTR("Unrecognized error.\r\n"));
    270c:	00 d0       	rcall	.+0      	; 0x270e <CameraControl_DescribePIPE_RWSTREAMError+0x4e>
    270e:	80 e5       	ldi	r24, 0x50	; 80
    2710:	91 e0       	ldi	r25, 0x01	; 1
    2712:	ad b7       	in	r26, 0x3d	; 61
    2714:	be b7       	in	r27, 0x3e	; 62
    2716:	12 96       	adiw	r26, 0x02	; 2
    2718:	9c 93       	st	X, r25
    271a:	8e 93       	st	-X, r24
    271c:	11 97       	sbiw	r26, 0x01	; 1
    271e:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	d2 cf       	rjmp	.-92     	; 0x26cc <CameraControl_DescribePIPE_RWSTREAMError+0xc>
{
	if (g_bQuiteMode) return;

	printf_P(PSTR("PIMA Error (%d): "), uiStatus);

	switch (uiStatus)
    2728:	14 30       	cpi	r17, 0x04	; 4
    272a:	71 f0       	breq	.+28     	; 0x2748 <CameraControl_DescribePIPE_RWSTREAMError+0x88>
    272c:	10 38       	cpi	r17, 0x80	; 128
    272e:	71 f7       	brne	.-36     	; 0x270c <CameraControl_DescribePIPE_RWSTREAMError+0x4c>
			break;
		case PIPE_RWSTREAM_IncompleteTransfer:
			printf_P(PSTR("Indicates that the pipe bank became full/empty before the complete contents of the stream could be transferred.\r\n"));
			break;
		case SI_ERROR_LOGICAL_CMD_FAILED:
			printf_P(PSTR("Error code for some Still Image Host functions, indicating a logical (and not hardware) error.\r\n"));
    2730:	00 d0       	rcall	.+0      	; 0x2732 <CameraControl_DescribePIPE_RWSTREAMError+0x72>
    2732:	86 e6       	ldi	r24, 0x66	; 102
    2734:	91 e0       	ldi	r25, 0x01	; 1
    2736:	ed b7       	in	r30, 0x3d	; 61
    2738:	fe b7       	in	r31, 0x3e	; 62
    273a:	92 83       	std	Z+2, r25	; 0x02
    273c:	81 83       	std	Z+1, r24	; 0x01
    273e:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
			break;
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	c2 cf       	rjmp	.-124    	; 0x26cc <CameraControl_DescribePIPE_RWSTREAMError+0xc>
			break;
		case PIPE_RWSTREAM_Timeout:
			printf_P(PSTR("The device failed to accept or send the next packet within the software timeout period set by the USB_STREAM_TIMEOUT_MS macro.\r\n"));
			break;
		case PIPE_RWSTREAM_IncompleteTransfer:
			printf_P(PSTR("Indicates that the pipe bank became full/empty before the complete contents of the stream could be transferred.\r\n"));
    2748:	00 d0       	rcall	.+0      	; 0x274a <CameraControl_DescribePIPE_RWSTREAMError+0x8a>
    274a:	87 ec       	ldi	r24, 0xC7	; 199
    274c:	91 e0       	ldi	r25, 0x01	; 1
    274e:	ad b7       	in	r26, 0x3d	; 61
    2750:	be b7       	in	r27, 0x3e	; 62
    2752:	12 96       	adiw	r26, 0x02	; 2
    2754:	9c 93       	st	X, r25
    2756:	8e 93       	st	-X, r24
    2758:	11 97       	sbiw	r26, 0x01	; 1
    275a:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
			break;
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	b4 cf       	rjmp	.-152    	; 0x26cc <CameraControl_DescribePIPE_RWSTREAMError+0xc>
			break;
		case PIPE_RWSTREAM_DeviceDisconnected:
			printf_P(PSTR("Device was disconnected from the host during the transfer.\r\n"));
			break;
		case PIPE_RWSTREAM_Timeout:
			printf_P(PSTR("The device failed to accept or send the next packet within the software timeout period set by the USB_STREAM_TIMEOUT_MS macro.\r\n"));
    2764:	00 d0       	rcall	.+0      	; 0x2766 <CameraControl_DescribePIPE_RWSTREAMError+0xa6>
    2766:	89 e3       	ldi	r24, 0x39	; 57
    2768:	92 e0       	ldi	r25, 0x02	; 2
    276a:	ed b7       	in	r30, 0x3d	; 61
    276c:	fe b7       	in	r31, 0x3e	; 62
    276e:	92 83       	std	Z+2, r25	; 0x02
    2770:	81 83       	std	Z+1, r24	; 0x01
    2772:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
			break;
    2776:	0f 90       	pop	r0
    2778:	0f 90       	pop	r0
    277a:	a8 cf       	rjmp	.-176    	; 0x26cc <CameraControl_DescribePIPE_RWSTREAMError+0xc>
	{
		case PIPE_RWSTREAM_PipeStalled:
			printf_P(PSTR("The device stalled the pipe during the transfer.\r\n"));
			break;
		case PIPE_RWSTREAM_DeviceDisconnected:
			printf_P(PSTR("Device was disconnected from the host during the transfer.\r\n"));
    277c:	00 d0       	rcall	.+0      	; 0x277e <CameraControl_DescribePIPE_RWSTREAMError+0xbe>
    277e:	8a eb       	ldi	r24, 0xBA	; 186
    2780:	92 e0       	ldi	r25, 0x02	; 2
    2782:	ad b7       	in	r26, 0x3d	; 61
    2784:	be b7       	in	r27, 0x3e	; 62
    2786:	12 96       	adiw	r26, 0x02	; 2
    2788:	9c 93       	st	X, r25
    278a:	8e 93       	st	-X, r24
    278c:	11 97       	sbiw	r26, 0x01	; 1
    278e:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
			break;
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	9a cf       	rjmp	.-204    	; 0x26cc <CameraControl_DescribePIPE_RWSTREAMError+0xc>
	printf_P(PSTR("PIMA Error (%d): "), uiStatus);

	switch (uiStatus)
	{
		case PIPE_RWSTREAM_PipeStalled:
			printf_P(PSTR("The device stalled the pipe during the transfer.\r\n"));
    2798:	00 d0       	rcall	.+0      	; 0x279a <CameraControl_DescribePIPE_RWSTREAMError+0xda>
    279a:	87 ef       	ldi	r24, 0xF7	; 247
    279c:	92 e0       	ldi	r25, 0x02	; 2
    279e:	ed b7       	in	r30, 0x3d	; 61
    27a0:	fe b7       	in	r31, 0x3e	; 62
    27a2:	92 83       	std	Z+2, r25	; 0x02
    27a4:	81 83       	std	Z+1, r24	; 0x01
    27a6:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
			break;
    27aa:	0f 90       	pop	r0
    27ac:	0f 90       	pop	r0
    27ae:	8e cf       	rjmp	.-228    	; 0x26cc <CameraControl_DescribePIPE_RWSTREAMError+0xc>

000027b0 <CameraControl_GetResponseAndCheck>:
/*------------------------------------------------------------------------------
 * CameraControl_GetResponseAndCheck
 */
uint8_t CameraControl_GetResponseAndCheck ( USB_ClassInfo_SI_Host_t* SIInterfaceInfo,
											PIMA_Container_t *PIMABlock )
{
    27b0:	1f 93       	push	r17
    27b2:	cf 93       	push	r28
    27b4:	df 93       	push	r29
    27b6:	eb 01       	movw	r28, r22
	uint8_t ErrorCode;

	CHECK_CAMERA_CONNECTION;
    27b8:	fc 01       	movw	r30, r24
    27ba:	26 81       	ldd	r18, Z+6	; 0x06
    27bc:	22 23       	and	r18, r18
    27be:	d9 f4       	brne	.+54     	; 0x27f6 <CameraControl_GetResponseAndCheck+0x46>
    27c0:	80 91 13 01 	lds	r24, 0x0113
    27c4:	88 23       	and	r24, r24
    27c6:	31 f0       	breq	.+12     	; 0x27d4 <CameraControl_GetResponseAndCheck+0x24>
	{
		CameraControl_PTPErrorDescription ( PIMABlock->Code );
		return SI_ERROR_LOGICAL_CMD_FAILED;
	}

	return PIPE_RWSTREAM_NoError;
    27c8:	10 e0       	ldi	r17, 0x00	; 0
}
    27ca:	81 2f       	mov	r24, r17
    27cc:	df 91       	pop	r29
    27ce:	cf 91       	pop	r28
    27d0:	1f 91       	pop	r17
    27d2:	08 95       	ret
uint8_t CameraControl_GetResponseAndCheck ( USB_ClassInfo_SI_Host_t* SIInterfaceInfo,
											PIMA_Container_t *PIMABlock )
{
	uint8_t ErrorCode;

	CHECK_CAMERA_CONNECTION;
    27d4:	00 d0       	rcall	.+0      	; 0x27d6 <CameraControl_GetResponseAndCheck+0x26>
    27d6:	88 e3       	ldi	r24, 0x38	; 56
    27d8:	91 e0       	ldi	r25, 0x01	; 1
    27da:	ed b7       	in	r30, 0x3d	; 61
    27dc:	fe b7       	in	r31, 0x3e	; 62
    27de:	92 83       	std	Z+2, r25	; 0x02
    27e0:	81 83       	std	Z+1, r24	; 0x01
    27e2:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	10 e0       	ldi	r17, 0x00	; 0
		CameraControl_PTPErrorDescription ( PIMABlock->Code );
		return SI_ERROR_LOGICAL_CMD_FAILED;
	}

	return PIPE_RWSTREAM_NoError;
}
    27ec:	81 2f       	mov	r24, r17
    27ee:	df 91       	pop	r29
    27f0:	cf 91       	pop	r28
    27f2:	1f 91       	pop	r17
    27f4:	08 95       	ret
	uint8_t ErrorCode;

	CHECK_CAMERA_CONNECTION;

	// Receive the final response block from the device 
	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, PIMABlock)) != PIPE_RWSTREAM_NoError)
    27f6:	5d dc       	rcall	.-1862   	; 0x20b2 <SI_Host_ReceiveBlockHeader>
    27f8:	18 2f       	mov	r17, r24
    27fa:	88 23       	and	r24, r24
    27fc:	a9 f4       	brne	.+42     	; 0x2828 <CameraControl_GetResponseAndCheck+0x78>
		if ( ErrorCode != SI_ERROR_LOGICAL_CMD_FAILED )
			return ErrorCode;
	}

	// Verify that the command completed successfully
	if ((PIMABlock->Type != PIMA_CONTAINER_ResponseBlock) || (PIMABlock->Code != PTP_RC_OK))
    27fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2800:	9d 81       	ldd	r25, Y+5	; 0x05
    2802:	83 30       	cpi	r24, 0x03	; 3
    2804:	91 05       	cpc	r25, r1
    2806:	49 f0       	breq	.+18     	; 0x281a <CameraControl_GetResponseAndCheck+0x6a>
    2808:	8e 81       	ldd	r24, Y+6	; 0x06
    280a:	9f 81       	ldd	r25, Y+7	; 0x07
	{
		CameraControl_PTPErrorDescription ( PIMABlock->Code );
    280c:	92 dd       	rcall	.-1244   	; 0x2332 <CameraControl_PTPErrorDescription>
		return SI_ERROR_LOGICAL_CMD_FAILED;
    280e:	10 e8       	ldi	r17, 0x80	; 128
	}

	return PIPE_RWSTREAM_NoError;
}
    2810:	81 2f       	mov	r24, r17
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	1f 91       	pop	r17
    2818:	08 95       	ret
		if ( ErrorCode != SI_ERROR_LOGICAL_CMD_FAILED )
			return ErrorCode;
	}

	// Verify that the command completed successfully
	if ((PIMABlock->Type != PIMA_CONTAINER_ResponseBlock) || (PIMABlock->Code != PTP_RC_OK))
    281a:	8e 81       	ldd	r24, Y+6	; 0x06
    281c:	9f 81       	ldd	r25, Y+7	; 0x07
    281e:	f0 e2       	ldi	r31, 0x20	; 32
    2820:	81 30       	cpi	r24, 0x01	; 1
    2822:	9f 07       	cpc	r25, r31
    2824:	99 f7       	brne	.-26     	; 0x280c <CameraControl_GetResponseAndCheck+0x5c>
    2826:	d0 cf       	rjmp	.-96     	; 0x27c8 <CameraControl_GetResponseAndCheck+0x18>
	CHECK_CAMERA_CONNECTION;

	// Receive the final response block from the device 
	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, PIMABlock)) != PIPE_RWSTREAM_NoError)
	{
		CameraControl_DescribePIPE_RWSTREAMError (ErrorCode);
    2828:	4b df       	rcall	.-362    	; 0x26c0 <CameraControl_DescribePIPE_RWSTREAMError>
		if ( ErrorCode != SI_ERROR_LOGICAL_CMD_FAILED )
    282a:	10 38       	cpi	r17, 0x80	; 128
    282c:	71 f6       	brne	.-100    	; 0x27ca <CameraControl_GetResponseAndCheck+0x1a>
    282e:	e7 cf       	rjmp	.-50     	; 0x27fe <CameraControl_GetResponseAndCheck+0x4e>

00002830 <CameraControl_InitiateTransaction>:
/*------------------------------------------------------------------------------
 * CameraControl_InitiateTransaction
 */
uint8_t CameraControl_InitiateTransaction ( USB_ClassInfo_SI_Host_t* SIInterfaceInfo,
											PIMA_Container_t *PIMABlock )
{
    2830:	ef 92       	push	r14
    2832:	ff 92       	push	r15
    2834:	0f 93       	push	r16
    2836:	1f 93       	push	r17
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	0f 92       	push	r0
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
    2842:	7c 01       	movw	r14, r24
    2844:	8b 01       	movw	r16, r22
	uint8_t ErrorCode;

	CHECK_CAMERA_CONNECTION;
    2846:	fc 01       	movw	r30, r24
    2848:	86 81       	ldd	r24, Z+6	; 0x06
    284a:	88 23       	and	r24, r24
    284c:	71 f0       	breq	.+28     	; 0x286a <CameraControl_InitiateTransaction+0x3a>
		CameraControl_DescribePIPE_RWSTREAMError (PIPE_RWSTREAM_DeviceDisconnected);
		return PIPE_RWSTREAM_DeviceDisconnected;
	}

	// Send the block - info request
	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, PIMABlock)) != PIPE_RWSTREAM_NoError)
    284e:	c7 01       	movw	r24, r14
    2850:	de db       	rcall	.-2116   	; 0x200e <SI_Host_SendBlockHeader>
    2852:	28 2f       	mov	r18, r24
    2854:	88 23       	and	r24, r24
    2856:	e1 f0       	breq	.+56     	; 0x2890 <CameraControl_InitiateTransaction+0x60>
		if ( ErrorCode != SI_ERROR_LOGICAL_CMD_FAILED )
			return ErrorCode;
	}
	
	return PIPE_RWSTREAM_NoError;
}
    2858:	82 2f       	mov	r24, r18
    285a:	0f 90       	pop	r0
    285c:	cf 91       	pop	r28
    285e:	df 91       	pop	r29
    2860:	1f 91       	pop	r17
    2862:	0f 91       	pop	r16
    2864:	ff 90       	pop	r15
    2866:	ef 90       	pop	r14
    2868:	08 95       	ret
uint8_t CameraControl_InitiateTransaction ( USB_ClassInfo_SI_Host_t* SIInterfaceInfo,
											PIMA_Container_t *PIMABlock )
{
	uint8_t ErrorCode;

	CHECK_CAMERA_CONNECTION;
    286a:	80 91 13 01 	lds	r24, 0x0113
    286e:	88 23       	and	r24, r24
    2870:	11 f0       	breq	.+4      	; 0x2876 <CameraControl_InitiateTransaction+0x46>
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	f1 cf       	rjmp	.-30     	; 0x2858 <CameraControl_InitiateTransaction+0x28>
    2876:	00 d0       	rcall	.+0      	; 0x2878 <CameraControl_InitiateTransaction+0x48>
    2878:	80 e2       	ldi	r24, 0x20	; 32
    287a:	91 e0       	ldi	r25, 0x01	; 1
    287c:	ed b7       	in	r30, 0x3d	; 61
    287e:	fe b7       	in	r31, 0x3e	; 62
    2880:	92 83       	std	Z+2, r25	; 0x02
    2882:	81 83       	std	Z+1, r24	; 0x01
    2884:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    2888:	0f 90       	pop	r0
    288a:	0f 90       	pop	r0
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	e4 cf       	rjmp	.-56     	; 0x2858 <CameraControl_InitiateTransaction+0x28>
	{
		return ErrorCode;
	}

	// Get the answer in the same memory block
	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, PIMABlock)) != PIPE_RWSTREAM_NoError)
    2890:	c7 01       	movw	r24, r14
    2892:	b8 01       	movw	r22, r16
    2894:	29 83       	std	Y+1, r18	; 0x01
    2896:	0d dc       	rcall	.-2022   	; 0x20b2 <SI_Host_ReceiveBlockHeader>
    2898:	08 2f       	mov	r16, r24
    289a:	29 81       	ldd	r18, Y+1	; 0x01
    289c:	88 23       	and	r24, r24
    289e:	e1 f2       	breq	.-72     	; 0x2858 <CameraControl_InitiateTransaction+0x28>
	{
		CameraControl_DescribePIPE_RWSTREAMError (ErrorCode);
    28a0:	0f df       	rcall	.-482    	; 0x26c0 <CameraControl_DescribePIPE_RWSTREAMError>
		if ( ErrorCode != SI_ERROR_LOGICAL_CMD_FAILED )
    28a2:	29 81       	ldd	r18, Y+1	; 0x01
    28a4:	00 38       	cpi	r16, 0x80	; 128
    28a6:	c1 f2       	breq	.-80     	; 0x2858 <CameraControl_InitiateTransaction+0x28>
    28a8:	20 2f       	mov	r18, r16
    28aa:	d6 cf       	rjmp	.-84     	; 0x2858 <CameraControl_InitiateTransaction+0x28>

000028ac <CameraControl_OpenSession>:

/*------------------------------------------------------------------------------
 * CameraControl_OpenSession
 */
uint8_t CameraControl_OpenSession(USB_ClassInfo_SI_Host_t* SIInterfaceInfo)
{
    28ac:	0f 93       	push	r16
    28ae:	1f 93       	push	r17
    28b0:	df 93       	push	r29
    28b2:	cf 93       	push	r28
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
    28b8:	68 97       	sbiw	r28, 0x18	; 24
    28ba:	0f b6       	in	r0, 0x3f	; 63
    28bc:	f8 94       	cli
    28be:	de bf       	out	0x3e, r29	; 62
    28c0:	0f be       	out	0x3f, r0	; 63
    28c2:	cd bf       	out	0x3d, r28	; 61
    28c4:	8c 01       	movw	r16, r24
	uint8_t ErrorCode;

	CHECK_CAMERA_CONNECTION;
    28c6:	fc 01       	movw	r30, r24
    28c8:	86 81       	ldd	r24, Z+6	; 0x06
    28ca:	88 23       	and	r24, r24
    28cc:	81 f4       	brne	.+32     	; 0x28ee <CameraControl_OpenSession+0x42>
    28ce:	80 91 13 01 	lds	r24, 0x0113
    28d2:	88 23       	and	r24, r24
    28d4:	d1 f1       	breq	.+116    	; 0x294a <CameraControl_OpenSession+0x9e>
    28d6:	80 e0       	ldi	r24, 0x00	; 0
	ErrorCode = CameraControl_InitiateTransaction ( SIInterfaceInfo, &PIMABlock );

	if ( ErrorCode == PIPE_RWSTREAM_NoError ) SIInterfaceInfo->State.IsSessionOpen = true;

	return ErrorCode;
}
    28d8:	68 96       	adiw	r28, 0x18	; 24
    28da:	0f b6       	in	r0, 0x3f	; 63
    28dc:	f8 94       	cli
    28de:	de bf       	out	0x3e, r29	; 62
    28e0:	0f be       	out	0x3f, r0	; 63
    28e2:	cd bf       	out	0x3d, r28	; 61
    28e4:	cf 91       	pop	r28
    28e6:	df 91       	pop	r29
    28e8:	1f 91       	pop	r17
    28ea:	0f 91       	pop	r16
    28ec:	08 95       	ret
{
	uint8_t ErrorCode;

	CHECK_CAMERA_CONNECTION;

	SIInterfaceInfo->State.TransactionID = 0;
    28ee:	f8 01       	movw	r30, r16
    28f0:	17 86       	std	Z+15, r1	; 0x0f
    28f2:	10 8a       	std	Z+16, r1	; 0x10
    28f4:	11 8a       	std	Z+17, r1	; 0x11
    28f6:	12 8a       	std	Z+18, r1	; 0x12
	SIInterfaceInfo->State.IsSessionOpen = false;
    28f8:	16 86       	std	Z+14, r1	; 0x0e

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    28fa:	be 01       	movw	r22, r28
    28fc:	6f 5f       	subi	r22, 0xFF	; 255
    28fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2900:	88 e1       	ldi	r24, 0x18	; 24
    2902:	fb 01       	movw	r30, r22
    2904:	11 92       	st	Z+, r1
    2906:	8a 95       	dec	r24
    2908:	e9 f7       	brne	.-6      	; 0x2904 <CameraControl_OpenSession+0x58>
    290a:	80 e1       	ldi	r24, 0x10	; 16
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	a0 e0       	ldi	r26, 0x00	; 0
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	89 83       	std	Y+1, r24	; 0x01
    2914:	9a 83       	std	Y+2, r25	; 0x02
    2916:	ab 83       	std	Y+3, r26	; 0x03
    2918:	bc 83       	std	Y+4, r27	; 0x04
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	9e 83       	std	Y+6, r25	; 0x06
    2920:	8d 83       	std	Y+5, r24	; 0x05
    2922:	82 e0       	ldi	r24, 0x02	; 2
    2924:	90 e1       	ldi	r25, 0x10	; 16
    2926:	98 87       	std	Y+8, r25	; 0x08
    2928:	8f 83       	std	Y+7, r24	; 0x07
    292a:	81 e0       	ldi	r24, 0x01	; 1
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	a0 e0       	ldi	r26, 0x00	; 0
    2930:	b0 e0       	ldi	r27, 0x00	; 0
    2932:	8d 87       	std	Y+13, r24	; 0x0d
    2934:	9e 87       	std	Y+14, r25	; 0x0e
    2936:	af 87       	std	Y+15, r26	; 0x0f
    2938:	b8 8b       	std	Y+16, r27	; 0x10
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = CPU_TO_LE16(PTP_OC_OpenSession),
			.Params        = {CPU_TO_LE32(1)},
		};

	ErrorCode = CameraControl_InitiateTransaction ( SIInterfaceInfo, &PIMABlock );
    293a:	c8 01       	movw	r24, r16
    293c:	79 df       	rcall	.-270    	; 0x2830 <CameraControl_InitiateTransaction>

	if ( ErrorCode == PIPE_RWSTREAM_NoError ) SIInterfaceInfo->State.IsSessionOpen = true;
    293e:	88 23       	and	r24, r24
    2940:	59 f6       	brne	.-106    	; 0x28d8 <CameraControl_OpenSession+0x2c>
    2942:	91 e0       	ldi	r25, 0x01	; 1
    2944:	f8 01       	movw	r30, r16
    2946:	96 87       	std	Z+14, r25	; 0x0e
    2948:	c7 cf       	rjmp	.-114    	; 0x28d8 <CameraControl_OpenSession+0x2c>
 */
uint8_t CameraControl_OpenSession(USB_ClassInfo_SI_Host_t* SIInterfaceInfo)
{
	uint8_t ErrorCode;

	CHECK_CAMERA_CONNECTION;
    294a:	00 d0       	rcall	.+0      	; 0x294c <CameraControl_OpenSession+0xa0>
    294c:	88 e0       	ldi	r24, 0x08	; 8
    294e:	91 e0       	ldi	r25, 0x01	; 1
    2950:	ed b7       	in	r30, 0x3d	; 61
    2952:	fe b7       	in	r31, 0x3e	; 62
    2954:	92 83       	std	Z+2, r25	; 0x02
    2956:	81 83       	std	Z+1, r24	; 0x01
    2958:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    295c:	0f 90       	pop	r0
    295e:	0f 90       	pop	r0
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	ba cf       	rjmp	.-140    	; 0x28d8 <CameraControl_OpenSession+0x2c>

00002964 <CameraControl_CloseSession>:

/*------------------------------------------------------------------------------
 * CameraControl_CloseSession
 */
uint8_t CameraControl_CloseSession(USB_ClassInfo_SI_Host_t* SIInterfaceInfo)
{
    2964:	0f 93       	push	r16
    2966:	1f 93       	push	r17
    2968:	df 93       	push	r29
    296a:	cf 93       	push	r28
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
    2970:	68 97       	sbiw	r28, 0x18	; 24
    2972:	0f b6       	in	r0, 0x3f	; 63
    2974:	f8 94       	cli
    2976:	de bf       	out	0x3e, r29	; 62
    2978:	0f be       	out	0x3f, r0	; 63
    297a:	cd bf       	out	0x3d, r28	; 61
    297c:	8c 01       	movw	r16, r24
	uint8_t ErrorCode;

	CHECK_CAMERA_CONNECTION;
    297e:	fc 01       	movw	r30, r24
    2980:	86 81       	ldd	r24, Z+6	; 0x06
    2982:	88 23       	and	r24, r24
    2984:	81 f4       	brne	.+32     	; 0x29a6 <CameraControl_CloseSession+0x42>
    2986:	80 91 13 01 	lds	r24, 0x0113
    298a:	88 23       	and	r24, r24
    298c:	59 f1       	breq	.+86     	; 0x29e4 <CameraControl_CloseSession+0x80>
    298e:	80 e0       	ldi	r24, 0x00	; 0
	ErrorCode = CameraControl_InitiateTransaction ( SIInterfaceInfo, &PIMABlock );

	if ( ErrorCode == PIPE_RWSTREAM_NoError ) SIInterfaceInfo->State.IsSessionOpen = false;

	return ErrorCode;
}
    2990:	68 96       	adiw	r28, 0x18	; 24
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	1f 91       	pop	r17
    29a2:	0f 91       	pop	r16
    29a4:	08 95       	ret
{
	uint8_t ErrorCode;

	CHECK_CAMERA_CONNECTION;

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    29a6:	be 01       	movw	r22, r28
    29a8:	6f 5f       	subi	r22, 0xFF	; 255
    29aa:	7f 4f       	sbci	r23, 0xFF	; 255
    29ac:	88 e1       	ldi	r24, 0x18	; 24
    29ae:	fb 01       	movw	r30, r22
    29b0:	11 92       	st	Z+, r1
    29b2:	8a 95       	dec	r24
    29b4:	e9 f7       	brne	.-6      	; 0x29b0 <CameraControl_CloseSession+0x4c>
    29b6:	8c e0       	ldi	r24, 0x0C	; 12
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	a0 e0       	ldi	r26, 0x00	; 0
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	89 83       	std	Y+1, r24	; 0x01
    29c0:	9a 83       	std	Y+2, r25	; 0x02
    29c2:	ab 83       	std	Y+3, r26	; 0x03
    29c4:	bc 83       	std	Y+4, r27	; 0x04
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	9e 83       	std	Y+6, r25	; 0x06
    29cc:	8d 83       	std	Y+5, r24	; 0x05
    29ce:	83 e0       	ldi	r24, 0x03	; 3
    29d0:	90 e1       	ldi	r25, 0x10	; 16
    29d2:	98 87       	std	Y+8, r25	; 0x08
    29d4:	8f 83       	std	Y+7, r24	; 0x07
			.DataLength    = CPU_TO_LE32(PIMA_COMMAND_SIZE(0)),
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = CPU_TO_LE16(PTP_OC_CloseSession),
		};

	ErrorCode = CameraControl_InitiateTransaction ( SIInterfaceInfo, &PIMABlock );
    29d6:	c8 01       	movw	r24, r16
    29d8:	2b df       	rcall	.-426    	; 0x2830 <CameraControl_InitiateTransaction>

	if ( ErrorCode == PIPE_RWSTREAM_NoError ) SIInterfaceInfo->State.IsSessionOpen = false;
    29da:	88 23       	and	r24, r24
    29dc:	c9 f6       	brne	.-78     	; 0x2990 <CameraControl_CloseSession+0x2c>
    29de:	f8 01       	movw	r30, r16
    29e0:	16 86       	std	Z+14, r1	; 0x0e
    29e2:	d6 cf       	rjmp	.-84     	; 0x2990 <CameraControl_CloseSession+0x2c>
 */
uint8_t CameraControl_CloseSession(USB_ClassInfo_SI_Host_t* SIInterfaceInfo)
{
	uint8_t ErrorCode;

	CHECK_CAMERA_CONNECTION;
    29e4:	00 d0       	rcall	.+0      	; 0x29e6 <CameraControl_CloseSession+0x82>
    29e6:	80 ef       	ldi	r24, 0xF0	; 240
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	ed b7       	in	r30, 0x3d	; 61
    29ec:	fe b7       	in	r31, 0x3e	; 62
    29ee:	92 83       	std	Z+2, r25	; 0x02
    29f0:	81 83       	std	Z+1, r24	; 0x01
    29f2:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    29f6:	0f 90       	pop	r0
    29f8:	0f 90       	pop	r0
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	c9 cf       	rjmp	.-110    	; 0x2990 <CameraControl_CloseSession+0x2c>

000029fe <CameraControl_GeneralStream_Bin>:
											uint32_t p2,
											uint32_t p3, 
											uint8_t numParams,
											uint8_t headerType,
											uint16_t transID )										
{
    29fe:	4f 92       	push	r4
    2a00:	5f 92       	push	r5
    2a02:	6f 92       	push	r6
    2a04:	7f 92       	push	r7
    2a06:	8f 92       	push	r8
    2a08:	9f 92       	push	r9
    2a0a:	af 92       	push	r10
    2a0c:	bf 92       	push	r11
    2a0e:	cf 92       	push	r12
    2a10:	df 92       	push	r13
    2a12:	ef 92       	push	r14
    2a14:	ff 92       	push	r15
    2a16:	0f 93       	push	r16
    2a18:	1f 93       	push	r17
    2a1a:	df 93       	push	r29
    2a1c:	cf 93       	push	r28
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
    2a22:	ed 97       	sbiw	r28, 0x3d	; 61
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	f8 94       	cli
    2a28:	de bf       	out	0x3e, r29	; 62
    2a2a:	0f be       	out	0x3f, r0	; 63
    2a2c:	cd bf       	out	0x3d, r28	; 61
    2a2e:	3c 01       	movw	r6, r24
    2a30:	61 96       	adiw	r28, 0x11	; 17
    2a32:	9f ac       	ldd	r9, Y+63	; 0x3f
    2a34:	61 97       	sbiw	r28, 0x11	; 17
	uint16_t	i;
	TP_Header_ST header;
	uint8_t		sentData[32];
	uint16_t	remainingToSend = 0;

	CHECK_CAMERA_CONNECTION;
    2a36:	fc 01       	movw	r30, r24
    2a38:	96 81       	ldd	r25, Z+6	; 0x06
    2a3a:	99 23       	and	r25, r25
    2a3c:	e9 f4       	brne	.+58     	; 0x2a78 <CameraControl_GeneralStream_Bin+0x7a>
    2a3e:	80 91 13 01 	lds	r24, 0x0113
    2a42:	88 23       	and	r24, r24
    2a44:	09 f4       	brne	.+2      	; 0x2a48 <CameraControl_GeneralStream_Bin+0x4a>
    2a46:	84 c0       	rjmp	.+264    	; 0x2b50 <CameraControl_GeneralStream_Bin+0x152>

	// Receive the final response block from the device 
	CameraControl_GetResponseAndCheck (SIInterfaceInfo, &PIMABlock);

	return 0;										
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	ed 96       	adiw	r28, 0x3d	; 61
    2a4c:	0f b6       	in	r0, 0x3f	; 63
    2a4e:	f8 94       	cli
    2a50:	de bf       	out	0x3e, r29	; 62
    2a52:	0f be       	out	0x3f, r0	; 63
    2a54:	cd bf       	out	0x3d, r28	; 61
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	1f 91       	pop	r17
    2a5c:	0f 91       	pop	r16
    2a5e:	ff 90       	pop	r15
    2a60:	ef 90       	pop	r14
    2a62:	df 90       	pop	r13
    2a64:	cf 90       	pop	r12
    2a66:	bf 90       	pop	r11
    2a68:	af 90       	pop	r10
    2a6a:	9f 90       	pop	r9
    2a6c:	8f 90       	pop	r8
    2a6e:	7f 90       	pop	r7
    2a70:	6f 90       	pop	r6
    2a72:	5f 90       	pop	r5
    2a74:	4f 90       	pop	r4
    2a76:	08 95       	ret
	uint8_t		sentData[32];
	uint16_t	remainingToSend = 0;

	CHECK_CAMERA_CONNECTION;
	
	SIInterfaceInfo->State.TransactionID = 0;
    2a78:	f3 01       	movw	r30, r6
    2a7a:	17 86       	std	Z+15, r1	; 0x0f
    2a7c:	10 8a       	std	Z+16, r1	; 0x10
    2a7e:	11 8a       	std	Z+17, r1	; 0x11
    2a80:	12 8a       	std	Z+18, r1	; 0x12

	// Create PIMA message block
	PIMA_Container_t PIMABlock = (PIMA_Container_t)
		{
			.DataLength    = CPU_TO_LE32(PIMA_COMMAND_SIZE(numParams)),
    2a82:	88 2d       	mov	r24, r8
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	03 96       	adiw	r24, 0x03	; 3
    2a88:	88 0f       	add	r24, r24
    2a8a:	99 1f       	adc	r25, r25
    2a8c:	88 0f       	add	r24, r24
    2a8e:	99 1f       	adc	r25, r25
	CHECK_CAMERA_CONNECTION;
	
	SIInterfaceInfo->State.TransactionID = 0;

	// Create PIMA message block
	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    2a90:	a0 e0       	ldi	r26, 0x00	; 0
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	8e 83       	std	Y+6, r24	; 0x06
    2a96:	9f 83       	std	Y+7, r25	; 0x07
    2a98:	a8 87       	std	Y+8, r26	; 0x08
    2a9a:	b9 87       	std	Y+9, r27	; 0x09
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	9b 87       	std	Y+11, r25	; 0x0b
    2aa2:	8a 87       	std	Y+10, r24	; 0x0a
    2aa4:	7d 87       	std	Y+13, r23	; 0x0d
    2aa6:	6c 87       	std	Y+12, r22	; 0x0c
    2aa8:	1e 86       	std	Y+14, r1	; 0x0e
    2aaa:	1f 86       	std	Y+15, r1	; 0x0f
    2aac:	18 8a       	std	Y+16, r1	; 0x10
    2aae:	19 8a       	std	Y+17, r1	; 0x11
    2ab0:	2a 8b       	std	Y+18, r18	; 0x12
    2ab2:	3b 8b       	std	Y+19, r19	; 0x13
    2ab4:	4c 8b       	std	Y+20, r20	; 0x14
    2ab6:	5d 8b       	std	Y+21, r21	; 0x15
    2ab8:	ee 8a       	std	Y+22, r14	; 0x16
    2aba:	ff 8a       	std	Y+23, r15	; 0x17
    2abc:	08 8f       	std	Y+24, r16	; 0x18
    2abe:	19 8f       	std	Y+25, r17	; 0x19
    2ac0:	aa 8e       	std	Y+26, r10	; 0x1a
    2ac2:	bb 8e       	std	Y+27, r11	; 0x1b
    2ac4:	cc 8e       	std	Y+28, r12	; 0x1c
    2ac6:	dd 8e       	std	Y+29, r13	; 0x1d
			.Code          = CPU_TO_LE16(operation),
			.TransactionID = CPU_TO_LE32(0x00000000),
			.Params        = {p1, p2, p3},
		};

	ErrorCode = CameraControl_InitiateTransaction ( SIInterfaceInfo, &PIMABlock );
    2ac8:	26 e0       	ldi	r18, 0x06	; 6
    2aca:	42 2e       	mov	r4, r18
    2acc:	51 2c       	mov	r5, r1
    2ace:	4c 0e       	add	r4, r28
    2ad0:	5d 1e       	adc	r5, r29
    2ad2:	c3 01       	movw	r24, r6
    2ad4:	b2 01       	movw	r22, r4
    2ad6:	ac de       	rcall	.-680    	; 0x2830 <CameraControl_InitiateTransaction>

	// Get the size (in bytes) of the device info structure
	remainingToSend = ReturnedDataSize = (PIMABlock.DataLength - PIMA_COMMAND_SIZE(0));
    2ad8:	0e 81       	ldd	r16, Y+6	; 0x06
    2ada:	1f 81       	ldd	r17, Y+7	; 0x07
    2adc:	0c 50       	subi	r16, 0x0C	; 12
    2ade:	10 40       	sbci	r17, 0x00	; 0
	//char tmp_msg[64];
	//sprintf(tmp_msg, "size %u", remainingToSend);
	//TP_SendDebugLog ( tmp_msg );

	// if we need all the message
	if (headerType != 0)
    2ae0:	99 20       	and	r9, r9
    2ae2:	09 f0       	breq	.+2      	; 0x2ae6 <CameraControl_GeneralStream_Bin+0xe8>
    2ae4:	41 c0       	rjmp	.+130    	; 0x2b68 <CameraControl_GeneralStream_Bin+0x16a>
		header.transID = transID;
		header.type = headerType;
		TP_SendHeader(&header);
	}
	
	while (remainingToSend)
    2ae6:	01 15       	cp	r16, r1
    2ae8:	11 05       	cpc	r17, r1
    2aea:	49 f1       	breq	.+82     	; 0x2b3e <CameraControl_GeneralStream_Bin+0x140>
    2aec:	58 01       	movw	r10, r16
    2aee:	9e e1       	ldi	r25, 0x1E	; 30
    2af0:	89 2e       	mov	r8, r25
    2af2:	91 2c       	mov	r9, r1
    2af4:	8c 0e       	add	r8, r28
    2af6:	9d 1e       	adc	r9, r29
	{
		uint16_t currentChunkSize =  (remainingToSend>32)?32:remainingToSend;
    2af8:	65 01       	movw	r12, r10
    2afa:	f1 e2       	ldi	r31, 0x21	; 33
    2afc:	af 16       	cp	r10, r31
    2afe:	b1 04       	cpc	r11, r1
    2b00:	18 f0       	brcs	.+6      	; 0x2b08 <CameraControl_GeneralStream_Bin+0x10a>
    2b02:	80 e2       	ldi	r24, 0x20	; 32
    2b04:	c8 2e       	mov	r12, r24
    2b06:	d1 2c       	mov	r13, r1
		// Read in the data block data (containing device info)
		SI_Host_ReadData(SIInterfaceInfo, sentData, currentChunkSize);
    2b08:	c3 01       	movw	r24, r6
    2b0a:	b4 01       	movw	r22, r8
    2b0c:	a6 01       	movw	r20, r12
    2b0e:	5a db       	rcall	.-2380   	; 0x21c4 <SI_Host_ReadData>
		
		for (i=0; i<currentChunkSize; i++)
    2b10:	c1 14       	cp	r12, r1
    2b12:	d1 04       	cpc	r13, r1
    2b14:	89 f0       	breq	.+34     	; 0x2b38 <CameraControl_GeneralStream_Bin+0x13a>
    2b16:	74 01       	movw	r14, r8
    2b18:	00 e0       	ldi	r16, 0x00	; 0
    2b1a:	10 e0       	ldi	r17, 0x00	; 0
			uart_putc(sentData[i], stdout);
    2b1c:	60 91 d0 05 	lds	r22, 0x05D0
    2b20:	70 91 d1 05 	lds	r23, 0x05D1
    2b24:	f7 01       	movw	r30, r14
    2b26:	81 91       	ld	r24, Z+
    2b28:	7f 01       	movw	r14, r30
    2b2a:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <uart_putc>
	{
		uint16_t currentChunkSize =  (remainingToSend>32)?32:remainingToSend;
		// Read in the data block data (containing device info)
		SI_Host_ReadData(SIInterfaceInfo, sentData, currentChunkSize);
		
		for (i=0; i<currentChunkSize; i++)
    2b2e:	0f 5f       	subi	r16, 0xFF	; 255
    2b30:	1f 4f       	sbci	r17, 0xFF	; 255
    2b32:	0c 15       	cp	r16, r12
    2b34:	1d 05       	cpc	r17, r13
    2b36:	90 f3       	brcs	.-28     	; 0x2b1c <CameraControl_GeneralStream_Bin+0x11e>
			uart_putc(sentData[i], stdout);

		remainingToSend -= currentChunkSize;
    2b38:	ac 18       	sub	r10, r12
    2b3a:	bd 08       	sbc	r11, r13
		header.transID = transID;
		header.type = headerType;
		TP_SendHeader(&header);
	}
	
	while (remainingToSend)
    2b3c:	e9 f6       	brne	.-70     	; 0x2af8 <CameraControl_GeneralStream_Bin+0xfa>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    2b3e:	80 91 a6 00 	lds	r24, 0x00A6
    2b42:	8e 77       	andi	r24, 0x7E	; 126
    2b44:	80 93 a6 00 	sts	0x00A6, r24
	
	// Once all the data has been read, the pipe must be cleared before the response can be sent
	Pipe_ClearIN();

	// Receive the final response block from the device 
	CameraControl_GetResponseAndCheck (SIInterfaceInfo, &PIMABlock);
    2b48:	c3 01       	movw	r24, r6
    2b4a:	b2 01       	movw	r22, r4
    2b4c:	31 de       	rcall	.-926    	; 0x27b0 <CameraControl_GetResponseAndCheck>

	return 0;										
    2b4e:	7c cf       	rjmp	.-264    	; 0x2a48 <CameraControl_GeneralStream_Bin+0x4a>
	uint16_t	i;
	TP_Header_ST header;
	uint8_t		sentData[32];
	uint16_t	remainingToSend = 0;

	CHECK_CAMERA_CONNECTION;
    2b50:	00 d0       	rcall	.+0      	; 0x2b52 <CameraControl_GeneralStream_Bin+0x154>
    2b52:	88 ed       	ldi	r24, 0xD8	; 216
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	ed b7       	in	r30, 0x3d	; 61
    2b58:	fe b7       	in	r31, 0x3e	; 62
    2b5a:	92 83       	std	Z+2, r25	; 0x02
    2b5c:	81 83       	std	Z+1, r24	; 0x01
    2b5e:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	70 cf       	rjmp	.-288    	; 0x2a48 <CameraControl_GeneralStream_Bin+0x4a>

	// if we need all the message
	if (headerType != 0)
	{
		// create the data header
		header.length = ReturnedDataSize;
    2b68:	1b 83       	std	Y+3, r17	; 0x03
    2b6a:	0a 83       	std	Y+2, r16	; 0x02
		header.transID = transID;
    2b6c:	63 96       	adiw	r28, 0x13	; 19
    2b6e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b70:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b72:	63 97       	sbiw	r28, 0x13	; 19
    2b74:	9d 83       	std	Y+5, r25	; 0x05
    2b76:	8c 83       	std	Y+4, r24	; 0x04
		header.type = headerType;
    2b78:	99 82       	std	Y+1, r9	; 0x01
		TP_SendHeader(&header);
    2b7a:	ce 01       	movw	r24, r28
    2b7c:	01 96       	adiw	r24, 0x01	; 1
    2b7e:	4c d2       	rcall	.+1176   	; 0x3018 <TP_SendHeader>
    2b80:	b2 cf       	rjmp	.-156    	; 0x2ae6 <CameraControl_GeneralStream_Bin+0xe8>

00002b82 <CameraControl_DeviceInfo_Bin>:

/*------------------------------------------------------------------------------
 * CameraControl_DeviceInfo_Bin
 */
uint8_t CameraControl_DeviceInfo_Bin ( USB_ClassInfo_SI_Host_t* SIInterfaceInfo, uint16_t transID )
{
    2b82:	8f 92       	push	r8
    2b84:	af 92       	push	r10
    2b86:	bf 92       	push	r11
    2b88:	cf 92       	push	r12
    2b8a:	df 92       	push	r13
    2b8c:	ef 92       	push	r14
    2b8e:	ff 92       	push	r15
    2b90:	0f 93       	push	r16
    2b92:	1f 93       	push	r17
	return CameraControl_GeneralStream_Bin (SIInterfaceInfo, 
    2b94:	00 d0       	rcall	.+0      	; 0x2b96 <CameraControl_DeviceInfo_Bin+0x14>
    2b96:	0f 92       	push	r0
    2b98:	21 ea       	ldi	r18, 0xA1	; 161
    2b9a:	ed b7       	in	r30, 0x3d	; 61
    2b9c:	fe b7       	in	r31, 0x3e	; 62
    2b9e:	21 83       	std	Z+1, r18	; 0x01
    2ba0:	73 83       	std	Z+3, r23	; 0x03
    2ba2:	62 83       	std	Z+2, r22	; 0x02
    2ba4:	61 e0       	ldi	r22, 0x01	; 1
    2ba6:	70 e1       	ldi	r23, 0x10	; 16
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	a9 01       	movw	r20, r18
    2bae:	ee 24       	eor	r14, r14
    2bb0:	ff 24       	eor	r15, r15
    2bb2:	87 01       	movw	r16, r14
    2bb4:	aa 24       	eor	r10, r10
    2bb6:	bb 24       	eor	r11, r11
    2bb8:	65 01       	movw	r12, r10
    2bba:	88 24       	eor	r8, r8
    2bbc:	20 df       	rcall	.-448    	; 0x29fe <CameraControl_GeneralStream_Bin>
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
											0,
											0, 
											0,
											TP_DATA_CAMERA_INFO,
											transID );
}
    2bc4:	1f 91       	pop	r17
    2bc6:	0f 91       	pop	r16
    2bc8:	ff 90       	pop	r15
    2bca:	ef 90       	pop	r14
    2bcc:	df 90       	pop	r13
    2bce:	cf 90       	pop	r12
    2bd0:	bf 90       	pop	r11
    2bd2:	af 90       	pop	r10
    2bd4:	8f 90       	pop	r8
    2bd6:	08 95       	ret

00002bd8 <CameraControl_GetStorageIDs>:
	}

	// Receive the final response block from the device 
	return CameraControl_GetResponseAndCheck (SIInterfaceInfo, &PIMABlock);*/
	return 0;
}
    2bd8:	80 e0       	ldi	r24, 0x00	; 0
    2bda:	08 95       	ret

00002bdc <CameraControl_StorageInfo_Bin>:

/*------------------------------------------------------------------------------
 * CameraControl_StorageInfo_Bin - binary transfer
 */
uint8_t CameraControl_StorageInfo_Bin 	( USB_ClassInfo_SI_Host_t* SIInterfaceInfo,  uint8_t iStorageIndex, uint16_t transID )
{
    2bdc:	8f 92       	push	r8
    2bde:	af 92       	push	r10
    2be0:	bf 92       	push	r11
    2be2:	cf 92       	push	r12
    2be4:	df 92       	push	r13
    2be6:	ef 92       	push	r14
    2be8:	ff 92       	push	r15
    2bea:	0f 93       	push	r16
    2bec:	1f 93       	push	r17
    2bee:	da 01       	movw	r26, r20
	uint32_t iStorageID;

	if ( iStorageIndex >= g_iNumOfStorages )
    2bf0:	20 91 04 02 	lds	r18, 0x0204
    2bf4:	62 17       	cp	r22, r18
    2bf6:	58 f0       	brcs	.+22     	; 0x2c0e <CameraControl_StorageInfo_Bin+0x32>
	{
		// The index is higher then the available storage IDs
		//printf_P(PSTR("Error getting storage info - storage index %d is bigger then num of storages %d.\r\n"), 
		//					iStorageIndex, g_iNumOfStorages);
		return SI_ERROR_LOGICAL_CMD_FAILED;
    2bf8:	80 e8       	ldi	r24, 0x80	; 128
											0,
											0, 
											1,
											TP_DATA_STORAGE_INFO,
											transID );
}
    2bfa:	1f 91       	pop	r17
    2bfc:	0f 91       	pop	r16
    2bfe:	ff 90       	pop	r15
    2c00:	ef 90       	pop	r14
    2c02:	df 90       	pop	r13
    2c04:	cf 90       	pop	r12
    2c06:	bf 90       	pop	r11
    2c08:	af 90       	pop	r10
    2c0a:	8f 90       	pop	r8
    2c0c:	08 95       	ret
		//printf_P(PSTR("Error getting storage info - storage index %d is bigger then num of storages %d.\r\n"), 
		//					iStorageIndex, g_iNumOfStorages);
		return SI_ERROR_LOGICAL_CMD_FAILED;
	}

	iStorageID = g_aiStorageIDs[iStorageIndex];
    2c0e:	e6 2f       	mov	r30, r22
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	ee 0f       	add	r30, r30
    2c14:	ff 1f       	adc	r31, r31
    2c16:	ee 0f       	add	r30, r30
    2c18:	ff 1f       	adc	r31, r31
    2c1a:	e6 59       	subi	r30, 0x96	; 150
    2c1c:	fb 4f       	sbci	r31, 0xFB	; 251
    2c1e:	20 81       	ld	r18, Z
    2c20:	31 81       	ldd	r19, Z+1	; 0x01
    2c22:	42 81       	ldd	r20, Z+2	; 0x02
    2c24:	53 81       	ldd	r21, Z+3	; 0x03

	return CameraControl_GeneralStream_Bin (SIInterfaceInfo, 
    2c26:	00 d0       	rcall	.+0      	; 0x2c28 <CameraControl_StorageInfo_Bin+0x4c>
    2c28:	0f 92       	push	r0
    2c2a:	63 ea       	ldi	r22, 0xA3	; 163
    2c2c:	ed b7       	in	r30, 0x3d	; 61
    2c2e:	fe b7       	in	r31, 0x3e	; 62
    2c30:	61 83       	std	Z+1, r22	; 0x01
    2c32:	b3 83       	std	Z+3, r27	; 0x03
    2c34:	a2 83       	std	Z+2, r26	; 0x02
    2c36:	65 e0       	ldi	r22, 0x05	; 5
    2c38:	70 e1       	ldi	r23, 0x10	; 16
    2c3a:	ee 24       	eor	r14, r14
    2c3c:	ff 24       	eor	r15, r15
    2c3e:	87 01       	movw	r16, r14
    2c40:	aa 24       	eor	r10, r10
    2c42:	bb 24       	eor	r11, r11
    2c44:	65 01       	movw	r12, r10
    2c46:	88 24       	eor	r8, r8
    2c48:	83 94       	inc	r8
    2c4a:	d9 de       	rcall	.-590    	; 0x29fe <CameraControl_GeneralStream_Bin>
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	d3 cf       	rjmp	.-90     	; 0x2bfa <CameraControl_StorageInfo_Bin+0x1e>

00002c54 <CameraControl_DeviceOperation_GetPropertyDescBin>:
/*------------------------------------------------------------------------------
 * CameraControl_DeviceOperation_GetPropertyDesc
 */
uint16_t CameraControl_DeviceOperation_GetPropertyDescBin ( USB_ClassInfo_SI_Host_t* SIInterfaceInfo,
															PTP_DEVPROPERTY_EN enPropertyType, uint16_t transID )
{
    2c54:	8f 92       	push	r8
    2c56:	af 92       	push	r10
    2c58:	bf 92       	push	r11
    2c5a:	cf 92       	push	r12
    2c5c:	df 92       	push	r13
    2c5e:	ef 92       	push	r14
    2c60:	ff 92       	push	r15
    2c62:	0f 93       	push	r16
    2c64:	1f 93       	push	r17
    2c66:	fa 01       	movw	r30, r20
	return CameraControl_GeneralStream_Bin (SIInterfaceInfo, 
    2c68:	00 d0       	rcall	.+0      	; 0x2c6a <CameraControl_DeviceOperation_GetPropertyDescBin+0x16>
    2c6a:	0f 92       	push	r0
    2c6c:	9b 01       	movw	r18, r22
    2c6e:	40 e0       	ldi	r20, 0x00	; 0
    2c70:	50 e0       	ldi	r21, 0x00	; 0
    2c72:	69 ea       	ldi	r22, 0xA9	; 169
    2c74:	ad b7       	in	r26, 0x3d	; 61
    2c76:	be b7       	in	r27, 0x3e	; 62
    2c78:	11 96       	adiw	r26, 0x01	; 1
    2c7a:	6c 93       	st	X, r22
    2c7c:	11 97       	sbiw	r26, 0x01	; 1
    2c7e:	13 96       	adiw	r26, 0x03	; 3
    2c80:	fc 93       	st	X, r31
    2c82:	ee 93       	st	-X, r30
    2c84:	12 97       	sbiw	r26, 0x02	; 2
    2c86:	64 e1       	ldi	r22, 0x14	; 20
    2c88:	70 e1       	ldi	r23, 0x10	; 16
    2c8a:	ee 24       	eor	r14, r14
    2c8c:	ff 24       	eor	r15, r15
    2c8e:	87 01       	movw	r16, r14
    2c90:	aa 24       	eor	r10, r10
    2c92:	bb 24       	eor	r11, r11
    2c94:	65 01       	movw	r12, r10
    2c96:	88 24       	eor	r8, r8
    2c98:	83 94       	inc	r8
    2c9a:	b1 de       	rcall	.-670    	; 0x29fe <CameraControl_GeneralStream_Bin>
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
											0,
											0, 
											1,
											TP_DATA_PROP_DESC,
											transID );
}
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	1f 91       	pop	r17
    2ca6:	0f 91       	pop	r16
    2ca8:	ff 90       	pop	r15
    2caa:	ef 90       	pop	r14
    2cac:	df 90       	pop	r13
    2cae:	cf 90       	pop	r12
    2cb0:	bf 90       	pop	r11
    2cb2:	af 90       	pop	r10
    2cb4:	8f 90       	pop	r8
    2cb6:	08 95       	ret

00002cb8 <CameraControl_DeviceOperation_GetPropertyValBin>:
/*------------------------------------------------------------------------------
 * CameraControl_DeviceOperation_GetPropertyValBin
 */
uint16_t CameraControl_DeviceOperation_GetPropertyValBin ( USB_ClassInfo_SI_Host_t* SIInterfaceInfo,
												 		   PTP_DEVPROPERTY_EN enPropertyType, uint16_t transID )
{
    2cb8:	8f 92       	push	r8
    2cba:	af 92       	push	r10
    2cbc:	bf 92       	push	r11
    2cbe:	cf 92       	push	r12
    2cc0:	df 92       	push	r13
    2cc2:	ef 92       	push	r14
    2cc4:	ff 92       	push	r15
    2cc6:	0f 93       	push	r16
    2cc8:	1f 93       	push	r17
    2cca:	fa 01       	movw	r30, r20
	return CameraControl_GeneralStream_Bin (SIInterfaceInfo, 
    2ccc:	00 d0       	rcall	.+0      	; 0x2cce <CameraControl_DeviceOperation_GetPropertyValBin+0x16>
    2cce:	0f 92       	push	r0
    2cd0:	9b 01       	movw	r18, r22
    2cd2:	40 e0       	ldi	r20, 0x00	; 0
    2cd4:	50 e0       	ldi	r21, 0x00	; 0
    2cd6:	6a ea       	ldi	r22, 0xAA	; 170
    2cd8:	ad b7       	in	r26, 0x3d	; 61
    2cda:	be b7       	in	r27, 0x3e	; 62
    2cdc:	11 96       	adiw	r26, 0x01	; 1
    2cde:	6c 93       	st	X, r22
    2ce0:	11 97       	sbiw	r26, 0x01	; 1
    2ce2:	13 96       	adiw	r26, 0x03	; 3
    2ce4:	fc 93       	st	X, r31
    2ce6:	ee 93       	st	-X, r30
    2ce8:	12 97       	sbiw	r26, 0x02	; 2
    2cea:	65 e1       	ldi	r22, 0x15	; 21
    2cec:	70 e1       	ldi	r23, 0x10	; 16
    2cee:	ee 24       	eor	r14, r14
    2cf0:	ff 24       	eor	r15, r15
    2cf2:	87 01       	movw	r16, r14
    2cf4:	aa 24       	eor	r10, r10
    2cf6:	bb 24       	eor	r11, r11
    2cf8:	65 01       	movw	r12, r10
    2cfa:	88 24       	eor	r8, r8
    2cfc:	83 94       	inc	r8
    2cfe:	7f de       	rcall	.-770    	; 0x29fe <CameraControl_GeneralStream_Bin>
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
											0,
											0, 
											1,
											TP_DATA_PROP_VAL,
											transID );
}
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	1f 91       	pop	r17
    2d0a:	0f 91       	pop	r16
    2d0c:	ff 90       	pop	r15
    2d0e:	ef 90       	pop	r14
    2d10:	df 90       	pop	r13
    2d12:	cf 90       	pop	r12
    2d14:	bf 90       	pop	r11
    2d16:	af 90       	pop	r10
    2d18:	8f 90       	pop	r8
    2d1a:	08 95       	ret

00002d1c <CameraControl_GetPropertyVal32Bit>:

/*------------------------------------------------------------------------------
 * CameraControl_GetPropertyVal32Bit
 */
uint16_t CameraControl_GetPropertyVal32Bit	( USB_ClassInfo_SI_Host_t* SIInterfaceInfo, PTP_DEVPROPERTY_EN enPropertyType, uint32_t *iVal )
{
    2d1c:	af 92       	push	r10
    2d1e:	bf 92       	push	r11
    2d20:	cf 92       	push	r12
    2d22:	df 92       	push	r13
    2d24:	ef 92       	push	r14
    2d26:	ff 92       	push	r15
    2d28:	0f 93       	push	r16
    2d2a:	1f 93       	push	r17
    2d2c:	df 93       	push	r29
    2d2e:	cf 93       	push	r28
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	a8 97       	sbiw	r28, 0x28	; 40
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	f8 94       	cli
    2d3a:	de bf       	out	0x3e, r29	; 62
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	cd bf       	out	0x3d, r28	; 61
    2d40:	8c 01       	movw	r16, r24
    2d42:	6a 01       	movw	r12, r20
	uint16_t 	ReturnedDataSize;
	uint8_t 	ErrorCode = 0;
	uint8_t		RecData[16] = {0};
    2d44:	7e 01       	movw	r14, r28
    2d46:	08 94       	sec
    2d48:	e1 1c       	adc	r14, r1
    2d4a:	f1 1c       	adc	r15, r1
    2d4c:	80 e1       	ldi	r24, 0x10	; 16
    2d4e:	f7 01       	movw	r30, r14
    2d50:	11 92       	st	Z+, r1
    2d52:	8a 95       	dec	r24
    2d54:	e9 f7       	brne	.-6      	; 0x2d50 <CameraControl_GetPropertyVal32Bit+0x34>

	CHECK_CAMERA_CONNECTION;
    2d56:	f8 01       	movw	r30, r16
    2d58:	86 81       	ldd	r24, Z+6	; 0x06
    2d5a:	88 23       	and	r24, r24
    2d5c:	c1 f4       	brne	.+48     	; 0x2d8e <CameraControl_GetPropertyVal32Bit+0x72>
    2d5e:	80 91 13 01 	lds	r24, 0x0113
    2d62:	88 23       	and	r24, r24
    2d64:	09 f4       	brne	.+2      	; 0x2d68 <CameraControl_GetPropertyVal32Bit+0x4c>
    2d66:	58 c0       	rjmp	.+176    	; 0x2e18 <CameraControl_GetPropertyVal32Bit+0xfc>
	
	// Receive the final response block from the device 
	CameraControl_GetResponseAndCheck (SIInterfaceInfo, &PIMABlock);

	return 0;								
}
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	a8 96       	adiw	r28, 0x28	; 40
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	f8 94       	cli
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	cd bf       	out	0x3d, r28	; 61
    2d78:	cf 91       	pop	r28
    2d7a:	df 91       	pop	r29
    2d7c:	1f 91       	pop	r17
    2d7e:	0f 91       	pop	r16
    2d80:	ff 90       	pop	r15
    2d82:	ef 90       	pop	r14
    2d84:	df 90       	pop	r13
    2d86:	cf 90       	pop	r12
    2d88:	bf 90       	pop	r11
    2d8a:	af 90       	pop	r10
    2d8c:	08 95       	ret
	uint8_t 	ErrorCode = 0;
	uint8_t		RecData[16] = {0};

	CHECK_CAMERA_CONNECTION;
	
	SIInterfaceInfo->State.TransactionID = 0;
    2d8e:	f8 01       	movw	r30, r16
    2d90:	17 86       	std	Z+15, r1	; 0x0f
    2d92:	10 8a       	std	Z+16, r1	; 0x10
    2d94:	11 8a       	std	Z+17, r1	; 0x11
    2d96:	12 8a       	std	Z+18, r1	; 0x12

	// Create PIMA message block
	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    2d98:	81 e1       	ldi	r24, 0x11	; 17
    2d9a:	a8 2e       	mov	r10, r24
    2d9c:	b1 2c       	mov	r11, r1
    2d9e:	ac 0e       	add	r10, r28
    2da0:	bd 1e       	adc	r11, r29
    2da2:	88 e1       	ldi	r24, 0x18	; 24
    2da4:	f5 01       	movw	r30, r10
    2da6:	11 92       	st	Z+, r1
    2da8:	8a 95       	dec	r24
    2daa:	e9 f7       	brne	.-6      	; 0x2da6 <CameraControl_GetPropertyVal32Bit+0x8a>
    2dac:	80 e1       	ldi	r24, 0x10	; 16
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	a0 e0       	ldi	r26, 0x00	; 0
    2db2:	b0 e0       	ldi	r27, 0x00	; 0
    2db4:	89 8b       	std	Y+17, r24	; 0x11
    2db6:	9a 8b       	std	Y+18, r25	; 0x12
    2db8:	ab 8b       	std	Y+19, r26	; 0x13
    2dba:	bc 8b       	std	Y+20, r27	; 0x14
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	9e 8b       	std	Y+22, r25	; 0x16
    2dc2:	8d 8b       	std	Y+21, r24	; 0x15
    2dc4:	85 e1       	ldi	r24, 0x15	; 21
    2dc6:	90 e1       	ldi	r25, 0x10	; 16
    2dc8:	98 8f       	std	Y+24, r25	; 0x18
    2dca:	8f 8b       	std	Y+23, r24	; 0x17
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	6d 8f       	std	Y+29, r22	; 0x1d
    2dd2:	7e 8f       	std	Y+30, r23	; 0x1e
    2dd4:	8f 8f       	std	Y+31, r24	; 0x1f
    2dd6:	98 a3       	std	Y+32, r25	; 0x20
			.Code          = CPU_TO_LE16(PTP_OC_GetDevicePropValue),
			.TransactionID = CPU_TO_LE32(0x00000000),
			.Params        = {enPropertyType},
		};

	ErrorCode = CameraControl_InitiateTransaction ( SIInterfaceInfo, &PIMABlock );
    2dd8:	c8 01       	movw	r24, r16
    2dda:	b5 01       	movw	r22, r10
    2ddc:	29 dd       	rcall	.-1454   	; 0x2830 <CameraControl_InitiateTransaction>

	// Get the size (in bytes) of the device info structure
	ReturnedDataSize = (PIMABlock.DataLength - PIMA_COMMAND_SIZE(0));
    2dde:	29 89       	ldd	r18, Y+17	; 0x11
    2de0:	3a 89       	ldd	r19, Y+18	; 0x12
    2de2:	2c 50       	subi	r18, 0x0C	; 12
    2de4:	30 40       	sbci	r19, 0x00	; 0

	ReturnedDataSize = (ReturnedDataSize>16)?16:ReturnedDataSize;
    2de6:	21 31       	cpi	r18, 0x11	; 17
    2de8:	31 05       	cpc	r19, r1
    2dea:	10 f5       	brcc	.+68     	; 0x2e30 <CameraControl_GetPropertyVal32Bit+0x114>
	SI_Host_ReadData(SIInterfaceInfo, RecData, ReturnedDataSize);
    2dec:	c8 01       	movw	r24, r16
    2dee:	b7 01       	movw	r22, r14
    2df0:	a9 01       	movw	r20, r18
    2df2:	e8 d9       	rcall	.-3120   	; 0x21c4 <SI_Host_ReadData>
    2df4:	80 91 a6 00 	lds	r24, 0x00A6
    2df8:	8e 77       	andi	r24, 0x7E	; 126
    2dfa:	80 93 a6 00 	sts	0x00A6, r24

	// Once all the data has been read, the pipe must be cleared before the response can be sent
	Pipe_ClearIN();

	uint8_t * temp = (uint8_t*)((void*)(iVal));
    2dfe:	f6 01       	movw	r30, r12
	temp[0] = RecData[0];
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	80 83       	st	Z, r24
	temp[1] = RecData[1];
    2e04:	8a 81       	ldd	r24, Y+2	; 0x02
    2e06:	81 83       	std	Z+1, r24	; 0x01
	temp[2] = RecData[2];
    2e08:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0a:	82 83       	std	Z+2, r24	; 0x02
	temp[3] = RecData[3];
    2e0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e0e:	83 83       	std	Z+3, r24	; 0x03
	
	// Receive the final response block from the device 
	CameraControl_GetResponseAndCheck (SIInterfaceInfo, &PIMABlock);
    2e10:	c8 01       	movw	r24, r16
    2e12:	b5 01       	movw	r22, r10
    2e14:	cd dc       	rcall	.-1638   	; 0x27b0 <CameraControl_GetResponseAndCheck>

	return 0;								
    2e16:	a8 cf       	rjmp	.-176    	; 0x2d68 <CameraControl_GetPropertyVal32Bit+0x4c>
{
	uint16_t 	ReturnedDataSize;
	uint8_t 	ErrorCode = 0;
	uint8_t		RecData[16] = {0};

	CHECK_CAMERA_CONNECTION;
    2e18:	00 d0       	rcall	.+0      	; 0x2e1a <CameraControl_GetPropertyVal32Bit+0xfe>
    2e1a:	8c eb       	ldi	r24, 0xBC	; 188
    2e1c:	97 e0       	ldi	r25, 0x07	; 7
    2e1e:	ed b7       	in	r30, 0x3d	; 61
    2e20:	fe b7       	in	r31, 0x3e	; 62
    2e22:	92 83       	std	Z+2, r25	; 0x02
    2e24:	81 83       	std	Z+1, r24	; 0x01
    2e26:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	9c cf       	rjmp	.-200    	; 0x2d68 <CameraControl_GetPropertyVal32Bit+0x4c>
	ErrorCode = CameraControl_InitiateTransaction ( SIInterfaceInfo, &PIMABlock );

	// Get the size (in bytes) of the device info structure
	ReturnedDataSize = (PIMABlock.DataLength - PIMA_COMMAND_SIZE(0));

	ReturnedDataSize = (ReturnedDataSize>16)?16:ReturnedDataSize;
    2e30:	20 e1       	ldi	r18, 0x10	; 16
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	db cf       	rjmp	.-74     	; 0x2dec <CameraControl_GetPropertyVal32Bit+0xd0>

00002e36 <CameraControl_DeviceOperation_SetPropertyValBin>:
/*------------------------------------------------------------------------------
 * CameraControl_DeviceOperation_SetPropertyValBin
 */
uint16_t CameraControl_DeviceOperation_SetPropertyValBin ( USB_ClassInfo_SI_Host_t* SIInterfaceInfo,
												 		   PTP_DEVPROPERTY_EN enPropertyType, uint32_t val )
{
    2e36:	cf 92       	push	r12
    2e38:	df 92       	push	r13
    2e3a:	ef 92       	push	r14
    2e3c:	ff 92       	push	r15
    2e3e:	0f 93       	push	r16
    2e40:	1f 93       	push	r17
    2e42:	df 93       	push	r29
    2e44:	cf 93       	push	r28
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
    2e4a:	6c 97       	sbiw	r28, 0x1c	; 28
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	8c 01       	movw	r16, r24
    2e58:	29 8f       	std	Y+25, r18	; 0x19
    2e5a:	3a 8f       	std	Y+26, r19	; 0x1a
    2e5c:	4b 8f       	std	Y+27, r20	; 0x1b
    2e5e:	5c 8f       	std	Y+28, r21	; 0x1c
	uint16_t 	SentDataSize;
	uint8_t 	ErrorCode = 0;
	uint8_t		*SentData = ((uint8_t*)((void*)(&val)));

	CHECK_CAMERA_CONNECTION;
    2e60:	fc 01       	movw	r30, r24
    2e62:	86 81       	ldd	r24, Z+6	; 0x06
    2e64:	88 23       	and	r24, r24
    2e66:	b1 f4       	brne	.+44     	; 0x2e94 <CameraControl_DeviceOperation_SetPropertyValBin+0x5e>
    2e68:	80 91 13 01 	lds	r24, 0x0113
    2e6c:	88 23       	and	r24, r24
    2e6e:	09 f4       	brne	.+2      	; 0x2e72 <CameraControl_DeviceOperation_SetPropertyValBin+0x3c>
    2e70:	54 c0       	rjmp	.+168    	; 0x2f1a <CameraControl_DeviceOperation_SetPropertyValBin+0xe4>

	// Receive the final response block from the device 
	CameraControl_GetResponseAndCheck (SIInterfaceInfo, &PIMABlock);

	return 0;
}
    2e72:	80 e0       	ldi	r24, 0x00	; 0
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	6c 96       	adiw	r28, 0x1c	; 28
    2e78:	0f b6       	in	r0, 0x3f	; 63
    2e7a:	f8 94       	cli
    2e7c:	de bf       	out	0x3e, r29	; 62
    2e7e:	0f be       	out	0x3f, r0	; 63
    2e80:	cd bf       	out	0x3d, r28	; 61
    2e82:	cf 91       	pop	r28
    2e84:	df 91       	pop	r29
    2e86:	1f 91       	pop	r17
    2e88:	0f 91       	pop	r16
    2e8a:	ff 90       	pop	r15
    2e8c:	ef 90       	pop	r14
    2e8e:	df 90       	pop	r13
    2e90:	cf 90       	pop	r12
    2e92:	08 95       	ret
	uint8_t 	ErrorCode = 0;
	uint8_t		*SentData = ((uint8_t*)((void*)(&val)));

	CHECK_CAMERA_CONNECTION;
	
	SIInterfaceInfo->State.TransactionID = 0;
    2e94:	f8 01       	movw	r30, r16
    2e96:	17 86       	std	Z+15, r1	; 0x0f
    2e98:	10 8a       	std	Z+16, r1	; 0x10
    2e9a:	11 8a       	std	Z+17, r1	; 0x11
    2e9c:	12 8a       	std	Z+18, r1	; 0x12

	// Set the size (in bytes) of the device property val
	if (enPropertyType==TP_PROPERTY_EVENT_ExposureTime||enPropertyType==TP_PROPERTY_EVENT_FocalLength)	// 32 bits
    2e9e:	f2 e0       	ldi	r31, 0x02	; 2
    2ea0:	60 30       	cpi	r22, 0x00	; 0
    2ea2:	7f 07       	cpc	r23, r31
    2ea4:	91 f1       	breq	.+100    	; 0x2f0a <CameraControl_DeviceOperation_SetPropertyValBin+0xd4>
    2ea6:	60 31       	cpi	r22, 0x10	; 16
    2ea8:	71 05       	cpc	r23, r1
    2eaa:	79 f1       	breq	.+94     	; 0x2f0a <CameraControl_DeviceOperation_SetPropertyValBin+0xd4>
    2eac:	82 e1       	ldi	r24, 0x12	; 18
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	a0 e0       	ldi	r26, 0x00	; 0
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
		SentDataSize = 4;
	else SentDataSize = 2;		// 16 bits
    2eb4:	22 e0       	ldi	r18, 0x02	; 2
    2eb6:	c2 2e       	mov	r12, r18
    2eb8:	d1 2c       	mov	r13, r1


	// Create PIMA message block
	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    2eba:	7e 01       	movw	r14, r28
    2ebc:	08 94       	sec
    2ebe:	e1 1c       	adc	r14, r1
    2ec0:	f1 1c       	adc	r15, r1
    2ec2:	28 e1       	ldi	r18, 0x18	; 24
    2ec4:	f7 01       	movw	r30, r14
    2ec6:	11 92       	st	Z+, r1
    2ec8:	2a 95       	dec	r18
    2eca:	e9 f7       	brne	.-6      	; 0x2ec6 <CameraControl_DeviceOperation_SetPropertyValBin+0x90>
    2ecc:	89 83       	std	Y+1, r24	; 0x01
    2ece:	9a 83       	std	Y+2, r25	; 0x02
    2ed0:	ab 83       	std	Y+3, r26	; 0x03
    2ed2:	bc 83       	std	Y+4, r27	; 0x04
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	9e 83       	std	Y+6, r25	; 0x06
    2eda:	8d 83       	std	Y+5, r24	; 0x05
    2edc:	86 e1       	ldi	r24, 0x16	; 22
    2ede:	90 e1       	ldi	r25, 0x10	; 16
    2ee0:	98 87       	std	Y+8, r25	; 0x08
    2ee2:	8f 83       	std	Y+7, r24	; 0x07
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	6d 87       	std	Y+13, r22	; 0x0d
    2eea:	7e 87       	std	Y+14, r23	; 0x0e
    2eec:	8f 87       	std	Y+15, r24	; 0x0f
    2eee:	98 8b       	std	Y+16, r25	; 0x10
			.Code          = CPU_TO_LE16(PTP_OC_SetDevicePropValue),
			.TransactionID = CPU_TO_LE32(0x00000000),
			.Params        = {enPropertyType},
		};

	ErrorCode = CameraControl_InitiateTransaction ( SIInterfaceInfo, &PIMABlock );
    2ef0:	c8 01       	movw	r24, r16
    2ef2:	b7 01       	movw	r22, r14
    2ef4:	9d dc       	rcall	.-1734   	; 0x2830 <CameraControl_InitiateTransaction>
	SI_Host_ReadData(SIInterfaceInfo, SentData, SentDataSize);
    2ef6:	c8 01       	movw	r24, r16
    2ef8:	be 01       	movw	r22, r28
    2efa:	67 5e       	subi	r22, 0xE7	; 231
    2efc:	7f 4f       	sbci	r23, 0xFF	; 255
    2efe:	a6 01       	movw	r20, r12
    2f00:	61 d9       	rcall	.-3390   	; 0x21c4 <SI_Host_ReadData>

	// Receive the final response block from the device 
	CameraControl_GetResponseAndCheck (SIInterfaceInfo, &PIMABlock);
    2f02:	c8 01       	movw	r24, r16
    2f04:	b7 01       	movw	r22, r14
    2f06:	54 dc       	rcall	.-1880   	; 0x27b0 <CameraControl_GetResponseAndCheck>

	return 0;
    2f08:	b4 cf       	rjmp	.-152    	; 0x2e72 <CameraControl_DeviceOperation_SetPropertyValBin+0x3c>
	CHECK_CAMERA_CONNECTION;
	
	SIInterfaceInfo->State.TransactionID = 0;

	// Set the size (in bytes) of the device property val
	if (enPropertyType==TP_PROPERTY_EVENT_ExposureTime||enPropertyType==TP_PROPERTY_EVENT_FocalLength)	// 32 bits
    2f0a:	84 e1       	ldi	r24, 0x14	; 20
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	a0 e0       	ldi	r26, 0x00	; 0
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
		SentDataSize = 4;
    2f12:	34 e0       	ldi	r19, 0x04	; 4
    2f14:	c3 2e       	mov	r12, r19
    2f16:	d1 2c       	mov	r13, r1
    2f18:	d0 cf       	rjmp	.-96     	; 0x2eba <CameraControl_DeviceOperation_SetPropertyValBin+0x84>
{
	uint16_t 	SentDataSize;
	uint8_t 	ErrorCode = 0;
	uint8_t		*SentData = ((uint8_t*)((void*)(&val)));

	CHECK_CAMERA_CONNECTION;
    2f1a:	00 d0       	rcall	.+0      	; 0x2f1c <CameraControl_DeviceOperation_SetPropertyValBin+0xe6>
    2f1c:	84 ea       	ldi	r24, 0xA4	; 164
    2f1e:	97 e0       	ldi	r25, 0x07	; 7
    2f20:	ed b7       	in	r30, 0x3d	; 61
    2f22:	fe b7       	in	r31, 0x3e	; 62
    2f24:	92 83       	std	Z+2, r25	; 0x02
    2f26:	81 83       	std	Z+1, r24	; 0x01
    2f28:	0e 94 90 20 	call	0x4120	; 0x4120 <printf_P>
    2f2c:	0f 90       	pop	r0
    2f2e:	0f 90       	pop	r0
    2f30:	a0 cf       	rjmp	.-192    	; 0x2e72 <CameraControl_DeviceOperation_SetPropertyValBin+0x3c>

00002f32 <CameraControl_DeviceEvents_PollEvents>:

/*------------------------------------------------------------------------------
 * CameraControl_DeviceEvents_PollEvents
 */
uint8_t CameraControl_DeviceEvents_PollEvents( USB_ClassInfo_SI_Host_t* SIInterfaceInfo )
{
    2f32:	0f 93       	push	r16
    2f34:	1f 93       	push	r17
    2f36:	df 93       	push	r29
    2f38:	cf 93       	push	r28
    2f3a:	cd b7       	in	r28, 0x3d	; 61
    2f3c:	de b7       	in	r29, 0x3e	; 62
    2f3e:	68 97       	sbiw	r28, 0x18	; 24
    2f40:	0f b6       	in	r0, 0x3f	; 63
    2f42:	f8 94       	cli
    2f44:	de bf       	out	0x3e, r29	; 62
    2f46:	0f be       	out	0x3f, r0	; 63
    2f48:	cd bf       	out	0x3d, r28	; 61
    2f4a:	8c 01       	movw	r16, r24
	uint8_t iError = 0;
	PIMA_Container_t PIMABlock;

	if (SIInterfaceInfo->State.IsActive==0) return 0;
    2f4c:	fc 01       	movw	r30, r24
    2f4e:	86 81       	ldd	r24, Z+6	; 0x06
    2f50:	88 23       	and	r24, r24
    2f52:	61 f4       	brne	.+24     	; 0x2f6c <CameraControl_DeviceEvents_PollEvents+0x3a>
	
	// Check if a message is waiting
	if ( !SI_Host_IsEventReceived ( SIInterfaceInfo ) )
	{
		return 0;
    2f54:	80 e0       	ldi	r24, 0x00	; 0
	}


ExitFunction:
	return iError;
}
    2f56:	68 96       	adiw	r28, 0x18	; 24
    2f58:	0f b6       	in	r0, 0x3f	; 63
    2f5a:	f8 94       	cli
    2f5c:	de bf       	out	0x3e, r29	; 62
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	cd bf       	out	0x3d, r28	; 61
    2f62:	cf 91       	pop	r28
    2f64:	df 91       	pop	r29
    2f66:	1f 91       	pop	r17
    2f68:	0f 91       	pop	r16
    2f6a:	08 95       	ret
	PIMA_Container_t PIMABlock;

	if (SIInterfaceInfo->State.IsActive==0) return 0;
	
	// Check if a message is waiting
	if ( !SI_Host_IsEventReceived ( SIInterfaceInfo ) )
    2f6c:	c8 01       	movw	r24, r16
    2f6e:	49 d9       	rcall	.-3438   	; 0x2202 <SI_Host_IsEventReceived>
    2f70:	88 23       	and	r24, r24
    2f72:	81 f3       	breq	.-32     	; 0x2f54 <CameraControl_DeviceEvents_PollEvents+0x22>
	
	//uart_putc('A', stdout);
	//printf(PSTR("\r\nNew event:"));
		
	// Get the event data
	iError =  SI_Host_ReceiveEventHeader(SIInterfaceInfo, &PIMABlock) ;
    2f74:	c8 01       	movw	r24, r16
    2f76:	be 01       	movw	r22, r28
    2f78:	6f 5f       	subi	r22, 0xFF	; 255
    2f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f7c:	6b d9       	rcall	.-3370   	; 0x2254 <SI_Host_ReceiveEventHeader>
	if ( iError != PIPE_RWSTREAM_NoError )	goto ExitFunction;
    2f7e:	88 23       	and	r24, r24
    2f80:	51 f7       	brne	.-44     	; 0x2f56 <CameraControl_DeviceEvents_PollEvents+0x24>
	//		uint16_t Code; /**< Command, event or response code of the container. */
	//		uint32_t TransactionID; /**< Unique container ID to link blocks together. */
	//		uint32_t Params[3]; /**< Block parameters to be issued along with the block code (command blocks only). */
	//  } ATTR_PACKED PIMA_Container_t;
	
	if ( PIMABlock.Type != PIMA_CONTAINER_EventBlock )
    2f82:	2d 81       	ldd	r18, Y+5	; 0x05
    2f84:	3e 81       	ldd	r19, Y+6	; 0x06
    2f86:	24 30       	cpi	r18, 0x04	; 4
    2f88:	31 05       	cpc	r19, r1
    2f8a:	11 f0       	breq	.+4      	; 0x2f90 <CameraControl_DeviceEvents_PollEvents+0x5e>
	{
		iError = -1;
    2f8c:	8f ef       	ldi	r24, 0xFF	; 255
    2f8e:	e3 cf       	rjmp	.-58     	; 0x2f56 <CameraControl_DeviceEvents_PollEvents+0x24>
	// Print out the transaction ID and event message
	// printf_P(PSTR("\r\nNew event:"));


	// Get the response code
	switch ( PIMABlock.Code )
    2f90:	2f 81       	ldd	r18, Y+7	; 0x07
    2f92:	38 85       	ldd	r19, Y+8	; 0x08
    2f94:	f0 e4       	ldi	r31, 0x40	; 64
    2f96:	26 30       	cpi	r18, 0x06	; 6
    2f98:	3f 07       	cpc	r19, r31
    2f9a:	d1 f0       	breq	.+52     	; 0x2fd0 <CameraControl_DeviceEvents_PollEvents+0x9e>
    2f9c:	90 e4       	ldi	r25, 0x40	; 64
    2f9e:	2d 30       	cpi	r18, 0x0D	; 13
    2fa0:	39 07       	cpc	r19, r25
    2fa2:	41 f1       	breq	.+80     	; 0x2ff4 <CameraControl_DeviceEvents_PollEvents+0xc2>
    2fa4:	e0 e4       	ldi	r30, 0x40	; 64
    2fa6:	22 30       	cpi	r18, 0x02	; 2
    2fa8:	3e 07       	cpc	r19, r30
    2faa:	a9 f6       	brne	.-86     	; 0x2f56 <CameraControl_DeviceEvents_PollEvents+0x24>
				/*if ( event_hander_tbl[2].func_event_hander != NULL )
				{
					break;
				}*/
				
				g_USBEventBitmap |= TP_USB_EVENT_OBJECT_WRITTEN;
    2fac:	90 91 4b 01 	lds	r25, 0x014B
    2fb0:	90 61       	ori	r25, 0x10	; 16
    2fb2:	90 93 4b 01 	sts	0x014B, r25
				g_USBEventArgument[TP_USB_EVENT_OBJECT_WRITTEN_N] = PIMABlock.Params[0];
    2fb6:	2d 85       	ldd	r18, Y+13	; 0x0d
    2fb8:	3e 85       	ldd	r19, Y+14	; 0x0e
    2fba:	4f 85       	ldd	r20, Y+15	; 0x0f
    2fbc:	58 89       	ldd	r21, Y+16	; 0x10
    2fbe:	20 93 5c 01 	sts	0x015C, r18
    2fc2:	30 93 5d 01 	sts	0x015D, r19
    2fc6:	40 93 5e 01 	sts	0x015E, r20
    2fca:	50 93 5f 01 	sts	0x015F, r21
				
				//printf("EVENT: Object added ID: 0x%x.\r\n", PIMABlock.Params[0]);
			}	
			// param1 = objectHandle
			break;
    2fce:	c3 cf       	rjmp	.-122    	; 0x2f56 <CameraControl_DeviceEvents_PollEvents+0x24>
				{
					 
					break;
				}*/
				
				g_USBEventBitmap |= TP_USB_EVENT_PROPERTY_CHANGED;
    2fd0:	90 91 4b 01 	lds	r25, 0x014B
    2fd4:	90 62       	ori	r25, 0x20	; 32
    2fd6:	90 93 4b 01 	sts	0x014B, r25
				g_USBEventArgument[TP_USB_EVENT_PROPERTY_CHANGED_N] = PIMABlock.Params[0];
    2fda:	2d 85       	ldd	r18, Y+13	; 0x0d
    2fdc:	3e 85       	ldd	r19, Y+14	; 0x0e
    2fde:	4f 85       	ldd	r20, Y+15	; 0x0f
    2fe0:	58 89       	ldd	r21, Y+16	; 0x10
    2fe2:	20 93 60 01 	sts	0x0160, r18
    2fe6:	30 93 61 01 	sts	0x0161, r19
    2fea:	40 93 62 01 	sts	0x0162, r20
    2fee:	50 93 63 01 	sts	0x0163, r21
				
				//printf("EVENT: Property changed CODE: 0x%x.\r\n", PIMABlock.Params[0]);
			}		
			// param1 = devicePropCode
			break;
    2ff2:	b1 cf       	rjmp	.-158    	; 0x2f56 <CameraControl_DeviceEvents_PollEvents+0x24>
				{
					
					break;
				}*/
				
				g_USBEventBitmap |= TP_USB_EVENT_CAPTURE_FINISHED;
    2ff4:	90 91 4b 01 	lds	r25, 0x014B
    2ff8:	98 60       	ori	r25, 0x08	; 8
    2ffa:	90 93 4b 01 	sts	0x014B, r25
				g_USBEventArgument[TP_USB_EVENT_CAPTURE_FINISHED_N] = PIMABlock.Params[0];
    2ffe:	2d 85       	ldd	r18, Y+13	; 0x0d
    3000:	3e 85       	ldd	r19, Y+14	; 0x0e
    3002:	4f 85       	ldd	r20, Y+15	; 0x0f
    3004:	58 89       	ldd	r21, Y+16	; 0x10
    3006:	20 93 58 01 	sts	0x0158, r18
    300a:	30 93 59 01 	sts	0x0159, r19
    300e:	40 93 5a 01 	sts	0x015A, r20
    3012:	50 93 5b 01 	sts	0x015B, r21
				
				//printf("EVENT: Capture complete TransID: 0x%x.\r\n", PIMABlock.Params[0]);
			}		
			// param1 = transactionId of the capture request
			break;
    3016:	9f cf       	rjmp	.-194    	; 0x2f56 <CameraControl_DeviceEvents_PollEvents+0x24>

00003018 <TP_SendHeader>:



//------------------------------------------------------------------------------
void TP_SendHeader(volatile TP_Header_ST *header)
{
    3018:	ef 92       	push	r14
    301a:	ff 92       	push	r15
    301c:	0f 93       	push	r16
    301e:	1f 93       	push	r17
    3020:	cf 93       	push	r28
    3022:	df 93       	push	r29
	char *pt = (char*)((void*)(header));
    3024:	e8 2e       	mov	r14, r24
    3026:	e7 01       	movw	r28, r14
    3028:	7e 01       	movw	r14, r28
    302a:	f9 2e       	mov	r15, r25
    302c:	e7 01       	movw	r28, r14
	uint8_t length = TP_HEADER_SIZE;
	
	while (length--)
	{
		uart_putc( *pt++, stdout);
    302e:	87 01       	movw	r16, r14
    3030:	0f 5f       	subi	r16, 0xFF	; 255
    3032:	1f 4f       	sbci	r17, 0xFF	; 255
    3034:	60 91 d0 05 	lds	r22, 0x05D0
    3038:	70 91 d1 05 	lds	r23, 0x05D1
    303c:	88 81       	ld	r24, Y
    303e:	d2 d7       	rcall	.+4004   	; 0x3fe4 <uart_putc>
    3040:	78 01       	movw	r14, r16
    3042:	08 94       	sec
    3044:	e1 1c       	adc	r14, r1
    3046:	f1 1c       	adc	r15, r1
    3048:	60 91 d0 05 	lds	r22, 0x05D0
    304c:	70 91 d1 05 	lds	r23, 0x05D1
    3050:	89 81       	ldd	r24, Y+1	; 0x01
    3052:	c8 d7       	rcall	.+3984   	; 0x3fe4 <uart_putc>
    3054:	e7 01       	movw	r28, r14
    3056:	21 96       	adiw	r28, 0x01	; 1
    3058:	60 91 d0 05 	lds	r22, 0x05D0
    305c:	70 91 d1 05 	lds	r23, 0x05D1
    3060:	f8 01       	movw	r30, r16
    3062:	81 81       	ldd	r24, Z+1	; 0x01
    3064:	bf d7       	rcall	.+3966   	; 0x3fe4 <uart_putc>
    3066:	60 91 d0 05 	lds	r22, 0x05D0
    306a:	70 91 d1 05 	lds	r23, 0x05D1
    306e:	f7 01       	movw	r30, r14
    3070:	81 81       	ldd	r24, Z+1	; 0x01
    3072:	b8 d7       	rcall	.+3952   	; 0x3fe4 <uart_putc>
    3074:	60 91 d0 05 	lds	r22, 0x05D0
    3078:	70 91 d1 05 	lds	r23, 0x05D1
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	b2 d7       	rcall	.+3940   	; 0x3fe4 <uart_putc>
	}
}
    3080:	df 91       	pop	r29
    3082:	cf 91       	pop	r28
    3084:	1f 91       	pop	r17
    3086:	0f 91       	pop	r16
    3088:	ff 90       	pop	r15
    308a:	ef 90       	pop	r14
    308c:	08 95       	ret

0000308e <TP_GetIncomingCommand>:

/*------------------------------------------------------------------------------
 * Function Implementation
 */
uint8_t TP_GetIncomingCommand ( void )
{
    308e:	2f 92       	push	r2
    3090:	3f 92       	push	r3
    3092:	4f 92       	push	r4
    3094:	5f 92       	push	r5
    3096:	6f 92       	push	r6
    3098:	7f 92       	push	r7
    309a:	8f 92       	push	r8
    309c:	9f 92       	push	r9
    309e:	af 92       	push	r10
    30a0:	bf 92       	push	r11
    30a2:	cf 92       	push	r12
    30a4:	df 92       	push	r13
    30a6:	ef 92       	push	r14
    30a8:	ff 92       	push	r15
    30aa:	0f 93       	push	r16
    30ac:	1f 93       	push	r17
    30ae:	df 93       	push	r29
    30b0:	cf 93       	push	r28
    30b2:	00 d0       	rcall	.+0      	; 0x30b4 <TP_GetIncomingCommand+0x26>
    30b4:	00 d0       	rcall	.+0      	; 0x30b6 <TP_GetIncomingCommand+0x28>
    30b6:	0f 92       	push	r0
    30b8:	cd b7       	in	r28, 0x3d	; 61
    30ba:	de b7       	in	r29, 0x3e	; 62
			uart_putc(16, stdout);		// clock-speed
		break;	
				
		case TP_COMMAND_GET_CAMERA_STATUS:
			TP_SendDebugLog ( "B" );
			header.length = 1;
    30bc:	a1 e0       	ldi	r26, 0x01	; 1
    30be:	ca 2e       	mov	r12, r26
    30c0:	d1 2c       	mov	r13, r1
			header.type = TP_DATA_CAMERA_STATUS;
    30c2:	f4 ea       	ldi	r31, 0xA4	; 164
    30c4:	5f 2e       	mov	r5, r31
			TP_SendHeader (&header);
    30c6:	7e 01       	movw	r14, r28
    30c8:	08 94       	sec
    30ca:	e1 1c       	adc	r14, r1
    30cc:	f1 1c       	adc	r15, r1
			// if not connected
			if (g_bCameraConnected == 0)
			{
				TP_SendDebugLog ( "-0" );
				header.length = 0;
				header.type = TP_DATA_CAMERA_INFO;
    30ce:	e1 ea       	ldi	r30, 0xA1	; 161
    30d0:	2e 2e       	mov	r2, r30
		case TP_COMMAND_GET_STORAGE_IDS:	
			CameraControl_OpenSession( &DigitalCamera_SI_Interface );
			CameraControl_GetStorageIDs ( &DigitalCamera_SI_Interface );
			CameraControl_CloseSession( &DigitalCamera_SI_Interface );
			header.length = g_iNumOfStorages*4;
			header.type = TP_DATA_STORAGE_IDS;
    30d2:	72 ea       	ldi	r23, 0xA2	; 162
    30d4:	47 2e       	mov	r4, r23
	
	switch (command->header.type)
	{
		case TP_COMMAND_IDN:
			TP_SendDebugLog ( "A" );
			header.length = 3;
    30d6:	63 e0       	ldi	r22, 0x03	; 3
    30d8:	66 2e       	mov	r6, r22
    30da:	71 2c       	mov	r7, r1
			header.type = TP_DATA_IDN;
    30dc:	5b ea       	ldi	r21, 0xAB	; 171
    30de:	35 2e       	mov	r3, r21
uint8_t TP_GetIncomingCommand ( void )
{
	char *iInCommand = (char*)((void*)(&g_stCurrentCommand));
	//uint8_t iError = 0;
	
	while (uart_rx_ready( ))
    30e0:	0e 94 87 20 	call	0x410e	; 0x410e <uart_rx_ready>
    30e4:	88 23       	and	r24, r24
    30e6:	09 f4       	brne	.+2      	; 0x30ea <TP_GetIncomingCommand+0x5c>
    30e8:	91 c0       	rjmp	.+290    	; 0x320c <TP_GetIncomingCommand+0x17e>
	{
		// get the new char
		iInCommand[g_iInCommandPos] = uart_getc ( stdin );
    30ea:	00 91 0d 02 	lds	r16, 0x020D
    30ee:	80 91 ce 05 	lds	r24, 0x05CE
    30f2:	90 91 cf 05 	lds	r25, 0x05CF
    30f6:	66 d7       	rcall	.+3788   	; 0x3fc4 <uart_getc>
    30f8:	e0 2f       	mov	r30, r16
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	ee 59       	subi	r30, 0x9E	; 158
    30fe:	fa 4f       	sbci	r31, 0xFA	; 250
    3100:	80 83       	st	Z, r24
		
		// accumulate checksum only if its not the last char
		if (g_iInCommandPos<(TP_COMMAND_SIZE-1))	g_iCurrentCheckSum += *((uint8_t*)(iInCommand+g_iInCommandPos));
    3102:	80 91 0d 02 	lds	r24, 0x020D
    3106:	81 31       	cpi	r24, 0x11	; 17
    3108:	58 f4       	brcc	.+22     	; 0x3120 <TP_GetIncomingCommand+0x92>
    310a:	e0 91 0d 02 	lds	r30, 0x020D
    310e:	80 91 0e 02 	lds	r24, 0x020E
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	ee 59       	subi	r30, 0x9E	; 158
    3116:	fa 4f       	sbci	r31, 0xFA	; 250
    3118:	90 81       	ld	r25, Z
    311a:	89 0f       	add	r24, r25
    311c:	80 93 0e 02 	sts	0x020E, r24
		g_iInCommandPos ++;
    3120:	80 91 0d 02 	lds	r24, 0x020D
    3124:	8f 5f       	subi	r24, 0xFF	; 255
    3126:	80 93 0d 02 	sts	0x020D, r24
		
		// check if the command was finished
		if (g_iInCommandPos == TP_COMMAND_SIZE)				
    312a:	80 91 0d 02 	lds	r24, 0x020D
    312e:	82 31       	cpi	r24, 0x12	; 18
    3130:	b9 f6       	brne	.-82     	; 0x30e0 <TP_GetIncomingCommand+0x52>
		{
			// check the checksum
			if (g_stCurrentCommand.checksum != g_iCurrentCheckSum)
    3132:	90 91 73 05 	lds	r25, 0x0573
    3136:	80 91 0e 02 	lds	r24, 0x020E
    313a:	98 17       	cp	r25, r24
    313c:	09 f0       	breq	.+2      	; 0x3140 <TP_GetIncomingCommand+0xb2>
    313e:	c6 c1       	rjmp	.+908    	; 0x34cc <TP_GetIncomingCommand+0x43e>
				
				// flush all incoming buffers
				return 1;
			}
			// assume that the message is OK
			g_iCurrentCheckSum = 0;
    3140:	10 92 0e 02 	sts	0x020E, r1
			g_iInCommandPos = 0;
    3144:	10 92 0d 02 	sts	0x020D, r1
//------------------------------------------------------------------------------
void TP_RespondTo (volatile TP_Incoming_Command_ST* command)
{
	TP_Header_ST	header;
	
	header.transID = command->header.transID;
    3148:	60 91 65 05 	lds	r22, 0x0565
    314c:	70 91 66 05 	lds	r23, 0x0566
    3150:	7d 83       	std	Y+5, r23	; 0x05
    3152:	6c 83       	std	Y+4, r22	; 0x04
	
	switch (command->header.type)
    3154:	80 91 62 05 	lds	r24, 0x0562
    3158:	85 30       	cpi	r24, 0x05	; 5
    315a:	09 f4       	brne	.+2      	; 0x315e <TP_GetIncomingCommand+0xd0>
    315c:	9b c1       	rjmp	.+822    	; 0x3494 <TP_GetIncomingCommand+0x406>
    315e:	86 30       	cpi	r24, 0x06	; 6
    3160:	08 f0       	brcs	.+2      	; 0x3164 <TP_GetIncomingCommand+0xd6>
    3162:	6c c0       	rjmp	.+216    	; 0x323c <TP_GetIncomingCommand+0x1ae>
    3164:	82 30       	cpi	r24, 0x02	; 2
    3166:	09 f4       	brne	.+2      	; 0x316a <TP_GetIncomingCommand+0xdc>
    3168:	88 c1       	rjmp	.+784    	; 0x347a <TP_GetIncomingCommand+0x3ec>
    316a:	83 30       	cpi	r24, 0x03	; 3
    316c:	08 f4       	brcc	.+2      	; 0x3170 <TP_GetIncomingCommand+0xe2>
    316e:	2f c1       	rjmp	.+606    	; 0x33ce <TP_GetIncomingCommand+0x340>
    3170:	83 30       	cpi	r24, 0x03	; 3
    3172:	09 f4       	brne	.+2      	; 0x3176 <TP_GetIncomingCommand+0xe8>
    3174:	62 c1       	rjmp	.+708    	; 0x343a <TP_GetIncomingCommand+0x3ac>
    3176:	84 30       	cpi	r24, 0x04	; 4
    3178:	09 f0       	breq	.+2      	; 0x317c <TP_GetIncomingCommand+0xee>
    317a:	b2 cf       	rjmp	.-156    	; 0x30e0 <TP_GetIncomingCommand+0x52>
			}
			
		break;
		
		case TP_COMMAND_GET_STORAGE_IDS:	
			CameraControl_OpenSession( &DigitalCamera_SI_Interface );
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	91 e0       	ldi	r25, 0x01	; 1
    3180:	95 db       	rcall	.-2262   	; 0x28ac <CameraControl_OpenSession>
			CameraControl_GetStorageIDs ( &DigitalCamera_SI_Interface );
    3182:	80 e0       	ldi	r24, 0x00	; 0
    3184:	91 e0       	ldi	r25, 0x01	; 1
    3186:	28 dd       	rcall	.-1456   	; 0x2bd8 <CameraControl_GetStorageIDs>
			CameraControl_CloseSession( &DigitalCamera_SI_Interface );
    3188:	80 e0       	ldi	r24, 0x00	; 0
    318a:	91 e0       	ldi	r25, 0x01	; 1
    318c:	eb db       	rcall	.-2090   	; 0x2964 <CameraControl_CloseSession>
			header.length = g_iNumOfStorages*4;
    318e:	80 91 04 02 	lds	r24, 0x0204
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	88 0f       	add	r24, r24
    3196:	99 1f       	adc	r25, r25
    3198:	88 0f       	add	r24, r24
    319a:	99 1f       	adc	r25, r25
    319c:	9b 83       	std	Y+3, r25	; 0x03
    319e:	8a 83       	std	Y+2, r24	; 0x02
			header.type = TP_DATA_STORAGE_IDS;
    31a0:	49 82       	std	Y+1, r4	; 0x01
			TP_SendHeader(&header);
    31a2:	c7 01       	movw	r24, r14
    31a4:	39 df       	rcall	.-398    	; 0x3018 <TP_SendHeader>
			
			// write the data
			for ( uint8_t i=0; i<g_iNumOfStorages; i++ )
    31a6:	80 91 04 02 	lds	r24, 0x0204
    31aa:	88 23       	and	r24, r24
    31ac:	09 f4       	brne	.+2      	; 0x31b0 <TP_GetIncomingCommand+0x122>
    31ae:	98 cf       	rjmp	.-208    	; 0x30e0 <TP_GetIncomingCommand+0x52>
    31b0:	88 24       	eor	r8, r8
			{
				char* tempPos = (char*)((void*)(&g_aiStorageIDs[i]));
    31b2:	08 2d       	mov	r16, r8
    31b4:	10 e0       	ldi	r17, 0x00	; 0
    31b6:	00 0f       	add	r16, r16
    31b8:	11 1f       	adc	r17, r17
    31ba:	00 0f       	add	r16, r16
    31bc:	11 1f       	adc	r17, r17
    31be:	06 59       	subi	r16, 0x96	; 150
    31c0:	1b 4f       	sbci	r17, 0xFB	; 251
				uart_putc(tempPos[0], stdout);		// MSB
    31c2:	60 91 d0 05 	lds	r22, 0x05D0
    31c6:	70 91 d1 05 	lds	r23, 0x05D1
    31ca:	f8 01       	movw	r30, r16
    31cc:	80 81       	ld	r24, Z
    31ce:	0a d7       	rcall	.+3604   	; 0x3fe4 <uart_putc>
				uart_putc(tempPos[1], stdout);
    31d0:	60 91 d0 05 	lds	r22, 0x05D0
    31d4:	70 91 d1 05 	lds	r23, 0x05D1
    31d8:	f8 01       	movw	r30, r16
    31da:	81 81       	ldd	r24, Z+1	; 0x01
    31dc:	03 d7       	rcall	.+3590   	; 0x3fe4 <uart_putc>
				uart_putc(tempPos[2], stdout);
    31de:	60 91 d0 05 	lds	r22, 0x05D0
    31e2:	70 91 d1 05 	lds	r23, 0x05D1
    31e6:	f8 01       	movw	r30, r16
    31e8:	82 81       	ldd	r24, Z+2	; 0x02
    31ea:	fc d6       	rcall	.+3576   	; 0x3fe4 <uart_putc>
				uart_putc(tempPos[3], stdout);
    31ec:	60 91 d0 05 	lds	r22, 0x05D0
    31f0:	70 91 d1 05 	lds	r23, 0x05D1
    31f4:	f8 01       	movw	r30, r16
    31f6:	83 81       	ldd	r24, Z+3	; 0x03
    31f8:	f5 d6       	rcall	.+3562   	; 0x3fe4 <uart_putc>
			header.length = g_iNumOfStorages*4;
			header.type = TP_DATA_STORAGE_IDS;
			TP_SendHeader(&header);
			
			// write the data
			for ( uint8_t i=0; i<g_iNumOfStorages; i++ )
    31fa:	83 94       	inc	r8
    31fc:	80 91 04 02 	lds	r24, 0x0204
    3200:	88 16       	cp	r8, r24
    3202:	b8 f2       	brcs	.-82     	; 0x31b2 <TP_GetIncomingCommand+0x124>
uint8_t TP_GetIncomingCommand ( void )
{
	char *iInCommand = (char*)((void*)(&g_stCurrentCommand));
	//uint8_t iError = 0;
	
	while (uart_rx_ready( ))
    3204:	84 d7       	rcall	.+3848   	; 0x410e <uart_rx_ready>
    3206:	88 23       	and	r24, r24
    3208:	09 f0       	breq	.+2      	; 0x320c <TP_GetIncomingCommand+0x17e>
    320a:	6f cf       	rjmp	.-290    	; 0x30ea <TP_GetIncomingCommand+0x5c>
			TP_RespondTo ( &g_stCurrentCommand );
		}
	}	
	
	return 0;
}
    320c:	0f 90       	pop	r0
    320e:	0f 90       	pop	r0
    3210:	0f 90       	pop	r0
    3212:	0f 90       	pop	r0
    3214:	0f 90       	pop	r0
    3216:	cf 91       	pop	r28
    3218:	df 91       	pop	r29
    321a:	1f 91       	pop	r17
    321c:	0f 91       	pop	r16
    321e:	ff 90       	pop	r15
    3220:	ef 90       	pop	r14
    3222:	df 90       	pop	r13
    3224:	cf 90       	pop	r12
    3226:	bf 90       	pop	r11
    3228:	af 90       	pop	r10
    322a:	9f 90       	pop	r9
    322c:	8f 90       	pop	r8
    322e:	7f 90       	pop	r7
    3230:	6f 90       	pop	r6
    3232:	5f 90       	pop	r5
    3234:	4f 90       	pop	r4
    3236:	3f 90       	pop	r3
    3238:	2f 90       	pop	r2
    323a:	08 95       	ret
{
	TP_Header_ST	header;
	
	header.transID = command->header.transID;
	
	switch (command->header.type)
    323c:	8c 30       	cpi	r24, 0x0C	; 12
    323e:	09 f4       	brne	.+2      	; 0x3242 <TP_GetIncomingCommand+0x1b4>
    3240:	07 c1       	rjmp	.+526    	; 0x3450 <TP_GetIncomingCommand+0x3c2>
    3242:	8d 30       	cpi	r24, 0x0D	; 13
    3244:	08 f4       	brcc	.+2      	; 0x3248 <TP_GetIncomingCommand+0x1ba>
    3246:	ab c0       	rjmp	.+342    	; 0x339e <TP_GetIncomingCommand+0x310>
    3248:	8d 30       	cpi	r24, 0x0D	; 13
    324a:	09 f4       	brne	.+2      	; 0x324e <TP_GetIncomingCommand+0x1c0>
    324c:	db c0       	rjmp	.+438    	; 0x3404 <TP_GetIncomingCommand+0x376>
    324e:	8e 30       	cpi	r24, 0x0E	; 14
    3250:	09 f0       	breq	.+2      	; 0x3254 <TP_GetIncomingCommand+0x1c6>
    3252:	46 cf       	rjmp	.-372    	; 0x30e0 <TP_GetIncomingCommand+0x52>
			CameraControl_CloseSession( &DigitalCamera_SI_Interface );
		break;
		
		case TP_COMMAND_SET_PROP_UPDATE:
			// this command sets an automatic update pattern which will send events to the host device
			g_iPropEventVector = command->arg1;
    3254:	80 91 67 05 	lds	r24, 0x0567
    3258:	90 91 68 05 	lds	r25, 0x0568
    325c:	a0 91 69 05 	lds	r26, 0x0569
    3260:	b0 91 6a 05 	lds	r27, 0x056A
    3264:	90 93 13 02 	sts	0x0213, r25
    3268:	80 93 12 02 	sts	0x0212, r24
			g_iPropDescEventVector = command->arg2;
    326c:	80 91 6b 05 	lds	r24, 0x056B
    3270:	90 91 6c 05 	lds	r25, 0x056C
    3274:	a0 91 6d 05 	lds	r26, 0x056D
    3278:	b0 91 6e 05 	lds	r27, 0x056E
    327c:	90 93 15 02 	sts	0x0215, r25
    3280:	80 93 14 02 	sts	0x0214, r24
			g_iPropEventFastMode = command->arg3;
    3284:	80 91 6f 05 	lds	r24, 0x056F
    3288:	90 91 70 05 	lds	r25, 0x0570
    328c:	a0 91 71 05 	lds	r26, 0x0571
    3290:	b0 91 72 05 	lds	r27, 0x0572
    3294:	90 93 17 02 	sts	0x0217, r25
    3298:	80 93 16 02 	sts	0x0216, r24
			
			// initialize the values
			uint8_t i;
			for (i=0; i<16; i++)
				g_iCurrentPropValuesVector[i]=0;			
    329c:	10 92 1a 02 	sts	0x021A, r1
    32a0:	10 92 1b 02 	sts	0x021B, r1
    32a4:	10 92 1c 02 	sts	0x021C, r1
    32a8:	10 92 1d 02 	sts	0x021D, r1
    32ac:	10 92 1e 02 	sts	0x021E, r1
    32b0:	10 92 1f 02 	sts	0x021F, r1
    32b4:	10 92 20 02 	sts	0x0220, r1
    32b8:	10 92 21 02 	sts	0x0221, r1
    32bc:	10 92 22 02 	sts	0x0222, r1
    32c0:	10 92 23 02 	sts	0x0223, r1
    32c4:	10 92 24 02 	sts	0x0224, r1
    32c8:	10 92 25 02 	sts	0x0225, r1
    32cc:	10 92 26 02 	sts	0x0226, r1
    32d0:	10 92 27 02 	sts	0x0227, r1
    32d4:	10 92 28 02 	sts	0x0228, r1
    32d8:	10 92 29 02 	sts	0x0229, r1
    32dc:	10 92 2a 02 	sts	0x022A, r1
    32e0:	10 92 2b 02 	sts	0x022B, r1
    32e4:	10 92 2c 02 	sts	0x022C, r1
    32e8:	10 92 2d 02 	sts	0x022D, r1
    32ec:	10 92 2e 02 	sts	0x022E, r1
    32f0:	10 92 2f 02 	sts	0x022F, r1
    32f4:	10 92 30 02 	sts	0x0230, r1
    32f8:	10 92 31 02 	sts	0x0231, r1
    32fc:	10 92 32 02 	sts	0x0232, r1
    3300:	10 92 33 02 	sts	0x0233, r1
    3304:	10 92 34 02 	sts	0x0234, r1
    3308:	10 92 35 02 	sts	0x0235, r1
    330c:	10 92 36 02 	sts	0x0236, r1
    3310:	10 92 37 02 	sts	0x0237, r1
    3314:	10 92 38 02 	sts	0x0238, r1
    3318:	10 92 39 02 	sts	0x0239, r1
    331c:	10 92 3a 02 	sts	0x023A, r1
    3320:	10 92 3b 02 	sts	0x023B, r1
    3324:	10 92 3c 02 	sts	0x023C, r1
    3328:	10 92 3d 02 	sts	0x023D, r1
    332c:	10 92 3e 02 	sts	0x023E, r1
    3330:	10 92 3f 02 	sts	0x023F, r1
    3334:	10 92 40 02 	sts	0x0240, r1
    3338:	10 92 41 02 	sts	0x0241, r1
    333c:	10 92 42 02 	sts	0x0242, r1
    3340:	10 92 43 02 	sts	0x0243, r1
    3344:	10 92 44 02 	sts	0x0244, r1
    3348:	10 92 45 02 	sts	0x0245, r1
    334c:	10 92 46 02 	sts	0x0246, r1
    3350:	10 92 47 02 	sts	0x0247, r1
    3354:	10 92 48 02 	sts	0x0248, r1
    3358:	10 92 49 02 	sts	0x0249, r1
    335c:	10 92 4a 02 	sts	0x024A, r1
    3360:	10 92 4b 02 	sts	0x024B, r1
    3364:	10 92 4c 02 	sts	0x024C, r1
    3368:	10 92 4d 02 	sts	0x024D, r1
    336c:	10 92 4e 02 	sts	0x024E, r1
    3370:	10 92 4f 02 	sts	0x024F, r1
    3374:	10 92 50 02 	sts	0x0250, r1
    3378:	10 92 51 02 	sts	0x0251, r1
    337c:	10 92 52 02 	sts	0x0252, r1
    3380:	10 92 53 02 	sts	0x0253, r1
    3384:	10 92 54 02 	sts	0x0254, r1
    3388:	10 92 55 02 	sts	0x0255, r1
    338c:	10 92 56 02 	sts	0x0256, r1
    3390:	10 92 57 02 	sts	0x0257, r1
    3394:	10 92 58 02 	sts	0x0258, r1
    3398:	10 92 59 02 	sts	0x0259, r1
    339c:	a1 ce       	rjmp	.-702    	; 0x30e0 <TP_GetIncomingCommand+0x52>
{
	TP_Header_ST	header;
	
	header.transID = command->header.transID;
	
	switch (command->header.type)
    339e:	8b 30       	cpi	r24, 0x0B	; 11
    33a0:	09 f0       	breq	.+2      	; 0x33a4 <TP_GetIncomingCommand+0x316>
    33a2:	9e ce       	rjmp	.-708    	; 0x30e0 <TP_GetIncomingCommand+0x52>
		case TP_COMMAND_CAPTURE:			
		break;
		
		case TP_COMMAND_GET_PROP_DESC:	
			TP_SendDebugLog ( "5" );	
			CameraControl_OpenSession( &DigitalCamera_SI_Interface );
    33a4:	80 e0       	ldi	r24, 0x00	; 0
    33a6:	91 e0       	ldi	r25, 0x01	; 1
    33a8:	81 da       	rcall	.-2814   	; 0x28ac <CameraControl_OpenSession>
			CameraControl_DeviceOperation_GetPropertyDescBin ( &DigitalCamera_SI_Interface,	command->arg1, header.transID );
    33aa:	00 91 67 05 	lds	r16, 0x0567
    33ae:	10 91 68 05 	lds	r17, 0x0568
    33b2:	20 91 69 05 	lds	r18, 0x0569
    33b6:	30 91 6a 05 	lds	r19, 0x056A
    33ba:	4c 81       	ldd	r20, Y+4	; 0x04
    33bc:	5d 81       	ldd	r21, Y+5	; 0x05
    33be:	80 e0       	ldi	r24, 0x00	; 0
    33c0:	91 e0       	ldi	r25, 0x01	; 1
    33c2:	b8 01       	movw	r22, r16
    33c4:	47 dc       	rcall	.-1906   	; 0x2c54 <CameraControl_DeviceOperation_GetPropertyDescBin>
			CameraControl_CloseSession( &DigitalCamera_SI_Interface );
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	91 e0       	ldi	r25, 0x01	; 1
    33ca:	cc da       	rcall	.-2664   	; 0x2964 <CameraControl_CloseSession>
    33cc:	89 ce       	rjmp	.-750    	; 0x30e0 <TP_GetIncomingCommand+0x52>
{
	TP_Header_ST	header;
	
	header.transID = command->header.transID;
	
	switch (command->header.type)
    33ce:	81 30       	cpi	r24, 0x01	; 1
    33d0:	09 f0       	breq	.+2      	; 0x33d4 <TP_GetIncomingCommand+0x346>
    33d2:	86 ce       	rjmp	.-756    	; 0x30e0 <TP_GetIncomingCommand+0x52>
	{
		case TP_COMMAND_IDN:
			TP_SendDebugLog ( "A" );
			header.length = 3;
    33d4:	7b 82       	std	Y+3, r7	; 0x03
    33d6:	6a 82       	std	Y+2, r6	; 0x02
			header.type = TP_DATA_IDN;
    33d8:	39 82       	std	Y+1, r3	; 0x01
			
			TP_SendHeader (&header);
    33da:	c7 01       	movw	r24, r14
    33dc:	1d de       	rcall	.-966    	; 0x3018 <TP_SendHeader>
			uart_putc(1, stdout);		// version
    33de:	60 91 d0 05 	lds	r22, 0x05D0
    33e2:	70 91 d1 05 	lds	r23, 0x05D1
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	fd d5       	rcall	.+3066   	; 0x3fe4 <uart_putc>
			uart_putc(0, stdout);		// sub-version
    33ea:	60 91 d0 05 	lds	r22, 0x05D0
    33ee:	70 91 d1 05 	lds	r23, 0x05D1
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	f7 d5       	rcall	.+3054   	; 0x3fe4 <uart_putc>
			uart_putc(16, stdout);		// clock-speed
    33f6:	60 91 d0 05 	lds	r22, 0x05D0
    33fa:	70 91 d1 05 	lds	r23, 0x05D1
    33fe:	80 e1       	ldi	r24, 0x10	; 16
    3400:	f1 d5       	rcall	.+3042   	; 0x3fe4 <uart_putc>
    3402:	6e ce       	rjmp	.-804    	; 0x30e0 <TP_GetIncomingCommand+0x52>
			CameraControl_DeviceOperation_GetPropertyValBin ( &DigitalCamera_SI_Interface,	command->arg1, header.transID );
			CameraControl_CloseSession( &DigitalCamera_SI_Interface );
		break;
		
		case TP_COMMAND_SET_PROP_VAL:	
			CameraControl_OpenSession( &DigitalCamera_SI_Interface );
    3404:	80 e0       	ldi	r24, 0x00	; 0
    3406:	91 e0       	ldi	r25, 0x01	; 1
    3408:	51 da       	rcall	.-2910   	; 0x28ac <CameraControl_OpenSession>
			CameraControl_DeviceOperation_SetPropertyValBin (&DigitalCamera_SI_Interface, command->arg1, command->arg2 );
    340a:	80 90 67 05 	lds	r8, 0x0567
    340e:	90 90 68 05 	lds	r9, 0x0568
    3412:	a0 90 69 05 	lds	r10, 0x0569
    3416:	b0 90 6a 05 	lds	r11, 0x056A
    341a:	20 91 6b 05 	lds	r18, 0x056B
    341e:	30 91 6c 05 	lds	r19, 0x056C
    3422:	40 91 6d 05 	lds	r20, 0x056D
    3426:	50 91 6e 05 	lds	r21, 0x056E
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	91 e0       	ldi	r25, 0x01	; 1
    342e:	b4 01       	movw	r22, r8
    3430:	02 dd       	rcall	.-1532   	; 0x2e36 <CameraControl_DeviceOperation_SetPropertyValBin>
			CameraControl_CloseSession( &DigitalCamera_SI_Interface );
    3432:	80 e0       	ldi	r24, 0x00	; 0
    3434:	91 e0       	ldi	r25, 0x01	; 1
    3436:	96 da       	rcall	.-2772   	; 0x2964 <CameraControl_CloseSession>
    3438:	53 ce       	rjmp	.-858    	; 0x30e0 <TP_GetIncomingCommand+0x52>
		break;
		
		case TP_COMMAND_GET_CAMERA_INFO:
			TP_SendDebugLog ( "C" );
			// if not connected
			if (g_bCameraConnected == 0)
    343a:	80 91 42 01 	lds	r24, 0x0142
    343e:	88 23       	and	r24, r24
    3440:	09 f0       	breq	.+2      	; 0x3444 <TP_GetIncomingCommand+0x3b6>
    3442:	40 c0       	rjmp	.+128    	; 0x34c4 <TP_GetIncomingCommand+0x436>
			{
				TP_SendDebugLog ( "-0" );
				header.length = 0;
    3444:	1b 82       	std	Y+3, r1	; 0x03
    3446:	1a 82       	std	Y+2, r1	; 0x02
				header.type = TP_DATA_CAMERA_INFO;
    3448:	29 82       	std	Y+1, r2	; 0x01
				TP_SendHeader (&header);
    344a:	c7 01       	movw	r24, r14
    344c:	e5 dd       	rcall	.-1078   	; 0x3018 <TP_SendHeader>
    344e:	48 ce       	rjmp	.-880    	; 0x30e0 <TP_GetIncomingCommand+0x52>
			CameraControl_DeviceOperation_GetPropertyDescBin ( &DigitalCamera_SI_Interface,	command->arg1, header.transID );
			CameraControl_CloseSession( &DigitalCamera_SI_Interface );
		break;
		
		case TP_COMMAND_GET_PROP_VAL:
			CameraControl_OpenSession( &DigitalCamera_SI_Interface );
    3450:	80 e0       	ldi	r24, 0x00	; 0
    3452:	91 e0       	ldi	r25, 0x01	; 1
    3454:	2b da       	rcall	.-2986   	; 0x28ac <CameraControl_OpenSession>
			CameraControl_DeviceOperation_GetPropertyValBin ( &DigitalCamera_SI_Interface,	command->arg1, header.transID );
    3456:	00 91 67 05 	lds	r16, 0x0567
    345a:	10 91 68 05 	lds	r17, 0x0568
    345e:	20 91 69 05 	lds	r18, 0x0569
    3462:	30 91 6a 05 	lds	r19, 0x056A
    3466:	4c 81       	ldd	r20, Y+4	; 0x04
    3468:	5d 81       	ldd	r21, Y+5	; 0x05
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	91 e0       	ldi	r25, 0x01	; 1
    346e:	b8 01       	movw	r22, r16
    3470:	23 dc       	rcall	.-1978   	; 0x2cb8 <CameraControl_DeviceOperation_GetPropertyValBin>
			CameraControl_CloseSession( &DigitalCamera_SI_Interface );
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	91 e0       	ldi	r25, 0x01	; 1
    3476:	76 da       	rcall	.-2836   	; 0x2964 <CameraControl_CloseSession>
    3478:	33 ce       	rjmp	.-922    	; 0x30e0 <TP_GetIncomingCommand+0x52>
			uart_putc(16, stdout);		// clock-speed
		break;	
				
		case TP_COMMAND_GET_CAMERA_STATUS:
			TP_SendDebugLog ( "B" );
			header.length = 1;
    347a:	db 82       	std	Y+3, r13	; 0x03
    347c:	ca 82       	std	Y+2, r12	; 0x02
			header.type = TP_DATA_CAMERA_STATUS;
    347e:	59 82       	std	Y+1, r5	; 0x01
			TP_SendHeader (&header);
    3480:	c7 01       	movw	r24, r14
    3482:	ca dd       	rcall	.-1132   	; 0x3018 <TP_SendHeader>
			uart_putc (g_bCameraConnected, stdout);			
    3484:	80 91 42 01 	lds	r24, 0x0142
    3488:	60 91 d0 05 	lds	r22, 0x05D0
    348c:	70 91 d1 05 	lds	r23, 0x05D1
    3490:	a9 d5       	rcall	.+2898   	; 0x3fe4 <uart_putc>
    3492:	26 ce       	rjmp	.-948    	; 0x30e0 <TP_GetIncomingCommand+0x52>
			}
		
		break;
		
		case TP_COMMAND_GET_STORAGE_INFO:
			CameraControl_OpenSession( &DigitalCamera_SI_Interface );
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	91 e0       	ldi	r25, 0x01	; 1
    3498:	09 da       	rcall	.-3054   	; 0x28ac <CameraControl_OpenSession>
			CameraControl_GetStorageIDs ( &DigitalCamera_SI_Interface );
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	91 e0       	ldi	r25, 0x01	; 1
    349e:	9c db       	rcall	.-2248   	; 0x2bd8 <CameraControl_GetStorageIDs>
			CameraControl_StorageInfo_Bin ( &DigitalCamera_SI_Interface, command->arg1, header.transID );
    34a0:	00 91 67 05 	lds	r16, 0x0567
    34a4:	10 91 68 05 	lds	r17, 0x0568
    34a8:	20 91 69 05 	lds	r18, 0x0569
    34ac:	30 91 6a 05 	lds	r19, 0x056A
    34b0:	4c 81       	ldd	r20, Y+4	; 0x04
    34b2:	5d 81       	ldd	r21, Y+5	; 0x05
    34b4:	80 e0       	ldi	r24, 0x00	; 0
    34b6:	91 e0       	ldi	r25, 0x01	; 1
    34b8:	60 2f       	mov	r22, r16
    34ba:	90 db       	rcall	.-2272   	; 0x2bdc <CameraControl_StorageInfo_Bin>
			CameraControl_CloseSession( &DigitalCamera_SI_Interface );
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	91 e0       	ldi	r25, 0x01	; 1
    34c0:	51 da       	rcall	.-2910   	; 0x2964 <CameraControl_CloseSession>
    34c2:	0e ce       	rjmp	.-996    	; 0x30e0 <TP_GetIncomingCommand+0x52>
				TP_SendHeader (&header);
			}
			else
			{
				TP_SendDebugLog ( "-1" );
				CameraControl_DeviceInfo_Bin ( &DigitalCamera_SI_Interface, header.transID );
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	91 e0       	ldi	r25, 0x01	; 1
    34c8:	5c db       	rcall	.-2376   	; 0x2b82 <CameraControl_DeviceInfo_Bin>
    34ca:	0a ce       	rjmp	.-1004   	; 0x30e0 <TP_GetIncomingCommand+0x52>
				TP_SendDebugLog ( "Checksum error" );
				// checksum error
				// send checksum error event
				
				// flush all incoming buffers
				return 1;
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	9e ce       	rjmp	.-708    	; 0x320c <TP_GetIncomingCommand+0x17e>

000034d0 <TP_PushEvent>:
	}
}

//------------------------------------------------------------------------------
uint8_t TP_PushEvent(volatile TP_Outgoing_Event_ST *ev)
{
    34d0:	dc 01       	movw	r26, r24
	// if queue is full return error
	if ( g_iEventQueueSize == TP_EVENT_QUEUE_SIZE )
    34d2:	80 91 11 02 	lds	r24, 0x0211
    34d6:	8a 30       	cpi	r24, 0x0A	; 10
    34d8:	09 f4       	brne	.+2      	; 0x34dc <TP_PushEvent+0xc>
    34da:	4a c0       	rjmp	.+148    	; 0x3570 <TP_PushEvent+0xa0>
		return 1;
		
	
	volatile TP_Outgoing_Event_ST *newEvent = &g_stOutgoingEventQueue[g_iEventQueueStart];
    34dc:	80 91 0f 02 	lds	r24, 0x020F
    34e0:	90 e0       	ldi	r25, 0x00	; 0
	
	newEvent->header.length=ev->header.length;
    34e2:	11 96       	adiw	r26, 0x01	; 1
    34e4:	2d 91       	ld	r18, X+
    34e6:	3c 91       	ld	r19, X
    34e8:	12 97       	sbiw	r26, 0x02	; 2
    34ea:	fc 01       	movw	r30, r24
    34ec:	ee 0f       	add	r30, r30
    34ee:	ff 1f       	adc	r31, r31
    34f0:	ee 0f       	add	r30, r30
    34f2:	ff 1f       	adc	r31, r31
    34f4:	ee 0f       	add	r30, r30
    34f6:	ff 1f       	adc	r31, r31
    34f8:	e8 0f       	add	r30, r24
    34fa:	f9 1f       	adc	r31, r25
    34fc:	ec 58       	subi	r30, 0x8C	; 140
    34fe:	fa 4f       	sbci	r31, 0xFA	; 250
    3500:	32 83       	std	Z+2, r19	; 0x02
    3502:	21 83       	std	Z+1, r18	; 0x01
	newEvent->header.type=ev->header.type;
    3504:	8c 91       	ld	r24, X
    3506:	80 83       	st	Z, r24
	newEvent->header.transID=g_iEventID++;
    3508:	20 91 05 02 	lds	r18, 0x0205
    350c:	30 91 06 02 	lds	r19, 0x0206
    3510:	40 91 07 02 	lds	r20, 0x0207
    3514:	50 91 08 02 	lds	r21, 0x0208
    3518:	34 83       	std	Z+4, r19	; 0x04
    351a:	23 83       	std	Z+3, r18	; 0x03
    351c:	2f 5f       	subi	r18, 0xFF	; 255
    351e:	3f 4f       	sbci	r19, 0xFF	; 255
    3520:	4f 4f       	sbci	r20, 0xFF	; 255
    3522:	5f 4f       	sbci	r21, 0xFF	; 255
    3524:	20 93 05 02 	sts	0x0205, r18
    3528:	30 93 06 02 	sts	0x0206, r19
    352c:	40 93 07 02 	sts	0x0207, r20
    3530:	50 93 08 02 	sts	0x0208, r21
	newEvent->arg1 = ev->arg1;
    3534:	15 96       	adiw	r26, 0x05	; 5
    3536:	8d 91       	ld	r24, X+
    3538:	9d 91       	ld	r25, X+
    353a:	0d 90       	ld	r0, X+
    353c:	bc 91       	ld	r27, X
    353e:	a0 2d       	mov	r26, r0
    3540:	85 83       	std	Z+5, r24	; 0x05
    3542:	96 83       	std	Z+6, r25	; 0x06
    3544:	a7 83       	std	Z+7, r26	; 0x07
    3546:	b0 87       	std	Z+8, r27	; 0x08
	
	g_iEventQueueSize ++;
    3548:	80 91 11 02 	lds	r24, 0x0211
    354c:	8f 5f       	subi	r24, 0xFF	; 255
    354e:	80 93 11 02 	sts	0x0211, r24
	g_iEventQueueStart ++;
    3552:	80 91 0f 02 	lds	r24, 0x020F
    3556:	8f 5f       	subi	r24, 0xFF	; 255
    3558:	80 93 0f 02 	sts	0x020F, r24
	
	if (g_iEventQueueStart>=TP_EVENT_QUEUE_SIZE)
    355c:	80 91 0f 02 	lds	r24, 0x020F
    3560:	8a 30       	cpi	r24, 0x0A	; 10
    3562:	20 f0       	brcs	.+8      	; 0x356c <TP_PushEvent+0x9c>
		g_iEventQueueStart = 0;
    3564:	10 92 0f 02 	sts	0x020F, r1
		
	return 0;
    3568:	80 e0       	ldi	r24, 0x00	; 0
    356a:	08 95       	ret
    356c:	80 e0       	ldi	r24, 0x00	; 0
}
    356e:	08 95       	ret
//------------------------------------------------------------------------------
uint8_t TP_PushEvent(volatile TP_Outgoing_Event_ST *ev)
{
	// if queue is full return error
	if ( g_iEventQueueSize == TP_EVENT_QUEUE_SIZE )
		return 1;
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	08 95       	ret

00003574 <TP_PopEvent>:
}

//------------------------------------------------------------------------------
volatile TP_Outgoing_Event_ST* TP_PopEvent(void)
{
	uint8_t cur_end = g_iEventQueueEnd;
    3574:	80 91 10 02 	lds	r24, 0x0210
	
	// if queue is full return error
	if ( g_iEventQueueSize == 0 )
    3578:	90 91 11 02 	lds	r25, 0x0211
    357c:	99 23       	and	r25, r25
    357e:	f9 f0       	breq	.+62     	; 0x35be <TP_PopEvent+0x4a>
		return NULL;
		
	g_iEventQueueEnd ++;
    3580:	90 91 10 02 	lds	r25, 0x0210
    3584:	9f 5f       	subi	r25, 0xFF	; 255
    3586:	90 93 10 02 	sts	0x0210, r25
	if (g_iEventQueueEnd>=TP_EVENT_QUEUE_SIZE)
    358a:	90 91 10 02 	lds	r25, 0x0210
    358e:	9a 30       	cpi	r25, 0x0A	; 10
    3590:	98 f4       	brcc	.+38     	; 0x35b8 <TP_PopEvent+0x44>
		g_iEventQueueEnd = 0;
	
	g_iEventQueueSize --;
    3592:	90 91 11 02 	lds	r25, 0x0211
    3596:	91 50       	subi	r25, 0x01	; 1
    3598:	90 93 11 02 	sts	0x0211, r25
	
	return &g_stOutgoingEventQueue[cur_end];
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	9c 01       	movw	r18, r24
    35a0:	22 0f       	add	r18, r18
    35a2:	33 1f       	adc	r19, r19
    35a4:	22 0f       	add	r18, r18
    35a6:	33 1f       	adc	r19, r19
    35a8:	22 0f       	add	r18, r18
    35aa:	33 1f       	adc	r19, r19
    35ac:	28 0f       	add	r18, r24
    35ae:	39 1f       	adc	r19, r25
    35b0:	2c 58       	subi	r18, 0x8C	; 140
    35b2:	3a 4f       	sbci	r19, 0xFA	; 250
}
    35b4:	c9 01       	movw	r24, r18
    35b6:	08 95       	ret
	if ( g_iEventQueueSize == 0 )
		return NULL;
		
	g_iEventQueueEnd ++;
	if (g_iEventQueueEnd>=TP_EVENT_QUEUE_SIZE)
		g_iEventQueueEnd = 0;
    35b8:	10 92 10 02 	sts	0x0210, r1
    35bc:	ea cf       	rjmp	.-44     	; 0x3592 <TP_PopEvent+0x1e>
{
	uint8_t cur_end = g_iEventQueueEnd;
	
	// if queue is full return error
	if ( g_iEventQueueSize == 0 )
		return NULL;
    35be:	20 e0       	ldi	r18, 0x00	; 0
    35c0:	30 e0       	ldi	r19, 0x00	; 0
		g_iEventQueueEnd = 0;
	
	g_iEventQueueSize --;
	
	return &g_stOutgoingEventQueue[cur_end];
}
    35c2:	c9 01       	movw	r24, r18
    35c4:	08 95       	ret

000035c6 <TP_SendEvent>:
	return 0;
}

//------------------------------------------------------------------------------
uint8_t TP_SendEvent ( void )
{
    35c6:	0f 93       	push	r16
    35c8:	1f 93       	push	r17
    35ca:	cf 93       	push	r28
    35cc:	df 93       	push	r29
	if (g_iEventQueueSize==0)
    35ce:	80 91 11 02 	lds	r24, 0x0211
    35d2:	88 23       	and	r24, r24
    35d4:	31 f4       	brne	.+12     	; 0x35e2 <TP_SendEvent+0x1c>
		return 0;
    35d6:	80 e0       	ldi	r24, 0x00	; 0
	uart_putc(tempPos[1], stdout);
	uart_putc(tempPos[2], stdout);
	uart_putc(tempPos[3], stdout);
	
	return 0;
}
    35d8:	df 91       	pop	r29
    35da:	cf 91       	pop	r28
    35dc:	1f 91       	pop	r17
    35de:	0f 91       	pop	r16
    35e0:	08 95       	ret
uint8_t TP_SendEvent ( void )
{
	if (g_iEventQueueSize==0)
		return 0;
	
	volatile TP_Outgoing_Event_ST* event = TP_PopEvent();
    35e2:	c8 df       	rcall	.-112    	; 0x3574 <TP_PopEvent>
    35e4:	8c 01       	movw	r16, r24
	
	if (event==NULL) 
    35e6:	00 97       	sbiw	r24, 0x00	; 0
    35e8:	11 f1       	breq	.+68     	; 0x362e <TP_SendEvent+0x68>
		return 1;
		
	TP_SendHeader(&event->header);
    35ea:	16 dd       	rcall	.-1492   	; 0x3018 <TP_SendHeader>
	
	char* tempPos = (char*)((void*)(&event->arg1));
    35ec:	e8 01       	movw	r28, r16
    35ee:	25 96       	adiw	r28, 0x05	; 5
	uart_putc(tempPos[0], stdout);		// MSB
    35f0:	60 91 d0 05 	lds	r22, 0x05D0
    35f4:	70 91 d1 05 	lds	r23, 0x05D1
    35f8:	f8 01       	movw	r30, r16
    35fa:	85 81       	ldd	r24, Z+5	; 0x05
    35fc:	f3 d4       	rcall	.+2534   	; 0x3fe4 <uart_putc>
	uart_putc(tempPos[1], stdout);
    35fe:	60 91 d0 05 	lds	r22, 0x05D0
    3602:	70 91 d1 05 	lds	r23, 0x05D1
    3606:	89 81       	ldd	r24, Y+1	; 0x01
    3608:	ed d4       	rcall	.+2522   	; 0x3fe4 <uart_putc>
	uart_putc(tempPos[2], stdout);
    360a:	60 91 d0 05 	lds	r22, 0x05D0
    360e:	70 91 d1 05 	lds	r23, 0x05D1
    3612:	8a 81       	ldd	r24, Y+2	; 0x02
    3614:	e7 d4       	rcall	.+2510   	; 0x3fe4 <uart_putc>
	uart_putc(tempPos[3], stdout);
    3616:	60 91 d0 05 	lds	r22, 0x05D0
    361a:	70 91 d1 05 	lds	r23, 0x05D1
    361e:	8b 81       	ldd	r24, Y+3	; 0x03
    3620:	e1 d4       	rcall	.+2498   	; 0x3fe4 <uart_putc>
	
	return 0;
    3622:	80 e0       	ldi	r24, 0x00	; 0
}
    3624:	df 91       	pop	r29
    3626:	cf 91       	pop	r28
    3628:	1f 91       	pop	r17
    362a:	0f 91       	pop	r16
    362c:	08 95       	ret
		return 0;
	
	volatile TP_Outgoing_Event_ST* event = TP_PopEvent();
	
	if (event==NULL) 
		return 1;
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	d3 cf       	rjmp	.-90     	; 0x35d8 <TP_SendEvent+0x12>

00003632 <TP_CollectEvents>:
	return &g_stOutgoingEventQueue[cur_end];
}

//------------------------------------------------------------------------------
void TP_CollectEvents ( void )
{
    3632:	1f 93       	push	r17
    3634:	df 93       	push	r29
    3636:	cf 93       	push	r28
    3638:	cd b7       	in	r28, 0x3d	; 61
    363a:	de b7       	in	r29, 0x3e	; 62
    363c:	29 97       	sbiw	r28, 0x09	; 9
    363e:	0f b6       	in	r0, 0x3f	; 63
    3640:	f8 94       	cli
    3642:	de bf       	out	0x3e, r29	; 62
    3644:	0f be       	out	0x3f, r0	; 63
    3646:	cd bf       	out	0x3d, r28	; 61
	if (g_USBEventBitmap==0) return;
    3648:	80 91 4b 01 	lds	r24, 0x014B
    364c:	88 23       	and	r24, r24
    364e:	71 f0       	breq	.+28     	; 0x366c <TP_CollectEvents+0x3a>
	
	uint8_t temp = g_USBEventBitmap;
    3650:	10 91 4b 01 	lds	r17, 0x014B
	TP_Outgoing_Event_ST ev;	
	ev.header.length = 4;
    3654:	84 e0       	ldi	r24, 0x04	; 4
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	9b 83       	std	Y+3, r25	; 0x03
    365a:	8a 83       	std	Y+2, r24	; 0x02
	ev.arg1 = 0;
    365c:	1e 82       	std	Y+6, r1	; 0x06
    365e:	1f 82       	std	Y+7, r1	; 0x07
    3660:	18 86       	std	Y+8, r1	; 0x08
    3662:	19 86       	std	Y+9, r1	; 0x09
	
	if (temp&TP_USB_EVENT_DEVICE_ATTACHED)
    3664:	10 fd       	sbrc	r17, 0
    3666:	17 c0       	rjmp	.+46     	; 0x3696 <TP_CollectEvents+0x64>
		ev.header.type = TP_EVENT_CAMERA_CONNECTED;
		g_USBEventBitmap &= ~TP_USB_EVENT_DEVICE_ATTACHED;
		TP_PushEvent (&ev);
	}

	if (temp&TP_USB_EVENT_DEVICE_DETTACHED)
    3668:	11 fd       	sbrc	r17, 1
    366a:	0a c0       	rjmp	.+20     	; 0x3680 <TP_CollectEvents+0x4e>
	{	
		ev.header.type = TP_EVENT_PROPERTY_CHANGED;
		g_USBEventBitmap &= ~TP_USB_EVENT_PROPERTY_CHANGED;
		TP_PushEvent (&ev);
	}	*/
}
    366c:	29 96       	adiw	r28, 0x09	; 9
    366e:	0f b6       	in	r0, 0x3f	; 63
    3670:	f8 94       	cli
    3672:	de bf       	out	0x3e, r29	; 62
    3674:	0f be       	out	0x3f, r0	; 63
    3676:	cd bf       	out	0x3d, r28	; 61
    3678:	cf 91       	pop	r28
    367a:	df 91       	pop	r29
    367c:	1f 91       	pop	r17
    367e:	08 95       	ret
		TP_PushEvent (&ev);
	}

	if (temp&TP_USB_EVENT_DEVICE_DETTACHED)
	{	
		ev.header.type = TP_EVENT_CAMERA_DISCONNECTED;
    3680:	82 e3       	ldi	r24, 0x32	; 50
    3682:	89 83       	std	Y+1, r24	; 0x01
		g_USBEventBitmap &= ~TP_USB_EVENT_DEVICE_DETTACHED;
    3684:	80 91 4b 01 	lds	r24, 0x014B
    3688:	8d 7f       	andi	r24, 0xFD	; 253
    368a:	80 93 4b 01 	sts	0x014B, r24
		TP_PushEvent (&ev);
    368e:	ce 01       	movw	r24, r28
    3690:	01 96       	adiw	r24, 0x01	; 1
    3692:	1e df       	rcall	.-452    	; 0x34d0 <TP_PushEvent>
    3694:	eb cf       	rjmp	.-42     	; 0x366c <TP_CollectEvents+0x3a>
	ev.header.length = 4;
	ev.arg1 = 0;
	
	if (temp&TP_USB_EVENT_DEVICE_ATTACHED)
	{	
		ev.header.type = TP_EVENT_CAMERA_CONNECTED;
    3696:	81 e3       	ldi	r24, 0x31	; 49
    3698:	89 83       	std	Y+1, r24	; 0x01
		g_USBEventBitmap &= ~TP_USB_EVENT_DEVICE_ATTACHED;
    369a:	80 91 4b 01 	lds	r24, 0x014B
    369e:	8e 7f       	andi	r24, 0xFE	; 254
    36a0:	80 93 4b 01 	sts	0x014B, r24
		TP_PushEvent (&ev);
    36a4:	ce 01       	movw	r24, r28
    36a6:	01 96       	adiw	r24, 0x01	; 1
    36a8:	13 df       	rcall	.-474    	; 0x34d0 <TP_PushEvent>
	}

	if (temp&TP_USB_EVENT_DEVICE_DETTACHED)
    36aa:	11 ff       	sbrs	r17, 1
    36ac:	df cf       	rjmp	.-66     	; 0x366c <TP_CollectEvents+0x3a>
    36ae:	e8 cf       	rjmp	.-48     	; 0x3680 <TP_CollectEvents+0x4e>

000036b0 <TP_CheckPropertyEvents>:
	}	*/
}

//------------------------------------------------------------------------------
void TP_CheckPropertyEvents ( void )
{
    36b0:	af 92       	push	r10
    36b2:	bf 92       	push	r11
    36b4:	cf 92       	push	r12
    36b6:	df 92       	push	r13
    36b8:	ef 92       	push	r14
    36ba:	ff 92       	push	r15
    36bc:	0f 93       	push	r16
    36be:	1f 93       	push	r17
    36c0:	df 93       	push	r29
    36c2:	cf 93       	push	r28
    36c4:	cd b7       	in	r28, 0x3d	; 61
    36c6:	de b7       	in	r29, 0x3e	; 62
    36c8:	2d 97       	sbiw	r28, 0x0d	; 13
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	f8 94       	cli
    36ce:	de bf       	out	0x3e, r29	; 62
    36d0:	0f be       	out	0x3f, r0	; 63
    36d2:	cd bf       	out	0x3d, r28	; 61
	if (g_iCurrentPropEventVector==0)
    36d4:	80 91 18 02 	lds	r24, 0x0218
    36d8:	90 91 19 02 	lds	r25, 0x0219
    36dc:	00 97       	sbiw	r24, 0x00	; 0
    36de:	89 f4       	brne	.+34     	; 0x3702 <TP_CheckPropertyEvents+0x52>
			uart_putc(tempVal[2], stdout);
			uart_putc(tempVal[3], stdout);
		}
		iChangedPropVector >>= 1;
	}
}
    36e0:	2d 96       	adiw	r28, 0x0d	; 13
    36e2:	0f b6       	in	r0, 0x3f	; 63
    36e4:	f8 94       	cli
    36e6:	de bf       	out	0x3e, r29	; 62
    36e8:	0f be       	out	0x3f, r0	; 63
    36ea:	cd bf       	out	0x3d, r28	; 61
    36ec:	cf 91       	pop	r28
    36ee:	df 91       	pop	r29
    36f0:	1f 91       	pop	r17
    36f2:	0f 91       	pop	r16
    36f4:	ff 90       	pop	r15
    36f6:	ef 90       	pop	r14
    36f8:	df 90       	pop	r13
    36fa:	cf 90       	pop	r12
    36fc:	bf 90       	pop	r11
    36fe:	af 90       	pop	r10
    3700:	08 95       	ret
void TP_CheckPropertyEvents ( void )
{
	if (g_iCurrentPropEventVector==0)
		return;
		
	uint16_t iCurrentPropVector = g_iCurrentPropEventVector;
    3702:	00 91 18 02 	lds	r16, 0x0218
    3706:	10 91 19 02 	lds	r17, 0x0219
	uint8_t iMessageLength = 0;	
	uint16_t iChangedPropVector = 0;
	uint32_t iTempPropVal = 0;
    370a:	19 82       	std	Y+1, r1	; 0x01
    370c:	1a 82       	std	Y+2, r1	; 0x02
    370e:	1b 82       	std	Y+3, r1	; 0x03
    3710:	1c 82       	std	Y+4, r1	; 0x04
		
	// Check which of those properties have changed
	// open the session for all the values
	CameraControl_OpenSession( &DigitalCamera_SI_Interface );
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	91 e0       	ldi	r25, 0x01	; 1
    3716:	ca d8       	rcall	.-3692   	; 0x28ac <CameraControl_OpenSession>
	
	if (iCurrentPropVector & TP_PROPERTY_EVENT_BatteryLevel)
    3718:	00 fd       	sbrc	r16, 0
    371a:	9e c2       	rjmp	.+1340   	; 0x3c58 <TP_CheckPropertyEvents+0x5a8>
	{
		CameraControl_GetPropertyVal32Bit (	&DigitalCamera_SI_Interface, PTP_DPC_BatteryLevel, &iTempPropVal );
		if (iTempPropVal != g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_BatteryLevel_N]) 
    371c:	aa 24       	eor	r10, r10
    371e:	a3 94       	inc	r10
    3720:	e2 e0       	ldi	r30, 0x02	; 2
    3722:	ce 2e       	mov	r12, r30
    3724:	d1 2c       	mov	r13, r1
	if (g_iCurrentPropEventVector==0)
		return;
		
	uint16_t iCurrentPropVector = g_iCurrentPropEventVector;
	uint8_t iMessageLength = 0;	
	uint16_t iChangedPropVector = 0;
    3726:	ee 24       	eor	r14, r14
    3728:	ff 24       	eor	r15, r15
{
	if (g_iCurrentPropEventVector==0)
		return;
		
	uint16_t iCurrentPropVector = g_iCurrentPropEventVector;
	uint8_t iMessageLength = 0;	
    372a:	bb 24       	eor	r11, r11
			iChangedPropVector |= TP_PROPERTY_EVENT_BatteryLevel;
			iMessageLength ++;		// uint8
		}			
	}
	
	if (iCurrentPropVector & TP_PROPERTY_EVENT_FunctionalMode)
    372c:	01 fd       	sbrc	r16, 1
    372e:	6f c2       	rjmp	.+1246   	; 0x3c0e <TP_CheckPropertyEvents+0x55e>
			iChangedPropVector |= TP_PROPERTY_EVENT_FunctionalMode;
			iMessageLength ++;		// uint16
		}
	}

	if (iCurrentPropVector & TP_PROPERTY_EVENT_WhiteBalance)
    3730:	02 fd       	sbrc	r16, 2
    3732:	45 c2       	rjmp	.+1162   	; 0x3bbe <TP_CheckPropertyEvents+0x50e>
			iChangedPropVector |= TP_PROPERTY_EVENT_WhiteBalance;
			iMessageLength ++;		// uint16
		}					
	}

	if (iCurrentPropVector & TP_PROPERTY_EVENT_FNumber)
    3734:	03 fd       	sbrc	r16, 3
    3736:	1b c2       	rjmp	.+1078   	; 0x3b6e <TP_CheckPropertyEvents+0x4be>
			iChangedPropVector |= TP_PROPERTY_EVENT_FNumber;
			iMessageLength ++;		// uint16
		}												
	}

	if (iCurrentPropVector & TP_PROPERTY_EVENT_FocalLength)
    3738:	04 fd       	sbrc	r16, 4
    373a:	f1 c1       	rjmp	.+994    	; 0x3b1e <TP_CheckPropertyEvents+0x46e>
			iChangedPropVector |= TP_PROPERTY_EVENT_FocalLength;
			iMessageLength ++;		// uint32
		}												
	}

	if (iCurrentPropVector & TP_PROPERTY_EVENT_FocusDistance)
    373c:	05 fd       	sbrc	r16, 5
    373e:	c7 c1       	rjmp	.+910    	; 0x3ace <TP_CheckPropertyEvents+0x41e>
			iChangedPropVector |= TP_PROPERTY_EVENT_FocusDistance;
			iMessageLength ++;		// uint16
		}	
	}

	if (iCurrentPropVector & TP_PROPERTY_EVENT_FocusMode)
    3740:	06 fd       	sbrc	r16, 6
    3742:	9d c1       	rjmp	.+826    	; 0x3a7e <TP_CheckPropertyEvents+0x3ce>
			iChangedPropVector |= TP_PROPERTY_EVENT_FocusMode;
			iMessageLength ++;		// uint16
		}										
	}

	if (iCurrentPropVector & TP_PROPERTY_EVENT_ExposureMeteringMode)
    3744:	07 fd       	sbrc	r16, 7
    3746:	73 c1       	rjmp	.+742    	; 0x3a2e <TP_CheckPropertyEvents+0x37e>
			iChangedPropVector |= TP_PROPERTY_EVENT_ExposureMeteringMode;
			iMessageLength ++;		// uint16
		}											
	}
	
	if (iCurrentPropVector & TP_PROPERTY_EVENT_FlashMode)
    3748:	10 fd       	sbrc	r17, 0
    374a:	49 c1       	rjmp	.+658    	; 0x39de <TP_CheckPropertyEvents+0x32e>
			iChangedPropVector |= TP_PROPERTY_EVENT_FlashMode;
			iMessageLength ++;		// uint16
		}											
	}
	
	if (iCurrentPropVector & TP_PROPERTY_EVENT_ExposureTime)
    374c:	11 fd       	sbrc	r17, 1
    374e:	1f c1       	rjmp	.+574    	; 0x398e <TP_CheckPropertyEvents+0x2de>
			iChangedPropVector |= TP_PROPERTY_EVENT_ExposureTime;
			iMessageLength ++;		// uint32
		}											
	}
	
	if (iCurrentPropVector & TP_PROPERTY_EVENT_ExposureProgramMode)
    3750:	12 fd       	sbrc	r17, 2
    3752:	f5 c0       	rjmp	.+490    	; 0x393e <TP_CheckPropertyEvents+0x28e>
			iChangedPropVector |= TP_PROPERTY_EVENT_ExposureProgramMode;
			iMessageLength ++;		// uint16
		}												
	}
	
	if (iCurrentPropVector & TP_PROPERTY_EVENT_ExposureIndex)
    3754:	13 fd       	sbrc	r17, 3
    3756:	cb c0       	rjmp	.+406    	; 0x38ee <TP_CheckPropertyEvents+0x23e>
			iChangedPropVector |= TP_PROPERTY_EVENT_ExposureIndex;
			iMessageLength ++;		// uint16
		}												
	}
	
	if (iCurrentPropVector & TP_PROPERTY_EVENT_ExposureBiasCompensation)
    3758:	14 fd       	sbrc	r17, 4
    375a:	9e c0       	rjmp	.+316    	; 0x3898 <TP_CheckPropertyEvents+0x1e8>
			g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_ExposureBiasCompensation_N] = iTempPropVal;
			iChangedPropVector |= TP_PROPERTY_EVENT_ExposureBiasCompensation;
			iMessageLength ++;		// sint16
		}											
	}
	CameraControl_CloseSession( &DigitalCamera_SI_Interface );
    375c:	80 e0       	ldi	r24, 0x00	; 0
    375e:	91 e0       	ldi	r25, 0x01	; 1
    3760:	01 d9       	rcall	.-3582   	; 0x2964 <CameraControl_CloseSession>
	
	// if nothing was changed then quit
	if (iChangedPropVector==0)
    3762:	e1 14       	cp	r14, r1
    3764:	f1 04       	cpc	r15, r1
    3766:	09 f4       	brne	.+2      	; 0x376a <TP_CheckPropertyEvents+0xba>
    3768:	bb cf       	rjmp	.-138    	; 0x36e0 <TP_CheckPropertyEvents+0x30>
		return;
	
	// here we are sure that there are property value events
	TP_Outgoing_Event_ST eventData;
	
	eventData.header.type = TP_DATA_PROPERTY_EVENT;
    376a:	8c ea       	ldi	r24, 0xAC	; 172
    376c:	8d 83       	std	Y+5, r24	; 0x05
	eventData.header.transID = g_iEventID++;
    376e:	80 91 05 02 	lds	r24, 0x0205
    3772:	90 91 06 02 	lds	r25, 0x0206
    3776:	a0 91 07 02 	lds	r26, 0x0207
    377a:	b0 91 08 02 	lds	r27, 0x0208
    377e:	99 87       	std	Y+9, r25	; 0x09
    3780:	88 87       	std	Y+8, r24	; 0x08
    3782:	01 96       	adiw	r24, 0x01	; 1
    3784:	a1 1d       	adc	r26, r1
    3786:	b1 1d       	adc	r27, r1
    3788:	80 93 05 02 	sts	0x0205, r24
    378c:	90 93 06 02 	sts	0x0206, r25
    3790:	a0 93 07 02 	sts	0x0207, r26
    3794:	b0 93 08 02 	sts	0x0208, r27
	eventData.header.length = ((uint16_t)(iMessageLength)) * 4 + 4;		// every property is a 32 bit and and additional arg of 32 bits
    3798:	8b 2d       	mov	r24, r11
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	01 96       	adiw	r24, 0x01	; 1
    379e:	88 0f       	add	r24, r24
    37a0:	99 1f       	adc	r25, r25
    37a2:	88 0f       	add	r24, r24
    37a4:	99 1f       	adc	r25, r25
    37a6:	9f 83       	std	Y+7, r25	; 0x07
    37a8:	8e 83       	std	Y+6, r24	; 0x06
	
	TP_SendHeader(&eventData.header);
    37aa:	ce 01       	movw	r24, r28
    37ac:	05 96       	adiw	r24, 0x05	; 5
    37ae:	34 dc       	rcall	.-1944   	; 0x3018 <TP_SendHeader>
	
	eventData.arg1 = iChangedPropVector;
    37b0:	c7 01       	movw	r24, r14
    37b2:	a0 e0       	ldi	r26, 0x00	; 0
    37b4:	b0 e0       	ldi	r27, 0x00	; 0
    37b6:	8a 87       	std	Y+10, r24	; 0x0a
    37b8:	9b 87       	std	Y+11, r25	; 0x0b
    37ba:	ac 87       	std	Y+12, r26	; 0x0c
    37bc:	bd 87       	std	Y+13, r27	; 0x0d
	
	char* tempPos = (char*)((void*)(&eventData.arg1));
    37be:	8e 01       	movw	r16, r28
    37c0:	06 5f       	subi	r16, 0xF6	; 246
    37c2:	1f 4f       	sbci	r17, 0xFF	; 255
	uart_putc(tempPos[0], stdout);		// LSB
    37c4:	60 91 d0 05 	lds	r22, 0x05D0
    37c8:	70 91 d1 05 	lds	r23, 0x05D1
    37cc:	0b d4       	rcall	.+2070   	; 0x3fe4 <uart_putc>
	uart_putc(tempPos[1], stdout);
    37ce:	60 91 d0 05 	lds	r22, 0x05D0
    37d2:	70 91 d1 05 	lds	r23, 0x05D1
    37d6:	f8 01       	movw	r30, r16
    37d8:	81 81       	ldd	r24, Z+1	; 0x01
    37da:	04 d4       	rcall	.+2056   	; 0x3fe4 <uart_putc>
	uart_putc(tempPos[2], stdout);
    37dc:	60 91 d0 05 	lds	r22, 0x05D0
    37e0:	70 91 d1 05 	lds	r23, 0x05D1
    37e4:	f8 01       	movw	r30, r16
    37e6:	82 81       	ldd	r24, Z+2	; 0x02
    37e8:	fd d3       	rcall	.+2042   	; 0x3fe4 <uart_putc>
	uart_putc(tempPos[3], stdout);
    37ea:	60 91 d0 05 	lds	r22, 0x05D0
    37ee:	70 91 d1 05 	lds	r23, 0x05D1
    37f2:	f8 01       	movw	r30, r16
    37f4:	83 81       	ldd	r24, Z+3	; 0x03
    37f6:	f6 d3       	rcall	.+2028   	; 0x3fe4 <uart_putc>
	
	uint8_t i=0;
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
    37f8:	e0 fc       	sbrc	r14, 0
    37fa:	9a c3       	rjmp	.+1844   	; 0x3f30 <TP_CheckPropertyEvents+0x880>
			uart_putc(tempVal[0], stdout);
			uart_putc(tempVal[1], stdout);
			uart_putc(tempVal[2], stdout);
			uart_putc(tempVal[3], stdout);
		}
		iChangedPropVector >>= 1;
    37fc:	87 01       	movw	r16, r14
    37fe:	16 95       	lsr	r17
    3800:	07 95       	ror	r16
	uart_putc(tempPos[3], stdout);
	
	uint8_t i=0;
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
    3802:	00 fd       	sbrc	r16, 0
    3804:	78 c3       	rjmp	.+1776   	; 0x3ef6 <TP_CheckPropertyEvents+0x846>
			uart_putc(tempVal[0], stdout);
			uart_putc(tempVal[1], stdout);
			uart_putc(tempVal[2], stdout);
			uart_putc(tempVal[3], stdout);
		}
		iChangedPropVector >>= 1;
    3806:	16 95       	lsr	r17
    3808:	07 95       	ror	r16
	uart_putc(tempPos[3], stdout);
	
	uint8_t i=0;
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
    380a:	00 fd       	sbrc	r16, 0
    380c:	57 c3       	rjmp	.+1710   	; 0x3ebc <TP_CheckPropertyEvents+0x80c>
			uart_putc(tempVal[0], stdout);
			uart_putc(tempVal[1], stdout);
			uart_putc(tempVal[2], stdout);
			uart_putc(tempVal[3], stdout);
		}
		iChangedPropVector >>= 1;
    380e:	16 95       	lsr	r17
    3810:	07 95       	ror	r16
	uart_putc(tempPos[3], stdout);
	
	uint8_t i=0;
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
    3812:	00 fd       	sbrc	r16, 0
    3814:	36 c3       	rjmp	.+1644   	; 0x3e82 <TP_CheckPropertyEvents+0x7d2>
			uart_putc(tempVal[0], stdout);
			uart_putc(tempVal[1], stdout);
			uart_putc(tempVal[2], stdout);
			uart_putc(tempVal[3], stdout);
		}
		iChangedPropVector >>= 1;
    3816:	16 95       	lsr	r17
    3818:	07 95       	ror	r16
	uart_putc(tempPos[3], stdout);
	
	uint8_t i=0;
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
    381a:	00 fd       	sbrc	r16, 0
    381c:	15 c3       	rjmp	.+1578   	; 0x3e48 <TP_CheckPropertyEvents+0x798>
			uart_putc(tempVal[0], stdout);
			uart_putc(tempVal[1], stdout);
			uart_putc(tempVal[2], stdout);
			uart_putc(tempVal[3], stdout);
		}
		iChangedPropVector >>= 1;
    381e:	16 95       	lsr	r17
    3820:	07 95       	ror	r16
	uart_putc(tempPos[3], stdout);
	
	uint8_t i=0;
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
    3822:	00 fd       	sbrc	r16, 0
    3824:	f4 c2       	rjmp	.+1512   	; 0x3e0e <TP_CheckPropertyEvents+0x75e>
			uart_putc(tempVal[0], stdout);
			uart_putc(tempVal[1], stdout);
			uart_putc(tempVal[2], stdout);
			uart_putc(tempVal[3], stdout);
		}
		iChangedPropVector >>= 1;
    3826:	16 95       	lsr	r17
    3828:	07 95       	ror	r16
	uart_putc(tempPos[3], stdout);
	
	uint8_t i=0;
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
    382a:	00 fd       	sbrc	r16, 0
    382c:	d3 c2       	rjmp	.+1446   	; 0x3dd4 <TP_CheckPropertyEvents+0x724>
			uart_putc(tempVal[0], stdout);
			uart_putc(tempVal[1], stdout);
			uart_putc(tempVal[2], stdout);
			uart_putc(tempVal[3], stdout);
		}
		iChangedPropVector >>= 1;
    382e:	16 95       	lsr	r17
    3830:	07 95       	ror	r16
	uart_putc(tempPos[3], stdout);
	
	uint8_t i=0;
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
    3832:	00 fd       	sbrc	r16, 0
    3834:	b2 c2       	rjmp	.+1380   	; 0x3d9a <TP_CheckPropertyEvents+0x6ea>
			uart_putc(tempVal[0], stdout);
			uart_putc(tempVal[1], stdout);
			uart_putc(tempVal[2], stdout);
			uart_putc(tempVal[3], stdout);
		}
		iChangedPropVector >>= 1;
    3836:	16 95       	lsr	r17
    3838:	07 95       	ror	r16
	uart_putc(tempPos[3], stdout);
	
	uint8_t i=0;
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
    383a:	00 fd       	sbrc	r16, 0
    383c:	91 c2       	rjmp	.+1314   	; 0x3d60 <TP_CheckPropertyEvents+0x6b0>
			uart_putc(tempVal[0], stdout);
			uart_putc(tempVal[1], stdout);
			uart_putc(tempVal[2], stdout);
			uart_putc(tempVal[3], stdout);
		}
		iChangedPropVector >>= 1;
    383e:	16 95       	lsr	r17
    3840:	07 95       	ror	r16
	uart_putc(tempPos[3], stdout);
	
	uint8_t i=0;
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
    3842:	00 fd       	sbrc	r16, 0
    3844:	70 c2       	rjmp	.+1248   	; 0x3d26 <TP_CheckPropertyEvents+0x676>
			uart_putc(tempVal[0], stdout);
			uart_putc(tempVal[1], stdout);
			uart_putc(tempVal[2], stdout);
			uart_putc(tempVal[3], stdout);
		}
		iChangedPropVector >>= 1;
    3846:	16 95       	lsr	r17
    3848:	07 95       	ror	r16
	uart_putc(tempPos[3], stdout);
	
	uint8_t i=0;
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
    384a:	00 fd       	sbrc	r16, 0
    384c:	4f c2       	rjmp	.+1182   	; 0x3cec <TP_CheckPropertyEvents+0x63c>
			uart_putc(tempVal[0], stdout);
			uart_putc(tempVal[1], stdout);
			uart_putc(tempVal[2], stdout);
			uart_putc(tempVal[3], stdout);
		}
		iChangedPropVector >>= 1;
    384e:	16 95       	lsr	r17
    3850:	07 95       	ror	r16
	uart_putc(tempPos[3], stdout);
	
	uint8_t i=0;
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
    3852:	00 fd       	sbrc	r16, 0
    3854:	2e c2       	rjmp	.+1116   	; 0x3cb2 <TP_CheckPropertyEvents+0x602>
			uart_putc(tempVal[0], stdout);
			uart_putc(tempVal[1], stdout);
			uart_putc(tempVal[2], stdout);
			uart_putc(tempVal[3], stdout);
		}
		iChangedPropVector >>= 1;
    3856:	16 95       	lsr	r17
    3858:	07 95       	ror	r16
	uart_putc(tempPos[3], stdout);
	
	uint8_t i=0;
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
    385a:	00 ff       	sbrs	r16, 0
    385c:	41 cf       	rjmp	.-382    	; 0x36e0 <TP_CheckPropertyEvents+0x30>
		{
			char* tempVal = (char*)((void*)(&g_iCurrentPropValuesVector[i]));
			uart_putc(tempVal[0], stdout);
    385e:	60 91 d0 05 	lds	r22, 0x05D0
    3862:	70 91 d1 05 	lds	r23, 0x05D1
    3866:	80 91 4a 02 	lds	r24, 0x024A
    386a:	bc d3       	rcall	.+1912   	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[1], stdout);
    386c:	60 91 d0 05 	lds	r22, 0x05D0
    3870:	70 91 d1 05 	lds	r23, 0x05D1
    3874:	80 91 4b 02 	lds	r24, 0x024B
    3878:	b5 d3       	rcall	.+1898   	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[2], stdout);
    387a:	60 91 d0 05 	lds	r22, 0x05D0
    387e:	70 91 d1 05 	lds	r23, 0x05D1
    3882:	80 91 4c 02 	lds	r24, 0x024C
    3886:	ae d3       	rcall	.+1884   	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[3], stdout);
    3888:	60 91 d0 05 	lds	r22, 0x05D0
    388c:	70 91 d1 05 	lds	r23, 0x05D1
    3890:	80 91 4d 02 	lds	r24, 0x024D
    3894:	a7 d3       	rcall	.+1870   	; 0x3fe4 <uart_putc>
    3896:	24 cf       	rjmp	.-440    	; 0x36e0 <TP_CheckPropertyEvents+0x30>
		}												
	}
	
	if (iCurrentPropVector & TP_PROPERTY_EVENT_ExposureBiasCompensation)
	{
		CameraControl_GetPropertyVal32Bit (	&DigitalCamera_SI_Interface, PTP_DPC_ExposureBiasCompensation, &iTempPropVal );
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	91 e0       	ldi	r25, 0x01	; 1
    389c:	60 e1       	ldi	r22, 0x10	; 16
    389e:	70 e5       	ldi	r23, 0x50	; 80
    38a0:	ae 01       	movw	r20, r28
    38a2:	4f 5f       	subi	r20, 0xFF	; 255
    38a4:	5f 4f       	sbci	r21, 0xFF	; 255
    38a6:	3a da       	rcall	.-2956   	; 0x2d1c <CameraControl_GetPropertyVal32Bit>
		if (iTempPropVal != g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_ExposureBiasCompensation_N]) 
    38a8:	20 91 4a 02 	lds	r18, 0x024A
    38ac:	30 91 4b 02 	lds	r19, 0x024B
    38b0:	40 91 4c 02 	lds	r20, 0x024C
    38b4:	50 91 4d 02 	lds	r21, 0x024D
    38b8:	89 81       	ldd	r24, Y+1	; 0x01
    38ba:	9a 81       	ldd	r25, Y+2	; 0x02
    38bc:	ab 81       	ldd	r26, Y+3	; 0x03
    38be:	bc 81       	ldd	r27, Y+4	; 0x04
    38c0:	28 17       	cp	r18, r24
    38c2:	39 07       	cpc	r19, r25
    38c4:	4a 07       	cpc	r20, r26
    38c6:	5b 07       	cpc	r21, r27
    38c8:	09 f4       	brne	.+2      	; 0x38cc <TP_CheckPropertyEvents+0x21c>
    38ca:	48 cf       	rjmp	.-368    	; 0x375c <TP_CheckPropertyEvents+0xac>
		{
			g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_ExposureBiasCompensation_N] = iTempPropVal;
    38cc:	80 93 4a 02 	sts	0x024A, r24
    38d0:	90 93 4b 02 	sts	0x024B, r25
    38d4:	a0 93 4c 02 	sts	0x024C, r26
    38d8:	b0 93 4d 02 	sts	0x024D, r27
			iChangedPropVector |= TP_PROPERTY_EVENT_ExposureBiasCompensation;
    38dc:	80 e0       	ldi	r24, 0x00	; 0
    38de:	90 e1       	ldi	r25, 0x10	; 16
    38e0:	e8 2a       	or	r14, r24
    38e2:	f9 2a       	or	r15, r25
			iMessageLength ++;		// sint16
    38e4:	b3 94       	inc	r11
		}											
	}
	CameraControl_CloseSession( &DigitalCamera_SI_Interface );
    38e6:	80 e0       	ldi	r24, 0x00	; 0
    38e8:	91 e0       	ldi	r25, 0x01	; 1
    38ea:	3c d8       	rcall	.-3976   	; 0x2964 <CameraControl_CloseSession>
    38ec:	3e cf       	rjmp	.-388    	; 0x376a <TP_CheckPropertyEvents+0xba>
		}												
	}
	
	if (iCurrentPropVector & TP_PROPERTY_EVENT_ExposureIndex)
	{
		CameraControl_GetPropertyVal32Bit (	&DigitalCamera_SI_Interface, PTP_DPC_ExposureIndex, &iTempPropVal );
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	91 e0       	ldi	r25, 0x01	; 1
    38f2:	6f e0       	ldi	r22, 0x0F	; 15
    38f4:	70 e5       	ldi	r23, 0x50	; 80
    38f6:	ae 01       	movw	r20, r28
    38f8:	4f 5f       	subi	r20, 0xFF	; 255
    38fa:	5f 4f       	sbci	r21, 0xFF	; 255
    38fc:	0f da       	rcall	.-3042   	; 0x2d1c <CameraControl_GetPropertyVal32Bit>
		if (iTempPropVal != g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_ExposureIndex_N]) 
    38fe:	20 91 46 02 	lds	r18, 0x0246
    3902:	30 91 47 02 	lds	r19, 0x0247
    3906:	40 91 48 02 	lds	r20, 0x0248
    390a:	50 91 49 02 	lds	r21, 0x0249
    390e:	89 81       	ldd	r24, Y+1	; 0x01
    3910:	9a 81       	ldd	r25, Y+2	; 0x02
    3912:	ab 81       	ldd	r26, Y+3	; 0x03
    3914:	bc 81       	ldd	r27, Y+4	; 0x04
    3916:	28 17       	cp	r18, r24
    3918:	39 07       	cpc	r19, r25
    391a:	4a 07       	cpc	r20, r26
    391c:	5b 07       	cpc	r21, r27
    391e:	09 f4       	brne	.+2      	; 0x3922 <TP_CheckPropertyEvents+0x272>
    3920:	1b cf       	rjmp	.-458    	; 0x3758 <TP_CheckPropertyEvents+0xa8>
		{
			g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_ExposureIndex_N] = iTempPropVal;
    3922:	80 93 46 02 	sts	0x0246, r24
    3926:	90 93 47 02 	sts	0x0247, r25
    392a:	a0 93 48 02 	sts	0x0248, r26
    392e:	b0 93 49 02 	sts	0x0249, r27
			iChangedPropVector |= TP_PROPERTY_EVENT_ExposureIndex;
    3932:	e0 e0       	ldi	r30, 0x00	; 0
    3934:	f8 e0       	ldi	r31, 0x08	; 8
    3936:	ee 2a       	or	r14, r30
    3938:	ff 2a       	or	r15, r31
			iMessageLength ++;		// uint16
    393a:	b3 94       	inc	r11
    393c:	0d cf       	rjmp	.-486    	; 0x3758 <TP_CheckPropertyEvents+0xa8>
		}											
	}
	
	if (iCurrentPropVector & TP_PROPERTY_EVENT_ExposureProgramMode)
	{
		CameraControl_GetPropertyVal32Bit (	&DigitalCamera_SI_Interface, PTP_DPC_ExposureProgramMode, &iTempPropVal );
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	91 e0       	ldi	r25, 0x01	; 1
    3942:	6e e0       	ldi	r22, 0x0E	; 14
    3944:	70 e5       	ldi	r23, 0x50	; 80
    3946:	ae 01       	movw	r20, r28
    3948:	4f 5f       	subi	r20, 0xFF	; 255
    394a:	5f 4f       	sbci	r21, 0xFF	; 255
    394c:	e7 d9       	rcall	.-3122   	; 0x2d1c <CameraControl_GetPropertyVal32Bit>
		if (iTempPropVal != g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_ExposureProgramMode_N]) 
    394e:	20 91 42 02 	lds	r18, 0x0242
    3952:	30 91 43 02 	lds	r19, 0x0243
    3956:	40 91 44 02 	lds	r20, 0x0244
    395a:	50 91 45 02 	lds	r21, 0x0245
    395e:	89 81       	ldd	r24, Y+1	; 0x01
    3960:	9a 81       	ldd	r25, Y+2	; 0x02
    3962:	ab 81       	ldd	r26, Y+3	; 0x03
    3964:	bc 81       	ldd	r27, Y+4	; 0x04
    3966:	28 17       	cp	r18, r24
    3968:	39 07       	cpc	r19, r25
    396a:	4a 07       	cpc	r20, r26
    396c:	5b 07       	cpc	r21, r27
    396e:	09 f4       	brne	.+2      	; 0x3972 <TP_CheckPropertyEvents+0x2c2>
    3970:	f1 ce       	rjmp	.-542    	; 0x3754 <TP_CheckPropertyEvents+0xa4>
		{
			g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_ExposureProgramMode_N] = iTempPropVal;
    3972:	80 93 42 02 	sts	0x0242, r24
    3976:	90 93 43 02 	sts	0x0243, r25
    397a:	a0 93 44 02 	sts	0x0244, r26
    397e:	b0 93 45 02 	sts	0x0245, r27
			iChangedPropVector |= TP_PROPERTY_EVENT_ExposureProgramMode;
    3982:	80 e0       	ldi	r24, 0x00	; 0
    3984:	94 e0       	ldi	r25, 0x04	; 4
    3986:	e8 2a       	or	r14, r24
    3988:	f9 2a       	or	r15, r25
			iMessageLength ++;		// uint16
    398a:	b3 94       	inc	r11
    398c:	e3 ce       	rjmp	.-570    	; 0x3754 <TP_CheckPropertyEvents+0xa4>
		}											
	}
	
	if (iCurrentPropVector & TP_PROPERTY_EVENT_ExposureTime)
	{
		CameraControl_GetPropertyVal32Bit (	&DigitalCamera_SI_Interface, PTP_DPC_ExposureTime, &iTempPropVal );
    398e:	80 e0       	ldi	r24, 0x00	; 0
    3990:	91 e0       	ldi	r25, 0x01	; 1
    3992:	6d e0       	ldi	r22, 0x0D	; 13
    3994:	70 e5       	ldi	r23, 0x50	; 80
    3996:	ae 01       	movw	r20, r28
    3998:	4f 5f       	subi	r20, 0xFF	; 255
    399a:	5f 4f       	sbci	r21, 0xFF	; 255
    399c:	bf d9       	rcall	.-3202   	; 0x2d1c <CameraControl_GetPropertyVal32Bit>
		if (iTempPropVal != g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_ExposureTime_N]) 
    399e:	20 91 3e 02 	lds	r18, 0x023E
    39a2:	30 91 3f 02 	lds	r19, 0x023F
    39a6:	40 91 40 02 	lds	r20, 0x0240
    39aa:	50 91 41 02 	lds	r21, 0x0241
    39ae:	89 81       	ldd	r24, Y+1	; 0x01
    39b0:	9a 81       	ldd	r25, Y+2	; 0x02
    39b2:	ab 81       	ldd	r26, Y+3	; 0x03
    39b4:	bc 81       	ldd	r27, Y+4	; 0x04
    39b6:	28 17       	cp	r18, r24
    39b8:	39 07       	cpc	r19, r25
    39ba:	4a 07       	cpc	r20, r26
    39bc:	5b 07       	cpc	r21, r27
    39be:	09 f4       	brne	.+2      	; 0x39c2 <TP_CheckPropertyEvents+0x312>
    39c0:	c7 ce       	rjmp	.-626    	; 0x3750 <TP_CheckPropertyEvents+0xa0>
		{
			g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_ExposureTime_N] = iTempPropVal;
    39c2:	80 93 3e 02 	sts	0x023E, r24
    39c6:	90 93 3f 02 	sts	0x023F, r25
    39ca:	a0 93 40 02 	sts	0x0240, r26
    39ce:	b0 93 41 02 	sts	0x0241, r27
			iChangedPropVector |= TP_PROPERTY_EVENT_ExposureTime;
    39d2:	e0 e0       	ldi	r30, 0x00	; 0
    39d4:	f2 e0       	ldi	r31, 0x02	; 2
    39d6:	ee 2a       	or	r14, r30
    39d8:	ff 2a       	or	r15, r31
			iMessageLength ++;		// uint32
    39da:	b3 94       	inc	r11
    39dc:	b9 ce       	rjmp	.-654    	; 0x3750 <TP_CheckPropertyEvents+0xa0>
		}											
	}
	
	if (iCurrentPropVector & TP_PROPERTY_EVENT_FlashMode)
	{
		CameraControl_GetPropertyVal32Bit (	&DigitalCamera_SI_Interface, PTP_DPC_FlashMode, &iTempPropVal );
    39de:	80 e0       	ldi	r24, 0x00	; 0
    39e0:	91 e0       	ldi	r25, 0x01	; 1
    39e2:	6c e0       	ldi	r22, 0x0C	; 12
    39e4:	70 e5       	ldi	r23, 0x50	; 80
    39e6:	ae 01       	movw	r20, r28
    39e8:	4f 5f       	subi	r20, 0xFF	; 255
    39ea:	5f 4f       	sbci	r21, 0xFF	; 255
    39ec:	97 d9       	rcall	.-3282   	; 0x2d1c <CameraControl_GetPropertyVal32Bit>
		if (iTempPropVal != g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_FlashMode_N]) 
    39ee:	20 91 3a 02 	lds	r18, 0x023A
    39f2:	30 91 3b 02 	lds	r19, 0x023B
    39f6:	40 91 3c 02 	lds	r20, 0x023C
    39fa:	50 91 3d 02 	lds	r21, 0x023D
    39fe:	89 81       	ldd	r24, Y+1	; 0x01
    3a00:	9a 81       	ldd	r25, Y+2	; 0x02
    3a02:	ab 81       	ldd	r26, Y+3	; 0x03
    3a04:	bc 81       	ldd	r27, Y+4	; 0x04
    3a06:	28 17       	cp	r18, r24
    3a08:	39 07       	cpc	r19, r25
    3a0a:	4a 07       	cpc	r20, r26
    3a0c:	5b 07       	cpc	r21, r27
    3a0e:	09 f4       	brne	.+2      	; 0x3a12 <TP_CheckPropertyEvents+0x362>
    3a10:	9d ce       	rjmp	.-710    	; 0x374c <TP_CheckPropertyEvents+0x9c>
		{
			g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_FlashMode_N] = iTempPropVal;
    3a12:	80 93 3a 02 	sts	0x023A, r24
    3a16:	90 93 3b 02 	sts	0x023B, r25
    3a1a:	a0 93 3c 02 	sts	0x023C, r26
    3a1e:	b0 93 3d 02 	sts	0x023D, r27
			iChangedPropVector |= TP_PROPERTY_EVENT_FlashMode;
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	91 e0       	ldi	r25, 0x01	; 1
    3a26:	e8 2a       	or	r14, r24
    3a28:	f9 2a       	or	r15, r25
			iMessageLength ++;		// uint16
    3a2a:	b3 94       	inc	r11
    3a2c:	8f ce       	rjmp	.-738    	; 0x374c <TP_CheckPropertyEvents+0x9c>
		}										
	}

	if (iCurrentPropVector & TP_PROPERTY_EVENT_ExposureMeteringMode)
	{
		CameraControl_GetPropertyVal32Bit (	&DigitalCamera_SI_Interface, PTP_DPC_ExposureMeteringMode, &iTempPropVal );
    3a2e:	80 e0       	ldi	r24, 0x00	; 0
    3a30:	91 e0       	ldi	r25, 0x01	; 1
    3a32:	6b e0       	ldi	r22, 0x0B	; 11
    3a34:	70 e5       	ldi	r23, 0x50	; 80
    3a36:	ae 01       	movw	r20, r28
    3a38:	4f 5f       	subi	r20, 0xFF	; 255
    3a3a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a3c:	6f d9       	rcall	.-3362   	; 0x2d1c <CameraControl_GetPropertyVal32Bit>
		if (iTempPropVal != g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_ExposureMeteringMode_N]) 
    3a3e:	20 91 36 02 	lds	r18, 0x0236
    3a42:	30 91 37 02 	lds	r19, 0x0237
    3a46:	40 91 38 02 	lds	r20, 0x0238
    3a4a:	50 91 39 02 	lds	r21, 0x0239
    3a4e:	89 81       	ldd	r24, Y+1	; 0x01
    3a50:	9a 81       	ldd	r25, Y+2	; 0x02
    3a52:	ab 81       	ldd	r26, Y+3	; 0x03
    3a54:	bc 81       	ldd	r27, Y+4	; 0x04
    3a56:	28 17       	cp	r18, r24
    3a58:	39 07       	cpc	r19, r25
    3a5a:	4a 07       	cpc	r20, r26
    3a5c:	5b 07       	cpc	r21, r27
    3a5e:	09 f4       	brne	.+2      	; 0x3a62 <TP_CheckPropertyEvents+0x3b2>
    3a60:	73 ce       	rjmp	.-794    	; 0x3748 <TP_CheckPropertyEvents+0x98>
		{
			g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_ExposureMeteringMode_N] = iTempPropVal;
    3a62:	80 93 36 02 	sts	0x0236, r24
    3a66:	90 93 37 02 	sts	0x0237, r25
    3a6a:	a0 93 38 02 	sts	0x0238, r26
    3a6e:	b0 93 39 02 	sts	0x0239, r27
			iChangedPropVector |= TP_PROPERTY_EVENT_ExposureMeteringMode;
    3a72:	e0 e8       	ldi	r30, 0x80	; 128
    3a74:	f0 e0       	ldi	r31, 0x00	; 0
    3a76:	ee 2a       	or	r14, r30
    3a78:	ff 2a       	or	r15, r31
			iMessageLength ++;		// uint16
    3a7a:	b3 94       	inc	r11
    3a7c:	65 ce       	rjmp	.-822    	; 0x3748 <TP_CheckPropertyEvents+0x98>
		}	
	}

	if (iCurrentPropVector & TP_PROPERTY_EVENT_FocusMode)
	{
		CameraControl_GetPropertyVal32Bit (	&DigitalCamera_SI_Interface, PTP_DPC_FocusMode, &iTempPropVal );
    3a7e:	80 e0       	ldi	r24, 0x00	; 0
    3a80:	91 e0       	ldi	r25, 0x01	; 1
    3a82:	6a e0       	ldi	r22, 0x0A	; 10
    3a84:	70 e5       	ldi	r23, 0x50	; 80
    3a86:	ae 01       	movw	r20, r28
    3a88:	4f 5f       	subi	r20, 0xFF	; 255
    3a8a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a8c:	47 d9       	rcall	.-3442   	; 0x2d1c <CameraControl_GetPropertyVal32Bit>
		if (iTempPropVal != g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_FocusMode_N]) 
    3a8e:	20 91 32 02 	lds	r18, 0x0232
    3a92:	30 91 33 02 	lds	r19, 0x0233
    3a96:	40 91 34 02 	lds	r20, 0x0234
    3a9a:	50 91 35 02 	lds	r21, 0x0235
    3a9e:	89 81       	ldd	r24, Y+1	; 0x01
    3aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa2:	ab 81       	ldd	r26, Y+3	; 0x03
    3aa4:	bc 81       	ldd	r27, Y+4	; 0x04
    3aa6:	28 17       	cp	r18, r24
    3aa8:	39 07       	cpc	r19, r25
    3aaa:	4a 07       	cpc	r20, r26
    3aac:	5b 07       	cpc	r21, r27
    3aae:	09 f4       	brne	.+2      	; 0x3ab2 <TP_CheckPropertyEvents+0x402>
    3ab0:	49 ce       	rjmp	.-878    	; 0x3744 <TP_CheckPropertyEvents+0x94>
		{
			g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_FocusMode_N] = iTempPropVal;
    3ab2:	80 93 32 02 	sts	0x0232, r24
    3ab6:	90 93 33 02 	sts	0x0233, r25
    3aba:	a0 93 34 02 	sts	0x0234, r26
    3abe:	b0 93 35 02 	sts	0x0235, r27
			iChangedPropVector |= TP_PROPERTY_EVENT_FocusMode;
    3ac2:	80 e4       	ldi	r24, 0x40	; 64
    3ac4:	90 e0       	ldi	r25, 0x00	; 0
    3ac6:	e8 2a       	or	r14, r24
    3ac8:	f9 2a       	or	r15, r25
			iMessageLength ++;		// uint16
    3aca:	b3 94       	inc	r11
    3acc:	3b ce       	rjmp	.-906    	; 0x3744 <TP_CheckPropertyEvents+0x94>
		}												
	}

	if (iCurrentPropVector & TP_PROPERTY_EVENT_FocusDistance)
	{
		CameraControl_GetPropertyVal32Bit (	&DigitalCamera_SI_Interface, PTP_DPC_FocusDistance, &iTempPropVal );
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	91 e0       	ldi	r25, 0x01	; 1
    3ad2:	69 e0       	ldi	r22, 0x09	; 9
    3ad4:	70 e5       	ldi	r23, 0x50	; 80
    3ad6:	ae 01       	movw	r20, r28
    3ad8:	4f 5f       	subi	r20, 0xFF	; 255
    3ada:	5f 4f       	sbci	r21, 0xFF	; 255
    3adc:	1f d9       	rcall	.-3522   	; 0x2d1c <CameraControl_GetPropertyVal32Bit>
						
		if (iTempPropVal != g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_FocusDistance_N]) 
    3ade:	20 91 2e 02 	lds	r18, 0x022E
    3ae2:	30 91 2f 02 	lds	r19, 0x022F
    3ae6:	40 91 30 02 	lds	r20, 0x0230
    3aea:	50 91 31 02 	lds	r21, 0x0231
    3aee:	89 81       	ldd	r24, Y+1	; 0x01
    3af0:	9a 81       	ldd	r25, Y+2	; 0x02
    3af2:	ab 81       	ldd	r26, Y+3	; 0x03
    3af4:	bc 81       	ldd	r27, Y+4	; 0x04
    3af6:	28 17       	cp	r18, r24
    3af8:	39 07       	cpc	r19, r25
    3afa:	4a 07       	cpc	r20, r26
    3afc:	5b 07       	cpc	r21, r27
    3afe:	09 f4       	brne	.+2      	; 0x3b02 <TP_CheckPropertyEvents+0x452>
    3b00:	1f ce       	rjmp	.-962    	; 0x3740 <TP_CheckPropertyEvents+0x90>
		{
			g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_FocusDistance_N] = iTempPropVal;
    3b02:	80 93 2e 02 	sts	0x022E, r24
    3b06:	90 93 2f 02 	sts	0x022F, r25
    3b0a:	a0 93 30 02 	sts	0x0230, r26
    3b0e:	b0 93 31 02 	sts	0x0231, r27
			iChangedPropVector |= TP_PROPERTY_EVENT_FocusDistance;
    3b12:	e0 e2       	ldi	r30, 0x20	; 32
    3b14:	f0 e0       	ldi	r31, 0x00	; 0
    3b16:	ee 2a       	or	r14, r30
    3b18:	ff 2a       	or	r15, r31
			iMessageLength ++;		// uint16
    3b1a:	b3 94       	inc	r11
    3b1c:	11 ce       	rjmp	.-990    	; 0x3740 <TP_CheckPropertyEvents+0x90>
		}												
	}

	if (iCurrentPropVector & TP_PROPERTY_EVENT_FocalLength)
	{
		CameraControl_GetPropertyVal32Bit (	&DigitalCamera_SI_Interface, PTP_DPC_FocalLength, &iTempPropVal );
    3b1e:	80 e0       	ldi	r24, 0x00	; 0
    3b20:	91 e0       	ldi	r25, 0x01	; 1
    3b22:	68 e0       	ldi	r22, 0x08	; 8
    3b24:	70 e5       	ldi	r23, 0x50	; 80
    3b26:	ae 01       	movw	r20, r28
    3b28:	4f 5f       	subi	r20, 0xFF	; 255
    3b2a:	5f 4f       	sbci	r21, 0xFF	; 255
    3b2c:	f7 d8       	rcall	.-3602   	; 0x2d1c <CameraControl_GetPropertyVal32Bit>
		
		if (iTempPropVal != g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_FocalLength_N]) 
    3b2e:	20 91 2a 02 	lds	r18, 0x022A
    3b32:	30 91 2b 02 	lds	r19, 0x022B
    3b36:	40 91 2c 02 	lds	r20, 0x022C
    3b3a:	50 91 2d 02 	lds	r21, 0x022D
    3b3e:	89 81       	ldd	r24, Y+1	; 0x01
    3b40:	9a 81       	ldd	r25, Y+2	; 0x02
    3b42:	ab 81       	ldd	r26, Y+3	; 0x03
    3b44:	bc 81       	ldd	r27, Y+4	; 0x04
    3b46:	28 17       	cp	r18, r24
    3b48:	39 07       	cpc	r19, r25
    3b4a:	4a 07       	cpc	r20, r26
    3b4c:	5b 07       	cpc	r21, r27
    3b4e:	09 f4       	brne	.+2      	; 0x3b52 <TP_CheckPropertyEvents+0x4a2>
    3b50:	f5 cd       	rjmp	.-1046   	; 0x373c <TP_CheckPropertyEvents+0x8c>
		{
			g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_FocalLength_N] = iTempPropVal;
    3b52:	80 93 2a 02 	sts	0x022A, r24
    3b56:	90 93 2b 02 	sts	0x022B, r25
    3b5a:	a0 93 2c 02 	sts	0x022C, r26
    3b5e:	b0 93 2d 02 	sts	0x022D, r27
			iChangedPropVector |= TP_PROPERTY_EVENT_FocalLength;
    3b62:	80 e1       	ldi	r24, 0x10	; 16
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	e8 2a       	or	r14, r24
    3b68:	f9 2a       	or	r15, r25
			iMessageLength ++;		// uint32
    3b6a:	b3 94       	inc	r11
    3b6c:	e7 cd       	rjmp	.-1074   	; 0x373c <TP_CheckPropertyEvents+0x8c>
		}					
	}

	if (iCurrentPropVector & TP_PROPERTY_EVENT_FNumber)
	{
		CameraControl_GetPropertyVal32Bit (	&DigitalCamera_SI_Interface, PTP_DPC_FNumber, &iTempPropVal );
    3b6e:	80 e0       	ldi	r24, 0x00	; 0
    3b70:	91 e0       	ldi	r25, 0x01	; 1
    3b72:	67 e0       	ldi	r22, 0x07	; 7
    3b74:	70 e5       	ldi	r23, 0x50	; 80
    3b76:	ae 01       	movw	r20, r28
    3b78:	4f 5f       	subi	r20, 0xFF	; 255
    3b7a:	5f 4f       	sbci	r21, 0xFF	; 255
    3b7c:	cf d8       	rcall	.-3682   	; 0x2d1c <CameraControl_GetPropertyVal32Bit>
	
		if (iTempPropVal != g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_FNumber_N]) 
    3b7e:	20 91 26 02 	lds	r18, 0x0226
    3b82:	30 91 27 02 	lds	r19, 0x0227
    3b86:	40 91 28 02 	lds	r20, 0x0228
    3b8a:	50 91 29 02 	lds	r21, 0x0229
    3b8e:	89 81       	ldd	r24, Y+1	; 0x01
    3b90:	9a 81       	ldd	r25, Y+2	; 0x02
    3b92:	ab 81       	ldd	r26, Y+3	; 0x03
    3b94:	bc 81       	ldd	r27, Y+4	; 0x04
    3b96:	28 17       	cp	r18, r24
    3b98:	39 07       	cpc	r19, r25
    3b9a:	4a 07       	cpc	r20, r26
    3b9c:	5b 07       	cpc	r21, r27
    3b9e:	09 f4       	brne	.+2      	; 0x3ba2 <TP_CheckPropertyEvents+0x4f2>
    3ba0:	cb cd       	rjmp	.-1130   	; 0x3738 <TP_CheckPropertyEvents+0x88>
		{
			g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_FNumber_N] = iTempPropVal;
    3ba2:	80 93 26 02 	sts	0x0226, r24
    3ba6:	90 93 27 02 	sts	0x0227, r25
    3baa:	a0 93 28 02 	sts	0x0228, r26
    3bae:	b0 93 29 02 	sts	0x0229, r27
			iChangedPropVector |= TP_PROPERTY_EVENT_FNumber;
    3bb2:	e8 e0       	ldi	r30, 0x08	; 8
    3bb4:	f0 e0       	ldi	r31, 0x00	; 0
    3bb6:	ee 2a       	or	r14, r30
    3bb8:	ff 2a       	or	r15, r31
			iMessageLength ++;		// uint16
    3bba:	b3 94       	inc	r11
    3bbc:	bd cd       	rjmp	.-1158   	; 0x3738 <TP_CheckPropertyEvents+0x88>
		}
	}

	if (iCurrentPropVector & TP_PROPERTY_EVENT_WhiteBalance)
	{
		CameraControl_GetPropertyVal32Bit (	&DigitalCamera_SI_Interface, PTP_DPC_WhiteBalance, &iTempPropVal );
    3bbe:	80 e0       	ldi	r24, 0x00	; 0
    3bc0:	91 e0       	ldi	r25, 0x01	; 1
    3bc2:	65 e0       	ldi	r22, 0x05	; 5
    3bc4:	70 e5       	ldi	r23, 0x50	; 80
    3bc6:	ae 01       	movw	r20, r28
    3bc8:	4f 5f       	subi	r20, 0xFF	; 255
    3bca:	5f 4f       	sbci	r21, 0xFF	; 255
    3bcc:	a7 d8       	rcall	.-3762   	; 0x2d1c <CameraControl_GetPropertyVal32Bit>
		if (iTempPropVal != g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_WhiteBalance_N]) 
    3bce:	20 91 22 02 	lds	r18, 0x0222
    3bd2:	30 91 23 02 	lds	r19, 0x0223
    3bd6:	40 91 24 02 	lds	r20, 0x0224
    3bda:	50 91 25 02 	lds	r21, 0x0225
    3bde:	89 81       	ldd	r24, Y+1	; 0x01
    3be0:	9a 81       	ldd	r25, Y+2	; 0x02
    3be2:	ab 81       	ldd	r26, Y+3	; 0x03
    3be4:	bc 81       	ldd	r27, Y+4	; 0x04
    3be6:	28 17       	cp	r18, r24
    3be8:	39 07       	cpc	r19, r25
    3bea:	4a 07       	cpc	r20, r26
    3bec:	5b 07       	cpc	r21, r27
    3bee:	09 f4       	brne	.+2      	; 0x3bf2 <TP_CheckPropertyEvents+0x542>
    3bf0:	a1 cd       	rjmp	.-1214   	; 0x3734 <TP_CheckPropertyEvents+0x84>
		{
			g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_WhiteBalance_N] = iTempPropVal;
    3bf2:	80 93 22 02 	sts	0x0222, r24
    3bf6:	90 93 23 02 	sts	0x0223, r25
    3bfa:	a0 93 24 02 	sts	0x0224, r26
    3bfe:	b0 93 25 02 	sts	0x0225, r27
			iChangedPropVector |= TP_PROPERTY_EVENT_WhiteBalance;
    3c02:	84 e0       	ldi	r24, 0x04	; 4
    3c04:	90 e0       	ldi	r25, 0x00	; 0
    3c06:	e8 2a       	or	r14, r24
    3c08:	f9 2a       	or	r15, r25
			iMessageLength ++;		// uint16
    3c0a:	b3 94       	inc	r11
    3c0c:	93 cd       	rjmp	.-1242   	; 0x3734 <TP_CheckPropertyEvents+0x84>
		}			
	}
	
	if (iCurrentPropVector & TP_PROPERTY_EVENT_FunctionalMode)
	{
		CameraControl_GetPropertyVal32Bit (	&DigitalCamera_SI_Interface, PTP_DPC_FunctionalMode, &iTempPropVal );
    3c0e:	80 e0       	ldi	r24, 0x00	; 0
    3c10:	91 e0       	ldi	r25, 0x01	; 1
    3c12:	62 e0       	ldi	r22, 0x02	; 2
    3c14:	70 e5       	ldi	r23, 0x50	; 80
    3c16:	ae 01       	movw	r20, r28
    3c18:	4f 5f       	subi	r20, 0xFF	; 255
    3c1a:	5f 4f       	sbci	r21, 0xFF	; 255
    3c1c:	7f d8       	rcall	.-3842   	; 0x2d1c <CameraControl_GetPropertyVal32Bit>
		if (iTempPropVal != g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_FunctionalMode_N]) 
    3c1e:	20 91 1e 02 	lds	r18, 0x021E
    3c22:	30 91 1f 02 	lds	r19, 0x021F
    3c26:	40 91 20 02 	lds	r20, 0x0220
    3c2a:	50 91 21 02 	lds	r21, 0x0221
    3c2e:	89 81       	ldd	r24, Y+1	; 0x01
    3c30:	9a 81       	ldd	r25, Y+2	; 0x02
    3c32:	ab 81       	ldd	r26, Y+3	; 0x03
    3c34:	bc 81       	ldd	r27, Y+4	; 0x04
    3c36:	28 17       	cp	r18, r24
    3c38:	39 07       	cpc	r19, r25
    3c3a:	4a 07       	cpc	r20, r26
    3c3c:	5b 07       	cpc	r21, r27
    3c3e:	09 f4       	brne	.+2      	; 0x3c42 <TP_CheckPropertyEvents+0x592>
    3c40:	77 cd       	rjmp	.-1298   	; 0x3730 <TP_CheckPropertyEvents+0x80>
		{
			g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_FunctionalMode_N] = iTempPropVal;
    3c42:	80 93 1e 02 	sts	0x021E, r24
    3c46:	90 93 1f 02 	sts	0x021F, r25
    3c4a:	a0 93 20 02 	sts	0x0220, r26
    3c4e:	b0 93 21 02 	sts	0x0221, r27
			iChangedPropVector |= TP_PROPERTY_EVENT_FunctionalMode;
    3c52:	76 01       	movw	r14, r12
			iMessageLength ++;		// uint16
    3c54:	ba 2c       	mov	r11, r10
    3c56:	6c cd       	rjmp	.-1320   	; 0x3730 <TP_CheckPropertyEvents+0x80>
	// open the session for all the values
	CameraControl_OpenSession( &DigitalCamera_SI_Interface );
	
	if (iCurrentPropVector & TP_PROPERTY_EVENT_BatteryLevel)
	{
		CameraControl_GetPropertyVal32Bit (	&DigitalCamera_SI_Interface, PTP_DPC_BatteryLevel, &iTempPropVal );
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	91 e0       	ldi	r25, 0x01	; 1
    3c5c:	61 e0       	ldi	r22, 0x01	; 1
    3c5e:	70 e5       	ldi	r23, 0x50	; 80
    3c60:	ae 01       	movw	r20, r28
    3c62:	4f 5f       	subi	r20, 0xFF	; 255
    3c64:	5f 4f       	sbci	r21, 0xFF	; 255
    3c66:	5a d8       	rcall	.-3916   	; 0x2d1c <CameraControl_GetPropertyVal32Bit>
		if (iTempPropVal != g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_BatteryLevel_N]) 
    3c68:	20 91 1a 02 	lds	r18, 0x021A
    3c6c:	30 91 1b 02 	lds	r19, 0x021B
    3c70:	40 91 1c 02 	lds	r20, 0x021C
    3c74:	50 91 1d 02 	lds	r21, 0x021D
    3c78:	89 81       	ldd	r24, Y+1	; 0x01
    3c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c7c:	ab 81       	ldd	r26, Y+3	; 0x03
    3c7e:	bc 81       	ldd	r27, Y+4	; 0x04
    3c80:	28 17       	cp	r18, r24
    3c82:	39 07       	cpc	r19, r25
    3c84:	4a 07       	cpc	r20, r26
    3c86:	5b 07       	cpc	r21, r27
    3c88:	09 f4       	brne	.+2      	; 0x3c8c <TP_CheckPropertyEvents+0x5dc>
    3c8a:	48 cd       	rjmp	.-1392   	; 0x371c <TP_CheckPropertyEvents+0x6c>
		{
			g_iCurrentPropValuesVector[TP_PROPERTY_EVENT_BatteryLevel_N] = iTempPropVal;
    3c8c:	80 93 1a 02 	sts	0x021A, r24
    3c90:	90 93 1b 02 	sts	0x021B, r25
    3c94:	a0 93 1c 02 	sts	0x021C, r26
    3c98:	b0 93 1d 02 	sts	0x021D, r27
    3c9c:	b2 e0       	ldi	r27, 0x02	; 2
    3c9e:	ab 2e       	mov	r10, r27
    3ca0:	a3 e0       	ldi	r26, 0x03	; 3
    3ca2:	ca 2e       	mov	r12, r26
    3ca4:	d1 2c       	mov	r13, r1
			iChangedPropVector |= TP_PROPERTY_EVENT_BatteryLevel;
    3ca6:	f1 e0       	ldi	r31, 0x01	; 1
    3ca8:	ef 2e       	mov	r14, r31
    3caa:	f1 2c       	mov	r15, r1
			iMessageLength ++;		// uint8
    3cac:	bb 24       	eor	r11, r11
    3cae:	b3 94       	inc	r11
    3cb0:	3d cd       	rjmp	.-1414   	; 0x372c <TP_CheckPropertyEvents+0x7c>
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
		{
			char* tempVal = (char*)((void*)(&g_iCurrentPropValuesVector[i]));
			uart_putc(tempVal[0], stdout);
    3cb2:	60 91 d0 05 	lds	r22, 0x05D0
    3cb6:	70 91 d1 05 	lds	r23, 0x05D1
    3cba:	80 91 46 02 	lds	r24, 0x0246
    3cbe:	92 d1       	rcall	.+804    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[1], stdout);
    3cc0:	60 91 d0 05 	lds	r22, 0x05D0
    3cc4:	70 91 d1 05 	lds	r23, 0x05D1
    3cc8:	80 91 47 02 	lds	r24, 0x0247
    3ccc:	8b d1       	rcall	.+790    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[2], stdout);
    3cce:	60 91 d0 05 	lds	r22, 0x05D0
    3cd2:	70 91 d1 05 	lds	r23, 0x05D1
    3cd6:	80 91 48 02 	lds	r24, 0x0248
    3cda:	84 d1       	rcall	.+776    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[3], stdout);
    3cdc:	60 91 d0 05 	lds	r22, 0x05D0
    3ce0:	70 91 d1 05 	lds	r23, 0x05D1
    3ce4:	80 91 49 02 	lds	r24, 0x0249
    3ce8:	7d d1       	rcall	.+762    	; 0x3fe4 <uart_putc>
    3cea:	b5 cd       	rjmp	.-1174   	; 0x3856 <TP_CheckPropertyEvents+0x1a6>
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
		{
			char* tempVal = (char*)((void*)(&g_iCurrentPropValuesVector[i]));
			uart_putc(tempVal[0], stdout);
    3cec:	60 91 d0 05 	lds	r22, 0x05D0
    3cf0:	70 91 d1 05 	lds	r23, 0x05D1
    3cf4:	80 91 42 02 	lds	r24, 0x0242
    3cf8:	75 d1       	rcall	.+746    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[1], stdout);
    3cfa:	60 91 d0 05 	lds	r22, 0x05D0
    3cfe:	70 91 d1 05 	lds	r23, 0x05D1
    3d02:	80 91 43 02 	lds	r24, 0x0243
    3d06:	6e d1       	rcall	.+732    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[2], stdout);
    3d08:	60 91 d0 05 	lds	r22, 0x05D0
    3d0c:	70 91 d1 05 	lds	r23, 0x05D1
    3d10:	80 91 44 02 	lds	r24, 0x0244
    3d14:	67 d1       	rcall	.+718    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[3], stdout);
    3d16:	60 91 d0 05 	lds	r22, 0x05D0
    3d1a:	70 91 d1 05 	lds	r23, 0x05D1
    3d1e:	80 91 45 02 	lds	r24, 0x0245
    3d22:	60 d1       	rcall	.+704    	; 0x3fe4 <uart_putc>
    3d24:	94 cd       	rjmp	.-1240   	; 0x384e <TP_CheckPropertyEvents+0x19e>
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
		{
			char* tempVal = (char*)((void*)(&g_iCurrentPropValuesVector[i]));
			uart_putc(tempVal[0], stdout);
    3d26:	60 91 d0 05 	lds	r22, 0x05D0
    3d2a:	70 91 d1 05 	lds	r23, 0x05D1
    3d2e:	80 91 3e 02 	lds	r24, 0x023E
    3d32:	58 d1       	rcall	.+688    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[1], stdout);
    3d34:	60 91 d0 05 	lds	r22, 0x05D0
    3d38:	70 91 d1 05 	lds	r23, 0x05D1
    3d3c:	80 91 3f 02 	lds	r24, 0x023F
    3d40:	51 d1       	rcall	.+674    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[2], stdout);
    3d42:	60 91 d0 05 	lds	r22, 0x05D0
    3d46:	70 91 d1 05 	lds	r23, 0x05D1
    3d4a:	80 91 40 02 	lds	r24, 0x0240
    3d4e:	4a d1       	rcall	.+660    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[3], stdout);
    3d50:	60 91 d0 05 	lds	r22, 0x05D0
    3d54:	70 91 d1 05 	lds	r23, 0x05D1
    3d58:	80 91 41 02 	lds	r24, 0x0241
    3d5c:	43 d1       	rcall	.+646    	; 0x3fe4 <uart_putc>
    3d5e:	73 cd       	rjmp	.-1306   	; 0x3846 <TP_CheckPropertyEvents+0x196>
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
		{
			char* tempVal = (char*)((void*)(&g_iCurrentPropValuesVector[i]));
			uart_putc(tempVal[0], stdout);
    3d60:	60 91 d0 05 	lds	r22, 0x05D0
    3d64:	70 91 d1 05 	lds	r23, 0x05D1
    3d68:	80 91 3a 02 	lds	r24, 0x023A
    3d6c:	3b d1       	rcall	.+630    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[1], stdout);
    3d6e:	60 91 d0 05 	lds	r22, 0x05D0
    3d72:	70 91 d1 05 	lds	r23, 0x05D1
    3d76:	80 91 3b 02 	lds	r24, 0x023B
    3d7a:	34 d1       	rcall	.+616    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[2], stdout);
    3d7c:	60 91 d0 05 	lds	r22, 0x05D0
    3d80:	70 91 d1 05 	lds	r23, 0x05D1
    3d84:	80 91 3c 02 	lds	r24, 0x023C
    3d88:	2d d1       	rcall	.+602    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[3], stdout);
    3d8a:	60 91 d0 05 	lds	r22, 0x05D0
    3d8e:	70 91 d1 05 	lds	r23, 0x05D1
    3d92:	80 91 3d 02 	lds	r24, 0x023D
    3d96:	26 d1       	rcall	.+588    	; 0x3fe4 <uart_putc>
    3d98:	52 cd       	rjmp	.-1372   	; 0x383e <TP_CheckPropertyEvents+0x18e>
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
		{
			char* tempVal = (char*)((void*)(&g_iCurrentPropValuesVector[i]));
			uart_putc(tempVal[0], stdout);
    3d9a:	60 91 d0 05 	lds	r22, 0x05D0
    3d9e:	70 91 d1 05 	lds	r23, 0x05D1
    3da2:	80 91 36 02 	lds	r24, 0x0236
    3da6:	1e d1       	rcall	.+572    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[1], stdout);
    3da8:	60 91 d0 05 	lds	r22, 0x05D0
    3dac:	70 91 d1 05 	lds	r23, 0x05D1
    3db0:	80 91 37 02 	lds	r24, 0x0237
    3db4:	17 d1       	rcall	.+558    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[2], stdout);
    3db6:	60 91 d0 05 	lds	r22, 0x05D0
    3dba:	70 91 d1 05 	lds	r23, 0x05D1
    3dbe:	80 91 38 02 	lds	r24, 0x0238
    3dc2:	10 d1       	rcall	.+544    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[3], stdout);
    3dc4:	60 91 d0 05 	lds	r22, 0x05D0
    3dc8:	70 91 d1 05 	lds	r23, 0x05D1
    3dcc:	80 91 39 02 	lds	r24, 0x0239
    3dd0:	09 d1       	rcall	.+530    	; 0x3fe4 <uart_putc>
    3dd2:	31 cd       	rjmp	.-1438   	; 0x3836 <TP_CheckPropertyEvents+0x186>
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
		{
			char* tempVal = (char*)((void*)(&g_iCurrentPropValuesVector[i]));
			uart_putc(tempVal[0], stdout);
    3dd4:	60 91 d0 05 	lds	r22, 0x05D0
    3dd8:	70 91 d1 05 	lds	r23, 0x05D1
    3ddc:	80 91 32 02 	lds	r24, 0x0232
    3de0:	01 d1       	rcall	.+514    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[1], stdout);
    3de2:	60 91 d0 05 	lds	r22, 0x05D0
    3de6:	70 91 d1 05 	lds	r23, 0x05D1
    3dea:	80 91 33 02 	lds	r24, 0x0233
    3dee:	fa d0       	rcall	.+500    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[2], stdout);
    3df0:	60 91 d0 05 	lds	r22, 0x05D0
    3df4:	70 91 d1 05 	lds	r23, 0x05D1
    3df8:	80 91 34 02 	lds	r24, 0x0234
    3dfc:	f3 d0       	rcall	.+486    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[3], stdout);
    3dfe:	60 91 d0 05 	lds	r22, 0x05D0
    3e02:	70 91 d1 05 	lds	r23, 0x05D1
    3e06:	80 91 35 02 	lds	r24, 0x0235
    3e0a:	ec d0       	rcall	.+472    	; 0x3fe4 <uart_putc>
    3e0c:	10 cd       	rjmp	.-1504   	; 0x382e <TP_CheckPropertyEvents+0x17e>
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
		{
			char* tempVal = (char*)((void*)(&g_iCurrentPropValuesVector[i]));
			uart_putc(tempVal[0], stdout);
    3e0e:	60 91 d0 05 	lds	r22, 0x05D0
    3e12:	70 91 d1 05 	lds	r23, 0x05D1
    3e16:	80 91 2e 02 	lds	r24, 0x022E
    3e1a:	e4 d0       	rcall	.+456    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[1], stdout);
    3e1c:	60 91 d0 05 	lds	r22, 0x05D0
    3e20:	70 91 d1 05 	lds	r23, 0x05D1
    3e24:	80 91 2f 02 	lds	r24, 0x022F
    3e28:	dd d0       	rcall	.+442    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[2], stdout);
    3e2a:	60 91 d0 05 	lds	r22, 0x05D0
    3e2e:	70 91 d1 05 	lds	r23, 0x05D1
    3e32:	80 91 30 02 	lds	r24, 0x0230
    3e36:	d6 d0       	rcall	.+428    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[3], stdout);
    3e38:	60 91 d0 05 	lds	r22, 0x05D0
    3e3c:	70 91 d1 05 	lds	r23, 0x05D1
    3e40:	80 91 31 02 	lds	r24, 0x0231
    3e44:	cf d0       	rcall	.+414    	; 0x3fe4 <uart_putc>
    3e46:	ef cc       	rjmp	.-1570   	; 0x3826 <TP_CheckPropertyEvents+0x176>
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
		{
			char* tempVal = (char*)((void*)(&g_iCurrentPropValuesVector[i]));
			uart_putc(tempVal[0], stdout);
    3e48:	60 91 d0 05 	lds	r22, 0x05D0
    3e4c:	70 91 d1 05 	lds	r23, 0x05D1
    3e50:	80 91 2a 02 	lds	r24, 0x022A
    3e54:	c7 d0       	rcall	.+398    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[1], stdout);
    3e56:	60 91 d0 05 	lds	r22, 0x05D0
    3e5a:	70 91 d1 05 	lds	r23, 0x05D1
    3e5e:	80 91 2b 02 	lds	r24, 0x022B
    3e62:	c0 d0       	rcall	.+384    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[2], stdout);
    3e64:	60 91 d0 05 	lds	r22, 0x05D0
    3e68:	70 91 d1 05 	lds	r23, 0x05D1
    3e6c:	80 91 2c 02 	lds	r24, 0x022C
    3e70:	b9 d0       	rcall	.+370    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[3], stdout);
    3e72:	60 91 d0 05 	lds	r22, 0x05D0
    3e76:	70 91 d1 05 	lds	r23, 0x05D1
    3e7a:	80 91 2d 02 	lds	r24, 0x022D
    3e7e:	b2 d0       	rcall	.+356    	; 0x3fe4 <uart_putc>
    3e80:	ce cc       	rjmp	.-1636   	; 0x381e <TP_CheckPropertyEvents+0x16e>
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
		{
			char* tempVal = (char*)((void*)(&g_iCurrentPropValuesVector[i]));
			uart_putc(tempVal[0], stdout);
    3e82:	60 91 d0 05 	lds	r22, 0x05D0
    3e86:	70 91 d1 05 	lds	r23, 0x05D1
    3e8a:	80 91 26 02 	lds	r24, 0x0226
    3e8e:	aa d0       	rcall	.+340    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[1], stdout);
    3e90:	60 91 d0 05 	lds	r22, 0x05D0
    3e94:	70 91 d1 05 	lds	r23, 0x05D1
    3e98:	80 91 27 02 	lds	r24, 0x0227
    3e9c:	a3 d0       	rcall	.+326    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[2], stdout);
    3e9e:	60 91 d0 05 	lds	r22, 0x05D0
    3ea2:	70 91 d1 05 	lds	r23, 0x05D1
    3ea6:	80 91 28 02 	lds	r24, 0x0228
    3eaa:	9c d0       	rcall	.+312    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[3], stdout);
    3eac:	60 91 d0 05 	lds	r22, 0x05D0
    3eb0:	70 91 d1 05 	lds	r23, 0x05D1
    3eb4:	80 91 29 02 	lds	r24, 0x0229
    3eb8:	95 d0       	rcall	.+298    	; 0x3fe4 <uart_putc>
    3eba:	ad cc       	rjmp	.-1702   	; 0x3816 <TP_CheckPropertyEvents+0x166>
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
		{
			char* tempVal = (char*)((void*)(&g_iCurrentPropValuesVector[i]));
			uart_putc(tempVal[0], stdout);
    3ebc:	60 91 d0 05 	lds	r22, 0x05D0
    3ec0:	70 91 d1 05 	lds	r23, 0x05D1
    3ec4:	80 91 22 02 	lds	r24, 0x0222
    3ec8:	8d d0       	rcall	.+282    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[1], stdout);
    3eca:	60 91 d0 05 	lds	r22, 0x05D0
    3ece:	70 91 d1 05 	lds	r23, 0x05D1
    3ed2:	80 91 23 02 	lds	r24, 0x0223
    3ed6:	86 d0       	rcall	.+268    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[2], stdout);
    3ed8:	60 91 d0 05 	lds	r22, 0x05D0
    3edc:	70 91 d1 05 	lds	r23, 0x05D1
    3ee0:	80 91 24 02 	lds	r24, 0x0224
    3ee4:	7f d0       	rcall	.+254    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[3], stdout);
    3ee6:	60 91 d0 05 	lds	r22, 0x05D0
    3eea:	70 91 d1 05 	lds	r23, 0x05D1
    3eee:	80 91 25 02 	lds	r24, 0x0225
    3ef2:	78 d0       	rcall	.+240    	; 0x3fe4 <uart_putc>
    3ef4:	8c cc       	rjmp	.-1768   	; 0x380e <TP_CheckPropertyEvents+0x15e>
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
		{
			char* tempVal = (char*)((void*)(&g_iCurrentPropValuesVector[i]));
			uart_putc(tempVal[0], stdout);
    3ef6:	60 91 d0 05 	lds	r22, 0x05D0
    3efa:	70 91 d1 05 	lds	r23, 0x05D1
    3efe:	80 91 1e 02 	lds	r24, 0x021E
    3f02:	70 d0       	rcall	.+224    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[1], stdout);
    3f04:	60 91 d0 05 	lds	r22, 0x05D0
    3f08:	70 91 d1 05 	lds	r23, 0x05D1
    3f0c:	80 91 1f 02 	lds	r24, 0x021F
    3f10:	69 d0       	rcall	.+210    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[2], stdout);
    3f12:	60 91 d0 05 	lds	r22, 0x05D0
    3f16:	70 91 d1 05 	lds	r23, 0x05D1
    3f1a:	80 91 20 02 	lds	r24, 0x0220
    3f1e:	62 d0       	rcall	.+196    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[3], stdout);
    3f20:	60 91 d0 05 	lds	r22, 0x05D0
    3f24:	70 91 d1 05 	lds	r23, 0x05D1
    3f28:	80 91 21 02 	lds	r24, 0x0221
    3f2c:	5b d0       	rcall	.+182    	; 0x3fe4 <uart_putc>
    3f2e:	6b cc       	rjmp	.-1834   	; 0x3806 <TP_CheckPropertyEvents+0x156>
	for (i=0; i<16; i++)
	{
		if (iChangedPropVector & 0x0001)
		{
			char* tempVal = (char*)((void*)(&g_iCurrentPropValuesVector[i]));
			uart_putc(tempVal[0], stdout);
    3f30:	60 91 d0 05 	lds	r22, 0x05D0
    3f34:	70 91 d1 05 	lds	r23, 0x05D1
    3f38:	80 91 1a 02 	lds	r24, 0x021A
    3f3c:	53 d0       	rcall	.+166    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[1], stdout);
    3f3e:	60 91 d0 05 	lds	r22, 0x05D0
    3f42:	70 91 d1 05 	lds	r23, 0x05D1
    3f46:	80 91 1b 02 	lds	r24, 0x021B
    3f4a:	4c d0       	rcall	.+152    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[2], stdout);
    3f4c:	60 91 d0 05 	lds	r22, 0x05D0
    3f50:	70 91 d1 05 	lds	r23, 0x05D1
    3f54:	80 91 1c 02 	lds	r24, 0x021C
    3f58:	45 d0       	rcall	.+138    	; 0x3fe4 <uart_putc>
			uart_putc(tempVal[3], stdout);
    3f5a:	60 91 d0 05 	lds	r22, 0x05D0
    3f5e:	70 91 d1 05 	lds	r23, 0x05D1
    3f62:	80 91 1d 02 	lds	r24, 0x021D
    3f66:	3e d0       	rcall	.+124    	; 0x3fe4 <uart_putc>
    3f68:	49 cc       	rjmp	.-1902   	; 0x37fc <TP_CheckPropertyEvents+0x14c>

00003f6a <TP_SendSyncWord>:
	printf(str);*/
}

//------------------------------------------------------------------------------
void TP_SendSyncWord ( void )
{
    3f6a:	df 93       	push	r29
    3f6c:	cf 93       	push	r28
    3f6e:	00 d0       	rcall	.+0      	; 0x3f70 <TP_SendSyncWord+0x6>
    3f70:	00 d0       	rcall	.+0      	; 0x3f72 <TP_SendSyncWord+0x8>
    3f72:	cd b7       	in	r28, 0x3d	; 61
    3f74:	de b7       	in	r29, 0x3e	; 62
	uint8_t word[] = {0xde, 0xad,0xbe, 0xef};
    3f76:	8e ed       	ldi	r24, 0xDE	; 222
    3f78:	89 83       	std	Y+1, r24	; 0x01
    3f7a:	8d ea       	ldi	r24, 0xAD	; 173
    3f7c:	8a 83       	std	Y+2, r24	; 0x02
    3f7e:	8e eb       	ldi	r24, 0xBE	; 190
    3f80:	8b 83       	std	Y+3, r24	; 0x03
    3f82:	8f ee       	ldi	r24, 0xEF	; 239
    3f84:	8c 83       	std	Y+4, r24	; 0x04
	for (int i=0; i<4; i++)
		uart_putc(word[i], stdout);
    3f86:	60 91 d0 05 	lds	r22, 0x05D0
    3f8a:	70 91 d1 05 	lds	r23, 0x05D1
    3f8e:	8e ed       	ldi	r24, 0xDE	; 222
    3f90:	29 d0       	rcall	.+82     	; 0x3fe4 <uart_putc>
    3f92:	60 91 d0 05 	lds	r22, 0x05D0
    3f96:	70 91 d1 05 	lds	r23, 0x05D1
    3f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9c:	23 d0       	rcall	.+70     	; 0x3fe4 <uart_putc>
    3f9e:	60 91 d0 05 	lds	r22, 0x05D0
    3fa2:	70 91 d1 05 	lds	r23, 0x05D1
    3fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa8:	1d d0       	rcall	.+58     	; 0x3fe4 <uart_putc>
    3faa:	60 91 d0 05 	lds	r22, 0x05D0
    3fae:	70 91 d1 05 	lds	r23, 0x05D1
    3fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    3fb4:	17 d0       	rcall	.+46     	; 0x3fe4 <uart_putc>
	
//	for (int i=0; i<4; i++)
	//	uart_putc(word[i]);
    3fb6:	0f 90       	pop	r0
    3fb8:	0f 90       	pop	r0
    3fba:	0f 90       	pop	r0
    3fbc:	0f 90       	pop	r0
    3fbe:	cf 91       	pop	r28
    3fc0:	df 91       	pop	r29
    3fc2:	08 95       	ret

00003fc4 <uart_getc>:
char uart_getc(FILE *stream)
{    
    unsigned char tmptail;
    unsigned char data;

    while ( UART1_RxHead == UART1_RxTail ) {
    3fc4:	90 91 5d 02 	lds	r25, 0x025D
    3fc8:	80 91 5c 02 	lds	r24, 0x025C
    3fcc:	98 17       	cp	r25, r24
    3fce:	d1 f3       	breq	.-12     	; 0x3fc4 <uart_getc>
       ;   /* no data available: loop infinitely*/
    }
    
    /* calculate /store buffer index */
    tmptail = (UART1_RxTail + 1) & UART_RX_BUFFER_MASK;
    3fd0:	e0 91 5c 02 	lds	r30, 0x025C
    3fd4:	ef 5f       	subi	r30, 0xFF	; 255
    UART1_RxTail = tmptail; 
    3fd6:	e0 93 5c 02 	sts	0x025C, r30
    
    /* get data from receive buffer */
    data = UART1_RxBuf[tmptail];
    3fda:	f0 e0       	ldi	r31, 0x00	; 0
    3fdc:	e2 5a       	subi	r30, 0xA2	; 162
    3fde:	fc 4f       	sbci	r31, 0xFC	; 252
    3fe0:	80 81       	ld	r24, Z
    
    return data;
}/* uart_getc */
    3fe2:	08 95       	ret

00003fe4 <uart_putc>:
**************************************************************************/
void uart_putc(char data, FILE *stream)
{
    unsigned char tmphead;
    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
    3fe4:	20 91 5b 02 	lds	r18, 0x025B
    3fe8:	2f 5f       	subi	r18, 0xFF	; 255
    
    while ( tmphead == UART1_TxTail ){
    3fea:	90 91 5a 02 	lds	r25, 0x025A
    3fee:	29 17       	cp	r18, r25
    3ff0:	e1 f3       	breq	.-8      	; 0x3fea <uart_putc+0x6>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
    3ff2:	e2 2f       	mov	r30, r18
    3ff4:	f0 e0       	ldi	r31, 0x00	; 0
    3ff6:	e2 5a       	subi	r30, 0xA2	; 162
    3ff8:	fd 4f       	sbci	r31, 0xFD	; 253
    3ffa:	80 83       	st	Z, r24
    UART1_TxHead = tmphead;
    3ffc:	20 93 5b 02 	sts	0x025B, r18

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
    4000:	80 91 c9 00 	lds	r24, 0x00C9
    4004:	80 62       	ori	r24, 0x20	; 32
    4006:	80 93 c9 00 	sts	0x00C9, r24

}/* uart_putc */
    400a:	08 95       	ret

0000400c <__vector_25>:
ISR(USART1_RX_vect)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    400c:	1f 92       	push	r1
    400e:	0f 92       	push	r0
    4010:	0f b6       	in	r0, 0x3f	; 63
    4012:	0f 92       	push	r0
    4014:	0b b6       	in	r0, 0x3b	; 59
    4016:	0f 92       	push	r0
    4018:	11 24       	eor	r1, r1
    401a:	2f 93       	push	r18
    401c:	8f 93       	push	r24
    401e:	9f 93       	push	r25
    4020:	ef 93       	push	r30
    4022:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    4024:	20 91 c8 00 	lds	r18, 0x00C8
    data = UART1_DATA;
    4028:	90 91 ce 00 	lds	r25, 0x00CE
    
	lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );

    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    402c:	e0 91 5d 02 	lds	r30, 0x025D
    4030:	ef 5f       	subi	r30, 0xFF	; 255
    
    if ( tmphead == UART1_RxTail ) {
    4032:	80 91 5c 02 	lds	r24, 0x025C
    4036:	e8 17       	cp	r30, r24
    4038:	b1 f0       	breq	.+44     	; 0x4066 <__vector_25+0x5a>
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    data = UART1_DATA;
    
	lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
    403a:	82 2f       	mov	r24, r18
    403c:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
    403e:	e0 93 5d 02 	sts	0x025D, r30
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    4042:	f0 e0       	ldi	r31, 0x00	; 0
    4044:	e2 5a       	subi	r30, 0xA2	; 162
    4046:	fc 4f       	sbci	r31, 0xFC	; 252
    4048:	90 83       	st	Z, r25
    }
    UART1_LastRxError = lastRxError;   
    404a:	80 93 5e 04 	sts	0x045E, r24
}
    404e:	ff 91       	pop	r31
    4050:	ef 91       	pop	r30
    4052:	9f 91       	pop	r25
    4054:	8f 91       	pop	r24
    4056:	2f 91       	pop	r18
    4058:	0f 90       	pop	r0
    405a:	0b be       	out	0x3b, r0	; 59
    405c:	0f 90       	pop	r0
    405e:	0f be       	out	0x3f, r0	; 63
    4060:	0f 90       	pop	r0
    4062:	1f 90       	pop	r1
    4064:	18 95       	reti
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    4066:	82 e0       	ldi	r24, 0x02	; 2
    4068:	f0 cf       	rjmp	.-32     	; 0x404a <__vector_25+0x3e>

0000406a <__vector_26>:
ISR(USART1_UDRE_vect)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    406a:	1f 92       	push	r1
    406c:	0f 92       	push	r0
    406e:	0f b6       	in	r0, 0x3f	; 63
    4070:	0f 92       	push	r0
    4072:	0b b6       	in	r0, 0x3b	; 59
    4074:	0f 92       	push	r0
    4076:	11 24       	eor	r1, r1
    4078:	8f 93       	push	r24
    407a:	9f 93       	push	r25
    407c:	ef 93       	push	r30
    407e:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
    4080:	90 91 5b 02 	lds	r25, 0x025B
    4084:	80 91 5a 02 	lds	r24, 0x025A
    4088:	98 17       	cp	r25, r24
    408a:	b1 f0       	breq	.+44     	; 0x40b8 <__vector_26+0x4e>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
    408c:	e0 91 5a 02 	lds	r30, 0x025A
    4090:	ef 5f       	subi	r30, 0xFF	; 255
        UART1_TxTail = tmptail;
    4092:	e0 93 5a 02 	sts	0x025A, r30
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
    4096:	f0 e0       	ldi	r31, 0x00	; 0
    4098:	e2 5a       	subi	r30, 0xA2	; 162
    409a:	fd 4f       	sbci	r31, 0xFD	; 253
    409c:	80 81       	ld	r24, Z
    409e:	80 93 ce 00 	sts	0x00CE, r24
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
    }
}
    40a2:	ff 91       	pop	r31
    40a4:	ef 91       	pop	r30
    40a6:	9f 91       	pop	r25
    40a8:	8f 91       	pop	r24
    40aa:	0f 90       	pop	r0
    40ac:	0b be       	out	0x3b, r0	; 59
    40ae:	0f 90       	pop	r0
    40b0:	0f be       	out	0x3f, r0	; 63
    40b2:	0f 90       	pop	r0
    40b4:	1f 90       	pop	r1
    40b6:	18 95       	reti
        UART1_TxTail = tmptail;
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
    40b8:	80 91 c9 00 	lds	r24, 0x00C9
    40bc:	8f 7d       	andi	r24, 0xDF	; 223
    40be:	80 93 c9 00 	sts	0x00C9, r24
    40c2:	ef cf       	rjmp	.-34     	; 0x40a2 <__vector_26+0x38>

000040c4 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART1_TxHead = 0;
    40c4:	10 92 5b 02 	sts	0x025B, r1
    UART1_TxTail = 0;
    40c8:	10 92 5a 02 	sts	0x025A, r1
    UART1_RxHead = 0;
    40cc:	10 92 5d 02 	sts	0x025D, r1
    UART1_RxTail = 0;
    40d0:	10 92 5c 02 	sts	0x025C, r1
    

    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    40d4:	97 ff       	sbrs	r25, 7
    40d6:	04 c0       	rjmp	.+8      	; 0x40e0 <uart_init+0x1c>
    {
    	UART1_STATUS = (1<<U2X1);  //Enable 2x speed 
    40d8:	22 e0       	ldi	r18, 0x02	; 2
    40da:	20 93 c8 00 	sts	0x00C8, r18
      baudrate &= ~0x8000;
    40de:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRR1H = (unsigned char)(baudrate>>8);
    40e0:	90 93 cd 00 	sts	0x00CD, r25
    UBRR1L = (unsigned char) baudrate;
    40e4:	80 93 cc 00 	sts	0x00CC, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART1_CONTROL = _BV(RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
    40e8:	88 e9       	ldi	r24, 0x98	; 152
    40ea:	80 93 c9 00 	sts	0x00C9, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */   
    UCSR1C = (3<<UCSZ10);
    40ee:	86 e0       	ldi	r24, 0x06	; 6
    40f0:	80 93 ca 00 	sts	0x00CA, r24
	
	stdout = &uart_output;
    40f4:	85 e2       	ldi	r24, 0x25	; 37
    40f6:	91 e0       	ldi	r25, 0x01	; 1
    40f8:	90 93 d1 05 	sts	0x05D1, r25
    40fc:	80 93 d0 05 	sts	0x05D0, r24
    stdin  = &uart_input;
    4100:	83 e3       	ldi	r24, 0x33	; 51
    4102:	91 e0       	ldi	r25, 0x01	; 1
    4104:	90 93 cf 05 	sts	0x05CF, r25
    4108:	80 93 ce 05 	sts	0x05CE, r24
}/* uart_init */
    410c:	08 95       	ret

0000410e <uart_rx_ready>:

}/* uart_getc_no_blocking */

uint8_t uart_rx_ready(void)
{
	return ( UART1_RxHead != UART1_RxTail ) ;	
    410e:	20 91 5d 02 	lds	r18, 0x025D
    4112:	90 91 5c 02 	lds	r25, 0x025C
    4116:	81 e0       	ldi	r24, 0x01	; 1
    4118:	29 13       	cpse	r18, r25
}
    411a:	08 95       	ret

}/* uart_getc_no_blocking */

uint8_t uart_rx_ready(void)
{
	return ( UART1_RxHead != UART1_RxTail ) ;	
    411c:	80 e0       	ldi	r24, 0x00	; 0
}
    411e:	08 95       	ret

00004120 <printf_P>:
    4120:	df 93       	push	r29
    4122:	cf 93       	push	r28
    4124:	cd b7       	in	r28, 0x3d	; 61
    4126:	de b7       	in	r29, 0x3e	; 62
    4128:	fe 01       	movw	r30, r28
    412a:	35 96       	adiw	r30, 0x05	; 5
    412c:	61 91       	ld	r22, Z+
    412e:	71 91       	ld	r23, Z+
    4130:	80 91 d0 05 	lds	r24, 0x05D0
    4134:	90 91 d1 05 	lds	r25, 0x05D1
    4138:	dc 01       	movw	r26, r24
    413a:	13 96       	adiw	r26, 0x03	; 3
    413c:	2c 91       	ld	r18, X
    413e:	13 97       	sbiw	r26, 0x03	; 3
    4140:	28 60       	ori	r18, 0x08	; 8
    4142:	13 96       	adiw	r26, 0x03	; 3
    4144:	2c 93       	st	X, r18
    4146:	af 01       	movw	r20, r30
    4148:	0a d0       	rcall	.+20     	; 0x415e <vfprintf>
    414a:	e0 91 d0 05 	lds	r30, 0x05D0
    414e:	f0 91 d1 05 	lds	r31, 0x05D1
    4152:	23 81       	ldd	r18, Z+3	; 0x03
    4154:	27 7f       	andi	r18, 0xF7	; 247
    4156:	23 83       	std	Z+3, r18	; 0x03
    4158:	cf 91       	pop	r28
    415a:	df 91       	pop	r29
    415c:	08 95       	ret

0000415e <vfprintf>:
    415e:	2f 92       	push	r2
    4160:	3f 92       	push	r3
    4162:	4f 92       	push	r4
    4164:	5f 92       	push	r5
    4166:	6f 92       	push	r6
    4168:	7f 92       	push	r7
    416a:	8f 92       	push	r8
    416c:	9f 92       	push	r9
    416e:	af 92       	push	r10
    4170:	bf 92       	push	r11
    4172:	cf 92       	push	r12
    4174:	df 92       	push	r13
    4176:	ef 92       	push	r14
    4178:	ff 92       	push	r15
    417a:	0f 93       	push	r16
    417c:	1f 93       	push	r17
    417e:	df 93       	push	r29
    4180:	cf 93       	push	r28
    4182:	cd b7       	in	r28, 0x3d	; 61
    4184:	de b7       	in	r29, 0x3e	; 62
    4186:	2c 97       	sbiw	r28, 0x0c	; 12
    4188:	0f b6       	in	r0, 0x3f	; 63
    418a:	f8 94       	cli
    418c:	de bf       	out	0x3e, r29	; 62
    418e:	0f be       	out	0x3f, r0	; 63
    4190:	cd bf       	out	0x3d, r28	; 61
    4192:	6c 01       	movw	r12, r24
    4194:	1b 01       	movw	r2, r22
    4196:	8a 01       	movw	r16, r20
    4198:	fc 01       	movw	r30, r24
    419a:	17 82       	std	Z+7, r1	; 0x07
    419c:	16 82       	std	Z+6, r1	; 0x06
    419e:	83 81       	ldd	r24, Z+3	; 0x03
    41a0:	81 ff       	sbrs	r24, 1
    41a2:	c4 c1       	rjmp	.+904    	; 0x452c <vfprintf+0x3ce>
    41a4:	2e 01       	movw	r4, r28
    41a6:	08 94       	sec
    41a8:	41 1c       	adc	r4, r1
    41aa:	51 1c       	adc	r5, r1
    41ac:	f6 01       	movw	r30, r12
    41ae:	93 81       	ldd	r25, Z+3	; 0x03
    41b0:	f1 01       	movw	r30, r2
    41b2:	93 fd       	sbrc	r25, 3
    41b4:	85 91       	lpm	r24, Z+
    41b6:	93 ff       	sbrs	r25, 3
    41b8:	81 91       	ld	r24, Z+
    41ba:	1f 01       	movw	r2, r30
    41bc:	88 23       	and	r24, r24
    41be:	09 f4       	brne	.+2      	; 0x41c2 <vfprintf+0x64>
    41c0:	b1 c1       	rjmp	.+866    	; 0x4524 <vfprintf+0x3c6>
    41c2:	85 32       	cpi	r24, 0x25	; 37
    41c4:	39 f4       	brne	.+14     	; 0x41d4 <vfprintf+0x76>
    41c6:	93 fd       	sbrc	r25, 3
    41c8:	85 91       	lpm	r24, Z+
    41ca:	93 ff       	sbrs	r25, 3
    41cc:	81 91       	ld	r24, Z+
    41ce:	1f 01       	movw	r2, r30
    41d0:	85 32       	cpi	r24, 0x25	; 37
    41d2:	21 f4       	brne	.+8      	; 0x41dc <vfprintf+0x7e>
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	b6 01       	movw	r22, r12
    41d8:	db d1       	rcall	.+950    	; 0x4590 <fputc>
    41da:	e8 cf       	rjmp	.-48     	; 0x41ac <vfprintf+0x4e>
    41dc:	ee 24       	eor	r14, r14
    41de:	ff 24       	eor	r15, r15
    41e0:	20 e0       	ldi	r18, 0x00	; 0
    41e2:	20 32       	cpi	r18, 0x20	; 32
    41e4:	b0 f4       	brcc	.+44     	; 0x4212 <vfprintf+0xb4>
    41e6:	8b 32       	cpi	r24, 0x2B	; 43
    41e8:	69 f0       	breq	.+26     	; 0x4204 <vfprintf+0xa6>
    41ea:	8c 32       	cpi	r24, 0x2C	; 44
    41ec:	28 f4       	brcc	.+10     	; 0x41f8 <vfprintf+0x9a>
    41ee:	80 32       	cpi	r24, 0x20	; 32
    41f0:	51 f0       	breq	.+20     	; 0x4206 <vfprintf+0xa8>
    41f2:	83 32       	cpi	r24, 0x23	; 35
    41f4:	71 f4       	brne	.+28     	; 0x4212 <vfprintf+0xb4>
    41f6:	0b c0       	rjmp	.+22     	; 0x420e <vfprintf+0xb0>
    41f8:	8d 32       	cpi	r24, 0x2D	; 45
    41fa:	39 f0       	breq	.+14     	; 0x420a <vfprintf+0xac>
    41fc:	80 33       	cpi	r24, 0x30	; 48
    41fe:	49 f4       	brne	.+18     	; 0x4212 <vfprintf+0xb4>
    4200:	21 60       	ori	r18, 0x01	; 1
    4202:	2c c0       	rjmp	.+88     	; 0x425c <vfprintf+0xfe>
    4204:	22 60       	ori	r18, 0x02	; 2
    4206:	24 60       	ori	r18, 0x04	; 4
    4208:	29 c0       	rjmp	.+82     	; 0x425c <vfprintf+0xfe>
    420a:	28 60       	ori	r18, 0x08	; 8
    420c:	27 c0       	rjmp	.+78     	; 0x425c <vfprintf+0xfe>
    420e:	20 61       	ori	r18, 0x10	; 16
    4210:	25 c0       	rjmp	.+74     	; 0x425c <vfprintf+0xfe>
    4212:	27 fd       	sbrc	r18, 7
    4214:	2c c0       	rjmp	.+88     	; 0x426e <vfprintf+0x110>
    4216:	38 2f       	mov	r19, r24
    4218:	30 53       	subi	r19, 0x30	; 48
    421a:	3a 30       	cpi	r19, 0x0A	; 10
    421c:	98 f4       	brcc	.+38     	; 0x4244 <vfprintf+0xe6>
    421e:	26 ff       	sbrs	r18, 6
    4220:	08 c0       	rjmp	.+16     	; 0x4232 <vfprintf+0xd4>
    4222:	8e 2d       	mov	r24, r14
    4224:	88 0f       	add	r24, r24
    4226:	e8 2e       	mov	r14, r24
    4228:	ee 0c       	add	r14, r14
    422a:	ee 0c       	add	r14, r14
    422c:	e8 0e       	add	r14, r24
    422e:	e3 0e       	add	r14, r19
    4230:	15 c0       	rjmp	.+42     	; 0x425c <vfprintf+0xfe>
    4232:	8f 2d       	mov	r24, r15
    4234:	88 0f       	add	r24, r24
    4236:	f8 2e       	mov	r15, r24
    4238:	ff 0c       	add	r15, r15
    423a:	ff 0c       	add	r15, r15
    423c:	f8 0e       	add	r15, r24
    423e:	f3 0e       	add	r15, r19
    4240:	20 62       	ori	r18, 0x20	; 32
    4242:	0c c0       	rjmp	.+24     	; 0x425c <vfprintf+0xfe>
    4244:	8e 32       	cpi	r24, 0x2E	; 46
    4246:	21 f4       	brne	.+8      	; 0x4250 <vfprintf+0xf2>
    4248:	26 fd       	sbrc	r18, 6
    424a:	6c c1       	rjmp	.+728    	; 0x4524 <vfprintf+0x3c6>
    424c:	20 64       	ori	r18, 0x40	; 64
    424e:	06 c0       	rjmp	.+12     	; 0x425c <vfprintf+0xfe>
    4250:	8c 36       	cpi	r24, 0x6C	; 108
    4252:	11 f4       	brne	.+4      	; 0x4258 <vfprintf+0xfa>
    4254:	20 68       	ori	r18, 0x80	; 128
    4256:	02 c0       	rjmp	.+4      	; 0x425c <vfprintf+0xfe>
    4258:	88 36       	cpi	r24, 0x68	; 104
    425a:	49 f4       	brne	.+18     	; 0x426e <vfprintf+0x110>
    425c:	f1 01       	movw	r30, r2
    425e:	93 fd       	sbrc	r25, 3
    4260:	85 91       	lpm	r24, Z+
    4262:	93 ff       	sbrs	r25, 3
    4264:	81 91       	ld	r24, Z+
    4266:	1f 01       	movw	r2, r30
    4268:	88 23       	and	r24, r24
    426a:	09 f0       	breq	.+2      	; 0x426e <vfprintf+0x110>
    426c:	ba cf       	rjmp	.-140    	; 0x41e2 <vfprintf+0x84>
    426e:	98 2f       	mov	r25, r24
    4270:	95 54       	subi	r25, 0x45	; 69
    4272:	93 30       	cpi	r25, 0x03	; 3
    4274:	18 f0       	brcs	.+6      	; 0x427c <vfprintf+0x11e>
    4276:	90 52       	subi	r25, 0x20	; 32
    4278:	93 30       	cpi	r25, 0x03	; 3
    427a:	28 f4       	brcc	.+10     	; 0x4286 <vfprintf+0x128>
    427c:	0c 5f       	subi	r16, 0xFC	; 252
    427e:	1f 4f       	sbci	r17, 0xFF	; 255
    4280:	ff e3       	ldi	r31, 0x3F	; 63
    4282:	f9 83       	std	Y+1, r31	; 0x01
    4284:	0d c0       	rjmp	.+26     	; 0x42a0 <vfprintf+0x142>
    4286:	83 36       	cpi	r24, 0x63	; 99
    4288:	31 f0       	breq	.+12     	; 0x4296 <vfprintf+0x138>
    428a:	83 37       	cpi	r24, 0x73	; 115
    428c:	71 f0       	breq	.+28     	; 0x42aa <vfprintf+0x14c>
    428e:	83 35       	cpi	r24, 0x53	; 83
    4290:	09 f0       	breq	.+2      	; 0x4294 <vfprintf+0x136>
    4292:	5c c0       	rjmp	.+184    	; 0x434c <vfprintf+0x1ee>
    4294:	21 c0       	rjmp	.+66     	; 0x42d8 <vfprintf+0x17a>
    4296:	f8 01       	movw	r30, r16
    4298:	80 81       	ld	r24, Z
    429a:	89 83       	std	Y+1, r24	; 0x01
    429c:	0e 5f       	subi	r16, 0xFE	; 254
    429e:	1f 4f       	sbci	r17, 0xFF	; 255
    42a0:	42 01       	movw	r8, r4
    42a2:	71 e0       	ldi	r23, 0x01	; 1
    42a4:	a7 2e       	mov	r10, r23
    42a6:	b1 2c       	mov	r11, r1
    42a8:	15 c0       	rjmp	.+42     	; 0x42d4 <vfprintf+0x176>
    42aa:	62 e0       	ldi	r22, 0x02	; 2
    42ac:	66 2e       	mov	r6, r22
    42ae:	71 2c       	mov	r7, r1
    42b0:	60 0e       	add	r6, r16
    42b2:	71 1e       	adc	r7, r17
    42b4:	f8 01       	movw	r30, r16
    42b6:	80 80       	ld	r8, Z
    42b8:	91 80       	ldd	r9, Z+1	; 0x01
    42ba:	26 ff       	sbrs	r18, 6
    42bc:	03 c0       	rjmp	.+6      	; 0x42c4 <vfprintf+0x166>
    42be:	6e 2d       	mov	r22, r14
    42c0:	70 e0       	ldi	r23, 0x00	; 0
    42c2:	02 c0       	rjmp	.+4      	; 0x42c8 <vfprintf+0x16a>
    42c4:	6f ef       	ldi	r22, 0xFF	; 255
    42c6:	7f ef       	ldi	r23, 0xFF	; 255
    42c8:	c4 01       	movw	r24, r8
    42ca:	2c 87       	std	Y+12, r18	; 0x0c
    42cc:	56 d1       	rcall	.+684    	; 0x457a <strnlen>
    42ce:	5c 01       	movw	r10, r24
    42d0:	83 01       	movw	r16, r6
    42d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    42d4:	2f 77       	andi	r18, 0x7F	; 127
    42d6:	16 c0       	rjmp	.+44     	; 0x4304 <vfprintf+0x1a6>
    42d8:	52 e0       	ldi	r21, 0x02	; 2
    42da:	65 2e       	mov	r6, r21
    42dc:	71 2c       	mov	r7, r1
    42de:	60 0e       	add	r6, r16
    42e0:	71 1e       	adc	r7, r17
    42e2:	f8 01       	movw	r30, r16
    42e4:	80 80       	ld	r8, Z
    42e6:	91 80       	ldd	r9, Z+1	; 0x01
    42e8:	26 ff       	sbrs	r18, 6
    42ea:	03 c0       	rjmp	.+6      	; 0x42f2 <vfprintf+0x194>
    42ec:	6e 2d       	mov	r22, r14
    42ee:	70 e0       	ldi	r23, 0x00	; 0
    42f0:	02 c0       	rjmp	.+4      	; 0x42f6 <vfprintf+0x198>
    42f2:	6f ef       	ldi	r22, 0xFF	; 255
    42f4:	7f ef       	ldi	r23, 0xFF	; 255
    42f6:	c4 01       	movw	r24, r8
    42f8:	2c 87       	std	Y+12, r18	; 0x0c
    42fa:	34 d1       	rcall	.+616    	; 0x4564 <strnlen_P>
    42fc:	5c 01       	movw	r10, r24
    42fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    4300:	20 68       	ori	r18, 0x80	; 128
    4302:	83 01       	movw	r16, r6
    4304:	23 fd       	sbrc	r18, 3
    4306:	1e c0       	rjmp	.+60     	; 0x4344 <vfprintf+0x1e6>
    4308:	07 c0       	rjmp	.+14     	; 0x4318 <vfprintf+0x1ba>
    430a:	80 e2       	ldi	r24, 0x20	; 32
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	b6 01       	movw	r22, r12
    4310:	2c 87       	std	Y+12, r18	; 0x0c
    4312:	3e d1       	rcall	.+636    	; 0x4590 <fputc>
    4314:	fa 94       	dec	r15
    4316:	2c 85       	ldd	r18, Y+12	; 0x0c
    4318:	8f 2d       	mov	r24, r15
    431a:	90 e0       	ldi	r25, 0x00	; 0
    431c:	a8 16       	cp	r10, r24
    431e:	b9 06       	cpc	r11, r25
    4320:	a0 f3       	brcs	.-24     	; 0x430a <vfprintf+0x1ac>
    4322:	10 c0       	rjmp	.+32     	; 0x4344 <vfprintf+0x1e6>
    4324:	f4 01       	movw	r30, r8
    4326:	27 fd       	sbrc	r18, 7
    4328:	85 91       	lpm	r24, Z+
    432a:	27 ff       	sbrs	r18, 7
    432c:	81 91       	ld	r24, Z+
    432e:	4f 01       	movw	r8, r30
    4330:	90 e0       	ldi	r25, 0x00	; 0
    4332:	b6 01       	movw	r22, r12
    4334:	2c 87       	std	Y+12, r18	; 0x0c
    4336:	2c d1       	rcall	.+600    	; 0x4590 <fputc>
    4338:	2c 85       	ldd	r18, Y+12	; 0x0c
    433a:	f1 10       	cpse	r15, r1
    433c:	fa 94       	dec	r15
    433e:	08 94       	sec
    4340:	a1 08       	sbc	r10, r1
    4342:	b1 08       	sbc	r11, r1
    4344:	a1 14       	cp	r10, r1
    4346:	b1 04       	cpc	r11, r1
    4348:	69 f7       	brne	.-38     	; 0x4324 <vfprintf+0x1c6>
    434a:	e9 c0       	rjmp	.+466    	; 0x451e <vfprintf+0x3c0>
    434c:	84 36       	cpi	r24, 0x64	; 100
    434e:	11 f0       	breq	.+4      	; 0x4354 <vfprintf+0x1f6>
    4350:	89 36       	cpi	r24, 0x69	; 105
    4352:	41 f5       	brne	.+80     	; 0x43a4 <vfprintf+0x246>
    4354:	27 ff       	sbrs	r18, 7
    4356:	08 c0       	rjmp	.+16     	; 0x4368 <vfprintf+0x20a>
    4358:	f8 01       	movw	r30, r16
    435a:	60 81       	ld	r22, Z
    435c:	71 81       	ldd	r23, Z+1	; 0x01
    435e:	82 81       	ldd	r24, Z+2	; 0x02
    4360:	93 81       	ldd	r25, Z+3	; 0x03
    4362:	0c 5f       	subi	r16, 0xFC	; 252
    4364:	1f 4f       	sbci	r17, 0xFF	; 255
    4366:	09 c0       	rjmp	.+18     	; 0x437a <vfprintf+0x21c>
    4368:	f8 01       	movw	r30, r16
    436a:	60 81       	ld	r22, Z
    436c:	71 81       	ldd	r23, Z+1	; 0x01
    436e:	88 27       	eor	r24, r24
    4370:	77 fd       	sbrc	r23, 7
    4372:	80 95       	com	r24
    4374:	98 2f       	mov	r25, r24
    4376:	0e 5f       	subi	r16, 0xFE	; 254
    4378:	1f 4f       	sbci	r17, 0xFF	; 255
    437a:	4f e6       	ldi	r20, 0x6F	; 111
    437c:	b4 2e       	mov	r11, r20
    437e:	b2 22       	and	r11, r18
    4380:	97 ff       	sbrs	r25, 7
    4382:	09 c0       	rjmp	.+18     	; 0x4396 <vfprintf+0x238>
    4384:	90 95       	com	r25
    4386:	80 95       	com	r24
    4388:	70 95       	com	r23
    438a:	61 95       	neg	r22
    438c:	7f 4f       	sbci	r23, 0xFF	; 255
    438e:	8f 4f       	sbci	r24, 0xFF	; 255
    4390:	9f 4f       	sbci	r25, 0xFF	; 255
    4392:	f0 e8       	ldi	r31, 0x80	; 128
    4394:	bf 2a       	or	r11, r31
    4396:	a2 01       	movw	r20, r4
    4398:	2a e0       	ldi	r18, 0x0A	; 10
    439a:	30 e0       	ldi	r19, 0x00	; 0
    439c:	25 d1       	rcall	.+586    	; 0x45e8 <__ultoa_invert>
    439e:	78 2e       	mov	r7, r24
    43a0:	74 18       	sub	r7, r4
    43a2:	44 c0       	rjmp	.+136    	; 0x442c <vfprintf+0x2ce>
    43a4:	85 37       	cpi	r24, 0x75	; 117
    43a6:	31 f4       	brne	.+12     	; 0x43b4 <vfprintf+0x256>
    43a8:	3f ee       	ldi	r19, 0xEF	; 239
    43aa:	b3 2e       	mov	r11, r19
    43ac:	b2 22       	and	r11, r18
    43ae:	2a e0       	ldi	r18, 0x0A	; 10
    43b0:	30 e0       	ldi	r19, 0x00	; 0
    43b2:	25 c0       	rjmp	.+74     	; 0x43fe <vfprintf+0x2a0>
    43b4:	99 ef       	ldi	r25, 0xF9	; 249
    43b6:	b9 2e       	mov	r11, r25
    43b8:	b2 22       	and	r11, r18
    43ba:	8f 36       	cpi	r24, 0x6F	; 111
    43bc:	c1 f0       	breq	.+48     	; 0x43ee <vfprintf+0x290>
    43be:	80 37       	cpi	r24, 0x70	; 112
    43c0:	20 f4       	brcc	.+8      	; 0x43ca <vfprintf+0x26c>
    43c2:	88 35       	cpi	r24, 0x58	; 88
    43c4:	09 f0       	breq	.+2      	; 0x43c8 <vfprintf+0x26a>
    43c6:	ae c0       	rjmp	.+348    	; 0x4524 <vfprintf+0x3c6>
    43c8:	0d c0       	rjmp	.+26     	; 0x43e4 <vfprintf+0x286>
    43ca:	80 37       	cpi	r24, 0x70	; 112
    43cc:	21 f0       	breq	.+8      	; 0x43d6 <vfprintf+0x278>
    43ce:	88 37       	cpi	r24, 0x78	; 120
    43d0:	09 f0       	breq	.+2      	; 0x43d4 <vfprintf+0x276>
    43d2:	a8 c0       	rjmp	.+336    	; 0x4524 <vfprintf+0x3c6>
    43d4:	02 c0       	rjmp	.+4      	; 0x43da <vfprintf+0x27c>
    43d6:	20 e1       	ldi	r18, 0x10	; 16
    43d8:	b2 2a       	or	r11, r18
    43da:	b4 fe       	sbrs	r11, 4
    43dc:	0b c0       	rjmp	.+22     	; 0x43f4 <vfprintf+0x296>
    43de:	84 e0       	ldi	r24, 0x04	; 4
    43e0:	b8 2a       	or	r11, r24
    43e2:	08 c0       	rjmp	.+16     	; 0x43f4 <vfprintf+0x296>
    43e4:	b4 fe       	sbrs	r11, 4
    43e6:	09 c0       	rjmp	.+18     	; 0x43fa <vfprintf+0x29c>
    43e8:	e6 e0       	ldi	r30, 0x06	; 6
    43ea:	be 2a       	or	r11, r30
    43ec:	06 c0       	rjmp	.+12     	; 0x43fa <vfprintf+0x29c>
    43ee:	28 e0       	ldi	r18, 0x08	; 8
    43f0:	30 e0       	ldi	r19, 0x00	; 0
    43f2:	05 c0       	rjmp	.+10     	; 0x43fe <vfprintf+0x2a0>
    43f4:	20 e1       	ldi	r18, 0x10	; 16
    43f6:	30 e0       	ldi	r19, 0x00	; 0
    43f8:	02 c0       	rjmp	.+4      	; 0x43fe <vfprintf+0x2a0>
    43fa:	20 e1       	ldi	r18, 0x10	; 16
    43fc:	32 e0       	ldi	r19, 0x02	; 2
    43fe:	b7 fe       	sbrs	r11, 7
    4400:	08 c0       	rjmp	.+16     	; 0x4412 <vfprintf+0x2b4>
    4402:	f8 01       	movw	r30, r16
    4404:	60 81       	ld	r22, Z
    4406:	71 81       	ldd	r23, Z+1	; 0x01
    4408:	82 81       	ldd	r24, Z+2	; 0x02
    440a:	93 81       	ldd	r25, Z+3	; 0x03
    440c:	0c 5f       	subi	r16, 0xFC	; 252
    440e:	1f 4f       	sbci	r17, 0xFF	; 255
    4410:	07 c0       	rjmp	.+14     	; 0x4420 <vfprintf+0x2c2>
    4412:	f8 01       	movw	r30, r16
    4414:	60 81       	ld	r22, Z
    4416:	71 81       	ldd	r23, Z+1	; 0x01
    4418:	80 e0       	ldi	r24, 0x00	; 0
    441a:	90 e0       	ldi	r25, 0x00	; 0
    441c:	0e 5f       	subi	r16, 0xFE	; 254
    441e:	1f 4f       	sbci	r17, 0xFF	; 255
    4420:	a2 01       	movw	r20, r4
    4422:	e2 d0       	rcall	.+452    	; 0x45e8 <__ultoa_invert>
    4424:	78 2e       	mov	r7, r24
    4426:	74 18       	sub	r7, r4
    4428:	ff e7       	ldi	r31, 0x7F	; 127
    442a:	bf 22       	and	r11, r31
    442c:	b6 fe       	sbrs	r11, 6
    442e:	0b c0       	rjmp	.+22     	; 0x4446 <vfprintf+0x2e8>
    4430:	2e ef       	ldi	r18, 0xFE	; 254
    4432:	b2 22       	and	r11, r18
    4434:	7e 14       	cp	r7, r14
    4436:	38 f4       	brcc	.+14     	; 0x4446 <vfprintf+0x2e8>
    4438:	b4 fe       	sbrs	r11, 4
    443a:	07 c0       	rjmp	.+14     	; 0x444a <vfprintf+0x2ec>
    443c:	b2 fc       	sbrc	r11, 2
    443e:	05 c0       	rjmp	.+10     	; 0x444a <vfprintf+0x2ec>
    4440:	8f ee       	ldi	r24, 0xEF	; 239
    4442:	b8 22       	and	r11, r24
    4444:	02 c0       	rjmp	.+4      	; 0x444a <vfprintf+0x2ec>
    4446:	a7 2c       	mov	r10, r7
    4448:	01 c0       	rjmp	.+2      	; 0x444c <vfprintf+0x2ee>
    444a:	ae 2c       	mov	r10, r14
    444c:	8b 2d       	mov	r24, r11
    444e:	90 e0       	ldi	r25, 0x00	; 0
    4450:	b4 fe       	sbrs	r11, 4
    4452:	0d c0       	rjmp	.+26     	; 0x446e <vfprintf+0x310>
    4454:	fe 01       	movw	r30, r28
    4456:	e7 0d       	add	r30, r7
    4458:	f1 1d       	adc	r31, r1
    445a:	20 81       	ld	r18, Z
    445c:	20 33       	cpi	r18, 0x30	; 48
    445e:	19 f4       	brne	.+6      	; 0x4466 <vfprintf+0x308>
    4460:	e9 ee       	ldi	r30, 0xE9	; 233
    4462:	be 22       	and	r11, r30
    4464:	09 c0       	rjmp	.+18     	; 0x4478 <vfprintf+0x31a>
    4466:	a3 94       	inc	r10
    4468:	b2 fe       	sbrs	r11, 2
    446a:	06 c0       	rjmp	.+12     	; 0x4478 <vfprintf+0x31a>
    446c:	04 c0       	rjmp	.+8      	; 0x4476 <vfprintf+0x318>
    446e:	86 78       	andi	r24, 0x86	; 134
    4470:	90 70       	andi	r25, 0x00	; 0
    4472:	00 97       	sbiw	r24, 0x00	; 0
    4474:	09 f0       	breq	.+2      	; 0x4478 <vfprintf+0x31a>
    4476:	a3 94       	inc	r10
    4478:	8b 2c       	mov	r8, r11
    447a:	99 24       	eor	r9, r9
    447c:	b3 fc       	sbrc	r11, 3
    447e:	13 c0       	rjmp	.+38     	; 0x44a6 <vfprintf+0x348>
    4480:	b0 fe       	sbrs	r11, 0
    4482:	0e c0       	rjmp	.+28     	; 0x44a0 <vfprintf+0x342>
    4484:	af 14       	cp	r10, r15
    4486:	28 f4       	brcc	.+10     	; 0x4492 <vfprintf+0x334>
    4488:	e7 2c       	mov	r14, r7
    448a:	ef 0c       	add	r14, r15
    448c:	ea 18       	sub	r14, r10
    448e:	af 2c       	mov	r10, r15
    4490:	07 c0       	rjmp	.+14     	; 0x44a0 <vfprintf+0x342>
    4492:	e7 2c       	mov	r14, r7
    4494:	05 c0       	rjmp	.+10     	; 0x44a0 <vfprintf+0x342>
    4496:	80 e2       	ldi	r24, 0x20	; 32
    4498:	90 e0       	ldi	r25, 0x00	; 0
    449a:	b6 01       	movw	r22, r12
    449c:	79 d0       	rcall	.+242    	; 0x4590 <fputc>
    449e:	a3 94       	inc	r10
    44a0:	af 14       	cp	r10, r15
    44a2:	c8 f3       	brcs	.-14     	; 0x4496 <vfprintf+0x338>
    44a4:	04 c0       	rjmp	.+8      	; 0x44ae <vfprintf+0x350>
    44a6:	af 14       	cp	r10, r15
    44a8:	10 f4       	brcc	.+4      	; 0x44ae <vfprintf+0x350>
    44aa:	fa 18       	sub	r15, r10
    44ac:	01 c0       	rjmp	.+2      	; 0x44b0 <vfprintf+0x352>
    44ae:	ff 24       	eor	r15, r15
    44b0:	84 fe       	sbrs	r8, 4
    44b2:	0e c0       	rjmp	.+28     	; 0x44d0 <vfprintf+0x372>
    44b4:	80 e3       	ldi	r24, 0x30	; 48
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	b6 01       	movw	r22, r12
    44ba:	6a d0       	rcall	.+212    	; 0x4590 <fputc>
    44bc:	82 fe       	sbrs	r8, 2
    44be:	1d c0       	rjmp	.+58     	; 0x44fa <vfprintf+0x39c>
    44c0:	81 fe       	sbrs	r8, 1
    44c2:	03 c0       	rjmp	.+6      	; 0x44ca <vfprintf+0x36c>
    44c4:	88 e5       	ldi	r24, 0x58	; 88
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	10 c0       	rjmp	.+32     	; 0x44ea <vfprintf+0x38c>
    44ca:	88 e7       	ldi	r24, 0x78	; 120
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	0d c0       	rjmp	.+26     	; 0x44ea <vfprintf+0x38c>
    44d0:	c4 01       	movw	r24, r8
    44d2:	86 78       	andi	r24, 0x86	; 134
    44d4:	90 70       	andi	r25, 0x00	; 0
    44d6:	00 97       	sbiw	r24, 0x00	; 0
    44d8:	81 f0       	breq	.+32     	; 0x44fa <vfprintf+0x39c>
    44da:	81 fc       	sbrc	r8, 1
    44dc:	02 c0       	rjmp	.+4      	; 0x44e2 <vfprintf+0x384>
    44de:	80 e2       	ldi	r24, 0x20	; 32
    44e0:	01 c0       	rjmp	.+2      	; 0x44e4 <vfprintf+0x386>
    44e2:	8b e2       	ldi	r24, 0x2B	; 43
    44e4:	b7 fc       	sbrc	r11, 7
    44e6:	8d e2       	ldi	r24, 0x2D	; 45
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	b6 01       	movw	r22, r12
    44ec:	51 d0       	rcall	.+162    	; 0x4590 <fputc>
    44ee:	05 c0       	rjmp	.+10     	; 0x44fa <vfprintf+0x39c>
    44f0:	80 e3       	ldi	r24, 0x30	; 48
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	b6 01       	movw	r22, r12
    44f6:	4c d0       	rcall	.+152    	; 0x4590 <fputc>
    44f8:	ea 94       	dec	r14
    44fa:	7e 14       	cp	r7, r14
    44fc:	c8 f3       	brcs	.-14     	; 0x44f0 <vfprintf+0x392>
    44fe:	7a 94       	dec	r7
    4500:	f2 01       	movw	r30, r4
    4502:	e7 0d       	add	r30, r7
    4504:	f1 1d       	adc	r31, r1
    4506:	80 81       	ld	r24, Z
    4508:	90 e0       	ldi	r25, 0x00	; 0
    450a:	b6 01       	movw	r22, r12
    450c:	41 d0       	rcall	.+130    	; 0x4590 <fputc>
    450e:	77 20       	and	r7, r7
    4510:	b1 f7       	brne	.-20     	; 0x44fe <vfprintf+0x3a0>
    4512:	05 c0       	rjmp	.+10     	; 0x451e <vfprintf+0x3c0>
    4514:	80 e2       	ldi	r24, 0x20	; 32
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	b6 01       	movw	r22, r12
    451a:	3a d0       	rcall	.+116    	; 0x4590 <fputc>
    451c:	fa 94       	dec	r15
    451e:	ff 20       	and	r15, r15
    4520:	c9 f7       	brne	.-14     	; 0x4514 <vfprintf+0x3b6>
    4522:	44 ce       	rjmp	.-888    	; 0x41ac <vfprintf+0x4e>
    4524:	f6 01       	movw	r30, r12
    4526:	26 81       	ldd	r18, Z+6	; 0x06
    4528:	37 81       	ldd	r19, Z+7	; 0x07
    452a:	02 c0       	rjmp	.+4      	; 0x4530 <vfprintf+0x3d2>
    452c:	2f ef       	ldi	r18, 0xFF	; 255
    452e:	3f ef       	ldi	r19, 0xFF	; 255
    4530:	c9 01       	movw	r24, r18
    4532:	2c 96       	adiw	r28, 0x0c	; 12
    4534:	0f b6       	in	r0, 0x3f	; 63
    4536:	f8 94       	cli
    4538:	de bf       	out	0x3e, r29	; 62
    453a:	0f be       	out	0x3f, r0	; 63
    453c:	cd bf       	out	0x3d, r28	; 61
    453e:	cf 91       	pop	r28
    4540:	df 91       	pop	r29
    4542:	1f 91       	pop	r17
    4544:	0f 91       	pop	r16
    4546:	ff 90       	pop	r15
    4548:	ef 90       	pop	r14
    454a:	df 90       	pop	r13
    454c:	cf 90       	pop	r12
    454e:	bf 90       	pop	r11
    4550:	af 90       	pop	r10
    4552:	9f 90       	pop	r9
    4554:	8f 90       	pop	r8
    4556:	7f 90       	pop	r7
    4558:	6f 90       	pop	r6
    455a:	5f 90       	pop	r5
    455c:	4f 90       	pop	r4
    455e:	3f 90       	pop	r3
    4560:	2f 90       	pop	r2
    4562:	08 95       	ret

00004564 <strnlen_P>:
    4564:	fc 01       	movw	r30, r24
    4566:	05 90       	lpm	r0, Z+
    4568:	61 50       	subi	r22, 0x01	; 1
    456a:	70 40       	sbci	r23, 0x00	; 0
    456c:	01 10       	cpse	r0, r1
    456e:	d8 f7       	brcc	.-10     	; 0x4566 <strnlen_P+0x2>
    4570:	80 95       	com	r24
    4572:	90 95       	com	r25
    4574:	8e 0f       	add	r24, r30
    4576:	9f 1f       	adc	r25, r31
    4578:	08 95       	ret

0000457a <strnlen>:
    457a:	fc 01       	movw	r30, r24
    457c:	61 50       	subi	r22, 0x01	; 1
    457e:	70 40       	sbci	r23, 0x00	; 0
    4580:	01 90       	ld	r0, Z+
    4582:	01 10       	cpse	r0, r1
    4584:	d8 f7       	brcc	.-10     	; 0x457c <strnlen+0x2>
    4586:	80 95       	com	r24
    4588:	90 95       	com	r25
    458a:	8e 0f       	add	r24, r30
    458c:	9f 1f       	adc	r25, r31
    458e:	08 95       	ret

00004590 <fputc>:
    4590:	0f 93       	push	r16
    4592:	1f 93       	push	r17
    4594:	cf 93       	push	r28
    4596:	df 93       	push	r29
    4598:	8c 01       	movw	r16, r24
    459a:	eb 01       	movw	r28, r22
    459c:	8b 81       	ldd	r24, Y+3	; 0x03
    459e:	81 ff       	sbrs	r24, 1
    45a0:	1b c0       	rjmp	.+54     	; 0x45d8 <fputc+0x48>
    45a2:	82 ff       	sbrs	r24, 2
    45a4:	0d c0       	rjmp	.+26     	; 0x45c0 <fputc+0x30>
    45a6:	2e 81       	ldd	r18, Y+6	; 0x06
    45a8:	3f 81       	ldd	r19, Y+7	; 0x07
    45aa:	8c 81       	ldd	r24, Y+4	; 0x04
    45ac:	9d 81       	ldd	r25, Y+5	; 0x05
    45ae:	28 17       	cp	r18, r24
    45b0:	39 07       	cpc	r19, r25
    45b2:	64 f4       	brge	.+24     	; 0x45cc <fputc+0x3c>
    45b4:	e8 81       	ld	r30, Y
    45b6:	f9 81       	ldd	r31, Y+1	; 0x01
    45b8:	01 93       	st	Z+, r16
    45ba:	f9 83       	std	Y+1, r31	; 0x01
    45bc:	e8 83       	st	Y, r30
    45be:	06 c0       	rjmp	.+12     	; 0x45cc <fputc+0x3c>
    45c0:	e8 85       	ldd	r30, Y+8	; 0x08
    45c2:	f9 85       	ldd	r31, Y+9	; 0x09
    45c4:	80 2f       	mov	r24, r16
    45c6:	09 95       	icall
    45c8:	00 97       	sbiw	r24, 0x00	; 0
    45ca:	31 f4       	brne	.+12     	; 0x45d8 <fputc+0x48>
    45cc:	8e 81       	ldd	r24, Y+6	; 0x06
    45ce:	9f 81       	ldd	r25, Y+7	; 0x07
    45d0:	01 96       	adiw	r24, 0x01	; 1
    45d2:	9f 83       	std	Y+7, r25	; 0x07
    45d4:	8e 83       	std	Y+6, r24	; 0x06
    45d6:	02 c0       	rjmp	.+4      	; 0x45dc <fputc+0x4c>
    45d8:	0f ef       	ldi	r16, 0xFF	; 255
    45da:	1f ef       	ldi	r17, 0xFF	; 255
    45dc:	c8 01       	movw	r24, r16
    45de:	df 91       	pop	r29
    45e0:	cf 91       	pop	r28
    45e2:	1f 91       	pop	r17
    45e4:	0f 91       	pop	r16
    45e6:	08 95       	ret

000045e8 <__ultoa_invert>:
    45e8:	fa 01       	movw	r30, r20
    45ea:	aa 27       	eor	r26, r26
    45ec:	28 30       	cpi	r18, 0x08	; 8
    45ee:	51 f1       	breq	.+84     	; 0x4644 <__ultoa_invert+0x5c>
    45f0:	20 31       	cpi	r18, 0x10	; 16
    45f2:	81 f1       	breq	.+96     	; 0x4654 <__ultoa_invert+0x6c>
    45f4:	e8 94       	clt
    45f6:	6f 93       	push	r22
    45f8:	6e 7f       	andi	r22, 0xFE	; 254
    45fa:	6e 5f       	subi	r22, 0xFE	; 254
    45fc:	7f 4f       	sbci	r23, 0xFF	; 255
    45fe:	8f 4f       	sbci	r24, 0xFF	; 255
    4600:	9f 4f       	sbci	r25, 0xFF	; 255
    4602:	af 4f       	sbci	r26, 0xFF	; 255
    4604:	b1 e0       	ldi	r27, 0x01	; 1
    4606:	3e d0       	rcall	.+124    	; 0x4684 <__ultoa_invert+0x9c>
    4608:	b4 e0       	ldi	r27, 0x04	; 4
    460a:	3c d0       	rcall	.+120    	; 0x4684 <__ultoa_invert+0x9c>
    460c:	67 0f       	add	r22, r23
    460e:	78 1f       	adc	r23, r24
    4610:	89 1f       	adc	r24, r25
    4612:	9a 1f       	adc	r25, r26
    4614:	a1 1d       	adc	r26, r1
    4616:	68 0f       	add	r22, r24
    4618:	79 1f       	adc	r23, r25
    461a:	8a 1f       	adc	r24, r26
    461c:	91 1d       	adc	r25, r1
    461e:	a1 1d       	adc	r26, r1
    4620:	6a 0f       	add	r22, r26
    4622:	71 1d       	adc	r23, r1
    4624:	81 1d       	adc	r24, r1
    4626:	91 1d       	adc	r25, r1
    4628:	a1 1d       	adc	r26, r1
    462a:	20 d0       	rcall	.+64     	; 0x466c <__ultoa_invert+0x84>
    462c:	09 f4       	brne	.+2      	; 0x4630 <__ultoa_invert+0x48>
    462e:	68 94       	set
    4630:	3f 91       	pop	r19
    4632:	2a e0       	ldi	r18, 0x0A	; 10
    4634:	26 9f       	mul	r18, r22
    4636:	11 24       	eor	r1, r1
    4638:	30 19       	sub	r19, r0
    463a:	30 5d       	subi	r19, 0xD0	; 208
    463c:	31 93       	st	Z+, r19
    463e:	de f6       	brtc	.-74     	; 0x45f6 <__ultoa_invert+0xe>
    4640:	cf 01       	movw	r24, r30
    4642:	08 95       	ret
    4644:	46 2f       	mov	r20, r22
    4646:	47 70       	andi	r20, 0x07	; 7
    4648:	40 5d       	subi	r20, 0xD0	; 208
    464a:	41 93       	st	Z+, r20
    464c:	b3 e0       	ldi	r27, 0x03	; 3
    464e:	0f d0       	rcall	.+30     	; 0x466e <__ultoa_invert+0x86>
    4650:	c9 f7       	brne	.-14     	; 0x4644 <__ultoa_invert+0x5c>
    4652:	f6 cf       	rjmp	.-20     	; 0x4640 <__ultoa_invert+0x58>
    4654:	46 2f       	mov	r20, r22
    4656:	4f 70       	andi	r20, 0x0F	; 15
    4658:	40 5d       	subi	r20, 0xD0	; 208
    465a:	4a 33       	cpi	r20, 0x3A	; 58
    465c:	18 f0       	brcs	.+6      	; 0x4664 <__ultoa_invert+0x7c>
    465e:	49 5d       	subi	r20, 0xD9	; 217
    4660:	31 fd       	sbrc	r19, 1
    4662:	40 52       	subi	r20, 0x20	; 32
    4664:	41 93       	st	Z+, r20
    4666:	02 d0       	rcall	.+4      	; 0x466c <__ultoa_invert+0x84>
    4668:	a9 f7       	brne	.-22     	; 0x4654 <__ultoa_invert+0x6c>
    466a:	ea cf       	rjmp	.-44     	; 0x4640 <__ultoa_invert+0x58>
    466c:	b4 e0       	ldi	r27, 0x04	; 4
    466e:	a6 95       	lsr	r26
    4670:	97 95       	ror	r25
    4672:	87 95       	ror	r24
    4674:	77 95       	ror	r23
    4676:	67 95       	ror	r22
    4678:	ba 95       	dec	r27
    467a:	c9 f7       	brne	.-14     	; 0x466e <__ultoa_invert+0x86>
    467c:	00 97       	sbiw	r24, 0x00	; 0
    467e:	61 05       	cpc	r22, r1
    4680:	71 05       	cpc	r23, r1
    4682:	08 95       	ret
    4684:	9b 01       	movw	r18, r22
    4686:	ac 01       	movw	r20, r24
    4688:	0a 2e       	mov	r0, r26
    468a:	06 94       	lsr	r0
    468c:	57 95       	ror	r21
    468e:	47 95       	ror	r20
    4690:	37 95       	ror	r19
    4692:	27 95       	ror	r18
    4694:	ba 95       	dec	r27
    4696:	c9 f7       	brne	.-14     	; 0x468a <__ultoa_invert+0xa2>
    4698:	62 0f       	add	r22, r18
    469a:	73 1f       	adc	r23, r19
    469c:	84 1f       	adc	r24, r20
    469e:	95 1f       	adc	r25, r21
    46a0:	a0 1d       	adc	r26, r0
    46a2:	08 95       	ret

000046a4 <_exit>:
    46a4:	f8 94       	cli

000046a6 <__stop_program>:
    46a6:	ff cf       	rjmp	.-2      	; 0x46a6 <__stop_program>
