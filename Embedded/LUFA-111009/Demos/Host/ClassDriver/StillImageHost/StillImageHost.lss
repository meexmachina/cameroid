
StillImageHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00001ede  00001f72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ede  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800124  00800124  00001f96  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  00001f98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000342  00000000  00000000  00002f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000748  00000000  00000000  0000326a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000102b  00000000  00000000  000039b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000c37a  00000000  00000000  000049dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002ce3  00000000  00000000  00010d57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00009f39  00000000  00000000  00013a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b90  00000000  00000000  0001d974  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000486a  00000000  00000000  0001e504  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007bf7  00000000  00000000  00022d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001c3a  00000000  00000000  0002a965  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ae8  00000000  00000000  0002c59f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
       0:	64 c1       	rjmp	.+712    	; 0x2ca <__ctors_end>
       2:	00 00       	nop
       4:	80 c1       	rjmp	.+768    	; 0x306 <__bad_interrupt>
       6:	00 00       	nop
       8:	7e c1       	rjmp	.+764    	; 0x306 <__bad_interrupt>
       a:	00 00       	nop
       c:	7c c1       	rjmp	.+760    	; 0x306 <__bad_interrupt>
       e:	00 00       	nop
      10:	7a c1       	rjmp	.+756    	; 0x306 <__bad_interrupt>
      12:	00 00       	nop
      14:	78 c1       	rjmp	.+752    	; 0x306 <__bad_interrupt>
      16:	00 00       	nop
      18:	76 c1       	rjmp	.+748    	; 0x306 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	74 c1       	rjmp	.+744    	; 0x306 <__bad_interrupt>
      1e:	00 00       	nop
      20:	72 c1       	rjmp	.+740    	; 0x306 <__bad_interrupt>
      22:	00 00       	nop
      24:	70 c1       	rjmp	.+736    	; 0x306 <__bad_interrupt>
      26:	00 00       	nop
      28:	a0 c5       	rjmp	.+2880   	; 0xb6a <__vector_10>
      2a:	00 00       	nop
      2c:	6c c1       	rjmp	.+728    	; 0x306 <__bad_interrupt>
      2e:	00 00       	nop
      30:	6a c1       	rjmp	.+724    	; 0x306 <__bad_interrupt>
      32:	00 00       	nop
      34:	68 c1       	rjmp	.+720    	; 0x306 <__bad_interrupt>
      36:	00 00       	nop
      38:	66 c1       	rjmp	.+716    	; 0x306 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	64 c1       	rjmp	.+712    	; 0x306 <__bad_interrupt>
      3e:	00 00       	nop
      40:	62 c1       	rjmp	.+708    	; 0x306 <__bad_interrupt>
      42:	00 00       	nop
      44:	60 c1       	rjmp	.+704    	; 0x306 <__bad_interrupt>
      46:	00 00       	nop
      48:	5e c1       	rjmp	.+700    	; 0x306 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5c c1       	rjmp	.+696    	; 0x306 <__bad_interrupt>
      4e:	00 00       	nop
      50:	5a c1       	rjmp	.+692    	; 0x306 <__bad_interrupt>
      52:	00 00       	nop
      54:	58 c1       	rjmp	.+688    	; 0x306 <__bad_interrupt>
      56:	00 00       	nop
      58:	56 c1       	rjmp	.+684    	; 0x306 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	54 c1       	rjmp	.+680    	; 0x306 <__bad_interrupt>
      5e:	00 00       	nop
      60:	52 c1       	rjmp	.+676    	; 0x306 <__bad_interrupt>
      62:	00 00       	nop
      64:	50 c1       	rjmp	.+672    	; 0x306 <__bad_interrupt>
      66:	00 00       	nop
      68:	4e c1       	rjmp	.+668    	; 0x306 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4c c1       	rjmp	.+664    	; 0x306 <__bad_interrupt>
      6e:	00 00       	nop
      70:	4a c1       	rjmp	.+660    	; 0x306 <__bad_interrupt>
      72:	00 00       	nop
      74:	48 c1       	rjmp	.+656    	; 0x306 <__bad_interrupt>
      76:	00 00       	nop
      78:	46 c1       	rjmp	.+652    	; 0x306 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	44 c1       	rjmp	.+648    	; 0x306 <__bad_interrupt>
      7e:	00 00       	nop
      80:	42 c1       	rjmp	.+644    	; 0x306 <__bad_interrupt>
      82:	00 00       	nop
      84:	40 c1       	rjmp	.+640    	; 0x306 <__bad_interrupt>
      86:	00 00       	nop
      88:	3e c1       	rjmp	.+636    	; 0x306 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3c c1       	rjmp	.+632    	; 0x306 <__bad_interrupt>
      8e:	00 00       	nop
      90:	3a c1       	rjmp	.+628    	; 0x306 <__bad_interrupt>
      92:	00 00       	nop
      94:	38 c1       	rjmp	.+624    	; 0x306 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4035>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.4028>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.4023>:
     11d:	53 74 69 6c 6c 20 49 6d 61 67 65 20 44 65 76 69     Still Image Devi
     12d:	63 65 20 45 6e 75 6d 65 72 61 74 65 64 2e 0d 0a     ce Enumerated...
     13d:	00                                                  .

0000013e <__c.4021>:
     13e:	45 72 72 6f 72 20 53 65 74 74 69 6e 67 20 44 65     Error Setting De
     14e:	76 69 63 65 20 43 6f 6e 66 69 67 75 72 61 74 69     vice Configurati
     15e:	6f 6e 2e 0d 0a 00                                   on....

00000164 <__c.4019>:
     164:	41 74 74 61 63 68 65 64 20 44 65 76 69 63 65 20     Attached Device 
     174:	4e 6f 74 20 61 20 56 61 6c 69 64 20 53 74 69 6c     Not a Valid Stil
     184:	6c 20 49 6d 61 67 65 20 43 6c 61 73 73 20 44 65     l Image Class De
     194:	76 69 63 65 2e 0d 0a 00                             vice....

0000019c <__c.4017>:
     19c:	45 72 72 6f 72 20 52 65 74 72 69 65 76 69 6e 67     Error Retrieving
     1ac:	20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e 20 44      Configuration D
     1bc:	65 73 63 72 69 70 74 6f 72 2e 0d 0a 00              escriptor....

000001c9 <__c.4010>:
     1c9:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     1d9:	68 65 64 2e 0d 0a 00                                hed....

000001e0 <__c.4005>:
     1e0:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     1f0:	0d 0a 00                                            ...

000001f3 <__c.4000>:
     1f3:	43 6f 75 6c 64 20 6e 6f 74 20 63 6c 6f 73 65 20     Could not close 
     203:	50 49 4d 41 20 73 65 73 73 69 6f 6e 2e 0d 0a 00     PIMA session....

00000213 <__c.3998>:
     213:	43 6c 6f 73 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Closing Session.
     223:	2e 2e 0d 0a 00                                      .....

00000228 <__c.3996>:
     228:	44 65 76 69 63 65 20 4f 66 66 2e 0d 0a 00           Device Off....

00000236 <__c.3994>:
     236:	43 6f 75 6c 64 20 6e 6f 74 20 74 75 72 6e 20 6f     Could not turn o
     246:	66 66 20 64 65 76 69 63 65 2e 0d 0a 00              ff device....

00000253 <__c.3992>:
     253:	54 75 72 6e 69 6e 67 20 6f 66 66 20 44 65 76 69     Turning off Devi
     263:	63 65 2e 2e 2e 0d 0a 00                             ce......

0000026b <__c.3990>:
     26b:	43 6f 75 6c 64 20 6e 6f 74 20 6f 70 65 6e 20 50     Could not open P
     27b:	49 4d 41 20 73 65 73 73 69 6f 6e 2e 0d 0a 00        IMA session....

0000028a <__c.3988>:
     28a:	4f 70 65 6e 69 6e 67 20 53 65 73 73 69 6f 6e 2e     Opening Session.
     29a:	2e 2e 0d 0a 00                                      .....

0000029f <__c.3979>:
     29f:	1b 5b 33 36 6d 53 74 69 6c 6c 20 49 6d 61 67 65     .[36mStill Image
     2af:	20 48 6f 73 74 20 44 65 6d 6f 20 72 75 6e 6e 69      Host Demo runni
     2bf:	6e 67 2e 0d 0a 1b 5b 33 37 6d 00                    ng....[37m.

000002ca <__ctors_end>:
     2ca:	11 24       	eor	r1, r1
     2cc:	1f be       	out	0x3f, r1	; 63
     2ce:	cf ef       	ldi	r28, 0xFF	; 255
     2d0:	d0 e2       	ldi	r29, 0x20	; 32
     2d2:	de bf       	out	0x3e, r29	; 62
     2d4:	cd bf       	out	0x3d, r28	; 61

000002d6 <__do_copy_data>:
     2d6:	11 e0       	ldi	r17, 0x01	; 1
     2d8:	a0 e0       	ldi	r26, 0x00	; 0
     2da:	b1 e0       	ldi	r27, 0x01	; 1
     2dc:	ee ed       	ldi	r30, 0xDE	; 222
     2de:	fe e1       	ldi	r31, 0x1E	; 30
     2e0:	00 e0       	ldi	r16, 0x00	; 0
     2e2:	0b bf       	out	0x3b, r16	; 59
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <__do_copy_data+0x14>
     2e6:	07 90       	elpm	r0, Z+
     2e8:	0d 92       	st	X+, r0
     2ea:	a4 32       	cpi	r26, 0x24	; 36
     2ec:	b1 07       	cpc	r27, r17
     2ee:	d9 f7       	brne	.-10     	; 0x2e6 <__do_copy_data+0x10>

000002f0 <__do_clear_bss>:
     2f0:	11 e0       	ldi	r17, 0x01	; 1
     2f2:	a4 e2       	ldi	r26, 0x24	; 36
     2f4:	b1 e0       	ldi	r27, 0x01	; 1
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <.do_clear_bss_start>

000002f8 <.do_clear_bss_loop>:
     2f8:	1d 92       	st	X+, r1

000002fa <.do_clear_bss_start>:
     2fa:	a6 34       	cpi	r26, 0x46	; 70
     2fc:	b1 07       	cpc	r27, r17
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <.do_clear_bss_loop>
     300:	84 d0       	rcall	.+264    	; 0x40a <main>
     302:	0c 94 6d 0f 	jmp	0x1eda	; 0x1eda <_exit>

00000306 <__bad_interrupt>:
     306:	7c ce       	rjmp	.-776    	; 0x0 <__vectors>

00000308 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     308:	84 b7       	in	r24, 0x34	; 52
     30a:	87 7f       	andi	r24, 0xF7	; 247
     30c:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     30e:	28 e1       	ldi	r18, 0x18	; 24
     310:	0f b6       	in	r0, 0x3f	; 63
     312:	f8 94       	cli
     314:	20 93 60 00 	sts	0x0060, r18
     318:	10 92 60 00 	sts	0x0060, r1
     31c:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	80 e8       	ldi	r24, 0x80	; 128
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	f8 94       	cli
     326:	80 93 61 00 	sts	0x0061, r24
     32a:	90 93 61 00 	sts	0x0061, r25
     32e:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     330:	87 e6       	ldi	r24, 0x67	; 103
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	90 93 cd 00 	sts	0x00CD, r25
     338:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     33c:	86 e0       	ldi	r24, 0x06	; 6
     33e:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     342:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     346:	20 93 c9 00 	sts	0x00C9, r18

				DDRD  |= (1 << 3);
     34a:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     34c:	5a 9a       	sbi	0x0b, 2	; 11
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     34e:	f7 d3       	rcall	.+2030   	; 0xb3e <USB_Init>
			static inline void Serial_CreateStream(FILE* Stream)
			{
				if (!(Stream))
				{
					Stream = &USARTSerialStream;
					stdin  = Stream;
     350:	e2 e3       	ldi	r30, 0x32	; 50
     352:	f1 e0       	ldi	r31, 0x01	; 1
     354:	f0 93 41 01 	sts	0x0141, r31
     358:	e0 93 40 01 	sts	0x0140, r30
					stdout = Stream;
     35c:	f0 93 43 01 	sts	0x0143, r31
     360:	e0 93 42 01 	sts	0x0142, r30
				}
			
				*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
     364:	8e e0       	ldi	r24, 0x0E	; 14
     366:	df 01       	movw	r26, r30
     368:	1d 92       	st	X+, r1
     36a:	8a 95       	dec	r24
     36c:	e9 f7       	brne	.-6      	; 0x368 <SetupHardware+0x60>
     36e:	83 e0       	ldi	r24, 0x03	; 3
     370:	80 93 35 01 	sts	0x0135, r24
     374:	8e e4       	ldi	r24, 0x4E	; 78
     376:	9c e0       	ldi	r25, 0x0C	; 12
     378:	90 93 3b 01 	sts	0x013B, r25
     37c:	80 93 3a 01 	sts	0x013A, r24
     380:	87 e5       	ldi	r24, 0x57	; 87
     382:	9c e0       	ldi	r25, 0x0C	; 12
     384:	90 93 3d 01 	sts	0x013D, r25
     388:	80 93 3c 01 	sts	0x013C, r24

	/* Create a stdio stream for the serial port for stdin and stdout */
	Serial_CreateStream(NULL);
}
     38c:	08 95       	ret

0000038e <StillImageHost_Task>:
/** Task to manage an enumerated USB Still Image device once connected, to manage a
 *  new PIMA session in order to send commands to the attached device.
 */
void StillImageHost_Task(void)
{
	if (USB_HostState != HOST_STATE_Configured)
     38e:	80 91 31 01 	lds	r24, 0x0131
     392:	8b 30       	cpi	r24, 0x0B	; 11
     394:	c9 f5       	brne	.+114    	; 0x408 <StillImageHost_Task+0x7a>
	  return;

	puts_P(PSTR("Opening Session...\r\n"));
     396:	8a e8       	ldi	r24, 0x8A	; 138
     398:	92 e0       	ldi	r25, 0x02	; 2
     39a:	0e 94 92 0c 	call	0x1924	; 0x1924 <puts_P>

	if (SI_Host_OpenSession(&DigitalCamera_SI_Interface) != PIPE_RWSTREAM_NoError)
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <SI_Host_OpenSession>
     3a6:	88 23       	and	r24, r24
     3a8:	19 f0       	breq	.+6      	; 0x3b0 <StillImageHost_Task+0x22>
	{
		puts_P(PSTR("Could not open PIMA session.\r\n"));
     3aa:	8b e6       	ldi	r24, 0x6B	; 107
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	26 c0       	rjmp	.+76     	; 0x3fc <StillImageHost_Task+0x6e>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Turning off Device...\r\n"));
     3b0:	83 e5       	ldi	r24, 0x53	; 83
     3b2:	92 e0       	ldi	r25, 0x02	; 2
     3b4:	0e 94 92 0c 	call	0x1924	; 0x1924 <puts_P>

	SI_Host_SendCommand(&DigitalCamera_SI_Interface, 0x90C0, 0, NULL);
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	91 e0       	ldi	r25, 0x01	; 1
     3bc:	60 ec       	ldi	r22, 0xC0	; 192
     3be:	70 e9       	ldi	r23, 0x90	; 144
     3c0:	40 e0       	ldi	r20, 0x00	; 0
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	0e 94 c2 0b 	call	0x1784	; 0x1784 <SI_Host_SendCommand>
	if (SI_Host_ReceiveResponse(&DigitalCamera_SI_Interface))
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	0e 94 1e 0c 	call	0x183c	; 0x183c <SI_Host_ReceiveResponse>
     3d2:	88 23       	and	r24, r24
     3d4:	19 f0       	breq	.+6      	; 0x3dc <StillImageHost_Task+0x4e>
	{
		puts_P(PSTR("Could not turn off device.\r\n"));
     3d6:	86 e3       	ldi	r24, 0x36	; 54
     3d8:	92 e0       	ldi	r25, 0x02	; 2
     3da:	10 c0       	rjmp	.+32     	; 0x3fc <StillImageHost_Task+0x6e>
		USB_Host_SetDeviceConfiguration(0);
		return;
	}

	puts_P(PSTR("Device Off.\r\n"));
     3dc:	88 e2       	ldi	r24, 0x28	; 40
     3de:	92 e0       	ldi	r25, 0x02	; 2
     3e0:	0e 94 92 0c 	call	0x1924	; 0x1924 <puts_P>

	puts_P(PSTR("Closing Session...\r\n"));
     3e4:	83 e1       	ldi	r24, 0x13	; 19
     3e6:	92 e0       	ldi	r25, 0x02	; 2
     3e8:	0e 94 92 0c 	call	0x1924	; 0x1924 <puts_P>

	if (SI_Host_CloseSession(&DigitalCamera_SI_Interface) != PIPE_RWSTREAM_NoError)
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <SI_Host_CloseSession>
     3f4:	88 23       	and	r24, r24
     3f6:	31 f0       	breq	.+12     	; 0x404 <StillImageHost_Task+0x76>
	{
		puts_P(PSTR("Could not close PIMA session.\r\n"));
     3f8:	83 ef       	ldi	r24, 0xF3	; 243
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	0e 94 92 0c 	call	0x1924	; 0x1924 <puts_P>
		USB_Host_SetDeviceConfiguration(0);
     400:	80 e0       	ldi	r24, 0x00	; 0
		return;
     402:	cf c6       	rjmp	.+3486   	; 0x11a2 <USB_Host_SetDeviceConfiguration>
	}

	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	USB_Host_SetDeviceConfiguration(0);
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	cd c6       	rjmp	.+3482   	; 0x11a2 <USB_Host_SetDeviceConfiguration>
     408:	08 95       	ret

0000040a <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
	SetupHardware();
     40a:	7e df       	rcall	.-260    	; 0x308 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "Still Image Host Demo running.\r\n" ESC_FG_WHITE));
     40c:	8f e9       	ldi	r24, 0x9F	; 159
     40e:	92 e0       	ldi	r25, 0x02	; 2
     410:	0e 94 92 0c 	call	0x1924	; 0x1924 <puts_P>

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	sei();
     414:	78 94       	sei

	for (;;)
	{
		StillImageHost_Task();
     416:	bb df       	rcall	.-138    	; 0x38e <StillImageHost_Task>
		
		SI_Host_USBTask(&DigitalCamera_SI_Interface);
		USB_USBTask();
     418:	00 d7       	rcall	.+3584   	; 0x121a <USB_USBTask>
     41a:	fd cf       	rjmp	.-6      	; 0x416 <main+0xc>

0000041c <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     41c:	80 ee       	ldi	r24, 0xE0	; 224
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <puts_P>

00000424 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     424:	89 ec       	ldi	r24, 0xC9	; 201
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	0c 94 92 0c 	jmp	0x1924	; 0x1924 <puts_P>

0000042c <EVENT_USB_Host_DeviceEnumerationComplete>:

/** Event handler for the USB_DeviceEnumerationComplete event. This indicates that a device has been successfully
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	df 93       	push	r29
     432:	cf 93       	push	r28
     434:	cd b7       	in	r28, 0x3d	; 61
     436:	de b7       	in	r29, 0x3e	; 62
     438:	c2 50       	subi	r28, 0x02	; 2
     43a:	d2 40       	sbci	r29, 0x02	; 2
     43c:	0f b6       	in	r0, 0x3f	; 63
     43e:	f8 94       	cli
     440:	de bf       	out	0x3e, r29	; 62
     442:	0f be       	out	0x3f, r0	; 63
     444:	cd bf       	out	0x3d, r28	; 61
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);

	uint16_t ConfigDescriptorSize;
	uint8_t  ConfigDescriptorData[512];

	if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     446:	8e 01       	movw	r16, r28
     448:	0d 5f       	subi	r16, 0xFD	; 253
     44a:	1f 4f       	sbci	r17, 0xFF	; 255
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	6f 5f       	subi	r22, 0xFF	; 255
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	a8 01       	movw	r20, r16
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	32 e0       	ldi	r19, 0x02	; 2
     45a:	e0 d4       	rcall	.+2496   	; 0xe1c <USB_Host_GetDeviceConfigDescriptor>
     45c:	88 23       	and	r24, r24
     45e:	19 f0       	breq	.+6      	; 0x466 <EVENT_USB_Host_DeviceEnumerationComplete+0x3a>
	                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
	{
		puts_P(PSTR("Error Retrieving Configuration Descriptor.\r\n"));
     460:	8c e9       	ldi	r24, 0x9C	; 156
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	14 c0       	rjmp	.+40     	; 0x48e <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (SI_Host_ConfigurePipes(&DigitalCamera_SI_Interface,
     466:	69 81       	ldd	r22, Y+1	; 0x01
     468:	7a 81       	ldd	r23, Y+2	; 0x02
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	a8 01       	movw	r20, r16
     470:	09 d7       	rcall	.+3602   	; 0x1284 <SI_Host_ConfigurePipes>
     472:	88 23       	and	r24, r24
     474:	19 f0       	breq	.+6      	; 0x47c <EVENT_USB_Host_DeviceEnumerationComplete+0x50>
	                           ConfigDescriptorSize, ConfigDescriptorData) != SI_ENUMERROR_NoError)
	{
		puts_P(PSTR("Attached Device Not a Valid Still Image Class Device.\r\n"));
     476:	84 e6       	ldi	r24, 0x64	; 100
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	09 c0       	rjmp	.+18     	; 0x48e <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	91 d6       	rcall	.+3362   	; 0x11a2 <USB_Host_SetDeviceConfiguration>
     480:	88 23       	and	r24, r24
     482:	19 f0       	breq	.+6      	; 0x48a <EVENT_USB_Host_DeviceEnumerationComplete+0x5e>
	{
		puts_P(PSTR("Error Setting Device Configuration.\r\n"));
     484:	8e e3       	ldi	r24, 0x3E	; 62
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	02 c0       	rjmp	.+4      	; 0x48e <EVENT_USB_Host_DeviceEnumerationComplete+0x62>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		return;
	}

	puts_P(PSTR("Still Image Device Enumerated.\r\n"));
     48a:	8d e1       	ldi	r24, 0x1D	; 29
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	0e 94 92 0c 	call	0x1924	; 0x1924 <puts_P>
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     492:	ce 5f       	subi	r28, 0xFE	; 254
     494:	dd 4f       	sbci	r29, 0xFD	; 253
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	cd bf       	out	0x3d, r28	; 61
     4a0:	cf 91       	pop	r28
     4a2:	df 91       	pop	r29
     4a4:	1f 91       	pop	r17
     4a6:	0f 91       	pop	r16
     4a8:	08 95       	ret

000004aa <EVENT_USB_Host_HostError>:

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     4aa:	df 93       	push	r29
     4ac:	cf 93       	push	r28
     4ae:	0f 92       	push	r0
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
	USB_Disable();
     4b4:	89 83       	std	Y+1, r24	; 0x01
     4b6:	db d2       	rcall	.+1462   	; 0xa6e <USB_Disable>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     4b8:	00 d0       	rcall	.+0      	; 0x4ba <EVENT_USB_Host_HostError+0x10>
     4ba:	00 d0       	rcall	.+0      	; 0x4bc <EVENT_USB_Host_HostError+0x12>
     4bc:	ed b7       	in	r30, 0x3d	; 61
     4be:	fe b7       	in	r31, 0x3e	; 62
     4c0:	31 96       	adiw	r30, 0x01	; 1
     4c2:	2e ee       	ldi	r18, 0xEE	; 238
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	ad b7       	in	r26, 0x3d	; 61
     4c8:	be b7       	in	r27, 0x3e	; 62
     4ca:	12 96       	adiw	r26, 0x02	; 2
     4cc:	3c 93       	st	X, r19
     4ce:	2e 93       	st	-X, r18
     4d0:	11 97       	sbiw	r26, 0x01	; 1
     4d2:	89 81       	ldd	r24, Y+1	; 0x01
     4d4:	82 83       	std	Z+2, r24	; 0x02
     4d6:	13 82       	std	Z+3, r1	; 0x03
     4d8:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <printf_P>
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	ff cf       	rjmp	.-2      	; 0x4e4 <EVENT_USB_Host_HostError+0x3a>

000004e6 <EVENT_USB_Host_DeviceEnumerationFailed>:
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode,
                                            const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     4e6:	90 91 31 01 	lds	r25, 0x0131
     4ea:	2d b7       	in	r18, 0x3d	; 61
     4ec:	3e b7       	in	r19, 0x3e	; 62
     4ee:	28 50       	subi	r18, 0x08	; 8
     4f0:	30 40       	sbci	r19, 0x00	; 0
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	3e bf       	out	0x3e, r19	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	2d bf       	out	0x3d, r18	; 61
     4fc:	ed b7       	in	r30, 0x3d	; 61
     4fe:	fe b7       	in	r31, 0x3e	; 62
     500:	31 96       	adiw	r30, 0x01	; 1
     502:	28 e9       	ldi	r18, 0x98	; 152
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	ad b7       	in	r26, 0x3d	; 61
     508:	be b7       	in	r27, 0x3e	; 62
     50a:	12 96       	adiw	r26, 0x02	; 2
     50c:	3c 93       	st	X, r19
     50e:	2e 93       	st	-X, r18
     510:	11 97       	sbiw	r26, 0x01	; 1
     512:	82 83       	std	Z+2, r24	; 0x02
     514:	13 82       	std	Z+3, r1	; 0x03
     516:	64 83       	std	Z+4, r22	; 0x04
     518:	15 82       	std	Z+5, r1	; 0x05
     51a:	96 83       	std	Z+6, r25	; 0x06
     51c:	17 82       	std	Z+7, r1	; 0x07
     51e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <printf_P>
     522:	2d b7       	in	r18, 0x3d	; 61
     524:	3e b7       	in	r19, 0x3e	; 62
     526:	28 5f       	subi	r18, 0xF8	; 248
     528:	3f 4f       	sbci	r19, 0xFF	; 255
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	f8 94       	cli
     52e:	3e bf       	out	0x3e, r19	; 62
     530:	0f be       	out	0x3f, r0	; 63
     532:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);

	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     534:	08 95       	ret

00000536 <USB_Host_ResetDevice>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     536:	80 91 9e 00 	lds	r24, 0x009E
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	81 70       	andi	r24, 0x01	; 1
     53e:	90 70       	andi	r25, 0x00	; 0
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     540:	20 91 a0 00 	lds	r18, 0x00A0
     544:	2d 7f       	andi	r18, 0xFD	; 253
     546:	20 93 a0 00 	sts	0x00A0, r18
			 *  woken up automatically and the bus resumed after the reset has been correctly issued.
			 */
			static inline void USB_Host_ResetBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResetBus(void)
			{
				UHCON |=  (1 << RESET);
     54a:	20 91 9e 00 	lds	r18, 0x009E
     54e:	22 60       	ori	r18, 0x02	; 2
     550:	20 93 9e 00 	sts	0x009E, r18
			 *  \return Boolean \c true if no bus reset is currently being sent, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusResetComplete(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusResetComplete(void)
			{
				return ((UHCON & (1 << RESET)) ? false : true);
     554:	20 91 9e 00 	lds	r18, 0x009E
	bool BusSuspended = USB_Host_IsBusSuspended();

	USB_INT_Disable(USB_INT_DDISCI);

	USB_Host_ResetBus();
	while (!(USB_Host_IsBusResetComplete()));
     558:	21 fd       	sbrc	r18, 1
     55a:	fc cf       	rjmp	.-8      	; 0x554 <USB_Host_ResetDevice+0x1e>
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     55c:	20 91 9e 00 	lds	r18, 0x009E
     560:	21 60       	ori	r18, 0x01	; 1
     562:	20 93 9e 00 	sts	0x009E, r18
	USB_Host_ResumeBus();
	
	USB_Host_ConfigurationNumber = 0;
     566:	10 92 27 01 	sts	0x0127, r1
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     56a:	20 91 a0 00 	lds	r18, 0x00A0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	20 72       	andi	r18, 0x20	; 32
     572:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     574:	40 91 a0 00 	lds	r20, 0x00A0
     578:	4f 7d       	andi	r20, 0xDF	; 223
     57a:	40 93 a0 00 	sts	0x00A0, r20
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     57e:	40 91 9f 00 	lds	r20, 0x009F
     582:	4f 7d       	andi	r20, 0xDF	; 223
     584:	40 93 9f 00 	sts	0x009F, r20
     588:	4a e0       	ldi	r20, 0x0A	; 10
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     58a:	50 91 9f 00 	lds	r21, 0x009F
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     58e:	55 ff       	sbrs	r21, 5
     590:	0b c0       	rjmp	.+22     	; 0x5a8 <USB_Host_ResetDevice+0x72>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     592:	40 91 9f 00 	lds	r20, 0x009F
     596:	4f 7d       	andi	r20, 0xDF	; 223
     598:	40 93 9f 00 	sts	0x009F, r20
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     59c:	40 91 9f 00 	lds	r20, 0x009F
     5a0:	4d 7f       	andi	r20, 0xFD	; 253
     5a2:	40 93 9f 00 	sts	0x009F, r20
     5a6:	08 c0       	rjmp	.+16     	; 0x5b8 <USB_Host_ResetDevice+0x82>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5a8:	ef e9       	ldi	r30, 0x9F	; 159
     5aa:	ff e0       	ldi	r31, 0x0F	; 15
     5ac:	31 97       	sbiw	r30, 0x01	; 1
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <USB_Host_ResetDevice+0x76>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <USB_Host_ResetDevice+0x7c>
     5b2:	00 00       	nop
     5b4:	41 50       	subi	r20, 0x01	; 1
	bool HSOFIEnabled = USB_INT_IsEnabled(USB_INT_HSOFI);

	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     5b6:	49 f7       	brne	.-46     	; 0x58a <USB_Host_ResetDevice+0x54>
		}

		Delay_MS(1);
	}

	if (HSOFIEnabled)
     5b8:	21 15       	cp	r18, r1
     5ba:	31 05       	cpc	r19, r1
     5bc:	29 f0       	breq	.+10     	; 0x5c8 <USB_Host_ResetDevice+0x92>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     5be:	20 91 a0 00 	lds	r18, 0x00A0
     5c2:	20 62       	ori	r18, 0x20	; 32
     5c4:	20 93 a0 00 	sts	0x00A0, r18
	  USB_INT_Enable(USB_INT_HSOFI);

	if (BusSuspended)
     5c8:	00 97       	sbiw	r24, 0x00	; 0
     5ca:	29 f4       	brne	.+10     	; 0x5d6 <USB_Host_ResetDevice+0xa0>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     5cc:	80 91 9e 00 	lds	r24, 0x009E
     5d0:	8e 7f       	andi	r24, 0xFE	; 254
     5d2:	80 93 9e 00 	sts	0x009E, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     5d6:	80 91 a0 00 	lds	r24, 0x00A0
     5da:	82 60       	ori	r24, 0x02	; 2
     5dc:	80 93 a0 00 	sts	0x00A0, r24
	  USB_Host_SuspendBus();

	USB_INT_Enable(USB_INT_DDISCI);
}
     5e0:	08 95       	ret

000005e2 <USB_Host_WaitMS>:
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     5e2:	40 91 9e 00 	lds	r20, 0x009E
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	41 70       	andi	r20, 0x01	; 1
     5ea:	50 70       	andi	r21, 0x00	; 0
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     5ec:	20 91 a0 00 	lds	r18, 0x00A0
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	20 72       	andi	r18, 0x20	; 32
     5f4:	30 70       	andi	r19, 0x00	; 0
						UEIENX &= ~(1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  &= ~(1 << HSOFE);
     5f6:	90 91 a0 00 	lds	r25, 0x00A0
     5fa:	9f 7d       	andi	r25, 0xDF	; 223
     5fc:	90 93 a0 00 	sts	0x00A0, r25
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     600:	90 91 9f 00 	lds	r25, 0x009F
     604:	9f 7d       	andi	r25, 0xDF	; 223
     606:	90 93 9f 00 	sts	0x009F, r25
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     60a:	90 91 9e 00 	lds	r25, 0x009E
     60e:	91 60       	ori	r25, 0x01	; 1
     610:	90 93 9e 00 	sts	0x009E, r25
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     614:	26 c0       	rjmp	.+76     	; 0x662 <USB_Host_WaitMS+0x80>
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     616:	90 91 9f 00 	lds	r25, 0x009F
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     61a:	95 ff       	sbrs	r25, 5
     61c:	06 c0       	rjmp	.+12     	; 0x62a <USB_Host_WaitMS+0x48>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     61e:	90 91 9f 00 	lds	r25, 0x009F
     622:	9f 7d       	andi	r25, 0xDF	; 223
     624:	90 93 9f 00 	sts	0x009F, r25
		{
			USB_INT_Clear(USB_INT_HSOFI);
			MS--;
     628:	81 50       	subi	r24, 0x01	; 1
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
     62a:	90 91 31 01 	lds	r25, 0x0131
     62e:	91 30       	cpi	r25, 0x01	; 1
     630:	d9 f0       	breq	.+54     	; 0x668 <USB_Host_WaitMS+0x86>
			 *  \return Boolean \c true if an error has occurred on the selected pipe, \c false otherwise.
			 */
			static inline bool Pipe_IsError(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsError(void)
			{
				return ((UPINTX & (1 << PERRI)) ? true : false);
     632:	90 91 a6 00 	lds	r25, 0x00A6
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;

			break;
		}

		if (Pipe_IsError() == true)
     636:	94 ff       	sbrs	r25, 4
     638:	09 c0       	rjmp	.+18     	; 0x64c <USB_Host_WaitMS+0x6a>

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     63a:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     63e:	80 91 a6 00 	lds	r24, 0x00A6
     642:	8f 7e       	andi	r24, 0xEF	; 239
     644:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearError();
			ErrorCode = HOST_WAITERROR_PipeError;
     648:	82 e0       	ldi	r24, 0x02	; 2

			break;
     64a:	0f c0       	rjmp	.+30     	; 0x66a <USB_Host_WaitMS+0x88>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     64c:	90 91 a6 00 	lds	r25, 0x00A6
		}

		if (Pipe_IsStalled() == true)
     650:	91 ff       	sbrs	r25, 1
     652:	07 c0       	rjmp	.+14     	; 0x662 <USB_Host_WaitMS+0x80>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearStall(void)
			{
				UPINTX &= ~(1 << RXSTALLI);
     654:	80 91 a6 00 	lds	r24, 0x00A6
     658:	8d 7f       	andi	r24, 0xFD	; 253
     65a:	80 93 a6 00 	sts	0x00A6, r24
		{
			Pipe_ClearStall();
			ErrorCode = HOST_WAITERROR_SetupStalled;
     65e:	83 e0       	ldi	r24, 0x03	; 3

			break;
     660:	04 c0       	rjmp	.+8      	; 0x66a <USB_Host_WaitMS+0x88>
	USB_INT_Disable(USB_INT_HSOFI);
	USB_INT_Clear(USB_INT_HSOFI);

	USB_Host_ResumeBus();

	while (MS)
     662:	88 23       	and	r24, r24
     664:	c1 f6       	brne	.-80     	; 0x616 <USB_Host_WaitMS+0x34>
     666:	01 c0       	rjmp	.+2      	; 0x66a <USB_Host_WaitMS+0x88>
			MS--;
		}

		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode != USB_MODE_Host))
		{
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
     668:	81 e0       	ldi	r24, 0x01	; 1

			break;
		}
	}

	if (BusSuspended)
     66a:	41 15       	cp	r20, r1
     66c:	51 05       	cpc	r21, r1
     66e:	29 f4       	brne	.+10     	; 0x67a <USB_Host_WaitMS+0x98>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
     670:	90 91 9e 00 	lds	r25, 0x009E
     674:	9e 7f       	andi	r25, 0xFE	; 254
     676:	90 93 9e 00 	sts	0x009E, r25
	  USB_Host_SuspendBus();

	if (HSOFIEnabled)
     67a:	21 15       	cp	r18, r1
     67c:	31 05       	cpc	r19, r1
     67e:	29 f0       	breq	.+10     	; 0x68a <USB_Host_WaitMS+0xa8>
						UEIENX |= (1 << RXSTPE);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHIEN  |= (1 << HSOFE);
     680:	90 91 a0 00 	lds	r25, 0x00A0
     684:	90 62       	ori	r25, 0x20	; 32
     686:	90 93 a0 00 	sts	0x00A0, r25
	  USB_INT_Enable(USB_INT_HSOFI);

	return ErrorCode;
}
     68a:	08 95       	ret

0000068c <USB_Host_ProcessNextHostState>:

#define  __INCLUDE_FROM_HOST_C
#include "../Host.h"

void USB_Host_ProcessNextHostState(void)
{
     68c:	ef 92       	push	r14
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	df 93       	push	r29
     694:	cf 93       	push	r28
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	28 97       	sbiw	r28, 0x08	; 8
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     6a6:	80 91 31 01 	lds	r24, 0x0131
     6aa:	85 30       	cpi	r24, 0x05	; 5
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <USB_Host_ProcessNextHostState+0x24>
     6ae:	99 c0       	rjmp	.+306    	; 0x7e2 <USB_Host_ProcessNextHostState+0x156>
     6b0:	86 30       	cpi	r24, 0x06	; 6
     6b2:	68 f4       	brcc	.+26     	; 0x6ce <USB_Host_ProcessNextHostState+0x42>
     6b4:	82 30       	cpi	r24, 0x02	; 2
     6b6:	c1 f1       	breq	.+112    	; 0x728 <USB_Host_ProcessNextHostState+0x9c>
     6b8:	83 30       	cpi	r24, 0x03	; 3
     6ba:	18 f4       	brcc	.+6      	; 0x6c2 <USB_Host_ProcessNextHostState+0x36>
     6bc:	88 23       	and	r24, r24
     6be:	a1 f0       	breq	.+40     	; 0x6e8 <USB_Host_ProcessNextHostState+0x5c>
     6c0:	08 c1       	rjmp	.+528    	; 0x8d2 <USB_Host_ProcessNextHostState+0x246>
     6c2:	83 30       	cpi	r24, 0x03	; 3
     6c4:	d9 f1       	breq	.+118    	; 0x73c <USB_Host_ProcessNextHostState+0xb0>
     6c6:	84 30       	cpi	r24, 0x04	; 4
     6c8:	09 f0       	breq	.+2      	; 0x6cc <USB_Host_ProcessNextHostState+0x40>
     6ca:	03 c1       	rjmp	.+518    	; 0x8d2 <USB_Host_ProcessNextHostState+0x246>
     6cc:	62 c0       	rjmp	.+196    	; 0x792 <USB_Host_ProcessNextHostState+0x106>
     6ce:	87 30       	cpi	r24, 0x07	; 7
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <USB_Host_ProcessNextHostState+0x48>
     6d2:	a0 c0       	rjmp	.+320    	; 0x814 <USB_Host_ProcessNextHostState+0x188>
     6d4:	87 30       	cpi	r24, 0x07	; 7
     6d6:	08 f4       	brcc	.+2      	; 0x6da <USB_Host_ProcessNextHostState+0x4e>
     6d8:	8f c0       	rjmp	.+286    	; 0x7f8 <USB_Host_ProcessNextHostState+0x16c>
     6da:	88 30       	cpi	r24, 0x08	; 8
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <USB_Host_ProcessNextHostState+0x54>
     6de:	b8 c0       	rjmp	.+368    	; 0x850 <USB_Host_ProcessNextHostState+0x1c4>
     6e0:	89 30       	cpi	r24, 0x09	; 9
     6e2:	09 f0       	breq	.+2      	; 0x6e6 <USB_Host_ProcessNextHostState+0x5a>
     6e4:	f6 c0       	rjmp	.+492    	; 0x8d2 <USB_Host_ProcessNextHostState+0x246>
     6e6:	dc c0       	rjmp	.+440    	; 0x8a0 <USB_Host_ProcessNextHostState+0x214>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     6e8:	00 91 25 01 	lds	r16, 0x0125
     6ec:	10 91 26 01 	lds	r17, 0x0126
     6f0:	01 15       	cp	r16, r1
     6f2:	11 05       	cpc	r17, r1
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <USB_Host_ProcessNextHostState+0x6c>
     6f6:	ed c0       	rjmp	.+474    	; 0x8d2 <USB_Host_ProcessNextHostState+0x246>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	73 df       	rcall	.-282    	; 0x5e2 <USB_Host_WaitMS>
     6fc:	68 2f       	mov	r22, r24
     6fe:	88 23       	and	r24, r24
     700:	31 f0       	breq	.+12     	; 0x70e <USB_Host_ProcessNextHostState+0x82>
				{
					USB_HostState = PostWaitState;
     702:	80 91 24 01 	lds	r24, 0x0124
     706:	80 93 31 01 	sts	0x0131, r24
					ErrorCode     = HOST_ENUMERROR_WaitStage;
     70a:	81 e0       	ldi	r24, 0x01	; 1
					break;
     70c:	de c0       	rjmp	.+444    	; 0x8ca <USB_Host_ProcessNextHostState+0x23e>
				}

				if (!(--WaitMSRemaining))
     70e:	01 50       	subi	r16, 0x01	; 1
     710:	10 40       	sbci	r17, 0x00	; 0
     712:	10 93 26 01 	sts	0x0126, r17
     716:	00 93 25 01 	sts	0x0125, r16
     71a:	01 15       	cp	r16, r1
     71c:	11 05       	cpc	r17, r1
     71e:	09 f0       	breq	.+2      	; 0x722 <USB_Host_ProcessNextHostState+0x96>
     720:	d8 c0       	rjmp	.+432    	; 0x8d2 <USB_Host_ProcessNextHostState+0x246>
				  USB_HostState = PostWaitState;
     722:	80 91 24 01 	lds	r24, 0x0124
     726:	07 c0       	rjmp	.+14     	; 0x736 <USB_Host_ProcessNextHostState+0xaa>
			}

			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     728:	88 ee       	ldi	r24, 0xE8	; 232
     72a:	93 e0       	ldi	r25, 0x03	; 3
     72c:	90 93 26 01 	sts	0x0126, r25
     730:	80 93 25 01 	sts	0x0125, r24

			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     734:	83 e0       	ldi	r24, 0x03	; 3
     736:	80 93 31 01 	sts	0x0131, r24
			break;
     73a:	cb c0       	rjmp	.+406    	; 0x8d2 <USB_Host_ProcessNextHostState+0x246>
		case HOST_STATE_Powered_WaitForDeviceSettle:
			if (WaitMSRemaining--)
     73c:	80 91 25 01 	lds	r24, 0x0125
     740:	90 91 26 01 	lds	r25, 0x0126
     744:	9c 01       	movw	r18, r24
     746:	21 50       	subi	r18, 0x01	; 1
     748:	30 40       	sbci	r19, 0x00	; 0
     74a:	30 93 26 01 	sts	0x0126, r19
     74e:	20 93 25 01 	sts	0x0125, r18
     752:	00 97       	sbiw	r24, 0x00	; 0
     754:	39 f0       	breq	.+14     	; 0x764 <USB_Host_ProcessNextHostState+0xd8>
     756:	8f e9       	ldi	r24, 0x9F	; 159
     758:	9f e0       	ldi	r25, 0x0F	; 15
     75a:	01 97       	sbiw	r24, 0x01	; 1
     75c:	f1 f7       	brne	.-4      	; 0x75a <USB_Host_ProcessNextHostState+0xce>
     75e:	00 c0       	rjmp	.+0      	; 0x760 <USB_Host_ProcessNextHostState+0xd4>
     760:	00 00       	nop
     762:	b7 c0       	rjmp	.+366    	; 0x8d2 <USB_Host_ProcessNextHostState+0x246>
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     764:	77 98       	cbi	0x0e, 7	; 14

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     766:	80 91 d8 00 	lds	r24, 0x00D8
     76a:	80 61       	ori	r24, 0x10	; 16
     76c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Enable(void)
			{
				OTGCON &= ~(1 << VBUSHWC);
     770:	80 91 dd 00 	lds	r24, 0x00DD
     774:	8b 7f       	andi	r24, 0xFB	; 251
     776:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON |=  (1 << UVCONE);
     77a:	80 91 d7 00 	lds	r24, 0x00D7
     77e:	80 61       	ori	r24, 0x10	; 16
     780:	80 93 d7 00 	sts	0x00D7, r24
			}

			static inline void USB_Host_VBUS_Auto_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_On(void)
			{
				OTGCON |=  (1 << VBUSREQ);
     784:	80 91 dd 00 	lds	r24, 0x00DD
     788:	82 60       	ori	r24, 0x02	; 2
     78a:	80 93 dd 00 	sts	0x00DD, r24

				USB_OTGPAD_On();
				USB_Host_VBUS_Auto_Enable();
				USB_Host_VBUS_Auto_On();

				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     78e:	84 e0       	ldi	r24, 0x04	; 4
     790:	d2 cf       	rjmp	.-92     	; 0x736 <USB_Host_ProcessNextHostState+0xaa>
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
     792:	80 91 9f 00 	lds	r24, 0x009F
			}

			break;
		case HOST_STATE_Powered_WaitForConnect:
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     796:	80 ff       	sbrs	r24, 0
     798:	9c c0       	rjmp	.+312    	; 0x8d2 <USB_Host_ProcessNextHostState+0x246>
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     79a:	80 91 9f 00 	lds	r24, 0x009F
     79e:	8e 7f       	andi	r24, 0xFE	; 254
     7a0:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     7a4:	80 91 9f 00 	lds	r24, 0x009F
     7a8:	8d 7f       	andi	r24, 0xFD	; 253
     7aa:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     7ae:	80 91 df 00 	lds	r24, 0x00DF
     7b2:	8d 7f       	andi	r24, 0xFD	; 253
     7b4:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
     7b8:	80 91 de 00 	lds	r24, 0x00DE
     7bc:	82 60       	ori	r24, 0x02	; 2
     7be:	80 93 de 00 	sts	0x00DE, r24
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     7c2:	80 91 9e 00 	lds	r24, 0x009E
     7c6:	81 60       	ori	r24, 0x01	; 1
     7c8:	80 93 9e 00 	sts	0x009E, r24

				USB_INT_Clear(USB_INT_VBERRI);
				USB_INT_Enable(USB_INT_VBERRI);

				USB_Host_ResumeBus();
				Pipe_ClearPipes();
     7cc:	eb d0       	rcall	.+470    	; 0x9a4 <Pipe_ClearPipes>

				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     7ce:	10 92 31 01 	sts	0x0131, r1
     7d2:	84 e6       	ldi	r24, 0x64	; 100
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	90 93 26 01 	sts	0x0126, r25
     7da:	80 93 25 01 	sts	0x0125, r24
     7de:	85 e0       	ldi	r24, 0x05	; 5
     7e0:	5c c0       	rjmp	.+184    	; 0x89a <USB_Host_ProcessNextHostState+0x20e>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     7e2:	a9 de       	rcall	.-686    	; 0x536 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     7e4:	10 92 31 01 	sts	0x0131, r1
     7e8:	88 ec       	ldi	r24, 0xC8	; 200
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	90 93 26 01 	sts	0x0126, r25
     7f0:	80 93 25 01 	sts	0x0125, r24
     7f4:	86 e0       	ldi	r24, 0x06	; 6
     7f6:	51 c0       	rjmp	.+162    	; 0x89a <USB_Host_ProcessNextHostState+0x20e>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	60 e0       	ldi	r22, 0x00	; 0
     7fc:	40 e0       	ldi	r20, 0x00	; 0
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	00 e4       	ldi	r16, 0x40	; 64
     802:	10 e0       	ldi	r17, 0x00	; 0
     804:	ee 24       	eor	r14, r14
     806:	71 d0       	rcall	.+226    	; 0x8ea <Pipe_ConfigurePipe>
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     808:	80 91 ac 00 	lds	r24, 0x00AC
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     80c:	87 ff       	sbrs	r24, 7
     80e:	59 c0       	rjmp	.+178    	; 0x8c2 <USB_Host_ProcessNextHostState+0x236>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     810:	87 e0       	ldi	r24, 0x07	; 7
     812:	91 cf       	rjmp	.-222    	; 0x736 <USB_Host_ProcessNextHostState+0xaa>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     814:	a9 e2       	ldi	r26, 0x29	; 41
     816:	b1 e0       	ldi	r27, 0x01	; 1
     818:	eb e1       	ldi	r30, 0x1B	; 27
     81a:	f1 e0       	ldi	r31, 0x01	; 1
     81c:	88 e0       	ldi	r24, 0x08	; 8
     81e:	01 90       	ld	r0, Z+
     820:	0d 92       	st	X+, r0
     822:	81 50       	subi	r24, 0x01	; 1
     824:	e1 f7       	brne	.-8      	; 0x81e <USB_Host_ProcessNextHostState+0x192>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     826:	ce 01       	movw	r24, r28
     828:	01 96       	adiw	r24, 0x01	; 1
     82a:	bc d3       	rcall	.+1912   	; 0xfa4 <USB_Host_SendControlRequest>
     82c:	68 2f       	mov	r22, r24
     82e:	88 23       	and	r24, r24
     830:	09 f0       	breq	.+2      	; 0x834 <USB_Host_ProcessNextHostState+0x1a8>
     832:	4a c0       	rjmp	.+148    	; 0x8c8 <USB_Host_ProcessNextHostState+0x23c>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_Host_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     834:	88 85       	ldd	r24, Y+8	; 0x08
     836:	80 93 23 01 	sts	0x0123, r24

			USB_Host_ResetDevice();
     83a:	7d de       	rcall	.-774    	; 0x536 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     83c:	10 92 31 01 	sts	0x0131, r1
     840:	88 ec       	ldi	r24, 0xC8	; 200
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	90 93 26 01 	sts	0x0126, r25
     848:	80 93 25 01 	sts	0x0125, r24
     84c:	88 e0       	ldi	r24, 0x08	; 8
     84e:	25 c0       	rjmp	.+74     	; 0x89a <USB_Host_ProcessNextHostState+0x20e>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     850:	00 91 23 01 	lds	r16, 0x0123
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	10 e0       	ldi	r17, 0x00	; 0
     85e:	ee 24       	eor	r14, r14
     860:	44 d0       	rcall	.+136    	; 0x8ea <Pipe_ConfigurePipe>
     862:	80 91 ac 00 	lds	r24, 0x00AC
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     866:	87 ff       	sbrs	r24, 7
     868:	2c c0       	rjmp	.+88     	; 0x8c2 <USB_Host_ProcessNextHostState+0x236>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     86a:	a9 e2       	ldi	r26, 0x29	; 41
     86c:	b1 e0       	ldi	r27, 0x01	; 1
     86e:	e3 e1       	ldi	r30, 0x13	; 19
     870:	f1 e0       	ldi	r31, 0x01	; 1
     872:	88 e0       	ldi	r24, 0x08	; 8
     874:	01 90       	ld	r0, Z+
     876:	0d 92       	st	X+, r0
     878:	81 50       	subi	r24, 0x01	; 1
     87a:	e1 f7       	brne	.-8      	; 0x874 <USB_Host_ProcessNextHostState+0x1e8>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	91 d3       	rcall	.+1826   	; 0xfa4 <USB_Host_SendControlRequest>
     882:	68 2f       	mov	r22, r24
     884:	88 23       	and	r24, r24
     886:	01 f5       	brne	.+64     	; 0x8c8 <USB_Host_ProcessNextHostState+0x23c>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     888:	10 92 31 01 	sts	0x0131, r1
     88c:	84 e6       	ldi	r24, 0x64	; 100
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	90 93 26 01 	sts	0x0126, r25
     894:	80 93 25 01 	sts	0x0125, r24
     898:	89 e0       	ldi	r24, 0x09	; 9
     89a:	80 93 24 01 	sts	0x0124, r24
			break;
     89e:	19 c0       	rjmp	.+50     	; 0x8d2 <USB_Host_ProcessNextHostState+0x246>
			}

			static inline void USB_Host_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SetDeviceAddress(const uint8_t Address)
			{
				UHADDR  =  (Address & 0x7F);
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	80 93 a1 00 	sts	0x00A1, r24
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);

			USB_HostState = HOST_STATE_Addressed;
     8a6:	8a e0       	ldi	r24, 0x0A	; 10
     8a8:	80 93 31 01 	sts	0x0131, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     8ac:	bf dd       	rcall	.-1154   	; 0x42c <EVENT_USB_Host_DeviceEnumerationComplete>
			break;
     8ae:	11 c0       	rjmp	.+34     	; 0x8d2 <USB_Host_ProcessNextHostState+0x246>
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     8b0:	1a de       	rcall	.-972    	; 0x4e6 <EVENT_USB_Host_DeviceEnumerationFailed>
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     8b2:	80 91 dd 00 	lds	r24, 0x00DD
     8b6:	81 60       	ori	r24, 0x01	; 1
     8b8:	80 93 dd 00 	sts	0x00DD, r24

		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_DeviceUnattached();
     8bc:	b3 dd       	rcall	.-1178   	; 0x424 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     8be:	ef d0       	rcall	.+478    	; 0xa9e <USB_ResetInterface>
     8c0:	08 c0       	rjmp	.+16     	; 0x8d2 <USB_Host_ProcessNextHostState+0x246>
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
     8c2:	60 e0       	ldi	r22, 0x00	; 0
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_Host_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
			{
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
     8c4:	84 e0       	ldi	r24, 0x04	; 4
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <USB_Host_ProcessNextHostState+0x23e>
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
     8c8:	83 e0       	ldi	r24, 0x03	; 3

			EVENT_USB_Host_DeviceEnumerationComplete();
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     8ca:	90 91 31 01 	lds	r25, 0x0131
     8ce:	91 30       	cpi	r25, 0x01	; 1
     8d0:	79 f7       	brne	.-34     	; 0x8b0 <USB_Host_ProcessNextHostState+0x224>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     8d2:	28 96       	adiw	r28, 0x08	; 8
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	f8 94       	cli
     8d8:	de bf       	out	0x3e, r29	; 62
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	cd bf       	out	0x3d, r28	; 61
     8de:	cf 91       	pop	r28
     8e0:	df 91       	pop	r29
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	ef 90       	pop	r14
     8e8:	08 95       	ret

000008ea <Pipe_ConfigurePipe>:
                        const uint8_t Type,
                        const uint8_t Token,
                        const uint8_t EndpointNumber,
                        const uint16_t Size,
                        const uint8_t Banks)
{
     8ea:	ef 92       	push	r14
     8ec:	0f 93       	push	r16
     8ee:	1f 93       	push	r17
     8f0:	5e 2d       	mov	r21, r14

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     8f2:	62 95       	swap	r22
     8f4:	66 0f       	add	r22, r22
     8f6:	66 0f       	add	r22, r22
     8f8:	60 7c       	andi	r22, 0xC0	; 192
     8fa:	64 2b       	or	r22, r20
     8fc:	2f 70       	andi	r18, 0x0F	; 15
     8fe:	62 2b       	or	r22, r18

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     900:	98 2f       	mov	r25, r24
		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     902:	52 60       	ori	r21, 0x02	; 2

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     904:	43 c0       	rjmp	.+134    	; 0x98c <Pipe_ConfigurePipe+0xa2>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     906:	90 93 a7 00 	sts	0x00A7, r25
		uint8_t UPCFG2XTemp;
		uint8_t UPIENXTemp;

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
     90a:	98 17       	cp	r25, r24
     90c:	a1 f4       	brne	.+40     	; 0x936 <Pipe_ConfigurePipe+0x4c>
     90e:	28 e0       	ldi	r18, 0x08	; 8
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	03 c0       	rjmp	.+6      	; 0x91c <Pipe_ConfigurePipe+0x32>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
				{
					MaskVal++;
     916:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     918:	22 0f       	add	r18, r18
     91a:	33 1f       	adc	r19, r19
			static inline uint8_t Pipe_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while ((CheckBytes < Bytes) && (CheckBytes < PIPE_MAX_SIZE))
     91c:	20 17       	cp	r18, r16
     91e:	31 07       	cpc	r19, r17
     920:	10 f4       	brcc	.+4      	; 0x926 <Pipe_ConfigurePipe+0x3c>
     922:	45 30       	cpi	r20, 0x05	; 5
     924:	c1 f7       	brne	.-16     	; 0x916 <Pipe_ConfigurePipe+0x2c>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     926:	24 2f       	mov	r18, r20
     928:	22 95       	swap	r18
     92a:	20 7f       	andi	r18, 0xF0	; 240
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     92c:	25 2b       	or	r18, r21

		Pipe_SelectPipe(PNum);
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     92e:	e6 2f       	mov	r30, r22
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
			UPIENXTemp  = 0;
     930:	40 e0       	ldi	r20, 0x00	; 0
		
		if (PNum == Number)
		{
			UPCFG0XTemp = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
			UPCFG1XTemp = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
			UPCFG2XTemp = 0;
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	08 c0       	rjmp	.+16     	; 0x946 <Pipe_ConfigurePipe+0x5c>
			UPIENXTemp  = 0;
		}
		else
		{
			UPCFG0XTemp = UPCFG0X;
     936:	e0 91 aa 00 	lds	r30, 0x00AA
			UPCFG1XTemp = UPCFG1X;
     93a:	20 91 ab 00 	lds	r18, 0x00AB
			UPCFG2XTemp = UPCFG2X;
     93e:	70 91 ad 00 	lds	r23, 0x00AD
			UPIENXTemp  = UPIENX;
     942:	40 91 ae 00 	lds	r20, 0x00AE
		}

		if (!(UPCFG1XTemp & (1 << ALLOC)))
     946:	21 ff       	sbrs	r18, 1
     948:	20 c0       	rjmp	.+64     	; 0x98a <Pipe_ConfigurePipe+0xa0>
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     94a:	30 91 a9 00 	lds	r19, 0x00A9
     94e:	3e 7f       	andi	r19, 0xFE	; 254
     950:	30 93 a9 00 	sts	0x00A9, r19
		  continue;
		  
		Pipe_DisablePipe();
		UPCFG1X &= ~(1 << ALLOC);
     954:	30 91 ab 00 	lds	r19, 0x00AB
     958:	3d 7f       	andi	r19, 0xFD	; 253
     95a:	30 93 ab 00 	sts	0x00AB, r19
			 *  \pre The currently selected pipe must first be configured properly via \ref Pipe_ConfigurePipe().
			 */
			static inline void Pipe_EnablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_EnablePipe(void)
			{
				UPCONX |= (1 << PEN);
     95e:	30 91 a9 00 	lds	r19, 0x00A9
     962:	31 60       	ori	r19, 0x01	; 1
     964:	30 93 a9 00 	sts	0x00A9, r19

		Pipe_EnablePipe();
		UPCFG0X = UPCFG0XTemp;
     968:	e0 93 aa 00 	sts	0x00AA, r30
		UPCFG1X = UPCFG1XTemp;
     96c:	20 93 ab 00 	sts	0x00AB, r18
		UPCFG2X = UPCFG2XTemp;
     970:	70 93 ad 00 	sts	0x00AD, r23
		UPIENX  = UPIENXTemp;
     974:	40 93 ae 00 	sts	0x00AE, r20

			/** Configures the currently selected pipe to allow for an unlimited number of IN requests. */
			static inline void Pipe_SetInfiniteINRequests(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInfiniteINRequests(void)
			{
				UPCONX |= (1 << INMODE);
     978:	20 91 a9 00 	lds	r18, 0x00A9
     97c:	20 62       	ori	r18, 0x20	; 32
     97e:	20 93 a9 00 	sts	0x00A9, r18
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     982:	20 91 ac 00 	lds	r18, 0x00AC

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
     986:	27 ff       	sbrs	r18, 7
     988:	08 c0       	rjmp	.+16     	; 0x99a <Pipe_ConfigurePipe+0xb0>

	Pipe_SetInfiniteINRequests();

	return Pipe_IsConfigured();
#else	
	for (uint8_t PNum = Number; PNum < PIPE_TOTAL_PIPES; PNum++)
     98a:	9f 5f       	subi	r25, 0xFF	; 255
     98c:	97 30       	cpi	r25, 0x07	; 7
     98e:	08 f4       	brcc	.+2      	; 0x992 <Pipe_ConfigurePipe+0xa8>
     990:	ba cf       	rjmp	.-140    	; 0x906 <Pipe_ConfigurePipe+0x1c>
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     992:	80 93 a7 00 	sts	0x00A7, r24
		if (!(Pipe_IsConfigured()))
		  return false;		
	}
		
	Pipe_SelectPipe(Number);	
	return true;
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	01 c0       	rjmp	.+2      	; 0x99c <Pipe_ConfigurePipe+0xb2>
		UPIENX  = UPIENXTemp;

		Pipe_SetInfiniteINRequests();
	
		if (!(Pipe_IsConfigured()))
		  return false;		
     99a:	80 e0       	ldi	r24, 0x00	; 0
	}
		
	Pipe_SelectPipe(Number);	
	return true;
#endif
}
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ef 90       	pop	r14
     9a2:	08 95       	ret

000009a4 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     9a4:	10 92 f8 00 	sts	0x00F8, r1

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	80 93 a7 00 	sts	0x00A7, r24
	{
		Pipe_SelectPipe(PNum);
		UPIENX  = 0;
     9ae:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX  = 0;
     9b2:	10 92 a6 00 	sts	0x00A6, r1
		UPCFG1X = 0;
     9b6:	10 92 ab 00 	sts	0x00AB, r1
			 *  from an attached device.
			 */
			static inline void Pipe_DisablePipe(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_DisablePipe(void)
			{
				UPCONX &= ~(1 << PEN);
     9ba:	90 91 a9 00 	lds	r25, 0x00A9
     9be:	9e 7f       	andi	r25, 0xFE	; 254
     9c0:	90 93 a9 00 	sts	0x00A9, r25

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9c4:	8f 5f       	subi	r24, 0xFF	; 255
     9c6:	87 30       	cpi	r24, 0x07	; 7
     9c8:	81 f7       	brne	.-32     	; 0x9aa <Pipe_ClearPipes+0x6>
		UPIENX  = 0;
		UPINTX  = 0;
		UPCFG1X = 0;
		Pipe_DisablePipe();
	}
}
     9ca:	08 95       	ret

000009cc <Pipe_IsEndpointBound>:
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     9cc:	40 91 a7 00 	lds	r20, 0x00A7

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9d0:	90 e0       	ldi	r25, 0x00	; 0
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     9d2:	90 93 a7 00 	sts	0x00A7, r25
			 *  \return Boolean \c true if the selected pipe is configured, \c false otherwise.
			 */
			static inline bool Pipe_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsConfigured(void)
			{
				return ((UPSTAX & (1 << CFGOK)) ? true : false);
     9d6:	20 91 ac 00 	lds	r18, 0x00AC
	{
		Pipe_SelectPipe(PNum);

		if (!(Pipe_IsConfigured()))
     9da:	27 ff       	sbrs	r18, 7
     9dc:	0e c0       	rjmp	.+28     	; 0x9fa <Pipe_IsEndpointBound+0x2e>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     9de:	20 91 aa 00 	lds	r18, 0x00AA
     9e2:	2f 70       	andi	r18, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     9e4:	30 91 aa 00 	lds	r19, 0x00AA
     9e8:	30 73       	andi	r19, 0x30	; 48
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
     9ea:	30 31       	cpi	r19, 0x10	; 16
     9ec:	11 f4       	brne	.+4      	; 0x9f2 <Pipe_IsEndpointBound+0x26>
     9ee:	30 e8       	ldi	r19, 0x80	; 128
     9f0:	01 c0       	rjmp	.+2      	; 0x9f4 <Pipe_IsEndpointBound+0x28>
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	23 2b       	or	r18, r19
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
     9f6:	28 17       	cp	r18, r24
     9f8:	49 f0       	breq	.+18     	; 0xa0c <Pipe_IsEndpointBound+0x40>

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     9fa:	9f 5f       	subi	r25, 0xFF	; 255
     9fc:	97 30       	cpi	r25, 0x07	; 7
     9fe:	49 f7       	brne	.-46     	; 0x9d2 <Pipe_IsEndpointBound+0x6>
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
     a00:	84 2f       	mov	r24, r20
     a02:	87 70       	andi	r24, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     a04:	80 93 a7 00 	sts	0x00A7, r24
		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	08 95       	ret

		if (!(Pipe_IsConfigured()))
		  continue;

		if (Pipe_GetBoundEndpointAddress() == EndpointAddress)
		  return true;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
	}

	Pipe_SelectPipe(PrevPipeNumber);
	return false;
}
     a0e:	08 95       	ret

00000a10 <Pipe_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
     a10:	80 91 a2 00 	lds	r24, 0x00A2
     a14:	90 91 a3 00 	lds	r25, 0x00A3

uint8_t Pipe_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     a18:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
     a1a:	20 91 aa 00 	lds	r18, 0x00AA
     a1e:	20 73       	andi	r18, 0x30	; 48

	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     a20:	20 31       	cpi	r18, 0x10	; 16
     a22:	29 f4       	brne	.+10     	; 0xa2e <Pipe_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     a24:	20 91 a6 00 	lds	r18, 0x00A6
		{
			if (Pipe_IsINReceived())
     a28:	20 ff       	sbrs	r18, 0
     a2a:	05 c0       	rjmp	.+10     	; 0xa36 <Pipe_WaitUntilReady+0x26>
     a2c:	18 c0       	rjmp	.+48     	; 0xa5e <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     a2e:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     a32:	22 fd       	sbrc	r18, 2
     a34:	14 c0       	rjmp	.+40     	; 0xa5e <Pipe_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
     a36:	20 91 a6 00 	lds	r18, 0x00A6
			  return PIPE_READYWAIT_NoError;
		}

		if (Pipe_IsStalled())
     a3a:	21 fd       	sbrc	r18, 1
     a3c:	12 c0       	rjmp	.+36     	; 0xa62 <Pipe_WaitUntilReady+0x52>
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     a3e:	20 91 31 01 	lds	r18, 0x0131
     a42:	21 30       	cpi	r18, 0x01	; 1
     a44:	81 f0       	breq	.+32     	; 0xa66 <Pipe_WaitUntilReady+0x56>
     a46:	20 91 a2 00 	lds	r18, 0x00A2
     a4a:	30 91 a3 00 	lds	r19, 0x00A3
		  return PIPE_READYWAIT_DeviceDisconnected;

		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     a4e:	28 17       	cp	r18, r24
     a50:	39 07       	cpc	r19, r25
     a52:	19 f3       	breq	.-58     	; 0xa1a <Pipe_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     a54:	44 23       	and	r20, r20
     a56:	49 f0       	breq	.+18     	; 0xa6a <Pipe_WaitUntilReady+0x5a>
     a58:	41 50       	subi	r20, 0x01	; 1
     a5a:	c9 01       	movw	r24, r18
     a5c:	de cf       	rjmp	.-68     	; 0xa1a <Pipe_WaitUntilReady+0xa>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
			  return PIPE_READYWAIT_NoError;
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	08 95       	ret
		}

		if (Pipe_IsStalled())
		  return PIPE_READYWAIT_PipeStalled;
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	08 95       	ret
		else if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_READYWAIT_DeviceDisconnected;
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_READYWAIT_Timeout;
     a6a:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
     a6c:	08 95       	ret

00000a6e <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
     a6e:	70 d0       	rcall	.+224    	; 0xb50 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     a70:	77 d0       	rcall	.+238    	; 0xb60 <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     a72:	e0 ee       	ldi	r30, 0xE0	; 224
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	81 60       	ori	r24, 0x01	; 1
     a7a:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON  &= ~(1 << USBE);
     a7c:	e8 ed       	ldi	r30, 0xD8	; 216
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	80 81       	ld	r24, Z
     a82:	8f 77       	andi	r24, 0x7F	; 127
     a84:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a86:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  &= ~(1 << UVREGE);
     a88:	a7 ed       	ldi	r26, 0xD7	; 215
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	8c 91       	ld	r24, X
     a8e:	8e 7f       	andi	r24, 0xFE	; 254
     a90:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON  &= ~(1 << OTGPADE);
     a92:	80 81       	ld	r24, Z
     a94:	8f 7e       	andi	r24, 0xEF	; 239
     a96:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
     a98:	10 92 28 01 	sts	0x0128, r1
}
     a9c:	08 95       	ret

00000a9e <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     a9e:	58 d0       	rcall	.+176    	; 0xb50 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     aa0:	5f d0       	rcall	.+190    	; 0xb60 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     aa2:	80 91 d8 00 	lds	r24, 0x00D8
     aa6:	8f 77       	andi	r24, 0x7F	; 127
     aa8:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     aac:	80 91 d8 00 	lds	r24, 0x00D8
     ab0:	80 68       	ori	r24, 0x80	; 128
     ab2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     ab6:	80 91 d8 00 	lds	r24, 0x00D8
     aba:	8f 7d       	andi	r24, 0xDF	; 223
     abc:	80 93 d8 00 	sts	0x00D8, r24
		#endif
	}
	else if (USB_CurrentMode == USB_MODE_Host)
	{
		#if defined(USB_CAN_BE_HOST)
		UHWCON &= ~(1 << UIMOD);
     ac0:	80 91 d7 00 	lds	r24, 0x00D7
     ac4:	8f 77       	andi	r24, 0x7F	; 127
     ac6:	80 93 d7 00 	sts	0x00D7, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     aca:	84 e1       	ldi	r24, 0x14	; 20
     acc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     ace:	86 e1       	ldi	r24, 0x16	; 22
     ad0:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_CAN_BE_HOST)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));		
     ad2:	09 b4       	in	r0, 0x29	; 41
     ad4:	00 fe       	sbrs	r0, 0
     ad6:	fd cf       	rjmp	.-6      	; 0xad2 <USB_ResetInterface+0x34>
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_Init_Host(void)
{
	USB_HostState                = HOST_STATE_Unattached;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	80 93 31 01 	sts	0x0131, r24
	USB_Host_ConfigurationNumber = 0;
     ade:	10 92 27 01 	sts	0x0127, r1
	USB_Host_ControlPipeSize     = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     ae2:	80 e4       	ldi	r24, 0x40	; 64
     ae4:	80 93 23 01 	sts	0x0123, r24
	#if !defined(__DOXYGEN__)
		/* Macros: */
			static inline void USB_Host_HostMode_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_HostMode_On(void)
			{
				USBCON |=  (1 << HOST);
     ae8:	80 91 d8 00 	lds	r24, 0x00D8
     aec:	80 64       	ori	r24, 0x40	; 64
     aee:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     af2:	80 91 dd 00 	lds	r24, 0x00DD
     af6:	81 60       	ori	r24, 0x01	; 1
     af8:	80 93 dd 00 	sts	0x00DD, r24
			}

			static inline void USB_Host_VBUS_Manual_Enable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Enable(void)
			{
				OTGCON |=  (1 << VBUSHWC);
     afc:	80 91 dd 00 	lds	r24, 0x00DD
     b00:	84 60       	ori	r24, 0x04	; 4
     b02:	80 93 dd 00 	sts	0x00DD, r24
				UHWCON &= ~(1 << UVCONE);
     b06:	80 91 d7 00 	lds	r24, 0x00D7
     b0a:	8f 7e       	andi	r24, 0xEF	; 239
     b0c:	80 93 d7 00 	sts	0x00D7, r24

				DDRE   |=  (1 << 7);
     b10:	6f 9a       	sbi	0x0d, 7	; 13
			}

			static inline void USB_Host_VBUS_Manual_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_On(void)
			{
				PORTE  |=  (1 << 7);
     b12:	77 9a       	sbi	0x0e, 7	; 14
						break;
					case USB_INT_VBERRI:
						OTGIEN |= (1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN |= (1 << SRPE);						
     b14:	80 91 de 00 	lds	r24, 0x00DE
     b18:	81 60       	ori	r24, 0x01	; 1
     b1a:	80 93 de 00 	sts	0x00DE, r24
						break;
					case USB_INT_RSTI:
						UHIEN  |= (1 << RSTE);
						break;
					case USB_INT_BCERRI:
						OTGIEN |= (1 << BCERRE);
     b1e:	80 91 de 00 	lds	r24, 0x00DE
     b22:	84 60       	ori	r24, 0x04	; 4
     b24:	80 93 de 00 	sts	0x00DE, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     b28:	80 91 e0 00 	lds	r24, 0x00E0
     b2c:	8e 7f       	andi	r24, 0xFE	; 254
     b2e:	80 93 e0 00 	sts	0x00E0, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
     b32:	80 91 d8 00 	lds	r24, 0x00D8
     b36:	80 61       	ori	r24, 0x10	; 16
     b38:	80 93 d8 00 	sts	0x00D8, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     b3c:	08 95       	ret

00000b3e <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
     b3e:	e7 ed       	ldi	r30, 0xD7	; 215
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	80 81       	ld	r24, Z
     b44:	81 60       	ori	r24, 0x01	; 1
     b46:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	80 93 28 01 	sts	0x0128, r24

	USB_ResetInterface();
}
     b4e:	a7 cf       	rjmp	.-178    	; 0xa9e <USB_ResetInterface>

00000b50 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
     b50:	e8 ed       	ldi	r30, 0xD8	; 216
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	80 81       	ld	r24, Z
     b56:	8c 7f       	andi	r24, 0xFC	; 252
     b58:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_BOTH)
	OTGIEN  = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     b5a:	10 92 a0 00 	sts	0x00A0, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     b5e:	08 95       	ret

00000b60 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     b60:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_BOTH)
	OTGINT = 0;
	#endif

	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
     b64:	10 92 9f 00 	sts	0x009F, r1
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
	#endif
}
     b68:	08 95       	ret

00000b6a <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     b6a:	1f 92       	push	r1
     b6c:	0f 92       	push	r0
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	0f 92       	push	r0
     b72:	0b b6       	in	r0, 0x3b	; 59
     b74:	0f 92       	push	r0
     b76:	11 24       	eor	r1, r1
     b78:	2f 93       	push	r18
     b7a:	3f 93       	push	r19
     b7c:	4f 93       	push	r20
     b7e:	5f 93       	push	r21
     b80:	6f 93       	push	r22
     b82:	7f 93       	push	r23
     b84:	8f 93       	push	r24
     b86:	9f 93       	push	r25
     b88:	af 93       	push	r26
     b8a:	bf 93       	push	r27
     b8c:	ef 93       	push	r30
     b8e:	ff 93       	push	r31
					case USB_INT_RXSTPI:
						return (UEINTX & (1 << RXSTPI));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
     b90:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	#if defined(USB_CAN_BE_HOST)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_HSOFI) && USB_INT_IsEnabled(USB_INT_HSOFI))
     b94:	85 ff       	sbrs	r24, 5
     b96:	0a c0       	rjmp	.+20     	; 0xbac <__vector_10+0x42>
					case USB_INT_RXSTPI:
						return (UEIENX & (1 << RXSTPE));
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
     b98:	80 91 a0 00 	lds	r24, 0x00A0
     b9c:	85 ff       	sbrs	r24, 5
     b9e:	06 c0       	rjmp	.+12     	; 0xbac <__vector_10+0x42>
						UEINTX &= ~(1 << RXSTPI);
						break;
					#endif
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
     ba0:	80 91 9f 00 	lds	r24, 0x009F
     ba4:	8f 7d       	andi	r24, 0xDF	; 223
     ba6:	80 93 9f 00 	sts	0x009F, r24
	{
		USB_INT_Clear(USB_INT_HSOFI);

		EVENT_USB_Host_StartOfFrame();
     baa:	d2 d1       	rcall	.+932    	; 0xf50 <USB_Event_Stub>
					case USB_INT_HSOFI:
						return (UHINT  & (1 << HSOFI));
					case USB_INT_DCONNI:
						return (UHINT  & (1 << DCONNI));
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
     bac:	80 91 9f 00 	lds	r24, 0x009F
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     bb0:	81 ff       	sbrs	r24, 1
     bb2:	15 c0       	rjmp	.+42     	; 0xbde <__vector_10+0x74>
					case USB_INT_HSOFI:
						return (UHIEN  & (1 << HSOFE));
					case USB_INT_DCONNI:
						return (UHIEN  & (1 << DCONNE));
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
     bb4:	80 91 a0 00 	lds	r24, 0x00A0
     bb8:	81 ff       	sbrs	r24, 1
     bba:	11 c0       	rjmp	.+34     	; 0xbde <__vector_10+0x74>
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
						break;
					case USB_INT_DDISCI:
						UHINT  &= ~(1 << DDISCI);
     bbc:	80 91 9f 00 	lds	r24, 0x009F
     bc0:	8d 7f       	andi	r24, 0xFD	; 253
     bc2:	80 93 9f 00 	sts	0x009F, r24
					#if defined(USB_CAN_BE_HOST)
					case USB_INT_HSOFI:
						UHINT  &= ~(1 << HSOFI);
						break;
					case USB_INT_DCONNI:
						UHINT  &= ~(1 << DCONNI);
     bc6:	80 91 9f 00 	lds	r24, 0x009F
     bca:	8e 7f       	andi	r24, 0xFE	; 254
     bcc:	80 93 9f 00 	sts	0x009F, r24
						break;
					case USB_INT_DCONNI:
						UHIEN  &= ~(1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  &= ~(1 << DDISCE);
     bd0:	80 91 a0 00 	lds	r24, 0x00A0
     bd4:	8d 7f       	andi	r24, 0xFD	; 253
     bd6:	80 93 a0 00 	sts	0x00A0, r24
	{
		USB_INT_Clear(USB_INT_DDISCI);
		USB_INT_Clear(USB_INT_DCONNI);
		USB_INT_Disable(USB_INT_DDISCI);

		EVENT_USB_Host_DeviceUnattached();
     bda:	24 dc       	rcall	.-1976   	; 0x424 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     bdc:	60 df       	rcall	.-320    	; 0xa9e <USB_ResetInterface>
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
     bde:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     be2:	81 ff       	sbrs	r24, 1
     be4:	15 c0       	rjmp	.+42     	; 0xc10 <__vector_10+0xa6>
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
     be6:	80 91 de 00 	lds	r24, 0x00DE
     bea:	81 ff       	sbrs	r24, 1
     bec:	11 c0       	rjmp	.+34     	; 0xc10 <__vector_10+0xa6>
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
     bee:	80 91 df 00 	lds	r24, 0x00DF
     bf2:	8d 7f       	andi	r24, 0xFD	; 253
     bf4:	80 93 df 00 	sts	0x00DF, r24
			}

			static inline void USB_Host_VBUS_Manual_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Manual_Off(void)
			{
				PORTE  &= ~(1 << 7);
     bf8:	77 98       	cbi	0x0e, 7	; 14
			}

			static inline void USB_Host_VBUS_Auto_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_VBUS_Auto_Off(void)
			{
				OTGCON |=  (1 << VBUSRQC);
     bfa:	80 91 dd 00 	lds	r24, 0x00DD
     bfe:	81 60       	ori	r24, 0x01	; 1
     c00:	80 93 dd 00 	sts	0x00DD, r24
		USB_INT_Clear(USB_INT_VBERRI);

		USB_Host_VBUS_Manual_Off();
		USB_Host_VBUS_Auto_Off();

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	51 dc       	rcall	.-1886   	; 0x4aa <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     c08:	0d dc       	rcall	.-2022   	; 0x424 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	80 93 31 01 	sts	0x0131, r24
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
					case USB_INT_VBERRI:
						return (OTGINT & (1 << VBERRI));
					case USB_INT_SRPI:
						return (OTGINT & (1 << SRPI));
     c10:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     c14:	80 ff       	sbrs	r24, 0
     c16:	17 c0       	rjmp	.+46     	; 0xc46 <__vector_10+0xdc>
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
					case USB_INT_VBERRI:
						return (OTGIEN & (1 << VBERRE));
					case USB_INT_SRPI:
						return (OTGIEN & (1 << SRPE));
     c18:	80 91 de 00 	lds	r24, 0x00DE
     c1c:	80 ff       	sbrs	r24, 0
     c1e:	13 c0       	rjmp	.+38     	; 0xc46 <__vector_10+0xdc>
						break;
					case USB_INT_VBERRI:
						OTGINT &= ~(1 << VBERRI);
						break;
					case USB_INT_SRPI:
						OTGINT &= ~(1 << SRPI);
     c20:	80 91 df 00 	lds	r24, 0x00DF
     c24:	8e 7f       	andi	r24, 0xFE	; 254
     c26:	80 93 df 00 	sts	0x00DF, r24
						break;
					case USB_INT_VBERRI:
						OTGIEN &= ~(1 << VBERRE);
						break;
					case USB_INT_SRPI:
						OTGIEN &= ~(1 << SRPE);						
     c2a:	80 91 de 00 	lds	r24, 0x00DE
     c2e:	8e 7f       	andi	r24, 0xFE	; 254
     c30:	80 93 de 00 	sts	0x00DE, r24
	{
		USB_INT_Clear(USB_INT_SRPI);
		USB_INT_Disable(USB_INT_SRPI);

		EVENT_USB_Host_DeviceAttached();
     c34:	f3 db       	rcall	.-2074   	; 0x41c <EVENT_USB_Host_DeviceAttached>
						break;
					case USB_INT_DCONNI:
						UHIEN  |= (1 << DCONNE);
						break;
					case USB_INT_DDISCI:
						UHIEN  |= (1 << DDISCE);
     c36:	80 91 a0 00 	lds	r24, 0x00A0
     c3a:	82 60       	ori	r24, 0x02	; 2
     c3c:	80 93 a0 00 	sts	0x00A0, r24

		USB_INT_Enable(USB_INT_DDISCI);

		USB_HostState = HOST_STATE_Powered;
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	80 93 31 01 	sts	0x0131, r24
					case USB_INT_DDISCI:
						return (UHINT  & (1 << DDISCI));
					case USB_INT_RSTI:
						return (UHINT  & (1 << RSTI));
					case USB_INT_BCERRI:
						return (OTGINT & (1 << BCERRI));
     c46:	80 91 df 00 	lds	r24, 0x00DF
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     c4a:	82 ff       	sbrs	r24, 2
     c4c:	0e c0       	rjmp	.+28     	; 0xc6a <__vector_10+0x100>
					case USB_INT_DDISCI:
						return (UHIEN  & (1 << DDISCE));
					case USB_INT_RSTI:
						return (UHIEN  & (1 << RSTE));
					case USB_INT_BCERRI:
						return (OTGIEN & (1 << BCERRE));
     c4e:	80 91 de 00 	lds	r24, 0x00DE
     c52:	82 ff       	sbrs	r24, 2
     c54:	0a c0       	rjmp	.+20     	; 0xc6a <__vector_10+0x100>
						break;
					case USB_INT_RSTI:
						UHINT  &= ~(1 << RSTI);
						break;
					case USB_INT_BCERRI:
						OTGINT &= ~(1 << BCERRI);
     c56:	80 91 df 00 	lds	r24, 0x00DF
     c5a:	8b 7f       	andi	r24, 0xFB	; 251
     c5c:	80 93 df 00 	sts	0x00DF, r24
	{
		USB_INT_Clear(USB_INT_BCERRI);

		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	60 e0       	ldi	r22, 0x00	; 0
     c64:	40 dc       	rcall	.-1920   	; 0x4e6 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     c66:	de db       	rcall	.-2116   	; 0x424 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     c68:	1a df       	rcall	.-460    	; 0xa9e <USB_ResetInterface>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     c6a:	ff 91       	pop	r31
     c6c:	ef 91       	pop	r30
     c6e:	bf 91       	pop	r27
     c70:	af 91       	pop	r26
     c72:	9f 91       	pop	r25
     c74:	8f 91       	pop	r24
     c76:	7f 91       	pop	r23
     c78:	6f 91       	pop	r22
     c7a:	5f 91       	pop	r21
     c7c:	4f 91       	pop	r20
     c7e:	3f 91       	pop	r19
     c80:	2f 91       	pop	r18
     c82:	0f 90       	pop	r0
     c84:	0b be       	out	0x3b, r0	; 59
     c86:	0f 90       	pop	r0
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	0f 90       	pop	r0
     c8c:	1f 90       	pop	r1
     c8e:	18 95       	reti

00000c90 <Pipe_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     c90:	8f 92       	push	r8
     c92:	9f 92       	push	r9
     c94:	bf 92       	push	r11
     c96:	cf 92       	push	r12
     c98:	df 92       	push	r13
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	df 93       	push	r29
     ca4:	cf 93       	push	r28
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	e8 2e       	mov	r14, r24
     cae:	4b 01       	movw	r8, r22
     cb0:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     cb2:	80 91 aa 00 	lds	r24, 0x00AA
     cb6:	8f 7c       	andi	r24, 0xCF	; 207
     cb8:	80 62       	ori	r24, 0x20	; 32
     cba:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     cbe:	99 83       	std	Y+1, r25	; 0x01
     cc0:	a7 de       	rcall	.-690    	; 0xa10 <Pipe_WaitUntilReady>
     cc2:	b8 2e       	mov	r11, r24
     cc4:	99 81       	ldd	r25, Y+1	; 0x01
     cc6:	88 23       	and	r24, r24
     cc8:	c1 f5       	brne	.+112    	; 0xd3a <Pipe_Write_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     cca:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     ccc:	01 15       	cp	r16, r1
     cce:	11 05       	cpc	r17, r1
     cd0:	39 f0       	breq	.+14     	; 0xce0 <Pipe_Write_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
     cd2:	f8 01       	movw	r30, r16
     cd4:	20 81       	ld	r18, Z
     cd6:	31 81       	ldd	r19, Z+1	; 0x01
     cd8:	82 1a       	sub	r8, r18
     cda:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     cdc:	e2 0e       	add	r14, r18
     cde:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     ce0:	cc 24       	eor	r12, r12
     ce2:	dd 24       	eor	r13, r13
     ce4:	25 c0       	rjmp	.+74     	; 0xd30 <Pipe_Write_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     ce6:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     cea:	85 fd       	sbrc	r24, 5
     cec:	16 c0       	rjmp	.+44     	; 0xd1a <Pipe_Write_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
     cee:	80 91 a6 00 	lds	r24, 0x00A6
     cf2:	8b 77       	andi	r24, 0x7B	; 123
     cf4:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     cf8:	01 15       	cp	r16, r1
     cfa:	11 05       	cpc	r17, r1
     cfc:	51 f0       	breq	.+20     	; 0xd12 <Pipe_Write_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
     cfe:	f8 01       	movw	r30, r16
     d00:	80 81       	ld	r24, Z
     d02:	91 81       	ldd	r25, Z+1	; 0x01
     d04:	8c 0d       	add	r24, r12
     d06:	9d 1d       	adc	r25, r13
     d08:	91 83       	std	Z+1, r25	; 0x01
     d0a:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     d0c:	24 e0       	ldi	r18, 0x04	; 4
     d0e:	b2 2e       	mov	r11, r18
     d10:	14 c0       	rjmp	.+40     	; 0xd3a <Pipe_Write_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     d12:	7e de       	rcall	.-772    	; 0xa10 <Pipe_WaitUntilReady>
     d14:	88 23       	and	r24, r24
     d16:	61 f0       	breq	.+24     	; 0xd30 <Pipe_Write_Stream_LE+0xa0>
     d18:	0f c0       	rjmp	.+30     	; 0xd38 <Pipe_Write_Stream_LE+0xa8>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     d1a:	f7 01       	movw	r30, r14
     d1c:	81 91       	ld	r24, Z+
     d1e:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
     d20:	80 93 af 00 	sts	0x00AF, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     d24:	08 94       	sec
     d26:	81 08       	sbc	r8, r1
     d28:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     d2a:	08 94       	sec
     d2c:	c1 1c       	adc	r12, r1
     d2e:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     d30:	81 14       	cp	r8, r1
     d32:	91 04       	cpc	r9, r1
     d34:	c1 f6       	brne	.-80     	; 0xce6 <Pipe_Write_Stream_LE+0x56>
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <Pipe_Write_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     d38:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     d3a:	8b 2d       	mov	r24, r11
     d3c:	0f 90       	pop	r0
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	1f 91       	pop	r17
     d44:	0f 91       	pop	r16
     d46:	ff 90       	pop	r15
     d48:	ef 90       	pop	r14
     d4a:	df 90       	pop	r13
     d4c:	cf 90       	pop	r12
     d4e:	bf 90       	pop	r11
     d50:	9f 90       	pop	r9
     d52:	8f 90       	pop	r8
     d54:	08 95       	ret

00000d56 <Pipe_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     d56:	8f 92       	push	r8
     d58:	9f 92       	push	r9
     d5a:	bf 92       	push	r11
     d5c:	cf 92       	push	r12
     d5e:	df 92       	push	r13
     d60:	ef 92       	push	r14
     d62:	ff 92       	push	r15
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	0f 92       	push	r0
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	e8 2e       	mov	r14, r24
     d74:	4b 01       	movw	r8, r22
     d76:	8a 01       	movw	r16, r20
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     d78:	80 91 aa 00 	lds	r24, 0x00AA
     d7c:	8f 7c       	andi	r24, 0xCF	; 207
     d7e:	80 61       	ori	r24, 0x10	; 16
     d80:	80 93 aa 00 	sts	0x00AA, r24
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
     d84:	99 83       	std	Y+1, r25	; 0x01
     d86:	44 de       	rcall	.-888    	; 0xa10 <Pipe_WaitUntilReady>
     d88:	b8 2e       	mov	r11, r24
     d8a:	99 81       	ldd	r25, Y+1	; 0x01
     d8c:	88 23       	and	r24, r24
     d8e:	c1 f5       	brne	.+112    	; 0xe00 <Pipe_Read_Stream_LE+0xaa>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     d90:	f9 2e       	mov	r15, r25
	Pipe_SetPipeToken(TEMPLATE_TOKEN);

	if ((ErrorCode = Pipe_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
     d92:	01 15       	cp	r16, r1
     d94:	11 05       	cpc	r17, r1
     d96:	39 f0       	breq	.+14     	; 0xda6 <Pipe_Read_Stream_LE+0x50>
	{
		Length -= *BytesProcessed;
     d98:	f8 01       	movw	r30, r16
     d9a:	20 81       	ld	r18, Z
     d9c:	31 81       	ldd	r19, Z+1	; 0x01
     d9e:	82 1a       	sub	r8, r18
     da0:	93 0a       	sbc	r9, r19
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     da2:	e2 0e       	add	r14, r18
     da4:	f3 1e       	adc	r15, r19
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     da6:	cc 24       	eor	r12, r12
     da8:	dd 24       	eor	r13, r13
     daa:	25 c0       	rjmp	.+74     	; 0xdf6 <Pipe_Read_Stream_LE+0xa0>
			 *          on its direction.
			 */
			static inline bool Pipe_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsReadWriteAllowed(void)
			{
				return ((UPINTX & (1 << RWAL)) ? true : false);
     dac:	80 91 a6 00 	lds	r24, 0x00A6
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     db0:	85 fd       	sbrc	r24, 5
     db2:	16 c0       	rjmp	.+44     	; 0xde0 <Pipe_Read_Stream_LE+0x8a>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
     db4:	80 91 a6 00 	lds	r24, 0x00A6
     db8:	8e 77       	andi	r24, 0x7E	; 126
     dba:	80 93 a6 00 	sts	0x00A6, r24
		{
			TEMPLATE_CLEAR_PIPE();

			if (BytesProcessed != NULL)
     dbe:	01 15       	cp	r16, r1
     dc0:	11 05       	cpc	r17, r1
     dc2:	51 f0       	breq	.+20     	; 0xdd8 <Pipe_Read_Stream_LE+0x82>
			{
				*BytesProcessed += BytesInTransfer;
     dc4:	f8 01       	movw	r30, r16
     dc6:	80 81       	ld	r24, Z
     dc8:	91 81       	ldd	r25, Z+1	; 0x01
     dca:	8c 0d       	add	r24, r12
     dcc:	9d 1d       	adc	r25, r13
     dce:	91 83       	std	Z+1, r25	; 0x01
     dd0:	80 83       	st	Z, r24
				return PIPE_RWSTREAM_IncompleteTransfer;
     dd2:	44 e0       	ldi	r20, 0x04	; 4
     dd4:	b4 2e       	mov	r11, r20
     dd6:	14 c0       	rjmp	.+40     	; 0xe00 <Pipe_Read_Stream_LE+0xaa>
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     dd8:	1b de       	rcall	.-970    	; 0xa10 <Pipe_WaitUntilReady>
     dda:	88 23       	and	r24, r24
     ddc:	61 f0       	breq	.+24     	; 0xdf6 <Pipe_Read_Stream_LE+0xa0>
     dde:	0f c0       	rjmp	.+30     	; 0xdfe <Pipe_Read_Stream_LE+0xa8>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
     de0:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     de4:	f7 01       	movw	r30, r14
     de6:	81 93       	st	Z+, r24
     de8:	7f 01       	movw	r14, r30
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     dea:	08 94       	sec
     dec:	81 08       	sbc	r8, r1
     dee:	91 08       	sbc	r9, r1
			BytesInTransfer++;
     df0:	08 94       	sec
     df2:	c1 1c       	adc	r12, r1
     df4:	d1 1c       	adc	r13, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}
	
	while (Length)
     df6:	81 14       	cp	r8, r1
     df8:	91 04       	cpc	r9, r1
     dfa:	c1 f6       	brne	.-80     	; 0xdac <Pipe_Read_Stream_LE+0x56>
     dfc:	01 c0       	rjmp	.+2      	; 0xe00 <Pipe_Read_Stream_LE+0xaa>
			{
				*BytesProcessed += BytesInTransfer;
				return PIPE_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Pipe_WaitUntilReady()))
     dfe:	b8 2e       	mov	r11, r24
			BytesInTransfer++;
		}
	}

	return PIPE_RWSTREAM_NoError;
}
     e00:	8b 2d       	mov	r24, r11
     e02:	0f 90       	pop	r0
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	ff 90       	pop	r15
     e0e:	ef 90       	pop	r14
     e10:	df 90       	pop	r13
     e12:	cf 90       	pop	r12
     e14:	bf 90       	pop	r11
     e16:	9f 90       	pop	r9
     e18:	8f 90       	pop	r8
     e1a:	08 95       	ret

00000e1c <USB_Host_GetDeviceConfigDescriptor>:
#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(const uint8_t ConfigNumber,
                                           uint16_t* const ConfigSizePtr,
                                           void* const BufferPtr,
                                           const uint16_t BufferSize)
{
     e1c:	cf 92       	push	r12
     e1e:	df 92       	push	r13
     e20:	ef 92       	push	r14
     e22:	ff 92       	push	r15
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	29 97       	sbiw	r28, 0x09	; 9
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	6b 01       	movw	r12, r22
     e3e:	8a 01       	movw	r16, r20
     e40:	79 01       	movw	r14, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e42:	90 e8       	ldi	r25, 0x80	; 128
     e44:	90 93 29 01 	sts	0x0129, r25
     e48:	96 e0       	ldi	r25, 0x06	; 6
     e4a:	90 93 2a 01 	sts	0x012A, r25
		{
			.bmRequestType = (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE),
			.bRequest      = REQ_GetDescriptor,
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	92 60       	ori	r25, 0x02	; 2
                                           const uint16_t BufferSize)
{
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
     e54:	90 93 2c 01 	sts	0x012C, r25
     e58:	80 93 2b 01 	sts	0x012B, r24
     e5c:	10 92 2e 01 	sts	0x012E, r1
     e60:	10 92 2d 01 	sts	0x012D, r1
     e64:	89 e0       	ldi	r24, 0x09	; 9
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	90 93 30 01 	sts	0x0130, r25
     e6c:	80 93 2f 01 	sts	0x012F, r24
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
     e70:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
     e74:	ce 01       	movw	r24, r28
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	95 d0       	rcall	.+298    	; 0xfa4 <USB_Host_SendControlRequest>
     e7a:	88 23       	and	r24, r24
     e7c:	b9 f4       	brne	.+46     	; 0xeac <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	9c 81       	ldd	r25, Y+4	; 0x04
     e82:	f6 01       	movw	r30, r12
     e84:	91 83       	std	Z+1, r25	; 0x01
     e86:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
     e88:	e8 16       	cp	r14, r24
     e8a:	f9 06       	cpc	r15, r25
     e8c:	70 f0       	brcs	.+28     	; 0xeaa <USB_Host_GetDeviceConfigDescriptor+0x8e>
	  return HOST_GETCONFIG_BuffOverflow;

	USB_ControlRequest.wLength = *ConfigSizePtr;
     e8e:	90 93 30 01 	sts	0x0130, r25
     e92:	80 93 2f 01 	sts	0x012F, r24

	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
     e96:	c8 01       	movw	r24, r16
     e98:	85 d0       	rcall	.+266    	; 0xfa4 <USB_Host_SendControlRequest>
     e9a:	88 23       	and	r24, r24
     e9c:	39 f4       	brne	.+14     	; 0xeac <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
     e9e:	f8 01       	movw	r30, r16
     ea0:	91 81       	ldd	r25, Z+1	; 0x01
     ea2:	92 30       	cpi	r25, 0x02	; 2
     ea4:	19 f0       	breq	.+6      	; 0xeac <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_InvalidData;
     ea6:	86 e0       	ldi	r24, 0x06	; 6
     ea8:	01 c0       	rjmp	.+2      	; 0xeac <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = le16_to_cpu(DESCRIPTOR_PCAST(ConfigHeader, USB_Descriptor_Configuration_Header_t)->TotalConfigurationSize);

	if (*ConfigSizePtr > BufferSize)
	  return HOST_GETCONFIG_BuffOverflow;
     eaa:	85 e0       	ldi	r24, 0x05	; 5

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
	  return HOST_GETCONFIG_InvalidData;

	return HOST_GETCONFIG_Successful;
}
     eac:	29 96       	adiw	r28, 0x09	; 9
     eae:	0f b6       	in	r0, 0x3f	; 63
     eb0:	f8 94       	cli
     eb2:	de bf       	out	0x3e, r29	; 62
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	cd bf       	out	0x3d, r28	; 61
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	1f 91       	pop	r17
     ebe:	0f 91       	pop	r16
     ec0:	ff 90       	pop	r15
     ec2:	ef 90       	pop	r14
     ec4:	df 90       	pop	r13
     ec6:	cf 90       	pop	r12
     ec8:	08 95       	ret

00000eca <USB_GetNextDescriptorComp>:
}

uint8_t USB_GetNextDescriptorComp(uint16_t* const BytesRem,
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
     eca:	af 92       	push	r10
     ecc:	bf 92       	push	r11
     ece:	cf 92       	push	r12
     ed0:	df 92       	push	r13
     ed2:	ef 92       	push	r14
     ed4:	ff 92       	push	r15
     ed6:	0f 93       	push	r16
     ed8:	1f 93       	push	r17
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	8c 01       	movw	r16, r24
     ee0:	eb 01       	movw	r28, r22
     ee2:	6a 01       	movw	r12, r20
	uint8_t ErrorCode;

	while (*BytesRem)
     ee4:	23 c0       	rjmp	.+70     	; 0xf2c <USB_GetNextDescriptorComp+0x62>
	{
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
     ee6:	e8 81       	ld	r30, Y
     ee8:	f9 81       	ldd	r31, Y+1	; 0x01
     eea:	5f 01       	movw	r10, r30
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
     eec:	20 81       	ld	r18, Z
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	c7 01       	movw	r24, r14
     ef2:	2e 15       	cp	r18, r14
     ef4:	3f 05       	cpc	r19, r15
     ef6:	08 f4       	brcc	.+2      	; 0xefa <USB_GetNextDescriptorComp+0x30>
     ef8:	c9 01       	movw	r24, r18
				
				if (*BytesRem < CurrDescriptorSize)
				  CurrDescriptorSize = *BytesRem;

				*CurrConfigLoc  = (void*)((uintptr_t)*CurrConfigLoc + CurrDescriptorSize);
     efa:	e8 0f       	add	r30, r24
     efc:	f9 1f       	adc	r31, r25
     efe:	f9 83       	std	Y+1, r31	; 0x01
     f00:	e8 83       	st	Y, r30
				*BytesRem      -= CurrDescriptorSize;
     f02:	f8 01       	movw	r30, r16
     f04:	20 81       	ld	r18, Z
     f06:	31 81       	ldd	r19, Z+1	; 0x01
     f08:	28 1b       	sub	r18, r24
     f0a:	39 0b       	sbc	r19, r25
     f0c:	31 83       	std	Z+1, r19	; 0x01
     f0e:	20 83       	st	Z, r18
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
     f10:	88 81       	ld	r24, Y
     f12:	99 81       	ldd	r25, Y+1	; 0x01
     f14:	f6 01       	movw	r30, r12
     f16:	09 95       	icall
     f18:	82 30       	cpi	r24, 0x02	; 2
     f1a:	41 f0       	breq	.+16     	; 0xf2c <USB_GetNextDescriptorComp+0x62>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	69 f4       	brne	.+26     	; 0xf3a <USB_GetNextDescriptorComp+0x70>
			{
				*CurrConfigLoc = PrevDescLoc;
     f20:	a8 82       	st	Y, r10
     f22:	b9 82       	std	Y+1, r11	; 0x01
				*BytesRem      = PrevBytesRem;
     f24:	f8 01       	movw	r30, r16
     f26:	f1 82       	std	Z+1, r15	; 0x01
     f28:	e0 82       	st	Z, r14
     f2a:	07 c0       	rjmp	.+14     	; 0xf3a <USB_GetNextDescriptorComp+0x70>
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
     f2c:	f8 01       	movw	r30, r16
     f2e:	e0 80       	ld	r14, Z
     f30:	f1 80       	ldd	r15, Z+1	; 0x01
     f32:	e1 14       	cp	r14, r1
     f34:	f1 04       	cpc	r15, r1
     f36:	b9 f6       	brne	.-82     	; 0xee6 <USB_GetNextDescriptorComp+0x1c>

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
     f38:	82 e0       	ldi	r24, 0x02	; 2
}
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	ff 90       	pop	r15
     f44:	ef 90       	pop	r14
     f46:	df 90       	pop	r13
     f48:	cf 90       	pop	r12
     f4a:	bf 90       	pop	r11
     f4c:	af 90       	pop	r10
     f4e:	08 95       	ret

00000f50 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     f50:	08 95       	ret

00000f52 <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	18 2f       	mov	r17, r24
	#if (USB_HOST_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
     f5a:	c8 ee       	ldi	r28, 0xE8	; 232
     f5c:	d3 e0       	ldi	r29, 0x03	; 3
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f5e:	07 c0       	rjmp	.+14     	; 0xf6e <USB_Host_WaitForIOS+0x1c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	3f db       	rcall	.-2434   	; 0x5e2 <USB_Host_WaitMS>
     f64:	88 23       	and	r24, r24
     f66:	d1 f4       	brne	.+52     	; 0xf9c <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;

		if (!(TimeoutCounter--))
     f68:	20 97       	sbiw	r28, 0x00	; 0
     f6a:	b9 f0       	breq	.+46     	; 0xf9a <USB_Host_WaitForIOS+0x48>
     f6c:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f6e:	11 23       	and	r17, r17
     f70:	29 f4       	brne	.+10     	; 0xf7c <USB_Host_WaitForIOS+0x2a>
			 *  \return Boolean \c true if the current pipe is ready for a SETUP packet, \c false otherwise.
			 */
			static inline bool Pipe_IsSETUPSent(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsSETUPSent(void)
			{
				return ((UPINTX & (1 << TXSTPI)) ? true : false);
     f72:	80 91 a6 00 	lds	r24, 0x00A6
     f76:	83 ff       	sbrs	r24, 3
     f78:	f3 cf       	rjmp	.-26     	; 0xf60 <USB_Host_WaitForIOS+0xe>
     f7a:	0d c0       	rjmp	.+26     	; 0xf96 <USB_Host_WaitForIOS+0x44>
     f7c:	11 30       	cpi	r17, 0x01	; 1
     f7e:	29 f4       	brne	.+10     	; 0xf8a <USB_Host_WaitForIOS+0x38>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
     f80:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     f84:	80 ff       	sbrs	r24, 0
     f86:	ec cf       	rjmp	.-40     	; 0xf60 <USB_Host_WaitForIOS+0xe>
     f88:	06 c0       	rjmp	.+12     	; 0xf96 <USB_Host_WaitForIOS+0x44>
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif

	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     f8a:	12 30       	cpi	r17, 0x02	; 2
     f8c:	49 f7       	brne	.-46     	; 0xf60 <USB_Host_WaitForIOS+0xe>
			 *  \return Boolean \c true if the current pipe is ready for an OUT packet, \c false otherwise.
			 */
			static inline bool Pipe_IsOUTReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsOUTReady(void)
			{
				return ((UPINTX & (1 << TXOUTI)) ? true : false);
     f8e:	80 91 a6 00 	lds	r24, 0x00A6
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     f92:	82 ff       	sbrs	r24, 2
     f94:	e5 cf       	rjmp	.-54     	; 0xf60 <USB_Host_WaitForIOS+0xe>

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	01 c0       	rjmp	.+2      	; 0xf9c <USB_Host_WaitForIOS+0x4a>

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
		  return ErrorCode;

		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
     f9a:	84 e0       	ldi	r24, 0x04	; 4
	}

	return HOST_SENDCONTROL_Successful;
}
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	08 95       	ret

00000fa4 <USB_Host_SendControlRequest>:
#include "HostStandardReq.h"

uint8_t USB_Host_ConfigurationNumber;

uint8_t USB_Host_SendControlRequest(void* const BufferPtr)
{
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	8c 01       	movw	r16, r24
			 *  \return Boolean \c true if the bus is currently suspended, \c false otherwise.
			 */
			static inline bool USB_Host_IsBusSuspended(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool USB_Host_IsBusSuspended(void)
			{
				return ((UHCON & (1 << SOFEN)) ? false : true);
     fb2:	e0 90 9e 00 	lds	r14, 0x009E
     fb6:	ff 24       	eor	r15, r15
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	e8 22       	and	r14, r24
     fbc:	ff 24       	eor	r15, r15
	uint8_t* DataStream   = (uint8_t*)BufferPtr;
	bool     BusSuspended = USB_Host_IsBusSuspended();
	uint8_t  ReturnStatus = HOST_SENDCONTROL_Successful;
	uint16_t DataLen      = USB_ControlRequest.wLength;
     fbe:	c0 91 2f 01 	lds	r28, 0x012F
     fc2:	d0 91 30 01 	lds	r29, 0x0130
			 *  host and attached device may occur.
			 */
			static inline void USB_Host_ResumeBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_ResumeBus(void)
			{
				UHCON |=  (1 << SOFEN);
     fc6:	80 91 9e 00 	lds	r24, 0x009E
     fca:	81 60       	ori	r24, 0x01	; 1
     fcc:	80 93 9e 00 	sts	0x009E, r24

	USB_Host_ResumeBus();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	07 db       	rcall	.-2546   	; 0x5e2 <USB_Host_WaitMS>
     fd4:	88 23       	and	r24, r24
     fd6:	09 f0       	breq	.+2      	; 0xfda <USB_Host_SendControlRequest+0x36>
     fd8:	cb c0       	rjmp	.+406    	; 0x1170 <USB_Host_SendControlRequest+0x1cc>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
     fda:	80 91 aa 00 	lds	r24, 0x00AA
     fde:	8f 7c       	andi	r24, 0xCF	; 207
     fe0:	80 93 aa 00 	sts	0x00AA, r24

			/** Clears the error flags for the currently selected pipe. */
			static inline void Pipe_ClearError(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearError(void)
			{
				UPERRX = 0;
     fe4:	10 92 f5 00 	sts	0x00F5, r1
				UPINTX &= ~(1 << PERRI);
     fe8:	80 91 a6 00 	lds	r24, 0x00A6
     fec:	8f 7e       	andi	r24, 0xEF	; 239
     fee:	80 93 a6 00 	sts	0x00A6, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
     ff2:	80 91 a9 00 	lds	r24, 0x00A9
     ff6:	8f 7b       	andi	r24, 0xBF	; 191
     ff8:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Write_8(USB_ControlRequest.bRequest);
	Pipe_Write_16_LE(USB_ControlRequest.wValue);
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;
     ffc:	e9 e2       	ldi	r30, 0x29	; 41
     ffe:	f1 e0       	ldi	r31, 0x01	; 1

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_8(*(HeaderStream++));	
    1000:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    1002:	80 93 af 00 	sts	0x00AF, r24
	Pipe_Write_16_LE(USB_ControlRequest.wIndex);
	Pipe_Write_16_LE(USB_ControlRequest.wLength);
	#else
	uint8_t* HeaderStream = (uint8_t*)&USB_ControlRequest;

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	e1 33       	cpi	r30, 0x31	; 49
    100a:	f8 07       	cpc	r31, r24
    100c:	c9 f7       	brne	.-14     	; 0x1000 <USB_Host_SendControlRequest+0x5c>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearSETUP(void)
			{
				UPINTX &= ~((1 << TXSTPI) | (1 << FIFOCON));
    100e:	80 91 a6 00 	lds	r24, 0x00A6
    1012:	87 77       	andi	r24, 0x77	; 119
    1014:	80 93 a6 00 	sts	0x00A6, r24
	  Pipe_Write_8(*(HeaderStream++));	
	#endif
	
	Pipe_ClearSETUP();

	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	9b df       	rcall	.-202    	; 0xf52 <USB_Host_WaitForIOS>
    101c:	88 23       	and	r24, r24
    101e:	09 f0       	breq	.+2      	; 0x1022 <USB_Host_SendControlRequest+0x7e>
    1020:	a7 c0       	rjmp	.+334    	; 0x1170 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1022:	80 91 a9 00 	lds	r24, 0x00A9
    1026:	80 64       	ori	r24, 0x40	; 64
    1028:	80 93 a9 00 	sts	0x00A9, r24
	  goto End_Of_Control_Send;

	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	d9 da       	rcall	.-2638   	; 0x5e2 <USB_Host_WaitMS>
    1030:	88 23       	and	r24, r24
    1032:	09 f0       	breq	.+2      	; 0x1036 <USB_Host_SendControlRequest+0x92>
    1034:	9d c0       	rjmp	.+314    	; 0x1170 <USB_Host_SendControlRequest+0x1cc>
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
    1036:	80 91 29 01 	lds	r24, 0x0129
    103a:	87 ff       	sbrs	r24, 7
    103c:	4f c0       	rjmp	.+158    	; 0x10dc <USB_Host_SendControlRequest+0x138>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    103e:	80 91 aa 00 	lds	r24, 0x00AA
    1042:	8f 7c       	andi	r24, 0xCF	; 207
    1044:	80 61       	ori	r24, 0x10	; 16
    1046:	80 93 aa 00 	sts	0x00AA, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
    104a:	01 15       	cp	r16, r1
    104c:	11 05       	cpc	r17, r1
    104e:	61 f5       	brne	.+88     	; 0x10a8 <USB_Host_SendControlRequest+0x104>
    1050:	2d c0       	rjmp	.+90     	; 0x10ac <USB_Host_SendControlRequest+0x108>

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1052:	80 91 a9 00 	lds	r24, 0x00A9
    1056:	8f 7b       	andi	r24, 0xBF	; 191
    1058:	80 93 a9 00 	sts	0x00A9, r24
		{
			while (DataLen)
			{
				Pipe_Unfreeze();

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	79 df       	rcall	.-270    	; 0xf52 <USB_Host_WaitForIOS>
    1060:	88 23       	and	r24, r24
    1062:	09 f0       	breq	.+2      	; 0x1066 <USB_Host_SendControlRequest+0xc2>
    1064:	85 c0       	rjmp	.+266    	; 0x1170 <USB_Host_SendControlRequest+0x1cc>
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1066:	80 91 f6 00 	lds	r24, 0x00F6
    106a:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	49 f4       	brne	.+18     	; 0x1084 <USB_Host_SendControlRequest+0xe0>
				  DataLen = 0;
    1072:	c0 e0       	ldi	r28, 0x00	; 0
    1074:	d0 e0       	ldi	r29, 0x00	; 0
    1076:	06 c0       	rjmp	.+12     	; 0x1084 <USB_Host_SendControlRequest+0xe0>
			 *  \return Next byte in the currently selected pipe's FIFO buffer.
			 */
			static inline uint8_t Pipe_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_8(void)
			{
				return UPDATX;
    1078:	80 91 af 00 	lds	r24, 0x00AF

				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_8();
    107c:	f8 01       	movw	r30, r16
    107e:	81 93       	st	Z+, r24
    1080:	8f 01       	movw	r16, r30
					DataLen--;
    1082:	21 97       	sbiw	r28, 0x01	; 1
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1084:	80 91 f6 00 	lds	r24, 0x00F6
    1088:	90 91 f7 00 	lds	r25, 0x00F7
				  goto End_Of_Control_Send;

				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;

				while (Pipe_BytesInPipe() && DataLen)
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	11 f0       	breq	.+4      	; 0x1094 <USB_Host_SendControlRequest+0xf0>
    1090:	20 97       	sbiw	r28, 0x00	; 0
    1092:	91 f7       	brne	.-28     	; 0x1078 <USB_Host_SendControlRequest+0xd4>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1094:	80 91 a9 00 	lds	r24, 0x00A9
    1098:	80 64       	ori	r24, 0x40	; 64
    109a:	80 93 a9 00 	sts	0x00A9, r24
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    109e:	80 91 a6 00 	lds	r24, 0x00A6
    10a2:	8e 77       	andi	r24, 0x7E	; 126
    10a4:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetPipeToken(PIPE_TOKEN_IN);

		if (DataStream != NULL)
		{
			while (DataLen)
    10a8:	20 97       	sbiw	r28, 0x00	; 0
    10aa:	99 f6       	brne	.-90     	; 0x1052 <USB_Host_SendControlRequest+0xae>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10ac:	80 91 aa 00 	lds	r24, 0x00AA
    10b0:	8f 7c       	andi	r24, 0xCF	; 207
    10b2:	80 62       	ori	r24, 0x20	; 32
    10b4:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10b8:	80 91 a9 00 	lds	r24, 0x00A9
    10bc:	8f 7b       	andi	r24, 0xBF	; 191
    10be:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_OUT);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10c2:	82 e0       	ldi	r24, 0x02	; 2
    10c4:	46 df       	rcall	.-372    	; 0xf52 <USB_Host_WaitForIOS>
    10c6:	88 23       	and	r24, r24
    10c8:	09 f0       	breq	.+2      	; 0x10cc <USB_Host_SendControlRequest+0x128>
    10ca:	52 c0       	rjmp	.+164    	; 0x1170 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    10cc:	80 91 a6 00 	lds	r24, 0x00A6
    10d0:	8b 77       	andi	r24, 0x7B	; 123
    10d2:	80 93 a6 00 	sts	0x00A6, r24
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	3c df       	rcall	.-392    	; 0xf52 <USB_Host_WaitForIOS>
    10da:	4a c0       	rjmp	.+148    	; 0x1170 <USB_Host_SendControlRequest+0x1cc>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
    10dc:	01 15       	cp	r16, r1
    10de:	11 05       	cpc	r17, r1
    10e0:	99 f1       	breq	.+102    	; 0x1148 <USB_Host_SendControlRequest+0x1a4>
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    10e2:	80 91 aa 00 	lds	r24, 0x00AA
    10e6:	8f 7c       	andi	r24, 0xCF	; 207
    10e8:	80 62       	ori	r24, 0x20	; 32
    10ea:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    10ee:	80 91 a9 00 	lds	r24, 0x00A9
    10f2:	8f 7b       	andi	r24, 0xBF	; 191
    10f4:	80 93 a9 00 	sts	0x00A9, r24
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    10f8:	1c c0       	rjmp	.+56     	; 0x1132 <USB_Host_SendControlRequest+0x18e>
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    10fa:	82 e0       	ldi	r24, 0x02	; 2
    10fc:	2a df       	rcall	.-428    	; 0xf52 <USB_Host_WaitForIOS>
    10fe:	88 23       	and	r24, r24
    1100:	b9 f5       	brne	.+110    	; 0x1170 <USB_Host_SendControlRequest+0x1cc>
    1102:	f8 01       	movw	r30, r16
    1104:	06 c0       	rjmp	.+12     	; 0x1112 <USB_Host_SendControlRequest+0x16e>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
				{
					Pipe_Write_8(*(DataStream++));
    1106:	81 91       	ld	r24, Z+
    1108:	8f 01       	movw	r16, r30
			 *  \param[in] Data  Data to write into the the currently selected pipe's FIFO buffer.
			 */
			static inline void Pipe_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_8(const uint8_t Data)
			{
				UPDATX = Data;
    110a:	80 93 af 00 	sts	0x00AF, r24
					DataLen--;
    110e:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_Host_ControlPipeSize))
    1110:	59 f0       	breq	.+22     	; 0x1128 <USB_Host_SendControlRequest+0x184>
    1112:	8f 01       	movw	r16, r30
			 *  \return Total number of bytes in the currently selected pipe's FIFO buffer.
			 */
			static inline uint16_t Pipe_BytesInPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Pipe_BytesInPipe(void)
			{
				return UPBCX;
    1114:	20 91 f6 00 	lds	r18, 0x00F6
    1118:	30 91 f7 00 	lds	r19, 0x00F7
    111c:	80 91 23 01 	lds	r24, 0x0123
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	28 17       	cp	r18, r24
    1124:	39 07       	cpc	r19, r25
    1126:	78 f3       	brcs	.-34     	; 0x1106 <USB_Host_SendControlRequest+0x162>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    1128:	80 91 a6 00 	lds	r24, 0x00A6
    112c:	8b 77       	andi	r24, 0x7B	; 123
    112e:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetPipeToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();

			while (DataLen)
    1132:	20 97       	sbiw	r28, 0x00	; 0
    1134:	11 f7       	brne	.-60     	; 0x10fa <USB_Host_SendControlRequest+0x156>
				}

				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
    1136:	82 e0       	ldi	r24, 0x02	; 2
    1138:	0c df       	rcall	.-488    	; 0xf52 <USB_Host_WaitForIOS>
    113a:	88 23       	and	r24, r24
    113c:	c9 f4       	brne	.+50     	; 0x1170 <USB_Host_SendControlRequest+0x1cc>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    113e:	80 91 a9 00 	lds	r24, 0x00A9
    1142:	80 64       	ori	r24, 0x40	; 64
    1144:	80 93 a9 00 	sts	0x00A9, r24
			 *  \param[in] Token  New pipe token to set the selected pipe to, as a \c PIPE_TOKEN_* mask.
			 */
			static inline void Pipe_SetPipeToken(const uint8_t Token) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetPipeToken(const uint8_t Token)
			{
				UPCFG0X = ((UPCFG0X & ~(0x03 << PTOKEN0)) | Token);
    1148:	80 91 aa 00 	lds	r24, 0x00AA
    114c:	8f 7c       	andi	r24, 0xCF	; 207
    114e:	80 61       	ori	r24, 0x10	; 16
    1150:	80 93 aa 00 	sts	0x00AA, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1154:	80 91 a9 00 	lds	r24, 0x00A9
    1158:	8f 7b       	andi	r24, 0xBF	; 191
    115a:	80 93 a9 00 	sts	0x00A9, r24
		}

		Pipe_SetPipeToken(PIPE_TOKEN_IN);
		Pipe_Unfreeze();

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	f8 de       	rcall	.-528    	; 0xf52 <USB_Host_WaitForIOS>
    1162:	88 23       	and	r24, r24
    1164:	29 f4       	brne	.+10     	; 0x1170 <USB_Host_SendControlRequest+0x1cc>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    1166:	90 91 a6 00 	lds	r25, 0x00A6
    116a:	9e 77       	andi	r25, 0x7E	; 126
    116c:	90 93 a6 00 	sts	0x00A6, r25

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1170:	90 91 a9 00 	lds	r25, 0x00A9
    1174:	90 64       	ori	r25, 0x40	; 64
    1176:	90 93 a9 00 	sts	0x00A9, r25
	}

End_Of_Control_Send:
	Pipe_Freeze();

	if (BusSuspended)
    117a:	e1 14       	cp	r14, r1
    117c:	f1 04       	cpc	r15, r1
    117e:	29 f4       	brne	.+10     	; 0x118a <USB_Host_SendControlRequest+0x1e6>
			 *        some events (such as device disconnections) will not fire until the bus is resumed.
			 */
			static inline void USB_Host_SuspendBus(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Host_SuspendBus(void)
			{
				UHCON &= ~(1 << SOFEN);
    1180:	90 91 9e 00 	lds	r25, 0x009E
    1184:	9e 7f       	andi	r25, 0xFE	; 254
    1186:	90 93 9e 00 	sts	0x009E, r25
			 *  \param[in] PipeNumber  Index of the pipe to reset.
			 */
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ResetPipe(const uint8_t PipeNumber)
			{
				UPRST = (1 << PipeNumber);
    118a:	91 e0       	ldi	r25, 0x01	; 1
    118c:	90 93 a8 00 	sts	0x00A8, r25
				UPRST = 0;
    1190:	10 92 a8 00 	sts	0x00A8, r1
	  USB_Host_SuspendBus();

	Pipe_ResetPipe(PIPE_CONTROLPIPE);

	return ReturnStatus;
}
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	ff 90       	pop	r15
    119e:	ef 90       	pop	r14
    11a0:	08 95       	ret

000011a2 <USB_Host_SetDeviceConfiguration>:

	return HOST_SENDCONTROL_Successful;
}

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
    11a2:	1f 93       	push	r17
    11a4:	18 2f       	mov	r17, r24
	uint8_t ErrorCode;

	USB_ControlRequest = (USB_Request_Header_t)
    11a6:	10 92 29 01 	sts	0x0129, r1
    11aa:	89 e0       	ldi	r24, 0x09	; 9
    11ac:	80 93 2a 01 	sts	0x012A, r24
    11b0:	10 93 2b 01 	sts	0x012B, r17
    11b4:	10 92 2c 01 	sts	0x012C, r1
    11b8:	10 92 2e 01 	sts	0x012E, r1
    11bc:	10 92 2d 01 	sts	0x012D, r1
    11c0:	10 92 30 01 	sts	0x0130, r1
    11c4:	10 92 2f 01 	sts	0x012F, r1
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    11c8:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
	
	if ((ErrorCode = USB_Host_SendControlRequest(NULL)) == HOST_SENDCONTROL_Successful)
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	e9 de       	rcall	.-558    	; 0xfa4 <USB_Host_SendControlRequest>
    11d2:	88 23       	and	r24, r24
    11d4:	49 f4       	brne	.+18     	; 0x11e8 <USB_Host_SetDeviceConfiguration+0x46>
	{
		USB_Host_ConfigurationNumber = ConfigNumber;
    11d6:	10 93 27 01 	sts	0x0127, r17
		USB_HostState                = (ConfigNumber) ? HOST_STATE_Configured : HOST_STATE_Addressed;
    11da:	11 23       	and	r17, r17
    11dc:	11 f0       	breq	.+4      	; 0x11e2 <USB_Host_SetDeviceConfiguration+0x40>
    11de:	9b e0       	ldi	r25, 0x0B	; 11
    11e0:	01 c0       	rjmp	.+2      	; 0x11e4 <USB_Host_SetDeviceConfiguration+0x42>
    11e2:	9a e0       	ldi	r25, 0x0A	; 10
    11e4:	90 93 31 01 	sts	0x0131, r25
	}

	return ErrorCode;
}
    11e8:	1f 91       	pop	r17
    11ea:	08 95       	ret

000011ec <USB_Host_ClearEndpointStall>:
	return USB_Host_SendControlRequest(FeatureStatus);
}

uint8_t USB_Host_ClearEndpointStall(const uint8_t EndpointAddress)
{
	USB_ControlRequest = (USB_Request_Header_t)
    11ec:	92 e0       	ldi	r25, 0x02	; 2
    11ee:	90 93 29 01 	sts	0x0129, r25
    11f2:	91 e0       	ldi	r25, 0x01	; 1
    11f4:	90 93 2a 01 	sts	0x012A, r25
    11f8:	10 92 2c 01 	sts	0x012C, r1
    11fc:	10 92 2b 01 	sts	0x012B, r1
    1200:	80 93 2d 01 	sts	0x012D, r24
    1204:	10 92 2e 01 	sts	0x012E, r1
    1208:	10 92 30 01 	sts	0x0130, r1
    120c:	10 92 2f 01 	sts	0x012F, r1
    1210:	10 92 a7 00 	sts	0x00A7, r1
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	return USB_Host_SendControlRequest(NULL);
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	90 e0       	ldi	r25, 0x00	; 0
}
    1218:	c5 ce       	rjmp	.-630    	; 0xfa4 <USB_Host_SendControlRequest>

0000121a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    121a:	1f 93       	push	r17
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
			 *  \return Index of the currently selected pipe.
			 */
			static inline uint8_t Pipe_GetCurrentPipe(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetCurrentPipe(void)
			{
				return (UPNUM & PIPE_PIPENUM_MASK);
    1220:	c7 ea       	ldi	r28, 0xA7	; 167
    1222:	d0 e0       	ldi	r29, 0x00	; 0
    1224:	18 81       	ld	r17, Y
    1226:	17 70       	andi	r17, 0x07	; 7
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1228:	18 82       	st	Y, r1
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();

	Pipe_SelectPipe(PIPE_CONTROLPIPE);

	USB_Host_ProcessNextHostState();
    122a:	30 da       	rcall	.-2976   	; 0x68c <USB_Host_ProcessNextHostState>
    122c:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	08 95       	ret

00001236 <DCOMP_SI_Host_NextSIInterface>:

	return SI_ENUMERROR_NoError;
}

uint8_t DCOMP_SI_Host_NextSIInterface(void* const CurrentDescriptor)
{
    1236:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Interface)
    1238:	81 81       	ldd	r24, Z+1	; 0x01
    123a:	84 30       	cpi	r24, 0x04	; 4
    123c:	49 f4       	brne	.+18     	; 0x1250 <DCOMP_SI_Host_NextSIInterface+0x1a>
	{
		USB_Descriptor_Interface_t* Interface = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Interface_t);

		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
    123e:	85 81       	ldd	r24, Z+5	; 0x05
    1240:	86 30       	cpi	r24, 0x06	; 6
    1242:	31 f4       	brne	.+12     	; 0x1250 <DCOMP_SI_Host_NextSIInterface+0x1a>
    1244:	86 81       	ldd	r24, Z+6	; 0x06
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	19 f4       	brne	.+6      	; 0x1250 <DCOMP_SI_Host_NextSIInterface+0x1a>
		    (Interface->SubClass == SI_CSCP_StillImageSubclass) &&
    124a:	87 81       	ldd	r24, Z+7	; 0x07
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	11 f0       	breq	.+4      	; 0x1254 <DCOMP_SI_Host_NextSIInterface+0x1e>
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1250:	82 e0       	ldi	r24, 0x02	; 2
    1252:	08 95       	ret

		if ((Interface->Class    == SI_CSCP_StillImageClass)    &&
		    (Interface->SubClass == SI_CSCP_StillImageSubclass) &&
		    (Interface->Protocol == SI_CSCP_BulkOnlyProtocol))
		{
			return DESCRIPTOR_SEARCH_Found;
    1254:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1256:	08 95       	ret

00001258 <DCOMP_SI_Host_NextSIInterfaceEndpoint>:

uint8_t DCOMP_SI_Host_NextSIInterfaceEndpoint(void* const CurrentDescriptor)
{
    1258:	fc 01       	movw	r30, r24
	USB_Descriptor_Header_t* Header = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Header_t);

	if (Header->Type == DTYPE_Endpoint)
    125a:	81 81       	ldd	r24, Z+1	; 0x01
    125c:	85 30       	cpi	r24, 0x05	; 5
    125e:	51 f4       	brne	.+20     	; 0x1274 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x1c>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);
    1260:	83 81       	ldd	r24, Z+3	; 0x03
    1262:	83 70       	andi	r24, 0x03	; 3

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    1264:	82 50       	subi	r24, 0x02	; 2
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	38 f4       	brcc	.+14     	; 0x1278 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x20>
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
    126a:	82 81       	ldd	r24, Z+2	; 0x02
    126c:	af db       	rcall	.-2210   	; 0x9cc <Pipe_IsEndpointBound>
	{
		USB_Descriptor_Endpoint_t* Endpoint = DESCRIPTOR_PCAST(CurrentDescriptor, USB_Descriptor_Endpoint_t);

		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
    126e:	88 23       	and	r24, r24
    1270:	19 f4       	brne	.+6      	; 0x1278 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x20>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x24>
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		{
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	else if (Header->Type == DTYPE_Interface)
    1274:	84 30       	cpi	r24, 0x04	; 4
    1276:	21 f0       	breq	.+8      	; 0x1280 <DCOMP_SI_Host_NextSIInterfaceEndpoint+0x28>
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
    1278:	82 e0       	ldi	r24, 0x02	; 2
    127a:	08 95       	ret
		uint8_t EndpointType = (Endpoint->Attributes & EP_TYPE_MASK);

		if (((EndpointType == EP_TYPE_BULK) || (EndpointType == EP_TYPE_INTERRUPT)) &&
		    (!(Pipe_IsEndpointBound(Endpoint->EndpointAddress))))
		{
			return DESCRIPTOR_SEARCH_Found;
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	08 95       	ret
		}
	}
	else if (Header->Type == DTYPE_Interface)
	{
		return DESCRIPTOR_SEARCH_Fail;
    1280:	81 e0       	ldi	r24, 0x01	; 1
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    1282:	08 95       	ret

00001284 <SI_Host_ConfigurePipes>:
#include "StillImage.h"

uint8_t SI_Host_ConfigurePipes(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                               uint16_t ConfigDescriptorSize,
                               void* ConfigDescriptorData)
{
    1284:	4f 92       	push	r4
    1286:	5f 92       	push	r5
    1288:	6f 92       	push	r6
    128a:	7f 92       	push	r7
    128c:	8f 92       	push	r8
    128e:	9f 92       	push	r9
    1290:	af 92       	push	r10
    1292:	bf 92       	push	r11
    1294:	cf 92       	push	r12
    1296:	df 92       	push	r13
    1298:	ef 92       	push	r14
    129a:	ff 92       	push	r15
    129c:	0f 93       	push	r16
    129e:	1f 93       	push	r17
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <SI_Host_ConfigurePipes+0x22>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <SI_Host_ConfigurePipes+0x24>
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <SI_Host_ConfigurePipes+0x26>
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	6c 01       	movw	r12, r24
    12b0:	7a 83       	std	Y+2, r23	; 0x02
    12b2:	69 83       	std	Y+1, r22	; 0x01
    12b4:	5c 83       	std	Y+4, r21	; 0x04
    12b6:	4b 83       	std	Y+3, r20	; 0x03
	USB_Descriptor_Endpoint_t*  DataINEndpoint      = NULL;
	USB_Descriptor_Endpoint_t*  DataOUTEndpoint     = NULL;
	USB_Descriptor_Endpoint_t*  EventsEndpoint      = NULL;
	USB_Descriptor_Interface_t* StillImageInterface = NULL;

	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));
    12b8:	06 96       	adiw	r24, 0x06	; 6
    12ba:	fc 01       	movw	r30, r24
    12bc:	8d e0       	ldi	r24, 0x0D	; 13
    12be:	df 01       	movw	r26, r30
    12c0:	1d 92       	st	X+, r1
    12c2:	8a 95       	dec	r24
    12c4:	e9 f7       	brne	.-6      	; 0x12c0 <SI_Host_ConfigurePipes+0x3c>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    12c6:	eb 81       	ldd	r30, Y+3	; 0x03
    12c8:	fc 81       	ldd	r31, Y+4	; 0x04
    12ca:	81 81       	ldd	r24, Z+1	; 0x01
    12cc:	82 30       	cpi	r24, 0x02	; 2
    12ce:	09 f0       	breq	.+2      	; 0x12d2 <SI_Host_ConfigurePipes+0x4e>
    12d0:	9e c0       	rjmp	.+316    	; 0x140e <SI_Host_ConfigurePipes+0x18a>
    12d2:	44 24       	eor	r4, r4
    12d4:	55 24       	eor	r5, r5
    12d6:	aa 24       	eor	r10, r10
    12d8:	bb 24       	eor	r11, r11
    12da:	88 24       	eor	r8, r8
    12dc:	99 24       	eor	r9, r9
    12de:	66 24       	eor	r6, r6
    12e0:	77 24       	eor	r7, r7
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
	{
		if (!(StillImageInterface) ||
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12e2:	83 e0       	ldi	r24, 0x03	; 3
    12e4:	e8 2e       	mov	r14, r24
    12e6:	f1 2c       	mov	r15, r1
    12e8:	ec 0e       	add	r14, r28
    12ea:	fd 1e       	adc	r15, r29
    12ec:	8e 01       	movw	r16, r28
    12ee:	0f 5f       	subi	r16, 0xFF	; 255
    12f0:	1f 4f       	sbci	r17, 0xFF	; 255
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
	{
		if (!(StillImageInterface) ||
    12f2:	41 14       	cp	r4, r1
    12f4:	51 04       	cpc	r5, r1
    12f6:	39 f0       	breq	.+14     	; 0x1306 <SI_Host_ConfigurePipes+0x82>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    12f8:	c8 01       	movw	r24, r16
    12fa:	b7 01       	movw	r22, r14
    12fc:	4c e2       	ldi	r20, 0x2C	; 44
    12fe:	59 e0       	ldi	r21, 0x09	; 9
    1300:	e4 dd       	rcall	.-1080   	; 0xeca <USB_GetNextDescriptorComp>
	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
	{
		if (!(StillImageInterface) ||
    1302:	88 23       	and	r24, r24
    1304:	89 f0       	breq	.+34     	; 0x1328 <SI_Host_ConfigurePipes+0xa4>
		    USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
		                              DCOMP_SI_Host_NextSIInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1306:	c8 01       	movw	r24, r16
    1308:	b7 01       	movw	r22, r14
    130a:	4b e1       	ldi	r20, 0x1B	; 27
    130c:	59 e0       	ldi	r21, 0x09	; 9
    130e:	dd dd       	rcall	.-1094   	; 0xeca <USB_GetNextDescriptorComp>
    1310:	88 23       	and	r24, r24
    1312:	09 f0       	breq	.+2      	; 0x1316 <SI_Host_ConfigurePipes+0x92>
    1314:	7e c0       	rjmp	.+252    	; 0x1412 <SI_Host_ConfigurePipes+0x18e>
			                              DCOMP_SI_Host_NextSIInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return SI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			StillImageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1316:	4b 80       	ldd	r4, Y+3	; 0x03
    1318:	5c 80       	ldd	r5, Y+4	; 0x04

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
			EventsEndpoint  = NULL;
    131a:	aa 24       	eor	r10, r10
    131c:	bb 24       	eor	r11, r11
			}

			StillImageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);

			DataINEndpoint  = NULL;
			DataOUTEndpoint = NULL;
    131e:	88 24       	eor	r8, r8
    1320:	99 24       	eor	r9, r9
			                              DCOMP_SI_Host_NextSIInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return SI_ENUMERROR_NoCompatibleInterfaceFound;
			}

			StillImageInterface = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Interface_t);
    1322:	66 24       	eor	r6, r6
    1324:	77 24       	eor	r7, r7
    1326:	e5 cf       	rjmp	.-54     	; 0x12f2 <SI_Host_ConfigurePipes+0x6e>
			EventsEndpoint  = NULL;

			continue;
		}

		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    1328:	eb 81       	ldd	r30, Y+3	; 0x03
    132a:	fc 81       	ldd	r31, Y+4	; 0x04

		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
    132c:	82 81       	ldd	r24, Z+2	; 0x02
    132e:	87 ff       	sbrs	r24, 7
    1330:	06 c0       	rjmp	.+12     	; 0x133e <SI_Host_ConfigurePipes+0xba>
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
    1332:	83 81       	ldd	r24, Z+3	; 0x03
    1334:	83 70       	andi	r24, 0x03	; 3
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	21 f4       	brne	.+8      	; 0x1342 <SI_Host_ConfigurePipes+0xbe>
			  EventsEndpoint = EndpointData;
    133a:	5f 01       	movw	r10, r30
    133c:	03 c0       	rjmp	.+6      	; 0x1344 <SI_Host_ConfigurePipes+0xc0>
			else
			  DataINEndpoint = EndpointData;
		}
		else
		{
			DataOUTEndpoint = EndpointData;
    133e:	4f 01       	movw	r8, r30
    1340:	01 c0       	rjmp	.+2      	; 0x1344 <SI_Host_ConfigurePipes+0xc0>
		if ((EndpointData->EndpointAddress & ENDPOINT_DIR_MASK) == ENDPOINT_DIR_IN)
		{
			if ((EndpointData->Attributes & EP_TYPE_MASK) == EP_TYPE_INTERRUPT)
			  EventsEndpoint = EndpointData;
			else
			  DataINEndpoint = EndpointData;
    1342:	3f 01       	movw	r6, r30
	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;

	while (!(DataINEndpoint) || !(DataOUTEndpoint) || !(EventsEndpoint))
    1344:	61 14       	cp	r6, r1
    1346:	71 04       	cpc	r7, r1
    1348:	a1 f2       	breq	.-88     	; 0x12f2 <SI_Host_ConfigurePipes+0x6e>
    134a:	81 14       	cp	r8, r1
    134c:	91 04       	cpc	r9, r1
    134e:	89 f2       	breq	.-94     	; 0x12f2 <SI_Host_ConfigurePipes+0x6e>
    1350:	a1 14       	cp	r10, r1
    1352:	b1 04       	cpc	r11, r1
    1354:	71 f2       	breq	.-100    	; 0x12f2 <SI_Host_ConfigurePipes+0x6e>
    1356:	91 e0       	ldi	r25, 0x01	; 1
		uint8_t  Token;
		uint8_t  EndpointAddress;
		uint8_t  InterruptPeriod;
		bool     DoubleBanked;

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
    1358:	f6 01       	movw	r30, r12
    135a:	80 81       	ld	r24, Z
    135c:	98 17       	cp	r25, r24
    135e:	71 f4       	brne	.+28     	; 0x137c <SI_Host_ConfigurePipes+0xf8>
		{
			Size            = DataINEndpoint->EndpointSize;
    1360:	d3 01       	movw	r26, r6
    1362:	14 96       	adiw	r26, 0x04	; 4
    1364:	0d 91       	ld	r16, X+
    1366:	1c 91       	ld	r17, X
    1368:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataINEndpoint->EndpointAddress;
    136a:	12 96       	adiw	r26, 0x02	; 2
    136c:	2c 91       	ld	r18, X
    136e:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
    1370:	81 81       	ldd	r24, Z+1	; 0x01
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
    1372:	11 87       	std	Z+9, r17	; 0x09
    1374:	00 87       	std	Z+8, r16	; 0x08
			Size            = DataINEndpoint->EndpointSize;
			EndpointAddress = DataINEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
			InterruptPeriod = 0;
    1376:	30 e0       	ldi	r19, 0x00	; 0

		if (PipeNum == SIInterfaceInfo->Config.DataINPipeNumber)
		{
			Size            = DataINEndpoint->EndpointSize;
			EndpointAddress = DataINEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
    1378:	40 e1       	ldi	r20, 0x10	; 16
    137a:	11 c0       	rjmp	.+34     	; 0x139e <SI_Host_ConfigurePipes+0x11a>
			DoubleBanked    = SIInterfaceInfo->Config.DataINPipeDoubleBank;
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataINPipeSize = DataINEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
    137c:	f6 01       	movw	r30, r12
    137e:	82 81       	ldd	r24, Z+2	; 0x02
    1380:	98 17       	cp	r25, r24
    1382:	79 f4       	brne	.+30     	; 0x13a2 <SI_Host_ConfigurePipes+0x11e>
		{
			Size            = DataOUTEndpoint->EndpointSize;
    1384:	d4 01       	movw	r26, r8
    1386:	14 96       	adiw	r26, 0x04	; 4
    1388:	0d 91       	ld	r16, X+
    138a:	1c 91       	ld	r17, X
    138c:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
    138e:	12 96       	adiw	r26, 0x02	; 2
    1390:	2c 91       	ld	r18, X
    1392:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
    1394:	83 81       	ldd	r24, Z+3	; 0x03
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
    1396:	13 87       	std	Z+11, r17	; 0x0b
    1398:	02 87       	std	Z+10, r16	; 0x0a
			Size            = DataOUTEndpoint->EndpointSize;
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_OUT;
			Type            = EP_TYPE_BULK;
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = 0;
    139a:	30 e0       	ldi	r19, 0x00	; 0
		}
		else if (PipeNum == SIInterfaceInfo->Config.DataOUTPipeNumber)
		{
			Size            = DataOUTEndpoint->EndpointSize;
			EndpointAddress = DataOUTEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_OUT;
    139c:	40 e2       	ldi	r20, 0x20	; 32
			Type            = EP_TYPE_BULK;
    139e:	62 e0       	ldi	r22, 0x02	; 2
    13a0:	14 c0       	rjmp	.+40     	; 0x13ca <SI_Host_ConfigurePipes+0x146>
			DoubleBanked    = SIInterfaceInfo->Config.DataOUTPipeDoubleBank;
			InterruptPeriod = 0;

			SIInterfaceInfo->State.DataOUTPipeSize = DataOUTEndpoint->EndpointSize;
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
    13a2:	f6 01       	movw	r30, r12
    13a4:	84 81       	ldd	r24, Z+4	; 0x04
    13a6:	98 17       	cp	r25, r24
    13a8:	11 f5       	brne	.+68     	; 0x13ee <SI_Host_ConfigurePipes+0x16a>
		{
			Size            = EventsEndpoint->EndpointSize;
    13aa:	d5 01       	movw	r26, r10
    13ac:	14 96       	adiw	r26, 0x04	; 4
    13ae:	0d 91       	ld	r16, X+
    13b0:	1c 91       	ld	r17, X
    13b2:	15 97       	sbiw	r26, 0x05	; 5
			EndpointAddress = EventsEndpoint->EndpointAddress;
    13b4:	12 96       	adiw	r26, 0x02	; 2
    13b6:	2c 91       	ld	r18, X
    13b8:	12 97       	sbiw	r26, 0x02	; 2
			Token           = PIPE_TOKEN_IN;
			Type            = EP_TYPE_INTERRUPT;
			DoubleBanked    = SIInterfaceInfo->Config.EventsPipeDoubleBank;
    13ba:	85 81       	ldd	r24, Z+5	; 0x05
			InterruptPeriod = EventsEndpoint->PollingIntervalMS;
    13bc:	16 96       	adiw	r26, 0x06	; 6
    13be:	3c 91       	ld	r19, X
    13c0:	16 97       	sbiw	r26, 0x06	; 6

			SIInterfaceInfo->State.EventsPipeSize = EventsEndpoint->EndpointSize;
    13c2:	15 87       	std	Z+13, r17	; 0x0d
    13c4:	04 87       	std	Z+12, r16	; 0x0c
		}
		else if (PipeNum == SIInterfaceInfo->Config.EventsPipeNumber)
		{
			Size            = EventsEndpoint->EndpointSize;
			EndpointAddress = EventsEndpoint->EndpointAddress;
			Token           = PIPE_TOKEN_IN;
    13c6:	40 e1       	ldi	r20, 0x10	; 16
			Type            = EP_TYPE_INTERRUPT;
    13c8:	63 e0       	ldi	r22, 0x03	; 3
		else
		{
			continue;
		}
		
		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
    13ca:	88 23       	and	r24, r24
    13cc:	11 f0       	breq	.+4      	; 0x13d2 <SI_Host_ConfigurePipes+0x14e>
    13ce:	54 e0       	ldi	r21, 0x04	; 4
    13d0:	01 c0       	rjmp	.+2      	; 0x13d4 <SI_Host_ConfigurePipes+0x150>
    13d2:	50 e0       	ldi	r21, 0x00	; 0
    13d4:	89 2f       	mov	r24, r25
    13d6:	e5 2e       	mov	r14, r21
    13d8:	3d 83       	std	Y+5, r19	; 0x05
    13da:	9e 83       	std	Y+6, r25	; 0x06
    13dc:	86 da       	rcall	.-2804   	; 0x8ea <Pipe_ConfigurePipe>
    13de:	3d 81       	ldd	r19, Y+5	; 0x05
    13e0:	9e 81       	ldd	r25, Y+6	; 0x06
    13e2:	88 23       	and	r24, r24
    13e4:	c1 f0       	breq	.+48     	; 0x1416 <SI_Host_ConfigurePipes+0x192>
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return SI_ENUMERROR_PipeConfigurationFailed;
		}
		
		if (InterruptPeriod)
    13e6:	33 23       	and	r19, r19
    13e8:	11 f0       	breq	.+4      	; 0x13ee <SI_Host_ConfigurePipes+0x16a>
			 *  \param[in] Milliseconds  Number of milliseconds between each pipe poll.
			 */
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SetInterruptPeriod(const uint8_t Milliseconds)
			{
				UPCFG2X = Milliseconds;
    13ea:	30 93 ad 00 	sts	0x00AD, r19
		{
			DataOUTEndpoint = EndpointData;
		}
	}

	for (uint8_t PipeNum = 1; PipeNum < PIPE_TOTAL_PIPES; PipeNum++)
    13ee:	9f 5f       	subi	r25, 0xFF	; 255
    13f0:	97 30       	cpi	r25, 0x07	; 7
    13f2:	09 f0       	breq	.+2      	; 0x13f6 <SI_Host_ConfigurePipes+0x172>
    13f4:	b1 cf       	rjmp	.-158    	; 0x1358 <SI_Host_ConfigurePipes+0xd4>
		
		if (InterruptPeriod)
		  Pipe_SetInterruptPeriod(InterruptPeriod);
	}

	SIInterfaceInfo->State.InterfaceNumber = StillImageInterface->InterfaceNumber;
    13f6:	f2 01       	movw	r30, r4
    13f8:	82 81       	ldd	r24, Z+2	; 0x02
    13fa:	d6 01       	movw	r26, r12
    13fc:	17 96       	adiw	r26, 0x07	; 7
    13fe:	8c 93       	st	X, r24
    1400:	17 97       	sbiw	r26, 0x07	; 7
	SIInterfaceInfo->State.IsActive = true;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	16 96       	adiw	r26, 0x06	; 6
    1406:	8c 93       	st	X, r24
    1408:	16 97       	sbiw	r26, 0x06	; 6

	return SI_ENUMERROR_NoError;
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	05 c0       	rjmp	.+10     	; 0x1418 <SI_Host_ConfigurePipes+0x194>
	USB_Descriptor_Interface_t* StillImageInterface = NULL;

	memset(&SIInterfaceInfo->State, 0x00, sizeof(SIInterfaceInfo->State));

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
	  return SI_ENUMERROR_InvalidConfigDescriptor;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	03 c0       	rjmp	.+6      	; 0x1418 <SI_Host_ConfigurePipes+0x194>
		                              DCOMP_SI_Host_NextSIInterfaceEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
			                              DCOMP_SI_Host_NextSIInterface) != DESCRIPTOR_SEARCH_COMP_Found)
			{
				return SI_ENUMERROR_NoCompatibleInterfaceFound;
    1412:	82 e0       	ldi	r24, 0x02	; 2
    1414:	01 c0       	rjmp	.+2      	; 0x1418 <SI_Host_ConfigurePipes+0x194>
		}
		
		if (!(Pipe_ConfigurePipe(PipeNum, Type, Token, EndpointAddress, Size,
		                         DoubleBanked ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE)))
		{
			return SI_ENUMERROR_PipeConfigurationFailed;
    1416:	83 e0       	ldi	r24, 0x03	; 3

	SIInterfaceInfo->State.InterfaceNumber = StillImageInterface->InterfaceNumber;
	SIInterfaceInfo->State.IsActive = true;

	return SI_ENUMERROR_NoError;
}
    1418:	26 96       	adiw	r28, 0x06	; 6
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	ff 90       	pop	r15
    142e:	ef 90       	pop	r14
    1430:	df 90       	pop	r13
    1432:	cf 90       	pop	r12
    1434:	bf 90       	pop	r11
    1436:	af 90       	pop	r10
    1438:	9f 90       	pop	r9
    143a:	8f 90       	pop	r8
    143c:	7f 90       	pop	r7
    143e:	6f 90       	pop	r6
    1440:	5f 90       	pop	r5
    1442:	4f 90       	pop	r4
    1444:	08 95       	ret

00001446 <SI_Host_SendBlockHeader>:
	return DESCRIPTOR_SEARCH_NotFound;
}

uint8_t SI_Host_SendBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                PIMA_Container_t* const PIMAHeader)
{
    1446:	1f 93       	push	r17
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	fc 01       	movw	r30, r24
    144e:	eb 01       	movw	r28, r22
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    1450:	80 91 31 01 	lds	r24, 0x0131
    1454:	8b 30       	cpi	r24, 0x0B	; 11
    1456:	09 f0       	breq	.+2      	; 0x145a <SI_Host_SendBlockHeader+0x14>
    1458:	3d c0       	rjmp	.+122    	; 0x14d4 <SI_Host_SendBlockHeader+0x8e>
    145a:	86 81       	ldd	r24, Z+6	; 0x06
    145c:	88 23       	and	r24, r24
    145e:	d1 f1       	breq	.+116    	; 0x14d4 <SI_Host_SendBlockHeader+0x8e>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	if (SIInterfaceInfo->State.IsSessionOpen)
    1460:	86 85       	ldd	r24, Z+14	; 0x0e
    1462:	88 23       	and	r24, r24
    1464:	81 f0       	breq	.+32     	; 0x1486 <SI_Host_SendBlockHeader+0x40>
	  PIMAHeader->TransactionID = cpu_to_le32(SIInterfaceInfo->State.TransactionID++);
    1466:	27 85       	ldd	r18, Z+15	; 0x0f
    1468:	30 89       	ldd	r19, Z+16	; 0x10
    146a:	41 89       	ldd	r20, Z+17	; 0x11
    146c:	52 89       	ldd	r21, Z+18	; 0x12
    146e:	28 87       	std	Y+8, r18	; 0x08
    1470:	39 87       	std	Y+9, r19	; 0x09
    1472:	4a 87       	std	Y+10, r20	; 0x0a
    1474:	5b 87       	std	Y+11, r21	; 0x0b
    1476:	2f 5f       	subi	r18, 0xFF	; 255
    1478:	3f 4f       	sbci	r19, 0xFF	; 255
    147a:	4f 4f       	sbci	r20, 0xFF	; 255
    147c:	5f 4f       	sbci	r21, 0xFF	; 255
    147e:	27 87       	std	Z+15, r18	; 0x0f
    1480:	30 8b       	std	Z+16, r19	; 0x10
    1482:	41 8b       	std	Z+17, r20	; 0x11
    1484:	52 8b       	std	Z+18, r21	; 0x12

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataOUTPipeNumber);
    1486:	82 81       	ldd	r24, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1488:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    148c:	80 91 a9 00 	lds	r24, 0x00A9
    1490:	8f 7b       	andi	r24, 0xBF	; 191
    1492:	80 93 a9 00 	sts	0x00A9, r24
	Pipe_Unfreeze();

	if ((ErrorCode = Pipe_Write_Stream_LE(PIMAHeader, PIMA_COMMAND_SIZE(0), NULL)) != PIPE_RWSTREAM_NoError)
    1496:	ce 01       	movw	r24, r28
    1498:	6c e0       	ldi	r22, 0x0C	; 12
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	40 e0       	ldi	r20, 0x00	; 0
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	f7 db       	rcall	.-2066   	; 0xc90 <Pipe_Write_Stream_LE>
    14a2:	18 2f       	mov	r17, r24
    14a4:	88 23       	and	r24, r24
    14a6:	c9 f4       	brne	.+50     	; 0x14da <SI_Host_SendBlockHeader+0x94>
	  return ErrorCode;

	uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));
    14a8:	68 81       	ld	r22, Y
    14aa:	6c 50       	subi	r22, 0x0C	; 12

	if (ParamBytes)
    14ac:	41 f0       	breq	.+16     	; 0x14be <SI_Host_SendBlockHeader+0x78>
	{
		if ((ErrorCode = Pipe_Write_Stream_LE(&PIMAHeader->Params, ParamBytes, NULL)) != PIPE_RWSTREAM_NoError)
    14ae:	ce 01       	movw	r24, r28
    14b0:	0c 96       	adiw	r24, 0x0c	; 12
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	50 e0       	ldi	r21, 0x00	; 0
    14b8:	eb db       	rcall	.-2090   	; 0xc90 <Pipe_Write_Stream_LE>
    14ba:	88 23       	and	r24, r24
    14bc:	69 f4       	brne	.+26     	; 0x14d8 <SI_Host_SendBlockHeader+0x92>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearOUT(void)
			{
				UPINTX &= ~((1 << TXOUTI) | (1 << FIFOCON));
    14be:	80 91 a6 00 	lds	r24, 0x00A6
    14c2:	8b 77       	andi	r24, 0x7B	; 123
    14c4:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    14c8:	80 91 a9 00 	lds	r24, 0x00A9
    14cc:	80 64       	ori	r24, 0x40	; 64
    14ce:	80 93 a9 00 	sts	0x00A9, r24
	}

	Pipe_ClearOUT();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    14d2:	03 c0       	rjmp	.+6      	; 0x14da <SI_Host_SendBlockHeader+0x94>
                                PIMA_Container_t* const PIMAHeader)
{
	uint8_t ErrorCode;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    14d4:	12 e0       	ldi	r17, 0x02	; 2
    14d6:	01 c0       	rjmp	.+2      	; 0x14da <SI_Host_SendBlockHeader+0x94>

	uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));

	if (ParamBytes)
	{
		if ((ErrorCode = Pipe_Write_Stream_LE(&PIMAHeader->Params, ParamBytes, NULL)) != PIPE_RWSTREAM_NoError)
    14d8:	18 2f       	mov	r17, r24

	Pipe_ClearOUT();
	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    14da:	81 2f       	mov	r24, r17
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	1f 91       	pop	r17
    14e2:	08 95       	ret

000014e4 <SI_Host_ReceiveBlockHeader>:

uint8_t SI_Host_ReceiveBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                   PIMA_Container_t* const PIMAHeader)
{
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	fc 01       	movw	r30, r24
    14ea:	eb 01       	movw	r28, r22
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Host_GetFrameNumber(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t USB_Host_GetFrameNumber(void)
			{
				return UHFNUM;
    14ec:	20 91 a2 00 	lds	r18, 0x00A2
    14f0:	30 91 a3 00 	lds	r19, 0x00A3
	uint16_t TimeoutMSRem        = SI_COMMAND_DATA_TIMEOUT_MS;
	uint16_t PreviousFrameNumber = USB_Host_GetFrameNumber();

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    14f4:	80 91 31 01 	lds	r24, 0x0131
    14f8:	8b 30       	cpi	r24, 0x0B	; 11
    14fa:	09 f0       	breq	.+2      	; 0x14fe <SI_Host_ReceiveBlockHeader+0x1a>
    14fc:	76 c0       	rjmp	.+236    	; 0x15ea <SI_Host_ReceiveBlockHeader+0x106>
    14fe:	86 81       	ldd	r24, Z+6	; 0x06
    1500:	88 23       	and	r24, r24
    1502:	09 f4       	brne	.+2      	; 0x1506 <SI_Host_ReceiveBlockHeader+0x22>
    1504:	72 c0       	rjmp	.+228    	; 0x15ea <SI_Host_ReceiveBlockHeader+0x106>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
    1506:	80 81       	ld	r24, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1508:	80 93 a7 00 	sts	0x00A7, r24

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    150c:	80 91 a9 00 	lds	r24, 0x00A9
    1510:	8f 7b       	andi	r24, 0xBF	; 191
    1512:	80 93 a9 00 	sts	0x00A9, r24
}

uint8_t SI_Host_ReceiveBlockHeader(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                                   PIMA_Container_t* const PIMAHeader)
{
	uint16_t TimeoutMSRem        = SI_COMMAND_DATA_TIMEOUT_MS;
    1516:	80 e1       	ldi	r24, 0x10	; 16
    1518:	97 e2       	ldi	r25, 0x27	; 39
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
	Pipe_Unfreeze();

	while (!(Pipe_IsINReceived()))
    151a:	41 c0       	rjmp	.+130    	; 0x159e <SI_Host_ReceiveBlockHeader+0xba>
    151c:	40 91 a2 00 	lds	r20, 0x00A2
    1520:	50 91 a3 00 	lds	r21, 0x00A3
	{
		uint16_t CurrentFrameNumber = USB_Host_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1524:	42 17       	cp	r20, r18
    1526:	53 07       	cpc	r21, r19
    1528:	29 f0       	breq	.+10     	; 0x1534 <SI_Host_ReceiveBlockHeader+0x50>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    152a:	00 97       	sbiw	r24, 0x00	; 0
    152c:	09 f4       	brne	.+2      	; 0x1530 <SI_Host_ReceiveBlockHeader+0x4c>
    152e:	5b c0       	rjmp	.+182    	; 0x15e6 <SI_Host_ReceiveBlockHeader+0x102>
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	9a 01       	movw	r18, r20

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1534:	40 91 a9 00 	lds	r20, 0x00A9
    1538:	40 64       	ori	r20, 0x40	; 64
    153a:	40 93 a9 00 	sts	0x00A9, r20
			  return PIPE_RWSTREAM_Timeout;
		}

		Pipe_Freeze();
		Pipe_SelectPipe(SIInterfaceInfo->Config.DataOUTPipeNumber);
    153e:	42 81       	ldd	r20, Z+2	; 0x02
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1540:	40 93 a7 00 	sts	0x00A7, r20

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1544:	40 91 a9 00 	lds	r20, 0x00A9
    1548:	4f 7b       	andi	r20, 0xBF	; 191
    154a:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    154e:	40 91 a6 00 	lds	r20, 0x00A6
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    1552:	41 fd       	sbrc	r20, 1
    1554:	11 c0       	rjmp	.+34     	; 0x1578 <SI_Host_ReceiveBlockHeader+0x94>

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    1556:	40 91 a9 00 	lds	r20, 0x00A9
    155a:	40 64       	ori	r20, 0x40	; 64
    155c:	40 93 a9 00 	sts	0x00A9, r20
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
			return PIPE_RWSTREAM_PipeStalled;
		}

		Pipe_Freeze();
		Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
    1560:	40 81       	ld	r20, Z
			 *  \param[in] PipeNumber  Index of the pipe to select.
			 */
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber) ATTR_ALWAYS_INLINE;
			static inline void Pipe_SelectPipe(const uint8_t PipeNumber)
			{
				UPNUM = PipeNumber;
    1562:	40 93 a7 00 	sts	0x00A7, r20

			/** Unfreezes the selected pipe, allowing it to communicate with an attached device. */
			static inline void Pipe_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Unfreeze(void)
			{
				UPCONX &= ~(1 << PFREEZE);
    1566:	40 91 a9 00 	lds	r20, 0x00A9
    156a:	4f 7b       	andi	r20, 0xBF	; 191
    156c:	40 93 a9 00 	sts	0x00A9, r20
			 *  \return Boolean \c true if the current pipe has been stalled by the attached device, \c false otherwise.
			 */
			static inline bool Pipe_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsStalled(void)
			{
				return ((UPINTX & (1 << RXSTALLI)) ? true : false);
    1570:	40 91 a6 00 	lds	r20, 0x00A6
		Pipe_Unfreeze();

		if (Pipe_IsStalled())
    1574:	41 ff       	sbrs	r20, 1
    1576:	0f c0       	rjmp	.+30     	; 0x1596 <SI_Host_ReceiveBlockHeader+0xb2>
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1578:	80 91 aa 00 	lds	r24, 0x00AA
    157c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The current pipe token, as a \c PIPE_TOKEN_* mask.
			 */
			static inline uint8_t Pipe_GetPipeToken(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetPipeToken(void)
			{
				return (UPCFG0X & (0x03 << PTOKEN0));
    157e:	90 91 aa 00 	lds	r25, 0x00AA
    1582:	90 73       	andi	r25, 0x30	; 48
			 *  \return Endpoint address the currently selected pipe is bound to.
			 */
			static inline uint8_t Pipe_GetBoundEndpointAddress(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_GetBoundEndpointAddress(void)
			{
				return (((UPCFG0X >> PEPNUM0) & PIPE_EPNUM_MASK) |
    1584:	90 31       	cpi	r25, 0x10	; 16
    1586:	11 f4       	brne	.+4      	; 0x158c <SI_Host_ReceiveBlockHeader+0xa8>
    1588:	90 e8       	ldi	r25, 0x80	; 128
    158a:	01 c0       	rjmp	.+2      	; 0x158e <SI_Host_ReceiveBlockHeader+0xaa>
    158c:	90 e0       	ldi	r25, 0x00	; 0
		{
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
    158e:	89 2b       	or	r24, r25
    1590:	2d de       	rcall	.-934    	; 0x11ec <USB_Host_ClearEndpointStall>
			return PIPE_RWSTREAM_PipeStalled;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	2b c0       	rjmp	.+86     	; 0x15ec <SI_Host_ReceiveBlockHeader+0x108>
		}

		if (USB_HostState == HOST_STATE_Unattached)
    1596:	40 91 31 01 	lds	r20, 0x0131
    159a:	41 30       	cpi	r20, 0x01	; 1
    159c:	31 f1       	breq	.+76     	; 0x15ea <SI_Host_ReceiveBlockHeader+0x106>
			 *  \return Boolean \c true if the current pipe has received an IN packet, \c false otherwise.
			 */
			static inline bool Pipe_IsINReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Pipe_IsINReceived(void)
			{
				return ((UPINTX & (1 << RXINI)) ? true : false);
    159e:	40 91 a6 00 	lds	r20, 0x00A6
	  return PIPE_RWSTREAM_DeviceDisconnected;

	Pipe_SelectPipe(SIInterfaceInfo->Config.DataINPipeNumber);
	Pipe_Unfreeze();

	while (!(Pipe_IsINReceived()))
    15a2:	40 ff       	sbrs	r20, 0
    15a4:	bb cf       	rjmp	.-138    	; 0x151c <SI_Host_ReceiveBlockHeader+0x38>

		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
	}

	Pipe_Read_Stream_LE(PIMAHeader, PIMA_COMMAND_SIZE(0), NULL);
    15a6:	ce 01       	movw	r24, r28
    15a8:	6c e0       	ldi	r22, 0x0C	; 12
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    15ac:	40 e0       	ldi	r20, 0x00	; 0
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	d2 db       	rcall	.-2140   	; 0xd56 <Pipe_Read_Stream_LE>

	if (PIMAHeader->Type == CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock))
    15b2:	8c 81       	ldd	r24, Y+4	; 0x04
    15b4:	9d 81       	ldd	r25, Y+5	; 0x05
    15b6:	83 30       	cpi	r24, 0x03	; 3
    15b8:	91 05       	cpc	r25, r1
    15ba:	71 f4       	brne	.+28     	; 0x15d8 <SI_Host_ReceiveBlockHeader+0xf4>
	{
		uint8_t ParamBytes = (PIMAHeader->DataLength - PIMA_COMMAND_SIZE(0));
    15bc:	68 81       	ld	r22, Y
    15be:	6c 50       	subi	r22, 0x0C	; 12

		if (ParamBytes)
    15c0:	31 f0       	breq	.+12     	; 0x15ce <SI_Host_ReceiveBlockHeader+0xea>
		  Pipe_Read_Stream_LE(&PIMAHeader->Params, ParamBytes, NULL);
    15c2:	ce 01       	movw	r24, r28
    15c4:	0c 96       	adiw	r24, 0x0c	; 12
    15c6:	70 e0       	ldi	r23, 0x00	; 0
    15c8:	40 e0       	ldi	r20, 0x00	; 0
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	c4 db       	rcall	.-2168   	; 0xd56 <Pipe_Read_Stream_LE>
			 *  \ingroup Group_PipePacketManagement_AVR8
			 */
			static inline void Pipe_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_ClearIN(void)
			{
				UPINTX &= ~((1 << RXINI) | (1 << FIFOCON));
    15ce:	80 91 a6 00 	lds	r24, 0x00A6
    15d2:	8e 77       	andi	r24, 0x7E	; 126
    15d4:	80 93 a6 00 	sts	0x00A6, r24

			/** Freezes the selected pipe, preventing it from communicating with an attached device. */
			static inline void Pipe_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Freeze(void)
			{
				UPCONX |= (1 << PFREEZE);
    15d8:	80 91 a9 00 	lds	r24, 0x00A9
    15dc:	80 64       	ori	r24, 0x40	; 64
    15de:	80 93 a9 00 	sts	0x00A9, r24
		Pipe_ClearIN();
	}

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	03 c0       	rjmp	.+6      	; 0x15ec <SI_Host_ReceiveBlockHeader+0x108>
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return PIPE_RWSTREAM_Timeout;
    15e6:	83 e0       	ldi	r24, 0x03	; 3
    15e8:	01 c0       	rjmp	.+2      	; 0x15ec <SI_Host_ReceiveBlockHeader+0x108>
			USB_Host_ClearEndpointStall(Pipe_GetBoundEndpointAddress());
			return PIPE_RWSTREAM_PipeStalled;
		}

		if (USB_HostState == HOST_STATE_Unattached)
		  return PIPE_RWSTREAM_DeviceDisconnected;
    15ea:	82 e0       	ldi	r24, 0x02	; 2
	}

	Pipe_Freeze();

	return PIPE_RWSTREAM_NoError;
}
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	08 95       	ret

000015f2 <SI_Host_OpenSession>:

	return ErrorCode;
}

uint8_t SI_Host_OpenSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    15f2:	ef 92       	push	r14
    15f4:	ff 92       	push	r15
    15f6:	0f 93       	push	r16
    15f8:	1f 93       	push	r17
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62
    1602:	68 97       	sbiw	r28, 0x18	; 24
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    1610:	80 91 31 01 	lds	r24, 0x0131
    1614:	8b 30       	cpi	r24, 0x0B	; 11
    1616:	09 f0       	breq	.+2      	; 0x161a <SI_Host_OpenSession+0x28>
    1618:	44 c0       	rjmp	.+136    	; 0x16a2 <SI_Host_OpenSession+0xb0>
    161a:	f8 01       	movw	r30, r16
    161c:	86 81       	ldd	r24, Z+6	; 0x06
    161e:	88 23       	and	r24, r24
    1620:	09 f4       	brne	.+2      	; 0x1624 <SI_Host_OpenSession+0x32>
    1622:	3f c0       	rjmp	.+126    	; 0x16a2 <SI_Host_OpenSession+0xb0>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	SIInterfaceInfo->State.TransactionID = 0;
    1624:	17 86       	std	Z+15, r1	; 0x0f
    1626:	10 8a       	std	Z+16, r1	; 0x10
    1628:	11 8a       	std	Z+17, r1	; 0x11
    162a:	12 8a       	std	Z+18, r1	; 0x12
	SIInterfaceInfo->State.IsSessionOpen = false;
    162c:	16 86       	std	Z+14, r1	; 0x0e

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    162e:	7e 01       	movw	r14, r28
    1630:	08 94       	sec
    1632:	e1 1c       	adc	r14, r1
    1634:	f1 1c       	adc	r15, r1
    1636:	88 e1       	ldi	r24, 0x18	; 24
    1638:	f7 01       	movw	r30, r14
    163a:	11 92       	st	Z+, r1
    163c:	8a 95       	dec	r24
    163e:	e9 f7       	brne	.-6      	; 0x163a <SI_Host_OpenSession+0x48>
    1640:	80 e1       	ldi	r24, 0x10	; 16
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	a0 e0       	ldi	r26, 0x00	; 0
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	9a 83       	std	Y+2, r25	; 0x02
    164c:	ab 83       	std	Y+3, r26	; 0x03
    164e:	bc 83       	std	Y+4, r27	; 0x04
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	9e 83       	std	Y+6, r25	; 0x06
    1656:	8d 83       	std	Y+5, r24	; 0x05
    1658:	82 e0       	ldi	r24, 0x02	; 2
    165a:	90 e1       	ldi	r25, 0x10	; 16
    165c:	98 87       	std	Y+8, r25	; 0x08
    165e:	8f 83       	std	Y+7, r24	; 0x07
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	a0 e0       	ldi	r26, 0x00	; 0
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	8d 87       	std	Y+13, r24	; 0x0d
    166a:	9e 87       	std	Y+14, r25	; 0x0e
    166c:	af 87       	std	Y+15, r26	; 0x0f
    166e:	b8 8b       	std	Y+16, r27	; 0x10
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = CPU_TO_LE16(0x1002),
			.Params        = {CPU_TO_LE32(1)},
		};

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    1670:	c8 01       	movw	r24, r16
    1672:	b7 01       	movw	r22, r14
    1674:	e8 de       	rcall	.-560    	; 0x1446 <SI_Host_SendBlockHeader>
    1676:	88 23       	and	r24, r24
    1678:	b9 f4       	brne	.+46     	; 0x16a8 <SI_Host_OpenSession+0xb6>
	  return ErrorCode;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    167a:	c8 01       	movw	r24, r16
    167c:	b7 01       	movw	r22, r14
    167e:	32 df       	rcall	.-412    	; 0x14e4 <SI_Host_ReceiveBlockHeader>
    1680:	88 23       	and	r24, r24
    1682:	91 f4       	brne	.+36     	; 0x16a8 <SI_Host_OpenSession+0xb6>
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    1684:	2d 81       	ldd	r18, Y+5	; 0x05
    1686:	3e 81       	ldd	r19, Y+6	; 0x06
    1688:	23 30       	cpi	r18, 0x03	; 3
    168a:	31 05       	cpc	r19, r1
    168c:	61 f4       	brne	.+24     	; 0x16a6 <SI_Host_OpenSession+0xb4>
    168e:	2f 81       	ldd	r18, Y+7	; 0x07
    1690:	38 85       	ldd	r19, Y+8	; 0x08
    1692:	f0 e2       	ldi	r31, 0x20	; 32
    1694:	21 30       	cpi	r18, 0x01	; 1
    1696:	3f 07       	cpc	r19, r31
    1698:	31 f4       	brne	.+12     	; 0x16a6 <SI_Host_OpenSession+0xb4>
	  return SI_ERROR_LOGICAL_CMD_FAILED;

	SIInterfaceInfo->State.IsSessionOpen = true;
    169a:	91 e0       	ldi	r25, 0x01	; 1
    169c:	f8 01       	movw	r30, r16
    169e:	96 87       	std	Z+14, r25	; 0x0e

	return PIPE_RWSTREAM_NoError;
    16a0:	03 c0       	rjmp	.+6      	; 0x16a8 <SI_Host_OpenSession+0xb6>
}

uint8_t SI_Host_OpenSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    16a2:	82 e0       	ldi	r24, 0x02	; 2
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <SI_Host_OpenSession+0xb6>

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
	  return SI_ERROR_LOGICAL_CMD_FAILED;
    16a6:	80 e8       	ldi	r24, 0x80	; 128

	SIInterfaceInfo->State.IsSessionOpen = true;

	return PIPE_RWSTREAM_NoError;
}
    16a8:	68 96       	adiw	r28, 0x18	; 24
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	ff 90       	pop	r15
    16be:	ef 90       	pop	r14
    16c0:	08 95       	ret

000016c2 <SI_Host_CloseSession>:

uint8_t SI_Host_CloseSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    16c2:	ef 92       	push	r14
    16c4:	ff 92       	push	r15
    16c6:	0f 93       	push	r16
    16c8:	1f 93       	push	r17
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	68 97       	sbiw	r28, 0x18	; 24
    16d4:	0f b6       	in	r0, 0x3f	; 63
    16d6:	f8 94       	cli
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	0f be       	out	0x3f, r0	; 63
    16dc:	cd bf       	out	0x3d, r28	; 61
    16de:	8c 01       	movw	r16, r24
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    16e0:	80 91 31 01 	lds	r24, 0x0131
    16e4:	8b 30       	cpi	r24, 0x0B	; 11
    16e6:	09 f0       	breq	.+2      	; 0x16ea <SI_Host_CloseSession+0x28>
    16e8:	3d c0       	rjmp	.+122    	; 0x1764 <SI_Host_CloseSession+0xa2>
    16ea:	f8 01       	movw	r30, r16
    16ec:	86 81       	ldd	r24, Z+6	; 0x06
    16ee:	88 23       	and	r24, r24
    16f0:	c9 f1       	breq	.+114    	; 0x1764 <SI_Host_CloseSession+0xa2>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    16f2:	7e 01       	movw	r14, r28
    16f4:	08 94       	sec
    16f6:	e1 1c       	adc	r14, r1
    16f8:	f1 1c       	adc	r15, r1
    16fa:	88 e1       	ldi	r24, 0x18	; 24
    16fc:	f7 01       	movw	r30, r14
    16fe:	11 92       	st	Z+, r1
    1700:	8a 95       	dec	r24
    1702:	e9 f7       	brne	.-6      	; 0x16fe <SI_Host_CloseSession+0x3c>
    1704:	80 e1       	ldi	r24, 0x10	; 16
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	a0 e0       	ldi	r26, 0x00	; 0
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	9a 83       	std	Y+2, r25	; 0x02
    1710:	ab 83       	std	Y+3, r26	; 0x03
    1712:	bc 83       	std	Y+4, r27	; 0x04
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9e 83       	std	Y+6, r25	; 0x06
    171a:	8d 83       	std	Y+5, r24	; 0x05
    171c:	83 e0       	ldi	r24, 0x03	; 3
    171e:	90 e1       	ldi	r25, 0x10	; 16
    1720:	98 87       	std	Y+8, r25	; 0x08
    1722:	8f 83       	std	Y+7, r24	; 0x07
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	a0 e0       	ldi	r26, 0x00	; 0
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	8d 87       	std	Y+13, r24	; 0x0d
    172e:	9e 87       	std	Y+14, r25	; 0x0e
    1730:	af 87       	std	Y+15, r26	; 0x0f
    1732:	b8 8b       	std	Y+16, r27	; 0x10
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = CPU_TO_LE16(0x1003),
			.Params        = {CPU_TO_LE32(1)},
		};

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    1734:	c8 01       	movw	r24, r16
    1736:	b7 01       	movw	r22, r14
    1738:	86 de       	rcall	.-756    	; 0x1446 <SI_Host_SendBlockHeader>
    173a:	88 23       	and	r24, r24
    173c:	b1 f4       	brne	.+44     	; 0x176a <SI_Host_CloseSession+0xa8>
	  return ErrorCode;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    173e:	c8 01       	movw	r24, r16
    1740:	b7 01       	movw	r22, r14
    1742:	d0 de       	rcall	.-608    	; 0x14e4 <SI_Host_ReceiveBlockHeader>
    1744:	88 23       	and	r24, r24
    1746:	89 f4       	brne	.+34     	; 0x176a <SI_Host_CloseSession+0xa8>
	  return ErrorCode;

	SIInterfaceInfo->State.IsSessionOpen = false;
    1748:	f8 01       	movw	r30, r16
    174a:	16 86       	std	Z+14, r1	; 0x0e

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    174c:	2d 81       	ldd	r18, Y+5	; 0x05
    174e:	3e 81       	ldd	r19, Y+6	; 0x06
    1750:	23 30       	cpi	r18, 0x03	; 3
    1752:	31 05       	cpc	r19, r1
    1754:	49 f4       	brne	.+18     	; 0x1768 <SI_Host_CloseSession+0xa6>
    1756:	2f 81       	ldd	r18, Y+7	; 0x07
    1758:	38 85       	ldd	r19, Y+8	; 0x08
    175a:	f0 e2       	ldi	r31, 0x20	; 32
    175c:	21 30       	cpi	r18, 0x01	; 1
    175e:	3f 07       	cpc	r19, r31
    1760:	19 f4       	brne	.+6      	; 0x1768 <SI_Host_CloseSession+0xa6>
    1762:	03 c0       	rjmp	.+6      	; 0x176a <SI_Host_CloseSession+0xa8>
}

uint8_t SI_Host_CloseSession(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    1764:	82 e0       	ldi	r24, 0x02	; 2
    1766:	01 c0       	rjmp	.+2      	; 0x176a <SI_Host_CloseSession+0xa8>
	  return ErrorCode;

	SIInterfaceInfo->State.IsSessionOpen = false;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
	  return SI_ERROR_LOGICAL_CMD_FAILED;
    1768:	80 e8       	ldi	r24, 0x80	; 128

	return PIPE_RWSTREAM_NoError;
}
    176a:	68 96       	adiw	r28, 0x18	; 24
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	1f 91       	pop	r17
    177c:	0f 91       	pop	r16
    177e:	ff 90       	pop	r15
    1780:	ef 90       	pop	r14
    1782:	08 95       	ret

00001784 <SI_Host_SendCommand>:

uint8_t SI_Host_SendCommand(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo,
                            const uint16_t Operation,
                            const uint8_t TotalParams,
                            uint32_t* const Params)
{
    1784:	af 92       	push	r10
    1786:	bf 92       	push	r11
    1788:	cf 92       	push	r12
    178a:	df 92       	push	r13
    178c:	ef 92       	push	r14
    178e:	ff 92       	push	r15
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	68 97       	sbiw	r28, 0x18	; 24
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	f8 94       	cli
    17a2:	de bf       	out	0x3e, r29	; 62
    17a4:	0f be       	out	0x3f, r0	; 63
    17a6:	cd bf       	out	0x3d, r28	; 61
    17a8:	7c 01       	movw	r14, r24
    17aa:	cb 01       	movw	r24, r22
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    17ac:	50 91 31 01 	lds	r21, 0x0131
    17b0:	5b 30       	cpi	r21, 0x0B	; 11
    17b2:	91 f5       	brne	.+100    	; 0x1818 <SI_Host_SendCommand+0x94>
    17b4:	d7 01       	movw	r26, r14
    17b6:	16 96       	adiw	r26, 0x06	; 6
    17b8:	5c 91       	ld	r21, X
    17ba:	16 97       	sbiw	r26, 0x06	; 6
    17bc:	55 23       	and	r21, r21
    17be:	61 f1       	breq	.+88     	; 0x1818 <SI_Host_SendCommand+0x94>

	uint8_t ErrorCode;

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
		{
			.DataLength    = cpu_to_le32(PIMA_COMMAND_SIZE(TotalParams)),
    17c0:	e4 2f       	mov	r30, r20
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    17c4:	8e 01       	movw	r16, r28
    17c6:	0f 5f       	subi	r16, 0xFF	; 255
    17c8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ca:	48 e1       	ldi	r20, 0x18	; 24
    17cc:	d8 01       	movw	r26, r16
    17ce:	1d 92       	st	X+, r1
    17d0:	4a 95       	dec	r20
    17d2:	e9 f7       	brne	.-6      	; 0x17ce <SI_Host_SendCommand+0x4a>
		{
			.DataLength    = cpu_to_le32(PIMA_COMMAND_SIZE(TotalParams)),
    17d4:	af 01       	movw	r20, r30
    17d6:	4d 5f       	subi	r20, 0xFD	; 253
    17d8:	5f 4f       	sbci	r21, 0xFF	; 255
    17da:	44 0f       	add	r20, r20
    17dc:	55 1f       	adc	r21, r21
    17de:	44 0f       	add	r20, r20
    17e0:	55 1f       	adc	r21, r21
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	PIMA_Container_t PIMABlock = (PIMA_Container_t)
    17e2:	5a 01       	movw	r10, r20
    17e4:	cc 24       	eor	r12, r12
    17e6:	dd 24       	eor	r13, r13
    17e8:	a9 82       	std	Y+1, r10	; 0x01
    17ea:	ba 82       	std	Y+2, r11	; 0x02
    17ec:	cb 82       	std	Y+3, r12	; 0x03
    17ee:	dc 82       	std	Y+4, r13	; 0x04
    17f0:	41 e0       	ldi	r20, 0x01	; 1
    17f2:	50 e0       	ldi	r21, 0x00	; 0
    17f4:	5e 83       	std	Y+6, r21	; 0x06
    17f6:	4d 83       	std	Y+5, r20	; 0x05
    17f8:	98 87       	std	Y+8, r25	; 0x08
    17fa:	8f 83       	std	Y+7, r24	; 0x07
			.DataLength    = cpu_to_le32(PIMA_COMMAND_SIZE(TotalParams)),
			.Type          = CPU_TO_LE16(PIMA_CONTAINER_CommandBlock),
			.Code          = cpu_to_le16(Operation),
		};

	memcpy(&PIMABlock.Params, Params, sizeof(uint32_t) * TotalParams);
    17fc:	de 01       	movw	r26, r28
    17fe:	1d 96       	adiw	r26, 0x0d	; 13
    1800:	ee 0f       	add	r30, r30
    1802:	ff 1f       	adc	r31, r31
    1804:	ee 0f       	add	r30, r30
    1806:	ff 1f       	adc	r31, r31
    1808:	cd 01       	movw	r24, r26
    180a:	b9 01       	movw	r22, r18
    180c:	af 01       	movw	r20, r30
    180e:	62 d0       	rcall	.+196    	; 0x18d4 <memcpy>

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    1810:	c7 01       	movw	r24, r14
    1812:	b8 01       	movw	r22, r16
    1814:	18 de       	rcall	.-976    	; 0x1446 <SI_Host_SendBlockHeader>
    1816:	01 c0       	rjmp	.+2      	; 0x181a <SI_Host_SendCommand+0x96>
                            const uint16_t Operation,
                            const uint8_t TotalParams,
                            uint32_t* const Params)
{
	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    1818:	82 e0       	ldi	r24, 0x02	; 2

	if ((ErrorCode = SI_Host_SendBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	return PIPE_RWSTREAM_NoError;
}
    181a:	68 96       	adiw	r28, 0x18	; 24
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	ff 90       	pop	r15
    1830:	ef 90       	pop	r14
    1832:	df 90       	pop	r13
    1834:	cf 90       	pop	r12
    1836:	bf 90       	pop	r11
    1838:	af 90       	pop	r10
    183a:	08 95       	ret

0000183c <SI_Host_ReceiveResponse>:

uint8_t SI_Host_ReceiveResponse(USB_ClassInfo_SI_Host_t* const SIInterfaceInfo)
{
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
    1844:	68 97       	sbiw	r28, 0x18	; 24
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
	uint8_t ErrorCode;
	PIMA_Container_t PIMABlock;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
    1850:	20 91 31 01 	lds	r18, 0x0131
    1854:	2b 30       	cpi	r18, 0x0B	; 11
    1856:	b1 f4       	brne	.+44     	; 0x1884 <SI_Host_ReceiveResponse+0x48>
    1858:	fc 01       	movw	r30, r24
    185a:	26 81       	ldd	r18, Z+6	; 0x06
    185c:	22 23       	and	r18, r18
    185e:	91 f0       	breq	.+36     	; 0x1884 <SI_Host_ReceiveResponse+0x48>
	  return PIPE_RWSTREAM_DeviceDisconnected;

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
    1860:	be 01       	movw	r22, r28
    1862:	6f 5f       	subi	r22, 0xFF	; 255
    1864:	7f 4f       	sbci	r23, 0xFF	; 255
    1866:	3e de       	rcall	.-900    	; 0x14e4 <SI_Host_ReceiveBlockHeader>
    1868:	88 23       	and	r24, r24
    186a:	79 f4       	brne	.+30     	; 0x188a <SI_Host_ReceiveResponse+0x4e>
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
    186c:	2d 81       	ldd	r18, Y+5	; 0x05
    186e:	3e 81       	ldd	r19, Y+6	; 0x06
    1870:	23 30       	cpi	r18, 0x03	; 3
    1872:	31 05       	cpc	r19, r1
    1874:	49 f4       	brne	.+18     	; 0x1888 <SI_Host_ReceiveResponse+0x4c>
    1876:	2f 81       	ldd	r18, Y+7	; 0x07
    1878:	38 85       	ldd	r19, Y+8	; 0x08
    187a:	f0 e2       	ldi	r31, 0x20	; 32
    187c:	21 30       	cpi	r18, 0x01	; 1
    187e:	3f 07       	cpc	r19, r31
    1880:	19 f4       	brne	.+6      	; 0x1888 <SI_Host_ReceiveResponse+0x4c>
    1882:	03 c0       	rjmp	.+6      	; 0x188a <SI_Host_ReceiveResponse+0x4e>
{
	uint8_t ErrorCode;
	PIMA_Container_t PIMABlock;

	if ((USB_HostState != HOST_STATE_Configured) || !(SIInterfaceInfo->State.IsActive))
	  return PIPE_RWSTREAM_DeviceDisconnected;
    1884:	82 e0       	ldi	r24, 0x02	; 2
    1886:	01 c0       	rjmp	.+2      	; 0x188a <SI_Host_ReceiveResponse+0x4e>

	if ((ErrorCode = SI_Host_ReceiveBlockHeader(SIInterfaceInfo, &PIMABlock)) != PIPE_RWSTREAM_NoError)
	  return ErrorCode;

	if ((PIMABlock.Type != CPU_TO_LE16(PIMA_CONTAINER_ResponseBlock)) || (PIMABlock.Code != CPU_TO_LE16(0x2001)))
	  return SI_ERROR_LOGICAL_CMD_FAILED;
    1888:	80 e8       	ldi	r24, 0x80	; 128

	return PIPE_RWSTREAM_NoError;
}
    188a:	68 96       	adiw	r28, 0x18	; 24
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <Serial_putchar>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    189c:	90 91 c8 00 	lds	r25, 0x00C8
    18a0:	95 ff       	sbrs	r25, 5
    18a2:	fc cf       	rjmp	.-8      	; 0x189c <Serial_putchar>
				UDR1 = DataByte;
    18a4:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    18a8:	80 e0       	ldi	r24, 0x00	; 0
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	08 95       	ret

000018ae <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    18ae:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    18b2:	87 ff       	sbrs	r24, 7
    18b4:	08 c0       	rjmp	.+16     	; 0x18c6 <Serial_getchar+0x18>
    18b6:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    18ba:	87 ff       	sbrs	r24, 7
    18bc:	07 c0       	rjmp	.+14     	; 0x18cc <Serial_getchar+0x1e>
				  return -1;
				
				return UDR1;
    18be:	20 91 ce 00 	lds	r18, 0x00CE
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	05 c0       	rjmp	.+10     	; 0x18d0 <Serial_getchar+0x22>
	  return _FDEV_EOF;
    18c6:	2e ef       	ldi	r18, 0xFE	; 254
    18c8:	3f ef       	ldi	r19, 0xFF	; 255
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <Serial_getchar+0x22>
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
				  return -1;
    18cc:	2f ef       	ldi	r18, 0xFF	; 255
    18ce:	3f ef       	ldi	r19, 0xFF	; 255

	return Serial_ReceiveByte();
}
    18d0:	c9 01       	movw	r24, r18
    18d2:	08 95       	ret

000018d4 <memcpy>:
    18d4:	fb 01       	movw	r30, r22
    18d6:	dc 01       	movw	r26, r24
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <memcpy+0xa>
    18da:	01 90       	ld	r0, Z+
    18dc:	0d 92       	st	X+, r0
    18de:	41 50       	subi	r20, 0x01	; 1
    18e0:	50 40       	sbci	r21, 0x00	; 0
    18e2:	d8 f7       	brcc	.-10     	; 0x18da <memcpy+0x6>
    18e4:	08 95       	ret

000018e6 <printf_P>:
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	fe 01       	movw	r30, r28
    18f0:	35 96       	adiw	r30, 0x05	; 5
    18f2:	61 91       	ld	r22, Z+
    18f4:	71 91       	ld	r23, Z+
    18f6:	80 91 42 01 	lds	r24, 0x0142
    18fa:	90 91 43 01 	lds	r25, 0x0143
    18fe:	dc 01       	movw	r26, r24
    1900:	13 96       	adiw	r26, 0x03	; 3
    1902:	2c 91       	ld	r18, X
    1904:	13 97       	sbiw	r26, 0x03	; 3
    1906:	28 60       	ori	r18, 0x08	; 8
    1908:	13 96       	adiw	r26, 0x03	; 3
    190a:	2c 93       	st	X, r18
    190c:	af 01       	movw	r20, r30
    190e:	42 d0       	rcall	.+132    	; 0x1994 <vfprintf>
    1910:	e0 91 42 01 	lds	r30, 0x0142
    1914:	f0 91 43 01 	lds	r31, 0x0143
    1918:	23 81       	ldd	r18, Z+3	; 0x03
    191a:	27 7f       	andi	r18, 0xF7	; 247
    191c:	23 83       	std	Z+3, r18	; 0x03
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <puts_P>:
    1924:	ef 92       	push	r14
    1926:	ff 92       	push	r15
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	8c 01       	movw	r16, r24
    1932:	e0 91 42 01 	lds	r30, 0x0142
    1936:	f0 91 43 01 	lds	r31, 0x0143
    193a:	83 81       	ldd	r24, Z+3	; 0x03
    193c:	81 ff       	sbrs	r24, 1
    193e:	20 c0       	rjmp	.+64     	; 0x1980 <puts_P+0x5c>
    1940:	c0 e0       	ldi	r28, 0x00	; 0
    1942:	d0 e0       	ldi	r29, 0x00	; 0
    1944:	0c c0       	rjmp	.+24     	; 0x195e <puts_P+0x3a>
    1946:	db 01       	movw	r26, r22
    1948:	18 96       	adiw	r26, 0x08	; 8
    194a:	ed 91       	ld	r30, X+
    194c:	fc 91       	ld	r31, X
    194e:	19 97       	sbiw	r26, 0x09	; 9
    1950:	09 95       	icall
    1952:	00 97       	sbiw	r24, 0x00	; 0
    1954:	11 f0       	breq	.+4      	; 0x195a <puts_P+0x36>
    1956:	cf ef       	ldi	r28, 0xFF	; 255
    1958:	df ef       	ldi	r29, 0xFF	; 255
    195a:	0f 5f       	subi	r16, 0xFF	; 255
    195c:	1f 4f       	sbci	r17, 0xFF	; 255
    195e:	f8 01       	movw	r30, r16
    1960:	84 91       	lpm	r24, Z+
    1962:	60 91 42 01 	lds	r22, 0x0142
    1966:	70 91 43 01 	lds	r23, 0x0143
    196a:	88 23       	and	r24, r24
    196c:	61 f7       	brne	.-40     	; 0x1946 <puts_P+0x22>
    196e:	db 01       	movw	r26, r22
    1970:	18 96       	adiw	r26, 0x08	; 8
    1972:	ed 91       	ld	r30, X+
    1974:	fc 91       	ld	r31, X
    1976:	19 97       	sbiw	r26, 0x09	; 9
    1978:	8a e0       	ldi	r24, 0x0A	; 10
    197a:	09 95       	icall
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	11 f0       	breq	.+4      	; 0x1984 <puts_P+0x60>
    1980:	cf ef       	ldi	r28, 0xFF	; 255
    1982:	df ef       	ldi	r29, 0xFF	; 255
    1984:	ce 01       	movw	r24, r28
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	1f 91       	pop	r17
    198c:	0f 91       	pop	r16
    198e:	ff 90       	pop	r15
    1990:	ef 90       	pop	r14
    1992:	08 95       	ret

00001994 <vfprintf>:
    1994:	2f 92       	push	r2
    1996:	3f 92       	push	r3
    1998:	4f 92       	push	r4
    199a:	5f 92       	push	r5
    199c:	6f 92       	push	r6
    199e:	7f 92       	push	r7
    19a0:	8f 92       	push	r8
    19a2:	9f 92       	push	r9
    19a4:	af 92       	push	r10
    19a6:	bf 92       	push	r11
    19a8:	cf 92       	push	r12
    19aa:	df 92       	push	r13
    19ac:	ef 92       	push	r14
    19ae:	ff 92       	push	r15
    19b0:	0f 93       	push	r16
    19b2:	1f 93       	push	r17
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	2c 97       	sbiw	r28, 0x0c	; 12
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	6c 01       	movw	r12, r24
    19ca:	1b 01       	movw	r2, r22
    19cc:	8a 01       	movw	r16, r20
    19ce:	fc 01       	movw	r30, r24
    19d0:	17 82       	std	Z+7, r1	; 0x07
    19d2:	16 82       	std	Z+6, r1	; 0x06
    19d4:	83 81       	ldd	r24, Z+3	; 0x03
    19d6:	81 ff       	sbrs	r24, 1
    19d8:	c4 c1       	rjmp	.+904    	; 0x1d62 <vfprintf+0x3ce>
    19da:	2e 01       	movw	r4, r28
    19dc:	08 94       	sec
    19de:	41 1c       	adc	r4, r1
    19e0:	51 1c       	adc	r5, r1
    19e2:	f6 01       	movw	r30, r12
    19e4:	93 81       	ldd	r25, Z+3	; 0x03
    19e6:	f1 01       	movw	r30, r2
    19e8:	93 fd       	sbrc	r25, 3
    19ea:	85 91       	lpm	r24, Z+
    19ec:	93 ff       	sbrs	r25, 3
    19ee:	81 91       	ld	r24, Z+
    19f0:	1f 01       	movw	r2, r30
    19f2:	88 23       	and	r24, r24
    19f4:	09 f4       	brne	.+2      	; 0x19f8 <vfprintf+0x64>
    19f6:	b1 c1       	rjmp	.+866    	; 0x1d5a <vfprintf+0x3c6>
    19f8:	85 32       	cpi	r24, 0x25	; 37
    19fa:	39 f4       	brne	.+14     	; 0x1a0a <vfprintf+0x76>
    19fc:	93 fd       	sbrc	r25, 3
    19fe:	85 91       	lpm	r24, Z+
    1a00:	93 ff       	sbrs	r25, 3
    1a02:	81 91       	ld	r24, Z+
    1a04:	1f 01       	movw	r2, r30
    1a06:	85 32       	cpi	r24, 0x25	; 37
    1a08:	21 f4       	brne	.+8      	; 0x1a12 <vfprintf+0x7e>
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	b6 01       	movw	r22, r12
    1a0e:	db d1       	rcall	.+950    	; 0x1dc6 <fputc>
    1a10:	e8 cf       	rjmp	.-48     	; 0x19e2 <vfprintf+0x4e>
    1a12:	ee 24       	eor	r14, r14
    1a14:	ff 24       	eor	r15, r15
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	20 32       	cpi	r18, 0x20	; 32
    1a1a:	b0 f4       	brcc	.+44     	; 0x1a48 <vfprintf+0xb4>
    1a1c:	8b 32       	cpi	r24, 0x2B	; 43
    1a1e:	69 f0       	breq	.+26     	; 0x1a3a <vfprintf+0xa6>
    1a20:	8c 32       	cpi	r24, 0x2C	; 44
    1a22:	28 f4       	brcc	.+10     	; 0x1a2e <vfprintf+0x9a>
    1a24:	80 32       	cpi	r24, 0x20	; 32
    1a26:	51 f0       	breq	.+20     	; 0x1a3c <vfprintf+0xa8>
    1a28:	83 32       	cpi	r24, 0x23	; 35
    1a2a:	71 f4       	brne	.+28     	; 0x1a48 <vfprintf+0xb4>
    1a2c:	0b c0       	rjmp	.+22     	; 0x1a44 <vfprintf+0xb0>
    1a2e:	8d 32       	cpi	r24, 0x2D	; 45
    1a30:	39 f0       	breq	.+14     	; 0x1a40 <vfprintf+0xac>
    1a32:	80 33       	cpi	r24, 0x30	; 48
    1a34:	49 f4       	brne	.+18     	; 0x1a48 <vfprintf+0xb4>
    1a36:	21 60       	ori	r18, 0x01	; 1
    1a38:	2c c0       	rjmp	.+88     	; 0x1a92 <vfprintf+0xfe>
    1a3a:	22 60       	ori	r18, 0x02	; 2
    1a3c:	24 60       	ori	r18, 0x04	; 4
    1a3e:	29 c0       	rjmp	.+82     	; 0x1a92 <vfprintf+0xfe>
    1a40:	28 60       	ori	r18, 0x08	; 8
    1a42:	27 c0       	rjmp	.+78     	; 0x1a92 <vfprintf+0xfe>
    1a44:	20 61       	ori	r18, 0x10	; 16
    1a46:	25 c0       	rjmp	.+74     	; 0x1a92 <vfprintf+0xfe>
    1a48:	27 fd       	sbrc	r18, 7
    1a4a:	2c c0       	rjmp	.+88     	; 0x1aa4 <vfprintf+0x110>
    1a4c:	38 2f       	mov	r19, r24
    1a4e:	30 53       	subi	r19, 0x30	; 48
    1a50:	3a 30       	cpi	r19, 0x0A	; 10
    1a52:	98 f4       	brcc	.+38     	; 0x1a7a <vfprintf+0xe6>
    1a54:	26 ff       	sbrs	r18, 6
    1a56:	08 c0       	rjmp	.+16     	; 0x1a68 <vfprintf+0xd4>
    1a58:	8e 2d       	mov	r24, r14
    1a5a:	88 0f       	add	r24, r24
    1a5c:	e8 2e       	mov	r14, r24
    1a5e:	ee 0c       	add	r14, r14
    1a60:	ee 0c       	add	r14, r14
    1a62:	e8 0e       	add	r14, r24
    1a64:	e3 0e       	add	r14, r19
    1a66:	15 c0       	rjmp	.+42     	; 0x1a92 <vfprintf+0xfe>
    1a68:	8f 2d       	mov	r24, r15
    1a6a:	88 0f       	add	r24, r24
    1a6c:	f8 2e       	mov	r15, r24
    1a6e:	ff 0c       	add	r15, r15
    1a70:	ff 0c       	add	r15, r15
    1a72:	f8 0e       	add	r15, r24
    1a74:	f3 0e       	add	r15, r19
    1a76:	20 62       	ori	r18, 0x20	; 32
    1a78:	0c c0       	rjmp	.+24     	; 0x1a92 <vfprintf+0xfe>
    1a7a:	8e 32       	cpi	r24, 0x2E	; 46
    1a7c:	21 f4       	brne	.+8      	; 0x1a86 <vfprintf+0xf2>
    1a7e:	26 fd       	sbrc	r18, 6
    1a80:	6c c1       	rjmp	.+728    	; 0x1d5a <vfprintf+0x3c6>
    1a82:	20 64       	ori	r18, 0x40	; 64
    1a84:	06 c0       	rjmp	.+12     	; 0x1a92 <vfprintf+0xfe>
    1a86:	8c 36       	cpi	r24, 0x6C	; 108
    1a88:	11 f4       	brne	.+4      	; 0x1a8e <vfprintf+0xfa>
    1a8a:	20 68       	ori	r18, 0x80	; 128
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <vfprintf+0xfe>
    1a8e:	88 36       	cpi	r24, 0x68	; 104
    1a90:	49 f4       	brne	.+18     	; 0x1aa4 <vfprintf+0x110>
    1a92:	f1 01       	movw	r30, r2
    1a94:	93 fd       	sbrc	r25, 3
    1a96:	85 91       	lpm	r24, Z+
    1a98:	93 ff       	sbrs	r25, 3
    1a9a:	81 91       	ld	r24, Z+
    1a9c:	1f 01       	movw	r2, r30
    1a9e:	88 23       	and	r24, r24
    1aa0:	09 f0       	breq	.+2      	; 0x1aa4 <vfprintf+0x110>
    1aa2:	ba cf       	rjmp	.-140    	; 0x1a18 <vfprintf+0x84>
    1aa4:	98 2f       	mov	r25, r24
    1aa6:	95 54       	subi	r25, 0x45	; 69
    1aa8:	93 30       	cpi	r25, 0x03	; 3
    1aaa:	18 f0       	brcs	.+6      	; 0x1ab2 <vfprintf+0x11e>
    1aac:	90 52       	subi	r25, 0x20	; 32
    1aae:	93 30       	cpi	r25, 0x03	; 3
    1ab0:	28 f4       	brcc	.+10     	; 0x1abc <vfprintf+0x128>
    1ab2:	0c 5f       	subi	r16, 0xFC	; 252
    1ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab6:	ff e3       	ldi	r31, 0x3F	; 63
    1ab8:	f9 83       	std	Y+1, r31	; 0x01
    1aba:	0d c0       	rjmp	.+26     	; 0x1ad6 <vfprintf+0x142>
    1abc:	83 36       	cpi	r24, 0x63	; 99
    1abe:	31 f0       	breq	.+12     	; 0x1acc <vfprintf+0x138>
    1ac0:	83 37       	cpi	r24, 0x73	; 115
    1ac2:	71 f0       	breq	.+28     	; 0x1ae0 <vfprintf+0x14c>
    1ac4:	83 35       	cpi	r24, 0x53	; 83
    1ac6:	09 f0       	breq	.+2      	; 0x1aca <vfprintf+0x136>
    1ac8:	5c c0       	rjmp	.+184    	; 0x1b82 <vfprintf+0x1ee>
    1aca:	21 c0       	rjmp	.+66     	; 0x1b0e <vfprintf+0x17a>
    1acc:	f8 01       	movw	r30, r16
    1ace:	80 81       	ld	r24, Z
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	0e 5f       	subi	r16, 0xFE	; 254
    1ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad6:	42 01       	movw	r8, r4
    1ad8:	71 e0       	ldi	r23, 0x01	; 1
    1ada:	a7 2e       	mov	r10, r23
    1adc:	b1 2c       	mov	r11, r1
    1ade:	15 c0       	rjmp	.+42     	; 0x1b0a <vfprintf+0x176>
    1ae0:	62 e0       	ldi	r22, 0x02	; 2
    1ae2:	66 2e       	mov	r6, r22
    1ae4:	71 2c       	mov	r7, r1
    1ae6:	60 0e       	add	r6, r16
    1ae8:	71 1e       	adc	r7, r17
    1aea:	f8 01       	movw	r30, r16
    1aec:	80 80       	ld	r8, Z
    1aee:	91 80       	ldd	r9, Z+1	; 0x01
    1af0:	26 ff       	sbrs	r18, 6
    1af2:	03 c0       	rjmp	.+6      	; 0x1afa <vfprintf+0x166>
    1af4:	6e 2d       	mov	r22, r14
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <vfprintf+0x16a>
    1afa:	6f ef       	ldi	r22, 0xFF	; 255
    1afc:	7f ef       	ldi	r23, 0xFF	; 255
    1afe:	c4 01       	movw	r24, r8
    1b00:	2c 87       	std	Y+12, r18	; 0x0c
    1b02:	56 d1       	rcall	.+684    	; 0x1db0 <strnlen>
    1b04:	5c 01       	movw	r10, r24
    1b06:	83 01       	movw	r16, r6
    1b08:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b0a:	2f 77       	andi	r18, 0x7F	; 127
    1b0c:	16 c0       	rjmp	.+44     	; 0x1b3a <vfprintf+0x1a6>
    1b0e:	52 e0       	ldi	r21, 0x02	; 2
    1b10:	65 2e       	mov	r6, r21
    1b12:	71 2c       	mov	r7, r1
    1b14:	60 0e       	add	r6, r16
    1b16:	71 1e       	adc	r7, r17
    1b18:	f8 01       	movw	r30, r16
    1b1a:	80 80       	ld	r8, Z
    1b1c:	91 80       	ldd	r9, Z+1	; 0x01
    1b1e:	26 ff       	sbrs	r18, 6
    1b20:	03 c0       	rjmp	.+6      	; 0x1b28 <vfprintf+0x194>
    1b22:	6e 2d       	mov	r22, r14
    1b24:	70 e0       	ldi	r23, 0x00	; 0
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <vfprintf+0x198>
    1b28:	6f ef       	ldi	r22, 0xFF	; 255
    1b2a:	7f ef       	ldi	r23, 0xFF	; 255
    1b2c:	c4 01       	movw	r24, r8
    1b2e:	2c 87       	std	Y+12, r18	; 0x0c
    1b30:	34 d1       	rcall	.+616    	; 0x1d9a <strnlen_P>
    1b32:	5c 01       	movw	r10, r24
    1b34:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b36:	20 68       	ori	r18, 0x80	; 128
    1b38:	83 01       	movw	r16, r6
    1b3a:	23 fd       	sbrc	r18, 3
    1b3c:	1e c0       	rjmp	.+60     	; 0x1b7a <vfprintf+0x1e6>
    1b3e:	07 c0       	rjmp	.+14     	; 0x1b4e <vfprintf+0x1ba>
    1b40:	80 e2       	ldi	r24, 0x20	; 32
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	b6 01       	movw	r22, r12
    1b46:	2c 87       	std	Y+12, r18	; 0x0c
    1b48:	3e d1       	rcall	.+636    	; 0x1dc6 <fputc>
    1b4a:	fa 94       	dec	r15
    1b4c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b4e:	8f 2d       	mov	r24, r15
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	a8 16       	cp	r10, r24
    1b54:	b9 06       	cpc	r11, r25
    1b56:	a0 f3       	brcs	.-24     	; 0x1b40 <vfprintf+0x1ac>
    1b58:	10 c0       	rjmp	.+32     	; 0x1b7a <vfprintf+0x1e6>
    1b5a:	f4 01       	movw	r30, r8
    1b5c:	27 fd       	sbrc	r18, 7
    1b5e:	85 91       	lpm	r24, Z+
    1b60:	27 ff       	sbrs	r18, 7
    1b62:	81 91       	ld	r24, Z+
    1b64:	4f 01       	movw	r8, r30
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	b6 01       	movw	r22, r12
    1b6a:	2c 87       	std	Y+12, r18	; 0x0c
    1b6c:	2c d1       	rcall	.+600    	; 0x1dc6 <fputc>
    1b6e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b70:	f1 10       	cpse	r15, r1
    1b72:	fa 94       	dec	r15
    1b74:	08 94       	sec
    1b76:	a1 08       	sbc	r10, r1
    1b78:	b1 08       	sbc	r11, r1
    1b7a:	a1 14       	cp	r10, r1
    1b7c:	b1 04       	cpc	r11, r1
    1b7e:	69 f7       	brne	.-38     	; 0x1b5a <vfprintf+0x1c6>
    1b80:	e9 c0       	rjmp	.+466    	; 0x1d54 <vfprintf+0x3c0>
    1b82:	84 36       	cpi	r24, 0x64	; 100
    1b84:	11 f0       	breq	.+4      	; 0x1b8a <vfprintf+0x1f6>
    1b86:	89 36       	cpi	r24, 0x69	; 105
    1b88:	41 f5       	brne	.+80     	; 0x1bda <vfprintf+0x246>
    1b8a:	27 ff       	sbrs	r18, 7
    1b8c:	08 c0       	rjmp	.+16     	; 0x1b9e <vfprintf+0x20a>
    1b8e:	f8 01       	movw	r30, r16
    1b90:	60 81       	ld	r22, Z
    1b92:	71 81       	ldd	r23, Z+1	; 0x01
    1b94:	82 81       	ldd	r24, Z+2	; 0x02
    1b96:	93 81       	ldd	r25, Z+3	; 0x03
    1b98:	0c 5f       	subi	r16, 0xFC	; 252
    1b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9c:	09 c0       	rjmp	.+18     	; 0x1bb0 <vfprintf+0x21c>
    1b9e:	f8 01       	movw	r30, r16
    1ba0:	60 81       	ld	r22, Z
    1ba2:	71 81       	ldd	r23, Z+1	; 0x01
    1ba4:	88 27       	eor	r24, r24
    1ba6:	77 fd       	sbrc	r23, 7
    1ba8:	80 95       	com	r24
    1baa:	98 2f       	mov	r25, r24
    1bac:	0e 5f       	subi	r16, 0xFE	; 254
    1bae:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb0:	4f e6       	ldi	r20, 0x6F	; 111
    1bb2:	b4 2e       	mov	r11, r20
    1bb4:	b2 22       	and	r11, r18
    1bb6:	97 ff       	sbrs	r25, 7
    1bb8:	09 c0       	rjmp	.+18     	; 0x1bcc <vfprintf+0x238>
    1bba:	90 95       	com	r25
    1bbc:	80 95       	com	r24
    1bbe:	70 95       	com	r23
    1bc0:	61 95       	neg	r22
    1bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc8:	f0 e8       	ldi	r31, 0x80	; 128
    1bca:	bf 2a       	or	r11, r31
    1bcc:	a2 01       	movw	r20, r4
    1bce:	2a e0       	ldi	r18, 0x0A	; 10
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	25 d1       	rcall	.+586    	; 0x1e1e <__ultoa_invert>
    1bd4:	78 2e       	mov	r7, r24
    1bd6:	74 18       	sub	r7, r4
    1bd8:	44 c0       	rjmp	.+136    	; 0x1c62 <vfprintf+0x2ce>
    1bda:	85 37       	cpi	r24, 0x75	; 117
    1bdc:	31 f4       	brne	.+12     	; 0x1bea <vfprintf+0x256>
    1bde:	3f ee       	ldi	r19, 0xEF	; 239
    1be0:	b3 2e       	mov	r11, r19
    1be2:	b2 22       	and	r11, r18
    1be4:	2a e0       	ldi	r18, 0x0A	; 10
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	25 c0       	rjmp	.+74     	; 0x1c34 <vfprintf+0x2a0>
    1bea:	99 ef       	ldi	r25, 0xF9	; 249
    1bec:	b9 2e       	mov	r11, r25
    1bee:	b2 22       	and	r11, r18
    1bf0:	8f 36       	cpi	r24, 0x6F	; 111
    1bf2:	c1 f0       	breq	.+48     	; 0x1c24 <vfprintf+0x290>
    1bf4:	80 37       	cpi	r24, 0x70	; 112
    1bf6:	20 f4       	brcc	.+8      	; 0x1c00 <vfprintf+0x26c>
    1bf8:	88 35       	cpi	r24, 0x58	; 88
    1bfa:	09 f0       	breq	.+2      	; 0x1bfe <vfprintf+0x26a>
    1bfc:	ae c0       	rjmp	.+348    	; 0x1d5a <vfprintf+0x3c6>
    1bfe:	0d c0       	rjmp	.+26     	; 0x1c1a <vfprintf+0x286>
    1c00:	80 37       	cpi	r24, 0x70	; 112
    1c02:	21 f0       	breq	.+8      	; 0x1c0c <vfprintf+0x278>
    1c04:	88 37       	cpi	r24, 0x78	; 120
    1c06:	09 f0       	breq	.+2      	; 0x1c0a <vfprintf+0x276>
    1c08:	a8 c0       	rjmp	.+336    	; 0x1d5a <vfprintf+0x3c6>
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <vfprintf+0x27c>
    1c0c:	20 e1       	ldi	r18, 0x10	; 16
    1c0e:	b2 2a       	or	r11, r18
    1c10:	b4 fe       	sbrs	r11, 4
    1c12:	0b c0       	rjmp	.+22     	; 0x1c2a <vfprintf+0x296>
    1c14:	84 e0       	ldi	r24, 0x04	; 4
    1c16:	b8 2a       	or	r11, r24
    1c18:	08 c0       	rjmp	.+16     	; 0x1c2a <vfprintf+0x296>
    1c1a:	b4 fe       	sbrs	r11, 4
    1c1c:	09 c0       	rjmp	.+18     	; 0x1c30 <vfprintf+0x29c>
    1c1e:	e6 e0       	ldi	r30, 0x06	; 6
    1c20:	be 2a       	or	r11, r30
    1c22:	06 c0       	rjmp	.+12     	; 0x1c30 <vfprintf+0x29c>
    1c24:	28 e0       	ldi	r18, 0x08	; 8
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	05 c0       	rjmp	.+10     	; 0x1c34 <vfprintf+0x2a0>
    1c2a:	20 e1       	ldi	r18, 0x10	; 16
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <vfprintf+0x2a0>
    1c30:	20 e1       	ldi	r18, 0x10	; 16
    1c32:	32 e0       	ldi	r19, 0x02	; 2
    1c34:	b7 fe       	sbrs	r11, 7
    1c36:	08 c0       	rjmp	.+16     	; 0x1c48 <vfprintf+0x2b4>
    1c38:	f8 01       	movw	r30, r16
    1c3a:	60 81       	ld	r22, Z
    1c3c:	71 81       	ldd	r23, Z+1	; 0x01
    1c3e:	82 81       	ldd	r24, Z+2	; 0x02
    1c40:	93 81       	ldd	r25, Z+3	; 0x03
    1c42:	0c 5f       	subi	r16, 0xFC	; 252
    1c44:	1f 4f       	sbci	r17, 0xFF	; 255
    1c46:	07 c0       	rjmp	.+14     	; 0x1c56 <vfprintf+0x2c2>
    1c48:	f8 01       	movw	r30, r16
    1c4a:	60 81       	ld	r22, Z
    1c4c:	71 81       	ldd	r23, Z+1	; 0x01
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	0e 5f       	subi	r16, 0xFE	; 254
    1c54:	1f 4f       	sbci	r17, 0xFF	; 255
    1c56:	a2 01       	movw	r20, r4
    1c58:	e2 d0       	rcall	.+452    	; 0x1e1e <__ultoa_invert>
    1c5a:	78 2e       	mov	r7, r24
    1c5c:	74 18       	sub	r7, r4
    1c5e:	ff e7       	ldi	r31, 0x7F	; 127
    1c60:	bf 22       	and	r11, r31
    1c62:	b6 fe       	sbrs	r11, 6
    1c64:	0b c0       	rjmp	.+22     	; 0x1c7c <vfprintf+0x2e8>
    1c66:	2e ef       	ldi	r18, 0xFE	; 254
    1c68:	b2 22       	and	r11, r18
    1c6a:	7e 14       	cp	r7, r14
    1c6c:	38 f4       	brcc	.+14     	; 0x1c7c <vfprintf+0x2e8>
    1c6e:	b4 fe       	sbrs	r11, 4
    1c70:	07 c0       	rjmp	.+14     	; 0x1c80 <vfprintf+0x2ec>
    1c72:	b2 fc       	sbrc	r11, 2
    1c74:	05 c0       	rjmp	.+10     	; 0x1c80 <vfprintf+0x2ec>
    1c76:	8f ee       	ldi	r24, 0xEF	; 239
    1c78:	b8 22       	and	r11, r24
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <vfprintf+0x2ec>
    1c7c:	a7 2c       	mov	r10, r7
    1c7e:	01 c0       	rjmp	.+2      	; 0x1c82 <vfprintf+0x2ee>
    1c80:	ae 2c       	mov	r10, r14
    1c82:	8b 2d       	mov	r24, r11
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	b4 fe       	sbrs	r11, 4
    1c88:	0d c0       	rjmp	.+26     	; 0x1ca4 <vfprintf+0x310>
    1c8a:	fe 01       	movw	r30, r28
    1c8c:	e7 0d       	add	r30, r7
    1c8e:	f1 1d       	adc	r31, r1
    1c90:	20 81       	ld	r18, Z
    1c92:	20 33       	cpi	r18, 0x30	; 48
    1c94:	19 f4       	brne	.+6      	; 0x1c9c <vfprintf+0x308>
    1c96:	e9 ee       	ldi	r30, 0xE9	; 233
    1c98:	be 22       	and	r11, r30
    1c9a:	09 c0       	rjmp	.+18     	; 0x1cae <vfprintf+0x31a>
    1c9c:	a3 94       	inc	r10
    1c9e:	b2 fe       	sbrs	r11, 2
    1ca0:	06 c0       	rjmp	.+12     	; 0x1cae <vfprintf+0x31a>
    1ca2:	04 c0       	rjmp	.+8      	; 0x1cac <vfprintf+0x318>
    1ca4:	86 78       	andi	r24, 0x86	; 134
    1ca6:	90 70       	andi	r25, 0x00	; 0
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	09 f0       	breq	.+2      	; 0x1cae <vfprintf+0x31a>
    1cac:	a3 94       	inc	r10
    1cae:	8b 2c       	mov	r8, r11
    1cb0:	99 24       	eor	r9, r9
    1cb2:	b3 fc       	sbrc	r11, 3
    1cb4:	13 c0       	rjmp	.+38     	; 0x1cdc <vfprintf+0x348>
    1cb6:	b0 fe       	sbrs	r11, 0
    1cb8:	0e c0       	rjmp	.+28     	; 0x1cd6 <vfprintf+0x342>
    1cba:	af 14       	cp	r10, r15
    1cbc:	28 f4       	brcc	.+10     	; 0x1cc8 <vfprintf+0x334>
    1cbe:	e7 2c       	mov	r14, r7
    1cc0:	ef 0c       	add	r14, r15
    1cc2:	ea 18       	sub	r14, r10
    1cc4:	af 2c       	mov	r10, r15
    1cc6:	07 c0       	rjmp	.+14     	; 0x1cd6 <vfprintf+0x342>
    1cc8:	e7 2c       	mov	r14, r7
    1cca:	05 c0       	rjmp	.+10     	; 0x1cd6 <vfprintf+0x342>
    1ccc:	80 e2       	ldi	r24, 0x20	; 32
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	b6 01       	movw	r22, r12
    1cd2:	79 d0       	rcall	.+242    	; 0x1dc6 <fputc>
    1cd4:	a3 94       	inc	r10
    1cd6:	af 14       	cp	r10, r15
    1cd8:	c8 f3       	brcs	.-14     	; 0x1ccc <vfprintf+0x338>
    1cda:	04 c0       	rjmp	.+8      	; 0x1ce4 <vfprintf+0x350>
    1cdc:	af 14       	cp	r10, r15
    1cde:	10 f4       	brcc	.+4      	; 0x1ce4 <vfprintf+0x350>
    1ce0:	fa 18       	sub	r15, r10
    1ce2:	01 c0       	rjmp	.+2      	; 0x1ce6 <vfprintf+0x352>
    1ce4:	ff 24       	eor	r15, r15
    1ce6:	84 fe       	sbrs	r8, 4
    1ce8:	0e c0       	rjmp	.+28     	; 0x1d06 <vfprintf+0x372>
    1cea:	80 e3       	ldi	r24, 0x30	; 48
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	b6 01       	movw	r22, r12
    1cf0:	6a d0       	rcall	.+212    	; 0x1dc6 <fputc>
    1cf2:	82 fe       	sbrs	r8, 2
    1cf4:	1d c0       	rjmp	.+58     	; 0x1d30 <vfprintf+0x39c>
    1cf6:	81 fe       	sbrs	r8, 1
    1cf8:	03 c0       	rjmp	.+6      	; 0x1d00 <vfprintf+0x36c>
    1cfa:	88 e5       	ldi	r24, 0x58	; 88
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	10 c0       	rjmp	.+32     	; 0x1d20 <vfprintf+0x38c>
    1d00:	88 e7       	ldi	r24, 0x78	; 120
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0d c0       	rjmp	.+26     	; 0x1d20 <vfprintf+0x38c>
    1d06:	c4 01       	movw	r24, r8
    1d08:	86 78       	andi	r24, 0x86	; 134
    1d0a:	90 70       	andi	r25, 0x00	; 0
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	81 f0       	breq	.+32     	; 0x1d30 <vfprintf+0x39c>
    1d10:	81 fc       	sbrc	r8, 1
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <vfprintf+0x384>
    1d14:	80 e2       	ldi	r24, 0x20	; 32
    1d16:	01 c0       	rjmp	.+2      	; 0x1d1a <vfprintf+0x386>
    1d18:	8b e2       	ldi	r24, 0x2B	; 43
    1d1a:	b7 fc       	sbrc	r11, 7
    1d1c:	8d e2       	ldi	r24, 0x2D	; 45
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	b6 01       	movw	r22, r12
    1d22:	51 d0       	rcall	.+162    	; 0x1dc6 <fputc>
    1d24:	05 c0       	rjmp	.+10     	; 0x1d30 <vfprintf+0x39c>
    1d26:	80 e3       	ldi	r24, 0x30	; 48
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	b6 01       	movw	r22, r12
    1d2c:	4c d0       	rcall	.+152    	; 0x1dc6 <fputc>
    1d2e:	ea 94       	dec	r14
    1d30:	7e 14       	cp	r7, r14
    1d32:	c8 f3       	brcs	.-14     	; 0x1d26 <vfprintf+0x392>
    1d34:	7a 94       	dec	r7
    1d36:	f2 01       	movw	r30, r4
    1d38:	e7 0d       	add	r30, r7
    1d3a:	f1 1d       	adc	r31, r1
    1d3c:	80 81       	ld	r24, Z
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	b6 01       	movw	r22, r12
    1d42:	41 d0       	rcall	.+130    	; 0x1dc6 <fputc>
    1d44:	77 20       	and	r7, r7
    1d46:	b1 f7       	brne	.-20     	; 0x1d34 <vfprintf+0x3a0>
    1d48:	05 c0       	rjmp	.+10     	; 0x1d54 <vfprintf+0x3c0>
    1d4a:	80 e2       	ldi	r24, 0x20	; 32
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	b6 01       	movw	r22, r12
    1d50:	3a d0       	rcall	.+116    	; 0x1dc6 <fputc>
    1d52:	fa 94       	dec	r15
    1d54:	ff 20       	and	r15, r15
    1d56:	c9 f7       	brne	.-14     	; 0x1d4a <vfprintf+0x3b6>
    1d58:	44 ce       	rjmp	.-888    	; 0x19e2 <vfprintf+0x4e>
    1d5a:	f6 01       	movw	r30, r12
    1d5c:	26 81       	ldd	r18, Z+6	; 0x06
    1d5e:	37 81       	ldd	r19, Z+7	; 0x07
    1d60:	02 c0       	rjmp	.+4      	; 0x1d66 <vfprintf+0x3d2>
    1d62:	2f ef       	ldi	r18, 0xFF	; 255
    1d64:	3f ef       	ldi	r19, 0xFF	; 255
    1d66:	c9 01       	movw	r24, r18
    1d68:	2c 96       	adiw	r28, 0x0c	; 12
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	de bf       	out	0x3e, r29	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	cd bf       	out	0x3d, r28	; 61
    1d74:	cf 91       	pop	r28
    1d76:	df 91       	pop	r29
    1d78:	1f 91       	pop	r17
    1d7a:	0f 91       	pop	r16
    1d7c:	ff 90       	pop	r15
    1d7e:	ef 90       	pop	r14
    1d80:	df 90       	pop	r13
    1d82:	cf 90       	pop	r12
    1d84:	bf 90       	pop	r11
    1d86:	af 90       	pop	r10
    1d88:	9f 90       	pop	r9
    1d8a:	8f 90       	pop	r8
    1d8c:	7f 90       	pop	r7
    1d8e:	6f 90       	pop	r6
    1d90:	5f 90       	pop	r5
    1d92:	4f 90       	pop	r4
    1d94:	3f 90       	pop	r3
    1d96:	2f 90       	pop	r2
    1d98:	08 95       	ret

00001d9a <strnlen_P>:
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	05 90       	lpm	r0, Z+
    1d9e:	61 50       	subi	r22, 0x01	; 1
    1da0:	70 40       	sbci	r23, 0x00	; 0
    1da2:	01 10       	cpse	r0, r1
    1da4:	d8 f7       	brcc	.-10     	; 0x1d9c <strnlen_P+0x2>
    1da6:	80 95       	com	r24
    1da8:	90 95       	com	r25
    1daa:	8e 0f       	add	r24, r30
    1dac:	9f 1f       	adc	r25, r31
    1dae:	08 95       	ret

00001db0 <strnlen>:
    1db0:	fc 01       	movw	r30, r24
    1db2:	61 50       	subi	r22, 0x01	; 1
    1db4:	70 40       	sbci	r23, 0x00	; 0
    1db6:	01 90       	ld	r0, Z+
    1db8:	01 10       	cpse	r0, r1
    1dba:	d8 f7       	brcc	.-10     	; 0x1db2 <strnlen+0x2>
    1dbc:	80 95       	com	r24
    1dbe:	90 95       	com	r25
    1dc0:	8e 0f       	add	r24, r30
    1dc2:	9f 1f       	adc	r25, r31
    1dc4:	08 95       	ret

00001dc6 <fputc>:
    1dc6:	0f 93       	push	r16
    1dc8:	1f 93       	push	r17
    1dca:	cf 93       	push	r28
    1dcc:	df 93       	push	r29
    1dce:	8c 01       	movw	r16, r24
    1dd0:	eb 01       	movw	r28, r22
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	81 ff       	sbrs	r24, 1
    1dd6:	1b c0       	rjmp	.+54     	; 0x1e0e <fputc+0x48>
    1dd8:	82 ff       	sbrs	r24, 2
    1dda:	0d c0       	rjmp	.+26     	; 0x1df6 <fputc+0x30>
    1ddc:	2e 81       	ldd	r18, Y+6	; 0x06
    1dde:	3f 81       	ldd	r19, Y+7	; 0x07
    1de0:	8c 81       	ldd	r24, Y+4	; 0x04
    1de2:	9d 81       	ldd	r25, Y+5	; 0x05
    1de4:	28 17       	cp	r18, r24
    1de6:	39 07       	cpc	r19, r25
    1de8:	64 f4       	brge	.+24     	; 0x1e02 <fputc+0x3c>
    1dea:	e8 81       	ld	r30, Y
    1dec:	f9 81       	ldd	r31, Y+1	; 0x01
    1dee:	01 93       	st	Z+, r16
    1df0:	f9 83       	std	Y+1, r31	; 0x01
    1df2:	e8 83       	st	Y, r30
    1df4:	06 c0       	rjmp	.+12     	; 0x1e02 <fputc+0x3c>
    1df6:	e8 85       	ldd	r30, Y+8	; 0x08
    1df8:	f9 85       	ldd	r31, Y+9	; 0x09
    1dfa:	80 2f       	mov	r24, r16
    1dfc:	09 95       	icall
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	31 f4       	brne	.+12     	; 0x1e0e <fputc+0x48>
    1e02:	8e 81       	ldd	r24, Y+6	; 0x06
    1e04:	9f 81       	ldd	r25, Y+7	; 0x07
    1e06:	01 96       	adiw	r24, 0x01	; 1
    1e08:	9f 83       	std	Y+7, r25	; 0x07
    1e0a:	8e 83       	std	Y+6, r24	; 0x06
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <fputc+0x4c>
    1e0e:	0f ef       	ldi	r16, 0xFF	; 255
    1e10:	1f ef       	ldi	r17, 0xFF	; 255
    1e12:	c8 01       	movw	r24, r16
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	1f 91       	pop	r17
    1e1a:	0f 91       	pop	r16
    1e1c:	08 95       	ret

00001e1e <__ultoa_invert>:
    1e1e:	fa 01       	movw	r30, r20
    1e20:	aa 27       	eor	r26, r26
    1e22:	28 30       	cpi	r18, 0x08	; 8
    1e24:	51 f1       	breq	.+84     	; 0x1e7a <__ultoa_invert+0x5c>
    1e26:	20 31       	cpi	r18, 0x10	; 16
    1e28:	81 f1       	breq	.+96     	; 0x1e8a <__ultoa_invert+0x6c>
    1e2a:	e8 94       	clt
    1e2c:	6f 93       	push	r22
    1e2e:	6e 7f       	andi	r22, 0xFE	; 254
    1e30:	6e 5f       	subi	r22, 0xFE	; 254
    1e32:	7f 4f       	sbci	r23, 0xFF	; 255
    1e34:	8f 4f       	sbci	r24, 0xFF	; 255
    1e36:	9f 4f       	sbci	r25, 0xFF	; 255
    1e38:	af 4f       	sbci	r26, 0xFF	; 255
    1e3a:	b1 e0       	ldi	r27, 0x01	; 1
    1e3c:	3e d0       	rcall	.+124    	; 0x1eba <__ultoa_invert+0x9c>
    1e3e:	b4 e0       	ldi	r27, 0x04	; 4
    1e40:	3c d0       	rcall	.+120    	; 0x1eba <__ultoa_invert+0x9c>
    1e42:	67 0f       	add	r22, r23
    1e44:	78 1f       	adc	r23, r24
    1e46:	89 1f       	adc	r24, r25
    1e48:	9a 1f       	adc	r25, r26
    1e4a:	a1 1d       	adc	r26, r1
    1e4c:	68 0f       	add	r22, r24
    1e4e:	79 1f       	adc	r23, r25
    1e50:	8a 1f       	adc	r24, r26
    1e52:	91 1d       	adc	r25, r1
    1e54:	a1 1d       	adc	r26, r1
    1e56:	6a 0f       	add	r22, r26
    1e58:	71 1d       	adc	r23, r1
    1e5a:	81 1d       	adc	r24, r1
    1e5c:	91 1d       	adc	r25, r1
    1e5e:	a1 1d       	adc	r26, r1
    1e60:	20 d0       	rcall	.+64     	; 0x1ea2 <__ultoa_invert+0x84>
    1e62:	09 f4       	brne	.+2      	; 0x1e66 <__ultoa_invert+0x48>
    1e64:	68 94       	set
    1e66:	3f 91       	pop	r19
    1e68:	2a e0       	ldi	r18, 0x0A	; 10
    1e6a:	26 9f       	mul	r18, r22
    1e6c:	11 24       	eor	r1, r1
    1e6e:	30 19       	sub	r19, r0
    1e70:	30 5d       	subi	r19, 0xD0	; 208
    1e72:	31 93       	st	Z+, r19
    1e74:	de f6       	brtc	.-74     	; 0x1e2c <__ultoa_invert+0xe>
    1e76:	cf 01       	movw	r24, r30
    1e78:	08 95       	ret
    1e7a:	46 2f       	mov	r20, r22
    1e7c:	47 70       	andi	r20, 0x07	; 7
    1e7e:	40 5d       	subi	r20, 0xD0	; 208
    1e80:	41 93       	st	Z+, r20
    1e82:	b3 e0       	ldi	r27, 0x03	; 3
    1e84:	0f d0       	rcall	.+30     	; 0x1ea4 <__ultoa_invert+0x86>
    1e86:	c9 f7       	brne	.-14     	; 0x1e7a <__ultoa_invert+0x5c>
    1e88:	f6 cf       	rjmp	.-20     	; 0x1e76 <__ultoa_invert+0x58>
    1e8a:	46 2f       	mov	r20, r22
    1e8c:	4f 70       	andi	r20, 0x0F	; 15
    1e8e:	40 5d       	subi	r20, 0xD0	; 208
    1e90:	4a 33       	cpi	r20, 0x3A	; 58
    1e92:	18 f0       	brcs	.+6      	; 0x1e9a <__ultoa_invert+0x7c>
    1e94:	49 5d       	subi	r20, 0xD9	; 217
    1e96:	31 fd       	sbrc	r19, 1
    1e98:	40 52       	subi	r20, 0x20	; 32
    1e9a:	41 93       	st	Z+, r20
    1e9c:	02 d0       	rcall	.+4      	; 0x1ea2 <__ultoa_invert+0x84>
    1e9e:	a9 f7       	brne	.-22     	; 0x1e8a <__ultoa_invert+0x6c>
    1ea0:	ea cf       	rjmp	.-44     	; 0x1e76 <__ultoa_invert+0x58>
    1ea2:	b4 e0       	ldi	r27, 0x04	; 4
    1ea4:	a6 95       	lsr	r26
    1ea6:	97 95       	ror	r25
    1ea8:	87 95       	ror	r24
    1eaa:	77 95       	ror	r23
    1eac:	67 95       	ror	r22
    1eae:	ba 95       	dec	r27
    1eb0:	c9 f7       	brne	.-14     	; 0x1ea4 <__ultoa_invert+0x86>
    1eb2:	00 97       	sbiw	r24, 0x00	; 0
    1eb4:	61 05       	cpc	r22, r1
    1eb6:	71 05       	cpc	r23, r1
    1eb8:	08 95       	ret
    1eba:	9b 01       	movw	r18, r22
    1ebc:	ac 01       	movw	r20, r24
    1ebe:	0a 2e       	mov	r0, r26
    1ec0:	06 94       	lsr	r0
    1ec2:	57 95       	ror	r21
    1ec4:	47 95       	ror	r20
    1ec6:	37 95       	ror	r19
    1ec8:	27 95       	ror	r18
    1eca:	ba 95       	dec	r27
    1ecc:	c9 f7       	brne	.-14     	; 0x1ec0 <__ultoa_invert+0xa2>
    1ece:	62 0f       	add	r22, r18
    1ed0:	73 1f       	adc	r23, r19
    1ed2:	84 1f       	adc	r24, r20
    1ed4:	95 1f       	adc	r25, r21
    1ed6:	a0 1d       	adc	r26, r0
    1ed8:	08 95       	ret

00001eda <_exit>:
    1eda:	f8 94       	cli

00001edc <__stop_program>:
    1edc:	ff cf       	rjmp	.-2      	; 0x1edc <__stop_program>
